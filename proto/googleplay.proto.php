<?php
// Please include the below file before googleplay.new.proto.php
//require('protocolbuffers.inc.php');
// message AckNotificationResponse
class AckNotificationResponse {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("AckNotificationResponse: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  public function size() {
    $size = 0;
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown);
  }
  
  // @@protoc_insertion_point(class_scope:AckNotificationResponse)
}

// message AndroidAppDeliveryData
class AndroidAppDeliveryData {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("AndroidAppDeliveryData: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->downloadSize_ = $tmp;
          
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->signature_ = $tmp;
          $limit-=$len;
          break;
        case 3:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->downloadUrl_ = $tmp;
          $limit-=$len;
          break;
        case 4:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->additionalFile_[] = new AppFileMetadata($fp, $len);
          ASSERT('$len == 0');
          break;
        case 5:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->downloadAuthCookie_[] = new HttpCookie($fp, $len);
          ASSERT('$len == 0');
          break;
        case 6:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->forwardLocked_ = $tmp > 0 ? true : false;
          break;
        case 7:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->refundTimeout_ = $tmp;
          
          break;
        case 8:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->serverInitiated_ = $tmp > 0 ? true : false;
          break;
        case 9:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->postInstallRefundWindowMillis_ = $tmp;
          
          break;
        case 10:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->immediateStartNeeded_ = $tmp > 0 ? true : false;
          break;
        case 11:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->patchData_ = new AndroidAppPatchData($fp, $len);
          ASSERT('$len == 0');
          break;
        case 12:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->encryptionParams_ = new EncryptionParams($fp, $len);
          ASSERT('$len == 0');
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->downloadSize_)) {
      fwrite($fp, "\x08");
      Protobuf::write_varint($fp, (int)$this->downloadSize_);
    }
    if (!is_null($this->signature_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, strlen((string)$this->signature_));
      fwrite($fp, (string)$this->signature_);
    }
    if (!is_null($this->downloadUrl_)) {
      fwrite($fp, "\x1a");
      Protobuf::write_varint($fp, strlen((string)$this->downloadUrl_));
      fwrite($fp, (string)$this->downloadUrl_);
    }
    if (!is_null($this->additionalFile_))
      foreach($this->additionalFile_ as $v) {
        fwrite($fp, "\"");
        Protobuf::write_varint($fp, $v->size()); // message
        $v->write($fp);
      }
    if (!is_null($this->downloadAuthCookie_))
      foreach($this->downloadAuthCookie_ as $v) {
        fwrite($fp, "*");
        Protobuf::write_varint($fp, $v->size()); // message
        $v->write($fp);
      }
    if (!is_null($this->forwardLocked_)) {
      fwrite($fp, "0");
      Protobuf::write_varint($fp, (int)$this->forwardLocked_ ? 1 : 0);
    }
    if (!is_null($this->refundTimeout_)) {
      fwrite($fp, "8");
      Protobuf::write_varint($fp, (int)$this->refundTimeout_);
    }
    if (!is_null($this->serverInitiated_)) {
      fwrite($fp, "@");
      Protobuf::write_varint($fp, (int)$this->serverInitiated_ ? 1 : 0);
    }
    if (!is_null($this->postInstallRefundWindowMillis_)) {
      fwrite($fp, "H");
      Protobuf::write_varint($fp, (int)$this->postInstallRefundWindowMillis_);
    }
    if (!is_null($this->immediateStartNeeded_)) {
      fwrite($fp, "P");
      Protobuf::write_varint($fp, (int)$this->immediateStartNeeded_ ? 1 : 0);
    }
    if (!is_null($this->patchData_)) {
      fwrite($fp, "Z");
      Protobuf::write_varint($fp, $this->patchData_->size()); // message
      $this->patchData_->write($fp);
    }
    if (!is_null($this->encryptionParams_)) {
      fwrite($fp, "b");
      Protobuf::write_varint($fp, $this->encryptionParams_->size()); // message
      $this->encryptionParams_->write($fp);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->downloadSize_)) {
      $size += 1 + Protobuf::size_varint($this->downloadSize_);
    }
    if (!is_null($this->signature_)) {
      $l = strlen((string)$this->signature_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->downloadUrl_)) {
      $l = strlen((string)$this->downloadUrl_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->additionalFile_))
      foreach($this->additionalFile_ as $v) {
        $l = $v->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
    if (!is_null($this->downloadAuthCookie_))
      foreach($this->downloadAuthCookie_ as $v) {
        $l = $v->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
    if (!is_null($this->forwardLocked_)) {
      $size += 2;
    }
    if (!is_null($this->refundTimeout_)) {
      $size += 1 + Protobuf::size_varint($this->refundTimeout_);
    }
    if (!is_null($this->serverInitiated_)) {
      $size += 2;
    }
    if (!is_null($this->postInstallRefundWindowMillis_)) {
      $size += 1 + Protobuf::size_varint($this->postInstallRefundWindowMillis_);
    }
    if (!is_null($this->immediateStartNeeded_)) {
      $size += 2;
    }
    if (!is_null($this->patchData_)) {
      $l = $this->patchData_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->encryptionParams_)) {
      $l = $this->encryptionParams_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('downloadSize_', $this->downloadSize_)
         . Protobuf::toString('signature_', $this->signature_)
         . Protobuf::toString('downloadUrl_', $this->downloadUrl_)
         . Protobuf::toString('additionalFile_', $this->additionalFile_)
         . Protobuf::toString('downloadAuthCookie_', $this->downloadAuthCookie_)
         . Protobuf::toString('forwardLocked_', $this->forwardLocked_)
         . Protobuf::toString('refundTimeout_', $this->refundTimeout_)
         . Protobuf::toString('serverInitiated_', $this->serverInitiated_)
         . Protobuf::toString('postInstallRefundWindowMillis_', $this->postInstallRefundWindowMillis_)
         . Protobuf::toString('immediateStartNeeded_', $this->immediateStartNeeded_)
         . Protobuf::toString('patchData_', $this->patchData_)
         . Protobuf::toString('encryptionParams_', $this->encryptionParams_);
  }
  
  // optional int64 downloadSize = 1;

  protected $downloadSize_;
  public function resetDownloadSize() { unset($this->downloadSize_); }
  public function clearDownloadSize() { unset($this->downloadSize_); }
  public function hasDownloadSize() { return isset($this->downloadSize_); }
  public function getDownloadSize() { return $this->downloadSize_; }
  public function setDownloadSize($value) { $this->downloadSize_ = (string)$value; }
  
  // optional string signature = 2;

  protected $signature_;
  public function resetSignature() { unset($this->signature_); }
  public function clearSignature() { unset($this->signature_); }
  public function hasSignature() { return isset($this->signature_); }
  public function getSignature() { return $this->signature_; }
  public function setSignature($value) { $this->signature_ = (string)$value; }
  
  // optional string downloadUrl = 3;

  protected $downloadUrl_;
  public function resetDownloadUrl() { unset($this->downloadUrl_); }
  public function clearDownloadUrl() { unset($this->downloadUrl_); }
  public function hasDownloadUrl() { return isset($this->downloadUrl_); }
  public function getDownloadUrl() { return $this->downloadUrl_; }
  public function setDownloadUrl($value) { $this->downloadUrl_ = (string)$value; }
  
  // repeated .AppFileMetadata additionalFile = 4;

  protected $additionalFile_ = array();
  public function clearAdditionalFile() { $this->additionalFile_ = array(); }
  public function getAdditionalFileCount() { return count($this->additionalFile_); }
  public function hasAdditionalFile() { return (count($this->additionalFile_) > 0); }
  public function indexOfAdditionalFile($value) { return array_search($value,$this->additionalFile_);}
  public function removeAdditionalFile($index) { unset($this->additionalFile_[$index]); }
  public function removeValAdditionalFile($value) { $idx = array_search($value,$this->additionalFile_); if($idx !== FALSE){unset($this->additionalFile_[$idx]); }}
  public function removeValsAdditionalFile($values) { foreach($values as $value){$idx = array_search($value,$this->additionalFile_); if($idx !== FALSE){unset($this->additionalFile_[$idx]); }}}
  public function pushAdditionalFile($newvar) { return array_push($this->additionalFile_,$newvar); }
  public function popAdditionalFile() { return array_pop($this->additionalFile_); }
  public function shiftAdditionalFile() { return array_shift($this->additionalFile_); }
  public function unshiftAdditionalFile($newvar) { return array_unshift($this->additionalFile_,$newvar); }
  public function getAdditionalFile($index) { return $this->additionalFile_[$index]; }
  public function getAdditionalFileArray() { return $this->additionalFile_; }
  public function setAdditionalFile($index, $value) {$this->additionalFile_[$index] = $value;	}
  public function addAdditionalFile($value) { $this->additionalFile_[] = $value; }
  public function addAllAdditionalFile(array $values) { foreach($values as $value) {$this->additionalFile_[] = $value;} }
  
  // repeated .HttpCookie downloadAuthCookie = 5;

  protected $downloadAuthCookie_ = array();
  public function clearDownloadAuthCookie() { $this->downloadAuthCookie_ = array(); }
  public function getDownloadAuthCookieCount() { return count($this->downloadAuthCookie_); }
  public function hasDownloadAuthCookie() { return (count($this->downloadAuthCookie_) > 0); }
  public function indexOfDownloadAuthCookie($value) { return array_search($value,$this->downloadAuthCookie_);}
  public function removeDownloadAuthCookie($index) { unset($this->downloadAuthCookie_[$index]); }
  public function removeValDownloadAuthCookie($value) { $idx = array_search($value,$this->downloadAuthCookie_); if($idx !== FALSE){unset($this->downloadAuthCookie_[$idx]); }}
  public function removeValsDownloadAuthCookie($values) { foreach($values as $value){$idx = array_search($value,$this->downloadAuthCookie_); if($idx !== FALSE){unset($this->downloadAuthCookie_[$idx]); }}}
  public function pushDownloadAuthCookie($newvar) { return array_push($this->downloadAuthCookie_,$newvar); }
  public function popDownloadAuthCookie() { return array_pop($this->downloadAuthCookie_); }
  public function shiftDownloadAuthCookie() { return array_shift($this->downloadAuthCookie_); }
  public function unshiftDownloadAuthCookie($newvar) { return array_unshift($this->downloadAuthCookie_,$newvar); }
  public function getDownloadAuthCookie($index) { return $this->downloadAuthCookie_[$index]; }
  public function getDownloadAuthCookieArray() { return $this->downloadAuthCookie_; }
  public function setDownloadAuthCookie($index, $value) {$this->downloadAuthCookie_[$index] = $value;	}
  public function addDownloadAuthCookie($value) { $this->downloadAuthCookie_[] = $value; }
  public function addAllDownloadAuthCookie(array $values) { foreach($values as $value) {$this->downloadAuthCookie_[] = $value;} }
  
  // optional bool forwardLocked = 6;

  protected $forwardLocked_;
  public function resetForwardLocked() { unset($this->forwardLocked_); }
  public function clearForwardLocked() { unset($this->forwardLocked_); }
  public function hasForwardLocked() { return isset($this->forwardLocked_); }
  public function getForwardLocked() { return $this->forwardLocked_; }
  public function setForwardLocked($value) { $this->forwardLocked_ = (bool)$value; }
  
  // optional int64 refundTimeout = 7;

  protected $refundTimeout_;
  public function resetRefundTimeout() { unset($this->refundTimeout_); }
  public function clearRefundTimeout() { unset($this->refundTimeout_); }
  public function hasRefundTimeout() { return isset($this->refundTimeout_); }
  public function getRefundTimeout() { return $this->refundTimeout_; }
  public function setRefundTimeout($value) { $this->refundTimeout_ = (string)$value; }
  
  // optional bool serverInitiated = 8;

  protected $serverInitiated_;
  public function resetServerInitiated() { unset($this->serverInitiated_); }
  public function clearServerInitiated() { unset($this->serverInitiated_); }
  public function hasServerInitiated() { return isset($this->serverInitiated_); }
  public function getServerInitiated() { return $this->serverInitiated_; }
  public function setServerInitiated($value) { $this->serverInitiated_ = (bool)$value; }
  
  // optional int64 postInstallRefundWindowMillis = 9;

  protected $postInstallRefundWindowMillis_;
  public function resetPostInstallRefundWindowMillis() { unset($this->postInstallRefundWindowMillis_); }
  public function clearPostInstallRefundWindowMillis() { unset($this->postInstallRefundWindowMillis_); }
  public function hasPostInstallRefundWindowMillis() { return isset($this->postInstallRefundWindowMillis_); }
  public function getPostInstallRefundWindowMillis() { return $this->postInstallRefundWindowMillis_; }
  public function setPostInstallRefundWindowMillis($value) { $this->postInstallRefundWindowMillis_ = (string)$value; }
  
  // optional bool immediateStartNeeded = 10;

  protected $immediateStartNeeded_;
  public function resetImmediateStartNeeded() { unset($this->immediateStartNeeded_); }
  public function clearImmediateStartNeeded() { unset($this->immediateStartNeeded_); }
  public function hasImmediateStartNeeded() { return isset($this->immediateStartNeeded_); }
  public function getImmediateStartNeeded() { return $this->immediateStartNeeded_; }
  public function setImmediateStartNeeded($value) { $this->immediateStartNeeded_ = (bool)$value; }
  
  // optional .AndroidAppPatchData patchData = 11;

  protected $patchData_;
  public function resetPatchData() { unset($this->patchData_); }
  public function clearPatchData() { unset($this->patchData_); }
  public function hasPatchData() { return isset($this->patchData_); }
  public function getPatchData() { return $this->patchData_; }
  public function setPatchData(AndroidAppPatchData $value) { $this->patchData_ = $value; }
  
  // optional .EncryptionParams encryptionParams = 12;

  protected $encryptionParams_;
  public function resetEncryptionParams() { unset($this->encryptionParams_); }
  public function clearEncryptionParams() { unset($this->encryptionParams_); }
  public function hasEncryptionParams() { return isset($this->encryptionParams_); }
  public function getEncryptionParams() { return $this->encryptionParams_; }
  public function setEncryptionParams(EncryptionParams $value) { $this->encryptionParams_ = $value; }
  
  // @@protoc_insertion_point(class_scope:AndroidAppDeliveryData)
}

// message AndroidAppPatchData
class AndroidAppPatchData {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("AndroidAppPatchData: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->baseVersionCode_ = $tmp;
          
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->baseSignature_ = $tmp;
          $limit-=$len;
          break;
        case 3:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->downloadUrl_ = $tmp;
          $limit-=$len;
          break;
        case 4:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->patchFormat_ = $tmp;
          
          break;
        case 5:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->maxPatchSize_ = $tmp;
          
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->baseVersionCode_)) {
      fwrite($fp, "\x08");
      Protobuf::write_varint($fp, (int)$this->baseVersionCode_);
    }
    if (!is_null($this->baseSignature_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, strlen((string)$this->baseSignature_));
      fwrite($fp, (string)$this->baseSignature_);
    }
    if (!is_null($this->downloadUrl_)) {
      fwrite($fp, "\x1a");
      Protobuf::write_varint($fp, strlen((string)$this->downloadUrl_));
      fwrite($fp, (string)$this->downloadUrl_);
    }
    if (!is_null($this->patchFormat_)) {
      fwrite($fp, " ");
      Protobuf::write_varint($fp, (int)$this->patchFormat_);
    }
    if (!is_null($this->maxPatchSize_)) {
      fwrite($fp, "(");
      Protobuf::write_varint($fp, (int)$this->maxPatchSize_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->baseVersionCode_)) {
      $size += 1 + Protobuf::size_varint($this->baseVersionCode_);
    }
    if (!is_null($this->baseSignature_)) {
      $l = strlen((string)$this->baseSignature_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->downloadUrl_)) {
      $l = strlen((string)$this->downloadUrl_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->patchFormat_)) {
      $size += 1 + Protobuf::size_varint($this->patchFormat_);
    }
    if (!is_null($this->maxPatchSize_)) {
      $size += 1 + Protobuf::size_varint($this->maxPatchSize_);
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('baseVersionCode_', $this->baseVersionCode_)
         . Protobuf::toString('baseSignature_', $this->baseSignature_)
         . Protobuf::toString('downloadUrl_', $this->downloadUrl_)
         . Protobuf::toString('patchFormat_', $this->patchFormat_)
         . Protobuf::toString('maxPatchSize_', $this->maxPatchSize_);
  }
  
  // optional int32 baseVersionCode = 1;

  protected $baseVersionCode_;
  public function resetBaseVersionCode() { unset($this->baseVersionCode_); }
  public function clearBaseVersionCode() { unset($this->baseVersionCode_); }
  public function hasBaseVersionCode() { return isset($this->baseVersionCode_); }
  public function getBaseVersionCode() { return $this->baseVersionCode_; }
  public function setBaseVersionCode($value) { $this->baseVersionCode_ = (string)$value; }
  
  // optional string baseSignature = 2;

  protected $baseSignature_;
  public function resetBaseSignature() { unset($this->baseSignature_); }
  public function clearBaseSignature() { unset($this->baseSignature_); }
  public function hasBaseSignature() { return isset($this->baseSignature_); }
  public function getBaseSignature() { return $this->baseSignature_; }
  public function setBaseSignature($value) { $this->baseSignature_ = (string)$value; }
  
  // optional string downloadUrl = 3;

  protected $downloadUrl_;
  public function resetDownloadUrl() { unset($this->downloadUrl_); }
  public function clearDownloadUrl() { unset($this->downloadUrl_); }
  public function hasDownloadUrl() { return isset($this->downloadUrl_); }
  public function getDownloadUrl() { return $this->downloadUrl_; }
  public function setDownloadUrl($value) { $this->downloadUrl_ = (string)$value; }
  
  // optional int32 patchFormat = 4;

  protected $patchFormat_;
  public function resetPatchFormat() { unset($this->patchFormat_); }
  public function clearPatchFormat() { unset($this->patchFormat_); }
  public function hasPatchFormat() { return isset($this->patchFormat_); }
  public function getPatchFormat() { return $this->patchFormat_; }
  public function setPatchFormat($value) { $this->patchFormat_ = (string)$value; }
  
  // optional int64 maxPatchSize = 5;

  protected $maxPatchSize_;
  public function resetMaxPatchSize() { unset($this->maxPatchSize_); }
  public function clearMaxPatchSize() { unset($this->maxPatchSize_); }
  public function hasMaxPatchSize() { return isset($this->maxPatchSize_); }
  public function getMaxPatchSize() { return $this->maxPatchSize_; }
  public function setMaxPatchSize($value) { $this->maxPatchSize_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:AndroidAppPatchData)
}

// message AppFileMetadata
class AppFileMetadata {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("AppFileMetadata: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->fileType_ = $tmp;
          
          break;
        case 2:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->versionCode_ = $tmp;
          
          break;
        case 3:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->size_ = $tmp;
          
          break;
        case 4:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->downloadUrl_ = $tmp;
          $limit-=$len;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->fileType_)) {
      fwrite($fp, "\x08");
      Protobuf::write_varint($fp, (int)$this->fileType_);
    }
    if (!is_null($this->versionCode_)) {
      fwrite($fp, "\x10");
      Protobuf::write_varint($fp, (int)$this->versionCode_);
    }
    if (!is_null($this->size_)) {
      fwrite($fp, "\x18");
      Protobuf::write_varint($fp, (int)$this->size_);
    }
    if (!is_null($this->downloadUrl_)) {
      fwrite($fp, "\"");
      Protobuf::write_varint($fp, strlen((string)$this->downloadUrl_));
      fwrite($fp, (string)$this->downloadUrl_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->fileType_)) {
      $size += 1 + Protobuf::size_varint($this->fileType_);
    }
    if (!is_null($this->versionCode_)) {
      $size += 1 + Protobuf::size_varint($this->versionCode_);
    }
    if (!is_null($this->size_)) {
      $size += 1 + Protobuf::size_varint($this->size_);
    }
    if (!is_null($this->downloadUrl_)) {
      $l = strlen((string)$this->downloadUrl_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('fileType_', $this->fileType_)
         . Protobuf::toString('versionCode_', $this->versionCode_)
         . Protobuf::toString('size_', $this->size_)
         . Protobuf::toString('downloadUrl_', $this->downloadUrl_);
  }
  
  // optional int32 fileType = 1;

  protected $fileType_;
  public function resetFileType() { unset($this->fileType_); }
  public function clearFileType() { unset($this->fileType_); }
  public function hasFileType() { return isset($this->fileType_); }
  public function getFileType() { return $this->fileType_; }
  public function setFileType($value) { $this->fileType_ = (string)$value; }
  
  // optional int32 versionCode = 2;

  protected $versionCode_;
  public function resetVersionCode() { unset($this->versionCode_); }
  public function clearVersionCode() { unset($this->versionCode_); }
  public function hasVersionCode() { return isset($this->versionCode_); }
  public function getVersionCode() { return $this->versionCode_; }
  public function setVersionCode($value) { $this->versionCode_ = (string)$value; }
  
  // optional int64 size = 3;

  protected $size_;
  public function resetSize() { unset($this->size_); }
  public function clearSize() { unset($this->size_); }
  public function hasSize() { return isset($this->size_); }
  public function getSize() { return $this->size_; }
  public function setSize($value) { $this->size_ = (string)$value; }
  
  // optional string downloadUrl = 4;

  protected $downloadUrl_;
  public function resetDownloadUrl() { unset($this->downloadUrl_); }
  public function clearDownloadUrl() { unset($this->downloadUrl_); }
  public function hasDownloadUrl() { return isset($this->downloadUrl_); }
  public function getDownloadUrl() { return $this->downloadUrl_; }
  public function setDownloadUrl($value) { $this->downloadUrl_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:AppFileMetadata)
}

// message EncryptionParams
class EncryptionParams {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("EncryptionParams: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->version_ = $tmp;
          
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->encryptionKey_ = $tmp;
          $limit-=$len;
          break;
        case 3:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->hmacKey_ = $tmp;
          $limit-=$len;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->version_)) {
      fwrite($fp, "\x08");
      Protobuf::write_varint($fp, (int)$this->version_);
    }
    if (!is_null($this->encryptionKey_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, strlen((string)$this->encryptionKey_));
      fwrite($fp, (string)$this->encryptionKey_);
    }
    if (!is_null($this->hmacKey_)) {
      fwrite($fp, "\x1a");
      Protobuf::write_varint($fp, strlen((string)$this->hmacKey_));
      fwrite($fp, (string)$this->hmacKey_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->version_)) {
      $size += 1 + Protobuf::size_varint($this->version_);
    }
    if (!is_null($this->encryptionKey_)) {
      $l = strlen((string)$this->encryptionKey_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->hmacKey_)) {
      $l = strlen((string)$this->hmacKey_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('version_', $this->version_)
         . Protobuf::toString('encryptionKey_', $this->encryptionKey_)
         . Protobuf::toString('hmacKey_', $this->hmacKey_);
  }
  
  // optional int32 version = 1;

  protected $version_;
  public function resetVersion() { unset($this->version_); }
  public function clearVersion() { unset($this->version_); }
  public function hasVersion() { return isset($this->version_); }
  public function getVersion() { return $this->version_; }
  public function setVersion($value) { $this->version_ = (string)$value; }
  
  // optional string encryptionKey = 2;

  protected $encryptionKey_;
  public function resetEncryptionKey() { unset($this->encryptionKey_); }
  public function clearEncryptionKey() { unset($this->encryptionKey_); }
  public function hasEncryptionKey() { return isset($this->encryptionKey_); }
  public function getEncryptionKey() { return $this->encryptionKey_; }
  public function setEncryptionKey($value) { $this->encryptionKey_ = (string)$value; }
  
  // optional string hmacKey = 3;

  protected $hmacKey_;
  public function resetHmacKey() { unset($this->hmacKey_); }
  public function clearHmacKey() { unset($this->hmacKey_); }
  public function hasHmacKey() { return isset($this->hmacKey_); }
  public function getHmacKey() { return $this->hmacKey_; }
  public function setHmacKey($value) { $this->hmacKey_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:EncryptionParams)
}

// message HttpCookie
class HttpCookie {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("HttpCookie: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->name_ = $tmp;
          $limit-=$len;
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->value_ = $tmp;
          $limit-=$len;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->name_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, strlen((string)$this->name_));
      fwrite($fp, (string)$this->name_);
    }
    if (!is_null($this->value_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, strlen((string)$this->value_));
      fwrite($fp, (string)$this->value_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->name_)) {
      $l = strlen((string)$this->name_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->value_)) {
      $l = strlen((string)$this->value_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('name_', $this->name_)
         . Protobuf::toString('value_', $this->value_);
  }
  
  // optional string name = 1;

  protected $name_;
  public function resetName() { unset($this->name_); }
  public function clearName() { unset($this->name_); }
  public function hasName() { return isset($this->name_); }
  public function getName() { return $this->name_; }
  public function setName($value) { $this->name_ = (string)$value; }
  
  // optional string value = 2;

  protected $value_;
  public function resetValue() { unset($this->value_); }
  public function clearValue() { unset($this->value_); }
  public function hasValue() { return isset($this->value_); }
  public function getValue() { return $this->value_; }
  public function setValue($value) { $this->value_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:HttpCookie)
}

// message Address
class Address {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("Address: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->name_ = $tmp;
          $limit-=$len;
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->addressLine1_ = $tmp;
          $limit-=$len;
          break;
        case 3:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->addressLine2_ = $tmp;
          $limit-=$len;
          break;
        case 4:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->city_ = $tmp;
          $limit-=$len;
          break;
        case 5:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->state_ = $tmp;
          $limit-=$len;
          break;
        case 6:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->postalCode_ = $tmp;
          $limit-=$len;
          break;
        case 7:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->postalCountry_ = $tmp;
          $limit-=$len;
          break;
        case 8:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->dependentLocality_ = $tmp;
          $limit-=$len;
          break;
        case 9:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->sortingCode_ = $tmp;
          $limit-=$len;
          break;
        case 10:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->languageCode_ = $tmp;
          $limit-=$len;
          break;
        case 11:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->phoneNumber_ = $tmp;
          $limit-=$len;
          break;
        case 12:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->deprecatedIsReduced_ = $tmp > 0 ? true : false;
          break;
        case 13:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->firstName_ = $tmp;
          $limit-=$len;
          break;
        case 14:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->lastName_ = $tmp;
          $limit-=$len;
          break;
        case 15:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->email_ = $tmp;
          $limit-=$len;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->name_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, strlen((string)$this->name_));
      fwrite($fp, (string)$this->name_);
    }
    if (!is_null($this->addressLine1_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, strlen((string)$this->addressLine1_));
      fwrite($fp, (string)$this->addressLine1_);
    }
    if (!is_null($this->addressLine2_)) {
      fwrite($fp, "\x1a");
      Protobuf::write_varint($fp, strlen((string)$this->addressLine2_));
      fwrite($fp, (string)$this->addressLine2_);
    }
    if (!is_null($this->city_)) {
      fwrite($fp, "\"");
      Protobuf::write_varint($fp, strlen((string)$this->city_));
      fwrite($fp, (string)$this->city_);
    }
    if (!is_null($this->state_)) {
      fwrite($fp, "*");
      Protobuf::write_varint($fp, strlen((string)$this->state_));
      fwrite($fp, (string)$this->state_);
    }
    if (!is_null($this->postalCode_)) {
      fwrite($fp, "2");
      Protobuf::write_varint($fp, strlen((string)$this->postalCode_));
      fwrite($fp, (string)$this->postalCode_);
    }
    if (!is_null($this->postalCountry_)) {
      fwrite($fp, ":");
      Protobuf::write_varint($fp, strlen((string)$this->postalCountry_));
      fwrite($fp, (string)$this->postalCountry_);
    }
    if (!is_null($this->dependentLocality_)) {
      fwrite($fp, "B");
      Protobuf::write_varint($fp, strlen((string)$this->dependentLocality_));
      fwrite($fp, (string)$this->dependentLocality_);
    }
    if (!is_null($this->sortingCode_)) {
      fwrite($fp, "J");
      Protobuf::write_varint($fp, strlen((string)$this->sortingCode_));
      fwrite($fp, (string)$this->sortingCode_);
    }
    if (!is_null($this->languageCode_)) {
      fwrite($fp, "R");
      Protobuf::write_varint($fp, strlen((string)$this->languageCode_));
      fwrite($fp, (string)$this->languageCode_);
    }
    if (!is_null($this->phoneNumber_)) {
      fwrite($fp, "Z");
      Protobuf::write_varint($fp, strlen((string)$this->phoneNumber_));
      fwrite($fp, (string)$this->phoneNumber_);
    }
    if (!is_null($this->deprecatedIsReduced_)) {
      fwrite($fp, "`");
      Protobuf::write_varint($fp, (int)$this->deprecatedIsReduced_ ? 1 : 0);
    }
    if (!is_null($this->firstName_)) {
      fwrite($fp, "j");
      Protobuf::write_varint($fp, strlen((string)$this->firstName_));
      fwrite($fp, (string)$this->firstName_);
    }
    if (!is_null($this->lastName_)) {
      fwrite($fp, "r");
      Protobuf::write_varint($fp, strlen((string)$this->lastName_));
      fwrite($fp, (string)$this->lastName_);
    }
    if (!is_null($this->email_)) {
      fwrite($fp, "z");
      Protobuf::write_varint($fp, strlen((string)$this->email_));
      fwrite($fp, (string)$this->email_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->name_)) {
      $l = strlen((string)$this->name_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->addressLine1_)) {
      $l = strlen((string)$this->addressLine1_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->addressLine2_)) {
      $l = strlen((string)$this->addressLine2_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->city_)) {
      $l = strlen((string)$this->city_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->state_)) {
      $l = strlen((string)$this->state_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->postalCode_)) {
      $l = strlen((string)$this->postalCode_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->postalCountry_)) {
      $l = strlen((string)$this->postalCountry_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->dependentLocality_)) {
      $l = strlen((string)$this->dependentLocality_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->sortingCode_)) {
      $l = strlen((string)$this->sortingCode_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->languageCode_)) {
      $l = strlen((string)$this->languageCode_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->phoneNumber_)) {
      $l = strlen((string)$this->phoneNumber_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->deprecatedIsReduced_)) {
      $size += 2;
    }
    if (!is_null($this->firstName_)) {
      $l = strlen((string)$this->firstName_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->lastName_)) {
      $l = strlen((string)$this->lastName_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->email_)) {
      $l = strlen((string)$this->email_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('name_', $this->name_)
         . Protobuf::toString('addressLine1_', $this->addressLine1_)
         . Protobuf::toString('addressLine2_', $this->addressLine2_)
         . Protobuf::toString('city_', $this->city_)
         . Protobuf::toString('state_', $this->state_)
         . Protobuf::toString('postalCode_', $this->postalCode_)
         . Protobuf::toString('postalCountry_', $this->postalCountry_)
         . Protobuf::toString('dependentLocality_', $this->dependentLocality_)
         . Protobuf::toString('sortingCode_', $this->sortingCode_)
         . Protobuf::toString('languageCode_', $this->languageCode_)
         . Protobuf::toString('phoneNumber_', $this->phoneNumber_)
         . Protobuf::toString('deprecatedIsReduced_', $this->deprecatedIsReduced_)
         . Protobuf::toString('firstName_', $this->firstName_)
         . Protobuf::toString('lastName_', $this->lastName_)
         . Protobuf::toString('email_', $this->email_);
  }
  
  // optional string name = 1;

  protected $name_;
  public function resetName() { unset($this->name_); }
  public function clearName() { unset($this->name_); }
  public function hasName() { return isset($this->name_); }
  public function getName() { return $this->name_; }
  public function setName($value) { $this->name_ = (string)$value; }
  
  // optional string addressLine1 = 2;

  protected $addressLine1_;
  public function resetAddressLine1() { unset($this->addressLine1_); }
  public function clearAddressLine1() { unset($this->addressLine1_); }
  public function hasAddressLine1() { return isset($this->addressLine1_); }
  public function getAddressLine1() { return $this->addressLine1_; }
  public function setAddressLine1($value) { $this->addressLine1_ = (string)$value; }
  
  // optional string addressLine2 = 3;

  protected $addressLine2_;
  public function resetAddressLine2() { unset($this->addressLine2_); }
  public function clearAddressLine2() { unset($this->addressLine2_); }
  public function hasAddressLine2() { return isset($this->addressLine2_); }
  public function getAddressLine2() { return $this->addressLine2_; }
  public function setAddressLine2($value) { $this->addressLine2_ = (string)$value; }
  
  // optional string city = 4;

  protected $city_;
  public function resetCity() { unset($this->city_); }
  public function clearCity() { unset($this->city_); }
  public function hasCity() { return isset($this->city_); }
  public function getCity() { return $this->city_; }
  public function setCity($value) { $this->city_ = (string)$value; }
  
  // optional string state = 5;

  protected $state_;
  public function resetState() { unset($this->state_); }
  public function clearState() { unset($this->state_); }
  public function hasState() { return isset($this->state_); }
  public function getState() { return $this->state_; }
  public function setState($value) { $this->state_ = (string)$value; }
  
  // optional string postalCode = 6;

  protected $postalCode_;
  public function resetPostalCode() { unset($this->postalCode_); }
  public function clearPostalCode() { unset($this->postalCode_); }
  public function hasPostalCode() { return isset($this->postalCode_); }
  public function getPostalCode() { return $this->postalCode_; }
  public function setPostalCode($value) { $this->postalCode_ = (string)$value; }
  
  // optional string postalCountry = 7;

  protected $postalCountry_;
  public function resetPostalCountry() { unset($this->postalCountry_); }
  public function clearPostalCountry() { unset($this->postalCountry_); }
  public function hasPostalCountry() { return isset($this->postalCountry_); }
  public function getPostalCountry() { return $this->postalCountry_; }
  public function setPostalCountry($value) { $this->postalCountry_ = (string)$value; }
  
  // optional string dependentLocality = 8;

  protected $dependentLocality_;
  public function resetDependentLocality() { unset($this->dependentLocality_); }
  public function clearDependentLocality() { unset($this->dependentLocality_); }
  public function hasDependentLocality() { return isset($this->dependentLocality_); }
  public function getDependentLocality() { return $this->dependentLocality_; }
  public function setDependentLocality($value) { $this->dependentLocality_ = (string)$value; }
  
  // optional string sortingCode = 9;

  protected $sortingCode_;
  public function resetSortingCode() { unset($this->sortingCode_); }
  public function clearSortingCode() { unset($this->sortingCode_); }
  public function hasSortingCode() { return isset($this->sortingCode_); }
  public function getSortingCode() { return $this->sortingCode_; }
  public function setSortingCode($value) { $this->sortingCode_ = (string)$value; }
  
  // optional string languageCode = 10;

  protected $languageCode_;
  public function resetLanguageCode() { unset($this->languageCode_); }
  public function clearLanguageCode() { unset($this->languageCode_); }
  public function hasLanguageCode() { return isset($this->languageCode_); }
  public function getLanguageCode() { return $this->languageCode_; }
  public function setLanguageCode($value) { $this->languageCode_ = (string)$value; }
  
  // optional string phoneNumber = 11;

  protected $phoneNumber_;
  public function resetPhoneNumber() { unset($this->phoneNumber_); }
  public function clearPhoneNumber() { unset($this->phoneNumber_); }
  public function hasPhoneNumber() { return isset($this->phoneNumber_); }
  public function getPhoneNumber() { return $this->phoneNumber_; }
  public function setPhoneNumber($value) { $this->phoneNumber_ = (string)$value; }
  
  // optional bool deprecatedIsReduced = 12;

  protected $deprecatedIsReduced_;
  public function resetDeprecatedIsReduced() { unset($this->deprecatedIsReduced_); }
  public function clearDeprecatedIsReduced() { unset($this->deprecatedIsReduced_); }
  public function hasDeprecatedIsReduced() { return isset($this->deprecatedIsReduced_); }
  public function getDeprecatedIsReduced() { return $this->deprecatedIsReduced_; }
  public function setDeprecatedIsReduced($value) { $this->deprecatedIsReduced_ = (bool)$value; }
  
  // optional string firstName = 13;

  protected $firstName_;
  public function resetFirstName() { unset($this->firstName_); }
  public function clearFirstName() { unset($this->firstName_); }
  public function hasFirstName() { return isset($this->firstName_); }
  public function getFirstName() { return $this->firstName_; }
  public function setFirstName($value) { $this->firstName_ = (string)$value; }
  
  // optional string lastName = 14;

  protected $lastName_;
  public function resetLastName() { unset($this->lastName_); }
  public function clearLastName() { unset($this->lastName_); }
  public function hasLastName() { return isset($this->lastName_); }
  public function getLastName() { return $this->lastName_; }
  public function setLastName($value) { $this->lastName_ = (string)$value; }
  
  // optional string email = 15;

  protected $email_;
  public function resetEmail() { unset($this->email_); }
  public function clearEmail() { unset($this->email_); }
  public function hasEmail() { return isset($this->email_); }
  public function getEmail() { return $this->email_; }
  public function setEmail($value) { $this->email_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:Address)
}

// message BrowseLink
class BrowseLink {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("BrowseLink: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->name_ = $tmp;
          $limit-=$len;
          break;
        case 3:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->dataUrl_ = $tmp;
          $limit-=$len;
          break;
        case 4:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->serverLogsCookie_ = $tmp;
          $limit-=$len;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->name_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, strlen((string)$this->name_));
      fwrite($fp, (string)$this->name_);
    }
    if (!is_null($this->dataUrl_)) {
      fwrite($fp, "\x1a");
      Protobuf::write_varint($fp, strlen((string)$this->dataUrl_));
      fwrite($fp, (string)$this->dataUrl_);
    }
    if (!is_null($this->serverLogsCookie_)) {
      fwrite($fp, "\"");
      Protobuf::write_varint($fp, strlen((string)$this->serverLogsCookie_));
      fwrite($fp, (string)$this->serverLogsCookie_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->name_)) {
      $l = strlen((string)$this->name_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->dataUrl_)) {
      $l = strlen((string)$this->dataUrl_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->serverLogsCookie_)) {
      $l = strlen((string)$this->serverLogsCookie_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('name_', $this->name_)
         . Protobuf::toString('dataUrl_', $this->dataUrl_)
         . Protobuf::toString('serverLogsCookie_', $this->serverLogsCookie_);
  }
  
  // optional string name = 1;

  protected $name_;
  public function resetName() { unset($this->name_); }
  public function clearName() { unset($this->name_); }
  public function hasName() { return isset($this->name_); }
  public function getName() { return $this->name_; }
  public function setName($value) { $this->name_ = (string)$value; }
  
  // optional string dataUrl = 3;

  protected $dataUrl_;
  public function resetDataUrl() { unset($this->dataUrl_); }
  public function clearDataUrl() { unset($this->dataUrl_); }
  public function hasDataUrl() { return isset($this->dataUrl_); }
  public function getDataUrl() { return $this->dataUrl_; }
  public function setDataUrl($value) { $this->dataUrl_ = (string)$value; }
  
  // optional bytes serverLogsCookie = 4;

  protected $serverLogsCookie_;
  public function resetServerLogsCookie() { unset($this->serverLogsCookie_); }
  public function clearServerLogsCookie() { unset($this->serverLogsCookie_); }
  public function hasServerLogsCookie() { return isset($this->serverLogsCookie_); }
  public function getServerLogsCookie() { return $this->serverLogsCookie_; }
  public function setServerLogsCookie($value) { $this->serverLogsCookie_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:BrowseLink)
}

// message BrowseResponse
class BrowseResponse {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("BrowseResponse: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->contentsUrl_ = $tmp;
          $limit-=$len;
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->promoUrl_ = $tmp;
          $limit-=$len;
          break;
        case 3:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->category_[] = new BrowseLink($fp, $len);
          ASSERT('$len == 0');
          break;
        case 4:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->breadcrumb_[] = new BrowseLink($fp, $len);
          ASSERT('$len == 0');
          break;
        case 5:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->quickLink_[] = new QuickLink($fp, $len);
          ASSERT('$len == 0');
          break;
        case 6:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->serverLogsCookie_ = $tmp;
          $limit-=$len;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->contentsUrl_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, strlen((string)$this->contentsUrl_));
      fwrite($fp, (string)$this->contentsUrl_);
    }
    if (!is_null($this->promoUrl_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, strlen((string)$this->promoUrl_));
      fwrite($fp, (string)$this->promoUrl_);
    }
    if (!is_null($this->category_))
      foreach($this->category_ as $v) {
        fwrite($fp, "\x1a");
        Protobuf::write_varint($fp, $v->size()); // message
        $v->write($fp);
      }
    if (!is_null($this->breadcrumb_))
      foreach($this->breadcrumb_ as $v) {
        fwrite($fp, "\"");
        Protobuf::write_varint($fp, $v->size()); // message
        $v->write($fp);
      }
    if (!is_null($this->quickLink_))
      foreach($this->quickLink_ as $v) {
        fwrite($fp, "*");
        Protobuf::write_varint($fp, $v->size()); // message
        $v->write($fp);
      }
    if (!is_null($this->serverLogsCookie_)) {
      fwrite($fp, "2");
      Protobuf::write_varint($fp, strlen((string)$this->serverLogsCookie_));
      fwrite($fp, (string)$this->serverLogsCookie_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->contentsUrl_)) {
      $l = strlen((string)$this->contentsUrl_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->promoUrl_)) {
      $l = strlen((string)$this->promoUrl_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->category_))
      foreach($this->category_ as $v) {
        $l = $v->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
    if (!is_null($this->breadcrumb_))
      foreach($this->breadcrumb_ as $v) {
        $l = $v->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
    if (!is_null($this->quickLink_))
      foreach($this->quickLink_ as $v) {
        $l = $v->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
    if (!is_null($this->serverLogsCookie_)) {
      $l = strlen((string)$this->serverLogsCookie_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('contentsUrl_', $this->contentsUrl_)
         . Protobuf::toString('promoUrl_', $this->promoUrl_)
         . Protobuf::toString('category_', $this->category_)
         . Protobuf::toString('breadcrumb_', $this->breadcrumb_)
         . Protobuf::toString('quickLink_', $this->quickLink_)
         . Protobuf::toString('serverLogsCookie_', $this->serverLogsCookie_);
  }
  
  // optional string contentsUrl = 1;

  protected $contentsUrl_;
  public function resetContentsUrl() { unset($this->contentsUrl_); }
  public function clearContentsUrl() { unset($this->contentsUrl_); }
  public function hasContentsUrl() { return isset($this->contentsUrl_); }
  public function getContentsUrl() { return $this->contentsUrl_; }
  public function setContentsUrl($value) { $this->contentsUrl_ = (string)$value; }
  
  // optional string promoUrl = 2;

  protected $promoUrl_;
  public function resetPromoUrl() { unset($this->promoUrl_); }
  public function clearPromoUrl() { unset($this->promoUrl_); }
  public function hasPromoUrl() { return isset($this->promoUrl_); }
  public function getPromoUrl() { return $this->promoUrl_; }
  public function setPromoUrl($value) { $this->promoUrl_ = (string)$value; }
  
  // repeated .BrowseLink category = 3;

  protected $category_ = array();
  public function clearCategory() { $this->category_ = array(); }
  public function getCategoryCount() { return count($this->category_); }
  public function hasCategory() { return (count($this->category_) > 0); }
  public function indexOfCategory($value) { return array_search($value,$this->category_);}
  public function removeCategory($index) { unset($this->category_[$index]); }
  public function removeValCategory($value) { $idx = array_search($value,$this->category_); if($idx !== FALSE){unset($this->category_[$idx]); }}
  public function removeValsCategory($values) { foreach($values as $value){$idx = array_search($value,$this->category_); if($idx !== FALSE){unset($this->category_[$idx]); }}}
  public function pushCategory($newvar) { return array_push($this->category_,$newvar); }
  public function popCategory() { return array_pop($this->category_); }
  public function shiftCategory() { return array_shift($this->category_); }
  public function unshiftCategory($newvar) { return array_unshift($this->category_,$newvar); }
  public function getCategory($index) { return $this->category_[$index]; }
  public function getCategoryArray() { return $this->category_; }
  public function setCategory($index, $value) {$this->category_[$index] = $value;	}
  public function addCategory($value) { $this->category_[] = $value; }
  public function addAllCategory(array $values) { foreach($values as $value) {$this->category_[] = $value;} }
  
  // repeated .BrowseLink breadcrumb = 4;

  protected $breadcrumb_ = array();
  public function clearBreadcrumb() { $this->breadcrumb_ = array(); }
  public function getBreadcrumbCount() { return count($this->breadcrumb_); }
  public function hasBreadcrumb() { return (count($this->breadcrumb_) > 0); }
  public function indexOfBreadcrumb($value) { return array_search($value,$this->breadcrumb_);}
  public function removeBreadcrumb($index) { unset($this->breadcrumb_[$index]); }
  public function removeValBreadcrumb($value) { $idx = array_search($value,$this->breadcrumb_); if($idx !== FALSE){unset($this->breadcrumb_[$idx]); }}
  public function removeValsBreadcrumb($values) { foreach($values as $value){$idx = array_search($value,$this->breadcrumb_); if($idx !== FALSE){unset($this->breadcrumb_[$idx]); }}}
  public function pushBreadcrumb($newvar) { return array_push($this->breadcrumb_,$newvar); }
  public function popBreadcrumb() { return array_pop($this->breadcrumb_); }
  public function shiftBreadcrumb() { return array_shift($this->breadcrumb_); }
  public function unshiftBreadcrumb($newvar) { return array_unshift($this->breadcrumb_,$newvar); }
  public function getBreadcrumb($index) { return $this->breadcrumb_[$index]; }
  public function getBreadcrumbArray() { return $this->breadcrumb_; }
  public function setBreadcrumb($index, $value) {$this->breadcrumb_[$index] = $value;	}
  public function addBreadcrumb($value) { $this->breadcrumb_[] = $value; }
  public function addAllBreadcrumb(array $values) { foreach($values as $value) {$this->breadcrumb_[] = $value;} }
  
  // repeated .QuickLink quickLink = 5;

  protected $quickLink_ = array();
  public function clearQuickLink() { $this->quickLink_ = array(); }
  public function getQuickLinkCount() { return count($this->quickLink_); }
  public function hasQuickLink() { return (count($this->quickLink_) > 0); }
  public function indexOfQuickLink($value) { return array_search($value,$this->quickLink_);}
  public function removeQuickLink($index) { unset($this->quickLink_[$index]); }
  public function removeValQuickLink($value) { $idx = array_search($value,$this->quickLink_); if($idx !== FALSE){unset($this->quickLink_[$idx]); }}
  public function removeValsQuickLink($values) { foreach($values as $value){$idx = array_search($value,$this->quickLink_); if($idx !== FALSE){unset($this->quickLink_[$idx]); }}}
  public function pushQuickLink($newvar) { return array_push($this->quickLink_,$newvar); }
  public function popQuickLink() { return array_pop($this->quickLink_); }
  public function shiftQuickLink() { return array_shift($this->quickLink_); }
  public function unshiftQuickLink($newvar) { return array_unshift($this->quickLink_,$newvar); }
  public function getQuickLink($index) { return $this->quickLink_[$index]; }
  public function getQuickLinkArray() { return $this->quickLink_; }
  public function setQuickLink($index, $value) {$this->quickLink_[$index] = $value;	}
  public function addQuickLink($value) { $this->quickLink_[] = $value; }
  public function addAllQuickLink(array $values) { foreach($values as $value) {$this->quickLink_[] = $value;} }
  
  // optional bytes serverLogsCookie = 6;

  protected $serverLogsCookie_;
  public function resetServerLogsCookie() { unset($this->serverLogsCookie_); }
  public function clearServerLogsCookie() { unset($this->serverLogsCookie_); }
  public function hasServerLogsCookie() { return isset($this->serverLogsCookie_); }
  public function getServerLogsCookie() { return $this->serverLogsCookie_; }
  public function setServerLogsCookie($value) { $this->serverLogsCookie_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:BrowseResponse)
}

// message QuickLink
class QuickLink {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("QuickLink: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->name_ = $tmp;
          $limit-=$len;
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->image_ = new Image($fp, $len);
          ASSERT('$len == 0');
          break;
        case 3:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->link_ = new ResolvedLink($fp, $len);
          ASSERT('$len == 0');
          break;
        case 4:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->displayRequired_ = $tmp > 0 ? true : false;
          break;
        case 5:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->serverLogsCookie_ = $tmp;
          $limit-=$len;
          break;
        case 6:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->backendId_ = $tmp;
          
          break;
        case 7:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->prismStyle_ = $tmp > 0 ? true : false;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->name_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, strlen((string)$this->name_));
      fwrite($fp, (string)$this->name_);
    }
    if (!is_null($this->image_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, $this->image_->size()); // message
      $this->image_->write($fp);
    }
    if (!is_null($this->link_)) {
      fwrite($fp, "\x1a");
      Protobuf::write_varint($fp, $this->link_->size()); // message
      $this->link_->write($fp);
    }
    if (!is_null($this->displayRequired_)) {
      fwrite($fp, " ");
      Protobuf::write_varint($fp, (int)$this->displayRequired_ ? 1 : 0);
    }
    if (!is_null($this->serverLogsCookie_)) {
      fwrite($fp, "*");
      Protobuf::write_varint($fp, strlen((string)$this->serverLogsCookie_));
      fwrite($fp, (string)$this->serverLogsCookie_);
    }
    if (!is_null($this->backendId_)) {
      fwrite($fp, "0");
      Protobuf::write_varint($fp, (int)$this->backendId_);
    }
    if (!is_null($this->prismStyle_)) {
      fwrite($fp, "8");
      Protobuf::write_varint($fp, (int)$this->prismStyle_ ? 1 : 0);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->name_)) {
      $l = strlen((string)$this->name_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->image_)) {
      $l = $this->image_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->link_)) {
      $l = $this->link_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->displayRequired_)) {
      $size += 2;
    }
    if (!is_null($this->serverLogsCookie_)) {
      $l = strlen((string)$this->serverLogsCookie_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->backendId_)) {
      $size += 1 + Protobuf::size_varint($this->backendId_);
    }
    if (!is_null($this->prismStyle_)) {
      $size += 2;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('name_', $this->name_)
         . Protobuf::toString('image_', $this->image_)
         . Protobuf::toString('link_', $this->link_)
         . Protobuf::toString('displayRequired_', $this->displayRequired_)
         . Protobuf::toString('serverLogsCookie_', $this->serverLogsCookie_)
         . Protobuf::toString('backendId_', $this->backendId_)
         . Protobuf::toString('prismStyle_', $this->prismStyle_);
  }
  
  // optional string name = 1;

  protected $name_;
  public function resetName() { unset($this->name_); }
  public function clearName() { unset($this->name_); }
  public function hasName() { return isset($this->name_); }
  public function getName() { return $this->name_; }
  public function setName($value) { $this->name_ = (string)$value; }
  
  // optional .Image image = 2;

  protected $image_;
  public function resetImage() { unset($this->image_); }
  public function clearImage() { unset($this->image_); }
  public function hasImage() { return isset($this->image_); }
  public function getImage() { return $this->image_; }
  public function setImage(Image $value) { $this->image_ = $value; }
  
  // optional .ResolvedLink link = 3;

  protected $link_;
  public function resetLink() { unset($this->link_); }
  public function clearLink() { unset($this->link_); }
  public function hasLink() { return isset($this->link_); }
  public function getLink() { return $this->link_; }
  public function setLink(ResolvedLink $value) { $this->link_ = $value; }
  
  // optional bool displayRequired = 4;

  protected $displayRequired_;
  public function resetDisplayRequired() { unset($this->displayRequired_); }
  public function clearDisplayRequired() { unset($this->displayRequired_); }
  public function hasDisplayRequired() { return isset($this->displayRequired_); }
  public function getDisplayRequired() { return $this->displayRequired_; }
  public function setDisplayRequired($value) { $this->displayRequired_ = (bool)$value; }
  
  // optional bytes serverLogsCookie = 5;

  protected $serverLogsCookie_;
  public function resetServerLogsCookie() { unset($this->serverLogsCookie_); }
  public function clearServerLogsCookie() { unset($this->serverLogsCookie_); }
  public function hasServerLogsCookie() { return isset($this->serverLogsCookie_); }
  public function getServerLogsCookie() { return $this->serverLogsCookie_; }
  public function setServerLogsCookie($value) { $this->serverLogsCookie_ = (string)$value; }
  
  // optional int32 backendId = 6;

  protected $backendId_;
  public function resetBackendId() { unset($this->backendId_); }
  public function clearBackendId() { unset($this->backendId_); }
  public function hasBackendId() { return isset($this->backendId_); }
  public function getBackendId() { return $this->backendId_; }
  public function setBackendId($value) { $this->backendId_ = (string)$value; }
  
  // optional bool prismStyle = 7;

  protected $prismStyle_;
  public function resetPrismStyle() { unset($this->prismStyle_); }
  public function clearPrismStyle() { unset($this->prismStyle_); }
  public function hasPrismStyle() { return isset($this->prismStyle_); }
  public function getPrismStyle() { return $this->prismStyle_; }
  public function setPrismStyle($value) { $this->prismStyle_ = (bool)$value; }
  
  // @@protoc_insertion_point(class_scope:QuickLink)
}



// group BuyResponse.CheckoutInfo.CheckoutOption
class BuyResponse_CheckoutInfo_CheckoutOption {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("BuyResponse_CheckoutInfo_CheckoutOption: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 5:
          ASSERT('$wire == 4');
          break 2;
        case 6:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->formOfPayment_ = $tmp;
          $limit-=$len;
          break;
        case 7:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->encodedAdjustedCart_ = $tmp;
          $limit-=$len;
          break;
        case 15:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->instrumentId_ = $tmp;
          $limit-=$len;
          break;
        case 16:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->item_[] = new LineItem($fp, $len);
          ASSERT('$len == 0');
          break;
        case 17:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->subItem_[] = new LineItem($fp, $len);
          ASSERT('$len == 0');
          break;
        case 18:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->total_ = new LineItem($fp, $len);
          ASSERT('$len == 0');
          break;
        case 19:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->footerHtml_[] = $tmp;
          $limit-=$len;
          break;
        case 29:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->instrumentFamily_ = $tmp;
          
          break;
        case 32:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->selectedInstrument_ = $tmp > 0 ? true : false;
          break;
        case 33:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->summary_ = new LineItem($fp, $len);
          ASSERT('$len == 0');
          break;
        case 35:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->footnoteHtml_[] = $tmp;
          $limit-=$len;
          break;
        case 43:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->instrument_ = new Instrument($fp, $len);
          ASSERT('$len == 0');
          break;
        case 45:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->purchaseCookie_ = $tmp;
          $limit-=$len;
          break;
        case 48:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->disabledReason_[] = $tmp;
          $limit-=$len;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->formOfPayment_)) {
      fwrite($fp, "2");
      Protobuf::write_varint($fp, strlen((string)$this->formOfPayment_));
      fwrite($fp, (string)$this->formOfPayment_);
    }
    if (!is_null($this->encodedAdjustedCart_)) {
      fwrite($fp, ":");
      Protobuf::write_varint($fp, strlen((string)$this->encodedAdjustedCart_));
      fwrite($fp, (string)$this->encodedAdjustedCart_);
    }
    if (!is_null($this->instrumentId_)) {
      fwrite($fp, "z");
      Protobuf::write_varint($fp, strlen((string)$this->instrumentId_));
      fwrite($fp, (string)$this->instrumentId_);
    }
    if (!is_null($this->item_))
      foreach($this->item_ as $v) {
        fwrite($fp, "\x82\x01");
        Protobuf::write_varint($fp, $v->size()); // message
        $v->write($fp);
      }
    if (!is_null($this->subItem_))
      foreach($this->subItem_ as $v) {
        fwrite($fp, "\x8a\x01");
        Protobuf::write_varint($fp, $v->size()); // message
        $v->write($fp);
      }
    if (!is_null($this->total_)) {
      fwrite($fp, "\x92\x01");
      Protobuf::write_varint($fp, $this->total_->size()); // message
      $this->total_->write($fp);
    }
    if (!is_null($this->footerHtml_))
      foreach($this->footerHtml_ as $v) {
        fwrite($fp, "\x9a\x01");
        Protobuf::write_varint($fp, strlen((string)$v));
        fwrite($fp, (string)$v);
      }
    if (!is_null($this->instrumentFamily_)) {
      fwrite($fp, "\xe8\x01");
      Protobuf::write_varint($fp, (int)$this->instrumentFamily_);
    }
    if (!is_null($this->selectedInstrument_)) {
      fwrite($fp, "\x80\x02");
      Protobuf::write_varint($fp, (int)$this->selectedInstrument_ ? 1 : 0);
    }
    if (!is_null($this->summary_)) {
      fwrite($fp, "\x8a\x02");
      Protobuf::write_varint($fp, $this->summary_->size()); // message
      $this->summary_->write($fp);
    }
    if (!is_null($this->footnoteHtml_))
      foreach($this->footnoteHtml_ as $v) {
        fwrite($fp, "\x9a\x02");
        Protobuf::write_varint($fp, strlen((string)$v));
        fwrite($fp, (string)$v);
      }
    if (!is_null($this->instrument_)) {
      fwrite($fp, "\xda\x02");
      Protobuf::write_varint($fp, $this->instrument_->size()); // message
      $this->instrument_->write($fp);
    }
    if (!is_null($this->purchaseCookie_)) {
      fwrite($fp, "\xea\x02");
      Protobuf::write_varint($fp, strlen((string)$this->purchaseCookie_));
      fwrite($fp, (string)$this->purchaseCookie_);
    }
    if (!is_null($this->disabledReason_))
      foreach($this->disabledReason_ as $v) {
        fwrite($fp, "\x82\x03");
        Protobuf::write_varint($fp, strlen((string)$v));
        fwrite($fp, (string)$v);
      }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->formOfPayment_)) {
      $l = strlen((string)$this->formOfPayment_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->encodedAdjustedCart_)) {
      $l = strlen((string)$this->encodedAdjustedCart_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->instrumentId_)) {
      $l = strlen((string)$this->instrumentId_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->item_))
      foreach($this->item_ as $v) {
        $l = $v->size();
        $size += 2 + Protobuf::size_varint($l) + $l;
      }
    if (!is_null($this->subItem_))
      foreach($this->subItem_ as $v) {
        $l = $v->size();
        $size += 2 + Protobuf::size_varint($l) + $l;
      }
    if (!is_null($this->total_)) {
      $l = $this->total_->size();
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->footerHtml_))
      foreach($this->footerHtml_ as $v) {
        $l = strlen((string)$v);
        $size += 2 + Protobuf::size_varint($l) + $l;
      }
    if (!is_null($this->instrumentFamily_)) {
      $size += 2 + Protobuf::size_varint($this->instrumentFamily_);
    }
    if (!is_null($this->selectedInstrument_)) {
      $size += 3;
    }
    if (!is_null($this->summary_)) {
      $l = $this->summary_->size();
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->footnoteHtml_))
      foreach($this->footnoteHtml_ as $v) {
        $l = strlen((string)$v);
        $size += 2 + Protobuf::size_varint($l) + $l;
      }
    if (!is_null($this->instrument_)) {
      $l = $this->instrument_->size();
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->purchaseCookie_)) {
      $l = strlen((string)$this->purchaseCookie_);
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->disabledReason_))
      foreach($this->disabledReason_ as $v) {
        $l = strlen((string)$v);
        $size += 2 + Protobuf::size_varint($l) + $l;
      }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('formOfPayment_', $this->formOfPayment_)
         . Protobuf::toString('encodedAdjustedCart_', $this->encodedAdjustedCart_)
         . Protobuf::toString('instrumentId_', $this->instrumentId_)
         . Protobuf::toString('item_', $this->item_)
         . Protobuf::toString('subItem_', $this->subItem_)
         . Protobuf::toString('total_', $this->total_)
         . Protobuf::toString('footerHtml_', $this->footerHtml_)
         . Protobuf::toString('instrumentFamily_', $this->instrumentFamily_)
         . Protobuf::toString('selectedInstrument_', $this->selectedInstrument_)
         . Protobuf::toString('summary_', $this->summary_)
         . Protobuf::toString('footnoteHtml_', $this->footnoteHtml_)
         . Protobuf::toString('instrument_', $this->instrument_)
         . Protobuf::toString('purchaseCookie_', $this->purchaseCookie_)
         . Protobuf::toString('disabledReason_', $this->disabledReason_);
  }
  
  // optional string formOfPayment = 6;

  protected $formOfPayment_;
  public function resetFormOfPayment() { unset($this->formOfPayment_); }
  public function clearFormOfPayment() { unset($this->formOfPayment_); }
  public function hasFormOfPayment() { return isset($this->formOfPayment_); }
  public function getFormOfPayment() { return $this->formOfPayment_; }
  public function setFormOfPayment($value) { $this->formOfPayment_ = (string)$value; }
  
  // optional string encodedAdjustedCart = 7;

  protected $encodedAdjustedCart_;
  public function resetEncodedAdjustedCart() { unset($this->encodedAdjustedCart_); }
  public function clearEncodedAdjustedCart() { unset($this->encodedAdjustedCart_); }
  public function hasEncodedAdjustedCart() { return isset($this->encodedAdjustedCart_); }
  public function getEncodedAdjustedCart() { return $this->encodedAdjustedCart_; }
  public function setEncodedAdjustedCart($value) { $this->encodedAdjustedCart_ = (string)$value; }
  
  // optional string instrumentId = 15;

  protected $instrumentId_;
  public function resetInstrumentId() { unset($this->instrumentId_); }
  public function clearInstrumentId() { unset($this->instrumentId_); }
  public function hasInstrumentId() { return isset($this->instrumentId_); }
  public function getInstrumentId() { return $this->instrumentId_; }
  public function setInstrumentId($value) { $this->instrumentId_ = (string)$value; }
  
  // repeated .LineItem item = 16;

  protected $item_ = array();
  public function clearItem() { $this->item_ = array(); }
  public function getItemCount() { return count($this->item_); }
  public function hasItem() { return (count($this->item_) > 0); }
  public function indexOfItem($value) { return array_search($value,$this->item_);}
  public function removeItem($index) { unset($this->item_[$index]); }
  public function removeValItem($value) { $idx = array_search($value,$this->item_); if($idx !== FALSE){unset($this->item_[$idx]); }}
  public function removeValsItem($values) { foreach($values as $value){$idx = array_search($value,$this->item_); if($idx !== FALSE){unset($this->item_[$idx]); }}}
  public function pushItem($newvar) { return array_push($this->item_,$newvar); }
  public function popItem() { return array_pop($this->item_); }
  public function shiftItem() { return array_shift($this->item_); }
  public function unshiftItem($newvar) { return array_unshift($this->item_,$newvar); }
  public function getItem($index) { return $this->item_[$index]; }
  public function getItemArray() { return $this->item_; }
  public function setItem($index, $value) {$this->item_[$index] = $value;	}
  public function addItem($value) { $this->item_[] = $value; }
  public function addAllItem(array $values) { foreach($values as $value) {$this->item_[] = $value;} }
  
  // repeated .LineItem subItem = 17;

  protected $subItem_ = array();
  public function clearSubItem() { $this->subItem_ = array(); }
  public function getSubItemCount() { return count($this->subItem_); }
  public function hasSubItem() { return (count($this->subItem_) > 0); }
  public function indexOfSubItem($value) { return array_search($value,$this->subItem_);}
  public function removeSubItem($index) { unset($this->subItem_[$index]); }
  public function removeValSubItem($value) { $idx = array_search($value,$this->subItem_); if($idx !== FALSE){unset($this->subItem_[$idx]); }}
  public function removeValsSubItem($values) { foreach($values as $value){$idx = array_search($value,$this->subItem_); if($idx !== FALSE){unset($this->subItem_[$idx]); }}}
  public function pushSubItem($newvar) { return array_push($this->subItem_,$newvar); }
  public function popSubItem() { return array_pop($this->subItem_); }
  public function shiftSubItem() { return array_shift($this->subItem_); }
  public function unshiftSubItem($newvar) { return array_unshift($this->subItem_,$newvar); }
  public function getSubItem($index) { return $this->subItem_[$index]; }
  public function getSubItemArray() { return $this->subItem_; }
  public function setSubItem($index, $value) {$this->subItem_[$index] = $value;	}
  public function addSubItem($value) { $this->subItem_[] = $value; }
  public function addAllSubItem(array $values) { foreach($values as $value) {$this->subItem_[] = $value;} }
  
  // optional .LineItem total = 18;

  protected $total_;
  public function resetTotal() { unset($this->total_); }
  public function clearTotal() { unset($this->total_); }
  public function hasTotal() { return isset($this->total_); }
  public function getTotal() { return $this->total_; }
  public function setTotal(LineItem $value) { $this->total_ = $value; }
  
  // repeated string footerHtml = 19;

  protected $footerHtml_ = array();
  public function clearFooterHtml() { $this->footerHtml_ = array(); }
  public function getFooterHtmlCount() { return count($this->footerHtml_); }
  public function hasFooterHtml() { return (count($this->footerHtml_) > 0); }
  public function indexOfFooterHtml($value) { return array_search($value,$this->footerHtml_);}
  public function removeFooterHtml($index) { unset($this->footerHtml_[$index]); }
  public function removeValFooterHtml($value) { $idx = array_search($value,$this->footerHtml_); if($idx !== FALSE){unset($this->footerHtml_[$idx]); }}
  public function removeValsFooterHtml($values) { foreach($values as $value){$idx = array_search($value,$this->footerHtml_); if($idx !== FALSE){unset($this->footerHtml_[$idx]); }}}
  public function pushFooterHtml($newvar) { return array_push($this->footerHtml_,(string)$newvar); }
  public function popFooterHtml() { return array_pop($this->footerHtml_); }
  public function shiftFooterHtml() { return array_shift($this->footerHtml_); }
  public function unshiftFooterHtml($newvar) { return array_unshift($this->footerHtml_,(string)$newvar); }
  public function getFooterHtml($index) { return $this->footerHtml_[$index]; }
  public function getFooterHtmlArray() { return $this->footerHtml_; }
  public function setFooterHtml($index, $value) {$this->footerHtml_[$index] = (string)$value;	}
  public function addFooterHtml($value) { $this->footerHtml_[] = (string)$value; }
  public function addAllFooterHtml(array $values) { foreach($values as $value) {$this->footerHtml_[] = (string)$value;} }
  
  // optional int32 instrumentFamily = 29;

  protected $instrumentFamily_;
  public function resetInstrumentFamily() { unset($this->instrumentFamily_); }
  public function clearInstrumentFamily() { unset($this->instrumentFamily_); }
  public function hasInstrumentFamily() { return isset($this->instrumentFamily_); }
  public function getInstrumentFamily() { return $this->instrumentFamily_; }
  public function setInstrumentFamily($value) { $this->instrumentFamily_ = (string)$value; }
  
  // optional bool selectedInstrument = 32;

  protected $selectedInstrument_;
  public function resetSelectedInstrument() { unset($this->selectedInstrument_); }
  public function clearSelectedInstrument() { unset($this->selectedInstrument_); }
  public function hasSelectedInstrument() { return isset($this->selectedInstrument_); }
  public function getSelectedInstrument() { return $this->selectedInstrument_; }
  public function setSelectedInstrument($value) { $this->selectedInstrument_ = (bool)$value; }
  
  // optional .LineItem summary = 33;

  protected $summary_;
  public function resetSummary() { unset($this->summary_); }
  public function clearSummary() { unset($this->summary_); }
  public function hasSummary() { return isset($this->summary_); }
  public function getSummary() { return $this->summary_; }
  public function setSummary(LineItem $value) { $this->summary_ = $value; }
  
  // repeated string footnoteHtml = 35;

  protected $footnoteHtml_ = array();
  public function clearFootnoteHtml() { $this->footnoteHtml_ = array(); }
  public function getFootnoteHtmlCount() { return count($this->footnoteHtml_); }
  public function hasFootnoteHtml() { return (count($this->footnoteHtml_) > 0); }
  public function indexOfFootnoteHtml($value) { return array_search($value,$this->footnoteHtml_);}
  public function removeFootnoteHtml($index) { unset($this->footnoteHtml_[$index]); }
  public function removeValFootnoteHtml($value) { $idx = array_search($value,$this->footnoteHtml_); if($idx !== FALSE){unset($this->footnoteHtml_[$idx]); }}
  public function removeValsFootnoteHtml($values) { foreach($values as $value){$idx = array_search($value,$this->footnoteHtml_); if($idx !== FALSE){unset($this->footnoteHtml_[$idx]); }}}
  public function pushFootnoteHtml($newvar) { return array_push($this->footnoteHtml_,(string)$newvar); }
  public function popFootnoteHtml() { return array_pop($this->footnoteHtml_); }
  public function shiftFootnoteHtml() { return array_shift($this->footnoteHtml_); }
  public function unshiftFootnoteHtml($newvar) { return array_unshift($this->footnoteHtml_,(string)$newvar); }
  public function getFootnoteHtml($index) { return $this->footnoteHtml_[$index]; }
  public function getFootnoteHtmlArray() { return $this->footnoteHtml_; }
  public function setFootnoteHtml($index, $value) {$this->footnoteHtml_[$index] = (string)$value;	}
  public function addFootnoteHtml($value) { $this->footnoteHtml_[] = (string)$value; }
  public function addAllFootnoteHtml(array $values) { foreach($values as $value) {$this->footnoteHtml_[] = (string)$value;} }
  
  // optional .Instrument instrument = 43;

  protected $instrument_;
  public function resetInstrument() { unset($this->instrument_); }
  public function clearInstrument() { unset($this->instrument_); }
  public function hasInstrument() { return isset($this->instrument_); }
  public function getInstrument() { return $this->instrument_; }
  public function setInstrument(Instrument $value) { $this->instrument_ = $value; }
  
  // optional string purchaseCookie = 45;

  protected $purchaseCookie_;
  public function resetPurchaseCookie() { unset($this->purchaseCookie_); }
  public function clearPurchaseCookie() { unset($this->purchaseCookie_); }
  public function hasPurchaseCookie() { return isset($this->purchaseCookie_); }
  public function getPurchaseCookie() { return $this->purchaseCookie_; }
  public function setPurchaseCookie($value) { $this->purchaseCookie_ = (string)$value; }
  
  // repeated string disabledReason = 48;

  protected $disabledReason_ = array();
  public function clearDisabledReason() { $this->disabledReason_ = array(); }
  public function getDisabledReasonCount() { return count($this->disabledReason_); }
  public function hasDisabledReason() { return (count($this->disabledReason_) > 0); }
  public function indexOfDisabledReason($value) { return array_search($value,$this->disabledReason_);}
  public function removeDisabledReason($index) { unset($this->disabledReason_[$index]); }
  public function removeValDisabledReason($value) { $idx = array_search($value,$this->disabledReason_); if($idx !== FALSE){unset($this->disabledReason_[$idx]); }}
  public function removeValsDisabledReason($values) { foreach($values as $value){$idx = array_search($value,$this->disabledReason_); if($idx !== FALSE){unset($this->disabledReason_[$idx]); }}}
  public function pushDisabledReason($newvar) { return array_push($this->disabledReason_,(string)$newvar); }
  public function popDisabledReason() { return array_pop($this->disabledReason_); }
  public function shiftDisabledReason() { return array_shift($this->disabledReason_); }
  public function unshiftDisabledReason($newvar) { return array_unshift($this->disabledReason_,(string)$newvar); }
  public function getDisabledReason($index) { return $this->disabledReason_[$index]; }
  public function getDisabledReasonArray() { return $this->disabledReason_; }
  public function setDisabledReason($index, $value) {$this->disabledReason_[$index] = (string)$value;	}
  public function addDisabledReason($value) { $this->disabledReason_[] = (string)$value; }
  public function addAllDisabledReason(array $values) { foreach($values as $value) {$this->disabledReason_[] = (string)$value;} }
  
  // @@protoc_insertion_point(class_scope:BuyResponse.CheckoutInfo.CheckoutOption)
}

// group BuyResponse.CheckoutInfo
class BuyResponse_CheckoutInfo {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("BuyResponse_CheckoutInfo: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 2:
          ASSERT('$wire == 4');
          break 2;
        case 3:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->item_ = new LineItem($fp, $len);
          ASSERT('$len == 0');
          break;
        case 4:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->subItem_[] = new LineItem($fp, $len);
          ASSERT('$len == 0');
          break;
        case 5:
          ASSERT('$wire == 3');
          $this->checkoutoption_[] = new BuyResponse_CheckoutInfo_CheckoutOption($fp, $limit);
          break;
        case 10:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->deprecatedCheckoutUrl_ = $tmp;
          $limit-=$len;
          break;
        case 11:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->addInstrumentUrl_ = $tmp;
          $limit-=$len;
          break;
        case 20:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->footerHtml_[] = $tmp;
          $limit-=$len;
          break;
        case 31:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->eligibleInstrumentFamily_[] = $tmp;
          
          break;
        case 36:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->footnoteHtml_[] = $tmp;
          $limit-=$len;
          break;
        case 44:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->eligibleInstrument_[] = new Instrument($fp, $len);
          ASSERT('$len == 0');
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->item_)) {
      fwrite($fp, "\x1a");
      Protobuf::write_varint($fp, $this->item_->size()); // message
      $this->item_->write($fp);
    }
    if (!is_null($this->subItem_))
      foreach($this->subItem_ as $v) {
        fwrite($fp, "\"");
        Protobuf::write_varint($fp, $v->size()); // message
        $v->write($fp);
      }
    if (!is_null($this->checkoutoption_))
      foreach($this->checkoutoption_ as $v) {
        fwrite($fp, "+");
        $v->write($fp); // group
        fwrite($fp, ",");
      }
    if (!is_null($this->deprecatedCheckoutUrl_)) {
      fwrite($fp, "R");
      Protobuf::write_varint($fp, strlen((string)$this->deprecatedCheckoutUrl_));
      fwrite($fp, (string)$this->deprecatedCheckoutUrl_);
    }
    if (!is_null($this->addInstrumentUrl_)) {
      fwrite($fp, "Z");
      Protobuf::write_varint($fp, strlen((string)$this->addInstrumentUrl_));
      fwrite($fp, (string)$this->addInstrumentUrl_);
    }
    if (!is_null($this->footerHtml_))
      foreach($this->footerHtml_ as $v) {
        fwrite($fp, "\xa2\x01");
        Protobuf::write_varint($fp, strlen((string)$v));
        fwrite($fp, (string)$v);
      }
    if (!is_null($this->eligibleInstrumentFamily_))
      foreach($this->eligibleInstrumentFamily_ as $v) {
        fwrite($fp, "\xf8\x01");
        Protobuf::write_varint($fp, (int)$v);
      }
    if (!is_null($this->footnoteHtml_))
      foreach($this->footnoteHtml_ as $v) {
        fwrite($fp, "\xa2\x02");
        Protobuf::write_varint($fp, strlen((string)$v));
        fwrite($fp, (string)$v);
      }
    if (!is_null($this->eligibleInstrument_))
      foreach($this->eligibleInstrument_ as $v) {
        fwrite($fp, "\xe2\x02");
        Protobuf::write_varint($fp, $v->size()); // message
        $v->write($fp);
      }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->item_)) {
      $l = $this->item_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->subItem_))
      foreach($this->subItem_ as $v) {
        $l = $v->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
    if (!is_null($this->checkoutoption_))
      foreach($this->checkoutoption_ as $v) {
        $size += 2 + $v->size();
      }
    if (!is_null($this->deprecatedCheckoutUrl_)) {
      $l = strlen((string)$this->deprecatedCheckoutUrl_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->addInstrumentUrl_)) {
      $l = strlen((string)$this->addInstrumentUrl_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->footerHtml_))
      foreach($this->footerHtml_ as $v) {
        $l = strlen((string)$v);
        $size += 2 + Protobuf::size_varint($l) + $l;
      }
    if (!is_null($this->eligibleInstrumentFamily_))
      foreach($this->eligibleInstrumentFamily_ as $v) {
        $size += 2 + Protobuf::size_varint($v);
      }
    if (!is_null($this->footnoteHtml_))
      foreach($this->footnoteHtml_ as $v) {
        $l = strlen((string)$v);
        $size += 2 + Protobuf::size_varint($l) + $l;
      }
    if (!is_null($this->eligibleInstrument_))
      foreach($this->eligibleInstrument_ as $v) {
        $l = $v->size();
        $size += 2 + Protobuf::size_varint($l) + $l;
      }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('item_', $this->item_)
         . Protobuf::toString('subItem_', $this->subItem_)
         . Protobuf::toString('checkoutoption_', $this->checkoutoption_)
         . Protobuf::toString('deprecatedCheckoutUrl_', $this->deprecatedCheckoutUrl_)
         . Protobuf::toString('addInstrumentUrl_', $this->addInstrumentUrl_)
         . Protobuf::toString('footerHtml_', $this->footerHtml_)
         . Protobuf::toString('eligibleInstrumentFamily_', $this->eligibleInstrumentFamily_)
         . Protobuf::toString('footnoteHtml_', $this->footnoteHtml_)
         . Protobuf::toString('eligibleInstrument_', $this->eligibleInstrument_);
  }
  
  // optional .LineItem item = 3;

  protected $item_;
  public function resetItem() { unset($this->item_); }
  public function clearItem() { unset($this->item_); }
  public function hasItem() { return isset($this->item_); }
  public function getItem() { return $this->item_; }
  public function setItem(LineItem $value) { $this->item_ = $value; }
  
  // repeated .LineItem subItem = 4;

  protected $subItem_ = array();
  public function clearSubItem() { $this->subItem_ = array(); }
  public function getSubItemCount() { return count($this->subItem_); }
  public function hasSubItem() { return (count($this->subItem_) > 0); }
  public function indexOfSubItem($value) { return array_search($value,$this->subItem_);}
  public function removeSubItem($index) { unset($this->subItem_[$index]); }
  public function removeValSubItem($value) { $idx = array_search($value,$this->subItem_); if($idx !== FALSE){unset($this->subItem_[$idx]); }}
  public function removeValsSubItem($values) { foreach($values as $value){$idx = array_search($value,$this->subItem_); if($idx !== FALSE){unset($this->subItem_[$idx]); }}}
  public function pushSubItem($newvar) { return array_push($this->subItem_,$newvar); }
  public function popSubItem() { return array_pop($this->subItem_); }
  public function shiftSubItem() { return array_shift($this->subItem_); }
  public function unshiftSubItem($newvar) { return array_unshift($this->subItem_,$newvar); }
  public function getSubItem($index) { return $this->subItem_[$index]; }
  public function getSubItemArray() { return $this->subItem_; }
  public function setSubItem($index, $value) {$this->subItem_[$index] = $value;	}
  public function addSubItem($value) { $this->subItem_[] = $value; }
  public function addAllSubItem(array $values) { foreach($values as $value) {$this->subItem_[] = $value;} }
  
  // repeated group CheckoutOption = 5
  protected $checkoutoption_ = array();
  public function clearCheckoutoption() { $this->checkoutoption_ = array(); }
  public function getCheckoutoptionCount() { return count($this->checkoutoption_); }
  public function hasCheckoutoption() { return (count($this->checkoutoption_) > 0); }
  public function indexOfCheckoutoption($value) { return array_search($value,$this->checkoutoption_);}
  public function removeCheckoutoption($index) { unset($this->checkoutoption_[$index]); }
  public function removeValCheckoutoption($value) { $idx = array_search($value,$this->checkoutoption_); if($idx !== FALSE){unset($this->checkoutoption_[$idx]); }}
  public function removeValsCheckoutoption($values) { foreach($values as $value){$idx = array_search($value,$this->checkoutoption_); if($idx !== FALSE){unset($this->checkoutoption_[$idx]); }}}
  public function pushCheckoutoption($newvar) { return array_push($this->checkoutoption_,$newvar); }
  public function popCheckoutoption() { return array_pop($this->checkoutoption_); }
  public function shiftCheckoutoption() { return array_shift($this->checkoutoption_); }
  public function unshiftCheckoutoption($newvar) { return array_unshift($this->checkoutoption_,$newvar); }
  public function getCheckoutoption($index) { return $this->checkoutoption_[$index]; }
  public function getCheckoutoptionArray() { return $this->checkoutoption_; }
  public function setCheckoutoption($index, $value) {$this->checkoutoption_[$index] = $value;	}
  public function addCheckoutoption($value) { $this->checkoutoption_[] = $value; }
  public function addAllCheckoutoption(array $values) { foreach($values as $value) {$this->checkoutoption_[] = $value;} }
  
  // optional string deprecatedCheckoutUrl = 10;

  protected $deprecatedCheckoutUrl_;
  public function resetDeprecatedCheckoutUrl() { unset($this->deprecatedCheckoutUrl_); }
  public function clearDeprecatedCheckoutUrl() { unset($this->deprecatedCheckoutUrl_); }
  public function hasDeprecatedCheckoutUrl() { return isset($this->deprecatedCheckoutUrl_); }
  public function getDeprecatedCheckoutUrl() { return $this->deprecatedCheckoutUrl_; }
  public function setDeprecatedCheckoutUrl($value) { $this->deprecatedCheckoutUrl_ = (string)$value; }
  
  // optional string addInstrumentUrl = 11;

  protected $addInstrumentUrl_;
  public function resetAddInstrumentUrl() { unset($this->addInstrumentUrl_); }
  public function clearAddInstrumentUrl() { unset($this->addInstrumentUrl_); }
  public function hasAddInstrumentUrl() { return isset($this->addInstrumentUrl_); }
  public function getAddInstrumentUrl() { return $this->addInstrumentUrl_; }
  public function setAddInstrumentUrl($value) { $this->addInstrumentUrl_ = (string)$value; }
  
  // repeated string footerHtml = 20;

  protected $footerHtml_ = array();
  public function clearFooterHtml() { $this->footerHtml_ = array(); }
  public function getFooterHtmlCount() { return count($this->footerHtml_); }
  public function hasFooterHtml() { return (count($this->footerHtml_) > 0); }
  public function indexOfFooterHtml($value) { return array_search($value,$this->footerHtml_);}
  public function removeFooterHtml($index) { unset($this->footerHtml_[$index]); }
  public function removeValFooterHtml($value) { $idx = array_search($value,$this->footerHtml_); if($idx !== FALSE){unset($this->footerHtml_[$idx]); }}
  public function removeValsFooterHtml($values) { foreach($values as $value){$idx = array_search($value,$this->footerHtml_); if($idx !== FALSE){unset($this->footerHtml_[$idx]); }}}
  public function pushFooterHtml($newvar) { return array_push($this->footerHtml_,(string)$newvar); }
  public function popFooterHtml() { return array_pop($this->footerHtml_); }
  public function shiftFooterHtml() { return array_shift($this->footerHtml_); }
  public function unshiftFooterHtml($newvar) { return array_unshift($this->footerHtml_,(string)$newvar); }
  public function getFooterHtml($index) { return $this->footerHtml_[$index]; }
  public function getFooterHtmlArray() { return $this->footerHtml_; }
  public function setFooterHtml($index, $value) {$this->footerHtml_[$index] = (string)$value;	}
  public function addFooterHtml($value) { $this->footerHtml_[] = (string)$value; }
  public function addAllFooterHtml(array $values) { foreach($values as $value) {$this->footerHtml_[] = (string)$value;} }
  
  // repeated int32 eligibleInstrumentFamily = 31;

  protected $eligibleInstrumentFamily_ = array();
  public function clearEligibleInstrumentFamily() { $this->eligibleInstrumentFamily_ = array(); }
  public function getEligibleInstrumentFamilyCount() { return count($this->eligibleInstrumentFamily_); }
  public function hasEligibleInstrumentFamily() { return (count($this->eligibleInstrumentFamily_) > 0); }
  public function indexOfEligibleInstrumentFamily($value) { return array_search($value,$this->eligibleInstrumentFamily_);}
  public function removeEligibleInstrumentFamily($index) { unset($this->eligibleInstrumentFamily_[$index]); }
  public function removeValEligibleInstrumentFamily($value) { $idx = array_search($value,$this->eligibleInstrumentFamily_); if($idx !== FALSE){unset($this->eligibleInstrumentFamily_[$idx]); }}
  public function removeValsEligibleInstrumentFamily($values) { foreach($values as $value){$idx = array_search($value,$this->eligibleInstrumentFamily_); if($idx !== FALSE){unset($this->eligibleInstrumentFamily_[$idx]); }}}
  public function pushEligibleInstrumentFamily($newvar) { return array_push($this->eligibleInstrumentFamily_,(string)$newvar); }
  public function popEligibleInstrumentFamily() { return array_pop($this->eligibleInstrumentFamily_); }
  public function shiftEligibleInstrumentFamily() { return array_shift($this->eligibleInstrumentFamily_); }
  public function unshiftEligibleInstrumentFamily($newvar) { return array_unshift($this->eligibleInstrumentFamily_,(string)$newvar); }
  public function getEligibleInstrumentFamily($index) { return $this->eligibleInstrumentFamily_[$index]; }
  public function getEligibleInstrumentFamilyArray() { return $this->eligibleInstrumentFamily_; }
  public function setEligibleInstrumentFamily($index, $value) {$this->eligibleInstrumentFamily_[$index] = (string)$value;	}
  public function addEligibleInstrumentFamily($value) { $this->eligibleInstrumentFamily_[] = (string)$value; }
  public function addAllEligibleInstrumentFamily(array $values) { foreach($values as $value) {$this->eligibleInstrumentFamily_[] = (string)$value;} }
  
  // repeated string footnoteHtml = 36;

  protected $footnoteHtml_ = array();
  public function clearFootnoteHtml() { $this->footnoteHtml_ = array(); }
  public function getFootnoteHtmlCount() { return count($this->footnoteHtml_); }
  public function hasFootnoteHtml() { return (count($this->footnoteHtml_) > 0); }
  public function indexOfFootnoteHtml($value) { return array_search($value,$this->footnoteHtml_);}
  public function removeFootnoteHtml($index) { unset($this->footnoteHtml_[$index]); }
  public function removeValFootnoteHtml($value) { $idx = array_search($value,$this->footnoteHtml_); if($idx !== FALSE){unset($this->footnoteHtml_[$idx]); }}
  public function removeValsFootnoteHtml($values) { foreach($values as $value){$idx = array_search($value,$this->footnoteHtml_); if($idx !== FALSE){unset($this->footnoteHtml_[$idx]); }}}
  public function pushFootnoteHtml($newvar) { return array_push($this->footnoteHtml_,(string)$newvar); }
  public function popFootnoteHtml() { return array_pop($this->footnoteHtml_); }
  public function shiftFootnoteHtml() { return array_shift($this->footnoteHtml_); }
  public function unshiftFootnoteHtml($newvar) { return array_unshift($this->footnoteHtml_,(string)$newvar); }
  public function getFootnoteHtml($index) { return $this->footnoteHtml_[$index]; }
  public function getFootnoteHtmlArray() { return $this->footnoteHtml_; }
  public function setFootnoteHtml($index, $value) {$this->footnoteHtml_[$index] = (string)$value;	}
  public function addFootnoteHtml($value) { $this->footnoteHtml_[] = (string)$value; }
  public function addAllFootnoteHtml(array $values) { foreach($values as $value) {$this->footnoteHtml_[] = (string)$value;} }
  
  // repeated .Instrument eligibleInstrument = 44;

  protected $eligibleInstrument_ = array();
  public function clearEligibleInstrument() { $this->eligibleInstrument_ = array(); }
  public function getEligibleInstrumentCount() { return count($this->eligibleInstrument_); }
  public function hasEligibleInstrument() { return (count($this->eligibleInstrument_) > 0); }
  public function indexOfEligibleInstrument($value) { return array_search($value,$this->eligibleInstrument_);}
  public function removeEligibleInstrument($index) { unset($this->eligibleInstrument_[$index]); }
  public function removeValEligibleInstrument($value) { $idx = array_search($value,$this->eligibleInstrument_); if($idx !== FALSE){unset($this->eligibleInstrument_[$idx]); }}
  public function removeValsEligibleInstrument($values) { foreach($values as $value){$idx = array_search($value,$this->eligibleInstrument_); if($idx !== FALSE){unset($this->eligibleInstrument_[$idx]); }}}
  public function pushEligibleInstrument($newvar) { return array_push($this->eligibleInstrument_,$newvar); }
  public function popEligibleInstrument() { return array_pop($this->eligibleInstrument_); }
  public function shiftEligibleInstrument() { return array_shift($this->eligibleInstrument_); }
  public function unshiftEligibleInstrument($newvar) { return array_unshift($this->eligibleInstrument_,$newvar); }
  public function getEligibleInstrument($index) { return $this->eligibleInstrument_[$index]; }
  public function getEligibleInstrumentArray() { return $this->eligibleInstrument_; }
  public function setEligibleInstrument($index, $value) {$this->eligibleInstrument_[$index] = $value;	}
  public function addEligibleInstrument($value) { $this->eligibleInstrument_[] = $value; }
  public function addAllEligibleInstrument(array $values) { foreach($values as $value) {$this->eligibleInstrument_[] = $value;} }
  
  // @@protoc_insertion_point(class_scope:BuyResponse.CheckoutInfo)
}

// message BuyResponse
class BuyResponse {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("BuyResponse: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->purchaseResponse_ = new PurchaseNotificationResponse($fp, $len);
          ASSERT('$len == 0');
          break;
        case 2:
          ASSERT('$wire == 3');
          $this->checkoutinfo_ = new BuyResponse_CheckoutInfo($fp, $limit);
          break;
        case 8:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->continueViaUrl_ = $tmp;
          $limit-=$len;
          break;
        case 9:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->purchaseStatusUrl_ = $tmp;
          $limit-=$len;
          break;
        case 12:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->checkoutServiceId_ = $tmp;
          $limit-=$len;
          break;
        case 13:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->checkoutTokenRequired_ = $tmp > 0 ? true : false;
          break;
        case 14:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->baseCheckoutUrl_ = $tmp;
          $limit-=$len;
          break;
        case 37:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->tosCheckboxHtml_[] = $tmp;
          $limit-=$len;
          break;
        case 38:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->permissionError_ = $tmp;
          
          break;
        case 39:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->purchaseStatusResponse_ = new PurchaseStatusResponse($fp, $len);
          ASSERT('$len == 0');
          break;
        case 46:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->purchaseCookie_ = $tmp;
          $limit-=$len;
          break;
        case 49:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->challenge_ = new Challenge($fp, $len);
          ASSERT('$len == 0');
          break;
        case 50:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->addInstrumentPromptHtml_ = $tmp;
          $limit-=$len;
          break;
        case 51:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->confirmButtonText_ = $tmp;
          $limit-=$len;
          break;
        case 52:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->permissionErrorTitleText_ = $tmp;
          $limit-=$len;
          break;
        case 53:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->permissionErrorMessageText_ = $tmp;
          $limit-=$len;
          break;
        case 54:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->serverLogsCookie_ = $tmp;
          $limit-=$len;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->purchaseResponse_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, $this->purchaseResponse_->size()); // message
      $this->purchaseResponse_->write($fp);
    }
    if (!is_null($this->checkoutinfo_)) {
      fwrite($fp, "\x13");
      $this->checkoutinfo_->write($fp); // group
      fwrite($fp, "\x14");
    }
    if (!is_null($this->continueViaUrl_)) {
      fwrite($fp, "B");
      Protobuf::write_varint($fp, strlen((string)$this->continueViaUrl_));
      fwrite($fp, (string)$this->continueViaUrl_);
    }
    if (!is_null($this->purchaseStatusUrl_)) {
      fwrite($fp, "J");
      Protobuf::write_varint($fp, strlen((string)$this->purchaseStatusUrl_));
      fwrite($fp, (string)$this->purchaseStatusUrl_);
    }
    if (!is_null($this->checkoutServiceId_)) {
      fwrite($fp, "b");
      Protobuf::write_varint($fp, strlen((string)$this->checkoutServiceId_));
      fwrite($fp, (string)$this->checkoutServiceId_);
    }
    if (!is_null($this->checkoutTokenRequired_)) {
      fwrite($fp, "h");
      Protobuf::write_varint($fp, (int)$this->checkoutTokenRequired_ ? 1 : 0);
    }
    if (!is_null($this->baseCheckoutUrl_)) {
      fwrite($fp, "r");
      Protobuf::write_varint($fp, strlen((string)$this->baseCheckoutUrl_));
      fwrite($fp, (string)$this->baseCheckoutUrl_);
    }
    if (!is_null($this->tosCheckboxHtml_))
      foreach($this->tosCheckboxHtml_ as $v) {
        fwrite($fp, "\xaa\x02");
        Protobuf::write_varint($fp, strlen((string)$v));
        fwrite($fp, (string)$v);
      }
    if (!is_null($this->permissionError_)) {
      fwrite($fp, "\xb0\x02");
      Protobuf::write_varint($fp, (int)$this->permissionError_);
    }
    if (!is_null($this->purchaseStatusResponse_)) {
      fwrite($fp, "\xba\x02");
      Protobuf::write_varint($fp, $this->purchaseStatusResponse_->size()); // message
      $this->purchaseStatusResponse_->write($fp);
    }
    if (!is_null($this->purchaseCookie_)) {
      fwrite($fp, "\xf2\x02");
      Protobuf::write_varint($fp, strlen((string)$this->purchaseCookie_));
      fwrite($fp, (string)$this->purchaseCookie_);
    }
    if (!is_null($this->challenge_)) {
      fwrite($fp, "\x8a\x03");
      Protobuf::write_varint($fp, $this->challenge_->size()); // message
      $this->challenge_->write($fp);
    }
    if (!is_null($this->addInstrumentPromptHtml_)) {
      fwrite($fp, "\x92\x03");
      Protobuf::write_varint($fp, strlen((string)$this->addInstrumentPromptHtml_));
      fwrite($fp, (string)$this->addInstrumentPromptHtml_);
    }
    if (!is_null($this->confirmButtonText_)) {
      fwrite($fp, "\x9a\x03");
      Protobuf::write_varint($fp, strlen((string)$this->confirmButtonText_));
      fwrite($fp, (string)$this->confirmButtonText_);
    }
    if (!is_null($this->permissionErrorTitleText_)) {
      fwrite($fp, "\xa2\x03");
      Protobuf::write_varint($fp, strlen((string)$this->permissionErrorTitleText_));
      fwrite($fp, (string)$this->permissionErrorTitleText_);
    }
    if (!is_null($this->permissionErrorMessageText_)) {
      fwrite($fp, "\xaa\x03");
      Protobuf::write_varint($fp, strlen((string)$this->permissionErrorMessageText_));
      fwrite($fp, (string)$this->permissionErrorMessageText_);
    }
    if (!is_null($this->serverLogsCookie_)) {
      fwrite($fp, "\xb2\x03");
      Protobuf::write_varint($fp, strlen((string)$this->serverLogsCookie_));
      fwrite($fp, (string)$this->serverLogsCookie_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->purchaseResponse_)) {
      $l = $this->purchaseResponse_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->checkoutinfo_)) {
      $size += 2 + $this->checkoutinfo_->size();
    }
    if (!is_null($this->continueViaUrl_)) {
      $l = strlen((string)$this->continueViaUrl_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->purchaseStatusUrl_)) {
      $l = strlen((string)$this->purchaseStatusUrl_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->checkoutServiceId_)) {
      $l = strlen((string)$this->checkoutServiceId_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->checkoutTokenRequired_)) {
      $size += 2;
    }
    if (!is_null($this->baseCheckoutUrl_)) {
      $l = strlen((string)$this->baseCheckoutUrl_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->tosCheckboxHtml_))
      foreach($this->tosCheckboxHtml_ as $v) {
        $l = strlen((string)$v);
        $size += 2 + Protobuf::size_varint($l) + $l;
      }
    if (!is_null($this->permissionError_)) {
      $size += 2 + Protobuf::size_varint($this->permissionError_);
    }
    if (!is_null($this->purchaseStatusResponse_)) {
      $l = $this->purchaseStatusResponse_->size();
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->purchaseCookie_)) {
      $l = strlen((string)$this->purchaseCookie_);
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->challenge_)) {
      $l = $this->challenge_->size();
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->addInstrumentPromptHtml_)) {
      $l = strlen((string)$this->addInstrumentPromptHtml_);
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->confirmButtonText_)) {
      $l = strlen((string)$this->confirmButtonText_);
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->permissionErrorTitleText_)) {
      $l = strlen((string)$this->permissionErrorTitleText_);
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->permissionErrorMessageText_)) {
      $l = strlen((string)$this->permissionErrorMessageText_);
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->serverLogsCookie_)) {
      $l = strlen((string)$this->serverLogsCookie_);
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('purchaseResponse_', $this->purchaseResponse_)
         . Protobuf::toString('checkoutinfo_', $this->checkoutinfo_)
         . Protobuf::toString('continueViaUrl_', $this->continueViaUrl_)
         . Protobuf::toString('purchaseStatusUrl_', $this->purchaseStatusUrl_)
         . Protobuf::toString('checkoutServiceId_', $this->checkoutServiceId_)
         . Protobuf::toString('checkoutTokenRequired_', $this->checkoutTokenRequired_)
         . Protobuf::toString('baseCheckoutUrl_', $this->baseCheckoutUrl_)
         . Protobuf::toString('tosCheckboxHtml_', $this->tosCheckboxHtml_)
         . Protobuf::toString('permissionError_', $this->permissionError_)
         . Protobuf::toString('purchaseStatusResponse_', $this->purchaseStatusResponse_)
         . Protobuf::toString('purchaseCookie_', $this->purchaseCookie_)
         . Protobuf::toString('challenge_', $this->challenge_)
         . Protobuf::toString('addInstrumentPromptHtml_', $this->addInstrumentPromptHtml_)
         . Protobuf::toString('confirmButtonText_', $this->confirmButtonText_)
         . Protobuf::toString('permissionErrorTitleText_', $this->permissionErrorTitleText_)
         . Protobuf::toString('permissionErrorMessageText_', $this->permissionErrorMessageText_)
         . Protobuf::toString('serverLogsCookie_', $this->serverLogsCookie_);
  }
  
  // optional .PurchaseNotificationResponse purchaseResponse = 1;

  protected $purchaseResponse_;
  public function resetPurchaseResponse() { unset($this->purchaseResponse_); }
  public function clearPurchaseResponse() { unset($this->purchaseResponse_); }
  public function hasPurchaseResponse() { return isset($this->purchaseResponse_); }
  public function getPurchaseResponse() { return $this->purchaseResponse_; }
  public function setPurchaseResponse(PurchaseNotificationResponse $value) { $this->purchaseResponse_ = $value; }
  
  // optional group CheckoutInfo = 2
  protected $checkoutinfo_;
  public function resetCheckoutinfo() { unset($this->checkoutinfo_); }
  public function clearCheckoutinfo() { unset($this->checkoutinfo_); }
  public function hasCheckoutinfo() { return isset($this->checkoutinfo_); }
  public function getCheckoutinfo() { return $this->checkoutinfo_; }
  public function setCheckoutinfo(BuyResponse_CheckoutInfo $value) { $this->checkoutinfo_ = $value; }
  
  // optional string continueViaUrl = 8;

  protected $continueViaUrl_;
  public function resetContinueViaUrl() { unset($this->continueViaUrl_); }
  public function clearContinueViaUrl() { unset($this->continueViaUrl_); }
  public function hasContinueViaUrl() { return isset($this->continueViaUrl_); }
  public function getContinueViaUrl() { return $this->continueViaUrl_; }
  public function setContinueViaUrl($value) { $this->continueViaUrl_ = (string)$value; }
  
  // optional string purchaseStatusUrl = 9;

  protected $purchaseStatusUrl_;
  public function resetPurchaseStatusUrl() { unset($this->purchaseStatusUrl_); }
  public function clearPurchaseStatusUrl() { unset($this->purchaseStatusUrl_); }
  public function hasPurchaseStatusUrl() { return isset($this->purchaseStatusUrl_); }
  public function getPurchaseStatusUrl() { return $this->purchaseStatusUrl_; }
  public function setPurchaseStatusUrl($value) { $this->purchaseStatusUrl_ = (string)$value; }
  
  // optional string checkoutServiceId = 12;

  protected $checkoutServiceId_;
  public function resetCheckoutServiceId() { unset($this->checkoutServiceId_); }
  public function clearCheckoutServiceId() { unset($this->checkoutServiceId_); }
  public function hasCheckoutServiceId() { return isset($this->checkoutServiceId_); }
  public function getCheckoutServiceId() { return $this->checkoutServiceId_; }
  public function setCheckoutServiceId($value) { $this->checkoutServiceId_ = (string)$value; }
  
  // optional bool checkoutTokenRequired = 13;

  protected $checkoutTokenRequired_;
  public function resetCheckoutTokenRequired() { unset($this->checkoutTokenRequired_); }
  public function clearCheckoutTokenRequired() { unset($this->checkoutTokenRequired_); }
  public function hasCheckoutTokenRequired() { return isset($this->checkoutTokenRequired_); }
  public function getCheckoutTokenRequired() { return $this->checkoutTokenRequired_; }
  public function setCheckoutTokenRequired($value) { $this->checkoutTokenRequired_ = (bool)$value; }
  
  // optional string baseCheckoutUrl = 14;

  protected $baseCheckoutUrl_;
  public function resetBaseCheckoutUrl() { unset($this->baseCheckoutUrl_); }
  public function clearBaseCheckoutUrl() { unset($this->baseCheckoutUrl_); }
  public function hasBaseCheckoutUrl() { return isset($this->baseCheckoutUrl_); }
  public function getBaseCheckoutUrl() { return $this->baseCheckoutUrl_; }
  public function setBaseCheckoutUrl($value) { $this->baseCheckoutUrl_ = (string)$value; }
  
  // repeated string tosCheckboxHtml = 37;

  protected $tosCheckboxHtml_ = array();
  public function clearTosCheckboxHtml() { $this->tosCheckboxHtml_ = array(); }
  public function getTosCheckboxHtmlCount() { return count($this->tosCheckboxHtml_); }
  public function hasTosCheckboxHtml() { return (count($this->tosCheckboxHtml_) > 0); }
  public function indexOfTosCheckboxHtml($value) { return array_search($value,$this->tosCheckboxHtml_);}
  public function removeTosCheckboxHtml($index) { unset($this->tosCheckboxHtml_[$index]); }
  public function removeValTosCheckboxHtml($value) { $idx = array_search($value,$this->tosCheckboxHtml_); if($idx !== FALSE){unset($this->tosCheckboxHtml_[$idx]); }}
  public function removeValsTosCheckboxHtml($values) { foreach($values as $value){$idx = array_search($value,$this->tosCheckboxHtml_); if($idx !== FALSE){unset($this->tosCheckboxHtml_[$idx]); }}}
  public function pushTosCheckboxHtml($newvar) { return array_push($this->tosCheckboxHtml_,(string)$newvar); }
  public function popTosCheckboxHtml() { return array_pop($this->tosCheckboxHtml_); }
  public function shiftTosCheckboxHtml() { return array_shift($this->tosCheckboxHtml_); }
  public function unshiftTosCheckboxHtml($newvar) { return array_unshift($this->tosCheckboxHtml_,(string)$newvar); }
  public function getTosCheckboxHtml($index) { return $this->tosCheckboxHtml_[$index]; }
  public function getTosCheckboxHtmlArray() { return $this->tosCheckboxHtml_; }
  public function setTosCheckboxHtml($index, $value) {$this->tosCheckboxHtml_[$index] = (string)$value;	}
  public function addTosCheckboxHtml($value) { $this->tosCheckboxHtml_[] = (string)$value; }
  public function addAllTosCheckboxHtml(array $values) { foreach($values as $value) {$this->tosCheckboxHtml_[] = (string)$value;} }
  
  // optional int32 permissionError = 38;

  protected $permissionError_;
  public function resetPermissionError() { unset($this->permissionError_); }
  public function clearPermissionError() { unset($this->permissionError_); }
  public function hasPermissionError() { return isset($this->permissionError_); }
  public function getPermissionError() { return $this->permissionError_; }
  public function setPermissionError($value) { $this->permissionError_ = (string)$value; }
  
  // optional .PurchaseStatusResponse purchaseStatusResponse = 39;

  protected $purchaseStatusResponse_;
  public function resetPurchaseStatusResponse() { unset($this->purchaseStatusResponse_); }
  public function clearPurchaseStatusResponse() { unset($this->purchaseStatusResponse_); }
  public function hasPurchaseStatusResponse() { return isset($this->purchaseStatusResponse_); }
  public function getPurchaseStatusResponse() { return $this->purchaseStatusResponse_; }
  public function setPurchaseStatusResponse(PurchaseStatusResponse $value) { $this->purchaseStatusResponse_ = $value; }
  
  // optional string purchaseCookie = 46;

  protected $purchaseCookie_;
  public function resetPurchaseCookie() { unset($this->purchaseCookie_); }
  public function clearPurchaseCookie() { unset($this->purchaseCookie_); }
  public function hasPurchaseCookie() { return isset($this->purchaseCookie_); }
  public function getPurchaseCookie() { return $this->purchaseCookie_; }
  public function setPurchaseCookie($value) { $this->purchaseCookie_ = (string)$value; }
  
  // optional .Challenge challenge = 49;

  protected $challenge_;
  public function resetChallenge() { unset($this->challenge_); }
  public function clearChallenge() { unset($this->challenge_); }
  public function hasChallenge() { return isset($this->challenge_); }
  public function getChallenge() { return $this->challenge_; }
  public function setChallenge(Challenge $value) { $this->challenge_ = $value; }
  
  // optional string addInstrumentPromptHtml = 50;

  protected $addInstrumentPromptHtml_;
  public function resetAddInstrumentPromptHtml() { unset($this->addInstrumentPromptHtml_); }
  public function clearAddInstrumentPromptHtml() { unset($this->addInstrumentPromptHtml_); }
  public function hasAddInstrumentPromptHtml() { return isset($this->addInstrumentPromptHtml_); }
  public function getAddInstrumentPromptHtml() { return $this->addInstrumentPromptHtml_; }
  public function setAddInstrumentPromptHtml($value) { $this->addInstrumentPromptHtml_ = (string)$value; }
  
  // optional string confirmButtonText = 51;

  protected $confirmButtonText_;
  public function resetConfirmButtonText() { unset($this->confirmButtonText_); }
  public function clearConfirmButtonText() { unset($this->confirmButtonText_); }
  public function hasConfirmButtonText() { return isset($this->confirmButtonText_); }
  public function getConfirmButtonText() { return $this->confirmButtonText_; }
  public function setConfirmButtonText($value) { $this->confirmButtonText_ = (string)$value; }
  
  // optional string permissionErrorTitleText = 52;

  protected $permissionErrorTitleText_;
  public function resetPermissionErrorTitleText() { unset($this->permissionErrorTitleText_); }
  public function clearPermissionErrorTitleText() { unset($this->permissionErrorTitleText_); }
  public function hasPermissionErrorTitleText() { return isset($this->permissionErrorTitleText_); }
  public function getPermissionErrorTitleText() { return $this->permissionErrorTitleText_; }
  public function setPermissionErrorTitleText($value) { $this->permissionErrorTitleText_ = (string)$value; }
  
  // optional string permissionErrorMessageText = 53;

  protected $permissionErrorMessageText_;
  public function resetPermissionErrorMessageText() { unset($this->permissionErrorMessageText_); }
  public function clearPermissionErrorMessageText() { unset($this->permissionErrorMessageText_); }
  public function hasPermissionErrorMessageText() { return isset($this->permissionErrorMessageText_); }
  public function getPermissionErrorMessageText() { return $this->permissionErrorMessageText_; }
  public function setPermissionErrorMessageText($value) { $this->permissionErrorMessageText_ = (string)$value; }
  
  // optional bytes serverLogsCookie = 54;

  protected $serverLogsCookie_;
  public function resetServerLogsCookie() { unset($this->serverLogsCookie_); }
  public function clearServerLogsCookie() { unset($this->serverLogsCookie_); }
  public function hasServerLogsCookie() { return isset($this->serverLogsCookie_); }
  public function getServerLogsCookie() { return $this->serverLogsCookie_; }
  public function setServerLogsCookie($value) { $this->serverLogsCookie_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:BuyResponse)
}

// message LineItem
class LineItem {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("LineItem: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->name_ = $tmp;
          $limit-=$len;
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->description_ = $tmp;
          $limit-=$len;
          break;
        case 3:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->offer_ = new Offer($fp, $len);
          ASSERT('$len == 0');
          break;
        case 4:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->amount_ = new Money($fp, $len);
          ASSERT('$len == 0');
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->name_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, strlen((string)$this->name_));
      fwrite($fp, (string)$this->name_);
    }
    if (!is_null($this->description_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, strlen((string)$this->description_));
      fwrite($fp, (string)$this->description_);
    }
    if (!is_null($this->offer_)) {
      fwrite($fp, "\x1a");
      Protobuf::write_varint($fp, $this->offer_->size()); // message
      $this->offer_->write($fp);
    }
    if (!is_null($this->amount_)) {
      fwrite($fp, "\"");
      Protobuf::write_varint($fp, $this->amount_->size()); // message
      $this->amount_->write($fp);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->name_)) {
      $l = strlen((string)$this->name_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->description_)) {
      $l = strlen((string)$this->description_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->offer_)) {
      $l = $this->offer_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->amount_)) {
      $l = $this->amount_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('name_', $this->name_)
         . Protobuf::toString('description_', $this->description_)
         . Protobuf::toString('offer_', $this->offer_)
         . Protobuf::toString('amount_', $this->amount_);
  }
  
  // optional string name = 1;

  protected $name_;
  public function resetName() { unset($this->name_); }
  public function clearName() { unset($this->name_); }
  public function hasName() { return isset($this->name_); }
  public function getName() { return $this->name_; }
  public function setName($value) { $this->name_ = (string)$value; }
  
  // optional string description = 2;

  protected $description_;
  public function resetDescription() { unset($this->description_); }
  public function clearDescription() { unset($this->description_); }
  public function hasDescription() { return isset($this->description_); }
  public function getDescription() { return $this->description_; }
  public function setDescription($value) { $this->description_ = (string)$value; }
  
  // optional .Offer offer = 3;

  protected $offer_;
  public function resetOffer() { unset($this->offer_); }
  public function clearOffer() { unset($this->offer_); }
  public function hasOffer() { return isset($this->offer_); }
  public function getOffer() { return $this->offer_; }
  public function setOffer(Offer $value) { $this->offer_ = $value; }
  
  // optional .Money amount = 4;

  protected $amount_;
  public function resetAmount() { unset($this->amount_); }
  public function clearAmount() { unset($this->amount_); }
  public function hasAmount() { return isset($this->amount_); }
  public function getAmount() { return $this->amount_; }
  public function setAmount(Money $value) { $this->amount_ = $value; }
  
  // @@protoc_insertion_point(class_scope:LineItem)
}

// message Money
class Money {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("Money: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->micros_ = $tmp;
          
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->currencyCode_ = $tmp;
          $limit-=$len;
          break;
        case 3:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->formattedAmount_ = $tmp;
          $limit-=$len;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->micros_)) {
      fwrite($fp, "\x08");
      Protobuf::write_varint($fp, (int)$this->micros_);
    }
    if (!is_null($this->currencyCode_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, strlen((string)$this->currencyCode_));
      fwrite($fp, (string)$this->currencyCode_);
    }
    if (!is_null($this->formattedAmount_)) {
      fwrite($fp, "\x1a");
      Protobuf::write_varint($fp, strlen((string)$this->formattedAmount_));
      fwrite($fp, (string)$this->formattedAmount_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->micros_)) {
      $size += 1 + Protobuf::size_varint($this->micros_);
    }
    if (!is_null($this->currencyCode_)) {
      $l = strlen((string)$this->currencyCode_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->formattedAmount_)) {
      $l = strlen((string)$this->formattedAmount_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('micros_', $this->micros_)
         . Protobuf::toString('currencyCode_', $this->currencyCode_)
         . Protobuf::toString('formattedAmount_', $this->formattedAmount_);
  }
  
  // optional int64 micros = 1;

  protected $micros_;
  public function resetMicros() { unset($this->micros_); }
  public function clearMicros() { unset($this->micros_); }
  public function hasMicros() { return isset($this->micros_); }
  public function getMicros() { return $this->micros_; }
  public function setMicros($value) { $this->micros_ = (string)$value; }
  
  // optional string currencyCode = 2;

  protected $currencyCode_;
  public function resetCurrencyCode() { unset($this->currencyCode_); }
  public function clearCurrencyCode() { unset($this->currencyCode_); }
  public function hasCurrencyCode() { return isset($this->currencyCode_); }
  public function getCurrencyCode() { return $this->currencyCode_; }
  public function setCurrencyCode($value) { $this->currencyCode_ = (string)$value; }
  
  // optional string formattedAmount = 3;

  protected $formattedAmount_;
  public function resetFormattedAmount() { unset($this->formattedAmount_); }
  public function clearFormattedAmount() { unset($this->formattedAmount_); }
  public function hasFormattedAmount() { return isset($this->formattedAmount_); }
  public function getFormattedAmount() { return $this->formattedAmount_; }
  public function setFormattedAmount($value) { $this->formattedAmount_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:Money)
}

// message PurchaseNotificationResponse
class PurchaseNotificationResponse {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("PurchaseNotificationResponse: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->status_ = $tmp;
          
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->debugInfo_ = new DebugInfo($fp, $len);
          ASSERT('$len == 0');
          break;
        case 3:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->localizedErrorMessage_ = $tmp;
          $limit-=$len;
          break;
        case 4:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->purchaseId_ = $tmp;
          $limit-=$len;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->status_)) {
      fwrite($fp, "\x08");
      Protobuf::write_varint($fp, (int)$this->status_);
    }
    if (!is_null($this->debugInfo_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, $this->debugInfo_->size()); // message
      $this->debugInfo_->write($fp);
    }
    if (!is_null($this->localizedErrorMessage_)) {
      fwrite($fp, "\x1a");
      Protobuf::write_varint($fp, strlen((string)$this->localizedErrorMessage_));
      fwrite($fp, (string)$this->localizedErrorMessage_);
    }
    if (!is_null($this->purchaseId_)) {
      fwrite($fp, "\"");
      Protobuf::write_varint($fp, strlen((string)$this->purchaseId_));
      fwrite($fp, (string)$this->purchaseId_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->status_)) {
      $size += 1 + Protobuf::size_varint($this->status_);
    }
    if (!is_null($this->debugInfo_)) {
      $l = $this->debugInfo_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->localizedErrorMessage_)) {
      $l = strlen((string)$this->localizedErrorMessage_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->purchaseId_)) {
      $l = strlen((string)$this->purchaseId_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('status_', $this->status_)
         . Protobuf::toString('debugInfo_', $this->debugInfo_)
         . Protobuf::toString('localizedErrorMessage_', $this->localizedErrorMessage_)
         . Protobuf::toString('purchaseId_', $this->purchaseId_);
  }
  
  // optional int32 status = 1;

  protected $status_;
  public function resetStatus() { unset($this->status_); }
  public function clearStatus() { unset($this->status_); }
  public function hasStatus() { return isset($this->status_); }
  public function getStatus() { return $this->status_; }
  public function setStatus($value) { $this->status_ = (string)$value; }
  
  // optional .DebugInfo debugInfo = 2;

  protected $debugInfo_;
  public function resetDebugInfo() { unset($this->debugInfo_); }
  public function clearDebugInfo() { unset($this->debugInfo_); }
  public function hasDebugInfo() { return isset($this->debugInfo_); }
  public function getDebugInfo() { return $this->debugInfo_; }
  public function setDebugInfo(DebugInfo $value) { $this->debugInfo_ = $value; }
  
  // optional string localizedErrorMessage = 3;

  protected $localizedErrorMessage_;
  public function resetLocalizedErrorMessage() { unset($this->localizedErrorMessage_); }
  public function clearLocalizedErrorMessage() { unset($this->localizedErrorMessage_); }
  public function hasLocalizedErrorMessage() { return isset($this->localizedErrorMessage_); }
  public function getLocalizedErrorMessage() { return $this->localizedErrorMessage_; }
  public function setLocalizedErrorMessage($value) { $this->localizedErrorMessage_ = (string)$value; }
  
  // optional string purchaseId = 4;

  protected $purchaseId_;
  public function resetPurchaseId() { unset($this->purchaseId_); }
  public function clearPurchaseId() { unset($this->purchaseId_); }
  public function hasPurchaseId() { return isset($this->purchaseId_); }
  public function getPurchaseId() { return $this->purchaseId_; }
  public function setPurchaseId($value) { $this->purchaseId_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:PurchaseNotificationResponse)
}

// message PurchaseStatusResponse
class PurchaseStatusResponse {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("PurchaseStatusResponse: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->status_ = $tmp;
          
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->statusMsg_ = $tmp;
          $limit-=$len;
          break;
        case 3:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->statusTitle_ = $tmp;
          $limit-=$len;
          break;
        case 4:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->briefMessage_ = $tmp;
          $limit-=$len;
          break;
        case 5:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->infoUrl_ = $tmp;
          $limit-=$len;
          break;
        case 6:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->libraryUpdate_ = new LibraryUpdate($fp, $len);
          ASSERT('$len == 0');
          break;
        case 7:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->rejectedInstrument_ = new Instrument($fp, $len);
          ASSERT('$len == 0');
          break;
        case 8:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->appDeliveryData_ = new AndroidAppDeliveryData($fp, $len);
          ASSERT('$len == 0');
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->status_)) {
      fwrite($fp, "\x08");
      Protobuf::write_varint($fp, (int)$this->status_);
    }
    if (!is_null($this->statusMsg_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, strlen((string)$this->statusMsg_));
      fwrite($fp, (string)$this->statusMsg_);
    }
    if (!is_null($this->statusTitle_)) {
      fwrite($fp, "\x1a");
      Protobuf::write_varint($fp, strlen((string)$this->statusTitle_));
      fwrite($fp, (string)$this->statusTitle_);
    }
    if (!is_null($this->briefMessage_)) {
      fwrite($fp, "\"");
      Protobuf::write_varint($fp, strlen((string)$this->briefMessage_));
      fwrite($fp, (string)$this->briefMessage_);
    }
    if (!is_null($this->infoUrl_)) {
      fwrite($fp, "*");
      Protobuf::write_varint($fp, strlen((string)$this->infoUrl_));
      fwrite($fp, (string)$this->infoUrl_);
    }
    if (!is_null($this->libraryUpdate_)) {
      fwrite($fp, "2");
      Protobuf::write_varint($fp, $this->libraryUpdate_->size()); // message
      $this->libraryUpdate_->write($fp);
    }
    if (!is_null($this->rejectedInstrument_)) {
      fwrite($fp, ":");
      Protobuf::write_varint($fp, $this->rejectedInstrument_->size()); // message
      $this->rejectedInstrument_->write($fp);
    }
    if (!is_null($this->appDeliveryData_)) {
      fwrite($fp, "B");
      Protobuf::write_varint($fp, $this->appDeliveryData_->size()); // message
      $this->appDeliveryData_->write($fp);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->status_)) {
      $size += 1 + Protobuf::size_varint($this->status_);
    }
    if (!is_null($this->statusMsg_)) {
      $l = strlen((string)$this->statusMsg_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->statusTitle_)) {
      $l = strlen((string)$this->statusTitle_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->briefMessage_)) {
      $l = strlen((string)$this->briefMessage_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->infoUrl_)) {
      $l = strlen((string)$this->infoUrl_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->libraryUpdate_)) {
      $l = $this->libraryUpdate_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->rejectedInstrument_)) {
      $l = $this->rejectedInstrument_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->appDeliveryData_)) {
      $l = $this->appDeliveryData_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('status_', $this->status_)
         . Protobuf::toString('statusMsg_', $this->statusMsg_)
         . Protobuf::toString('statusTitle_', $this->statusTitle_)
         . Protobuf::toString('briefMessage_', $this->briefMessage_)
         . Protobuf::toString('infoUrl_', $this->infoUrl_)
         . Protobuf::toString('libraryUpdate_', $this->libraryUpdate_)
         . Protobuf::toString('rejectedInstrument_', $this->rejectedInstrument_)
         . Protobuf::toString('appDeliveryData_', $this->appDeliveryData_);
  }
  
  // optional int32 status = 1;

  protected $status_;
  public function resetStatus() { unset($this->status_); }
  public function clearStatus() { unset($this->status_); }
  public function hasStatus() { return isset($this->status_); }
  public function getStatus() { return $this->status_; }
  public function setStatus($value) { $this->status_ = (string)$value; }
  
  // optional string statusMsg = 2;

  protected $statusMsg_;
  public function resetStatusMsg() { unset($this->statusMsg_); }
  public function clearStatusMsg() { unset($this->statusMsg_); }
  public function hasStatusMsg() { return isset($this->statusMsg_); }
  public function getStatusMsg() { return $this->statusMsg_; }
  public function setStatusMsg($value) { $this->statusMsg_ = (string)$value; }
  
  // optional string statusTitle = 3;

  protected $statusTitle_;
  public function resetStatusTitle() { unset($this->statusTitle_); }
  public function clearStatusTitle() { unset($this->statusTitle_); }
  public function hasStatusTitle() { return isset($this->statusTitle_); }
  public function getStatusTitle() { return $this->statusTitle_; }
  public function setStatusTitle($value) { $this->statusTitle_ = (string)$value; }
  
  // optional string briefMessage = 4;

  protected $briefMessage_;
  public function resetBriefMessage() { unset($this->briefMessage_); }
  public function clearBriefMessage() { unset($this->briefMessage_); }
  public function hasBriefMessage() { return isset($this->briefMessage_); }
  public function getBriefMessage() { return $this->briefMessage_; }
  public function setBriefMessage($value) { $this->briefMessage_ = (string)$value; }
  
  // optional string infoUrl = 5;

  protected $infoUrl_;
  public function resetInfoUrl() { unset($this->infoUrl_); }
  public function clearInfoUrl() { unset($this->infoUrl_); }
  public function hasInfoUrl() { return isset($this->infoUrl_); }
  public function getInfoUrl() { return $this->infoUrl_; }
  public function setInfoUrl($value) { $this->infoUrl_ = (string)$value; }
  
  // optional .LibraryUpdate libraryUpdate = 6;

  protected $libraryUpdate_;
  public function resetLibraryUpdate() { unset($this->libraryUpdate_); }
  public function clearLibraryUpdate() { unset($this->libraryUpdate_); }
  public function hasLibraryUpdate() { return isset($this->libraryUpdate_); }
  public function getLibraryUpdate() { return $this->libraryUpdate_; }
  public function setLibraryUpdate(LibraryUpdate $value) { $this->libraryUpdate_ = $value; }
  
  // optional .Instrument rejectedInstrument = 7;

  protected $rejectedInstrument_;
  public function resetRejectedInstrument() { unset($this->rejectedInstrument_); }
  public function clearRejectedInstrument() { unset($this->rejectedInstrument_); }
  public function hasRejectedInstrument() { return isset($this->rejectedInstrument_); }
  public function getRejectedInstrument() { return $this->rejectedInstrument_; }
  public function setRejectedInstrument(Instrument $value) { $this->rejectedInstrument_ = $value; }
  
  // optional .AndroidAppDeliveryData appDeliveryData = 8;

  protected $appDeliveryData_;
  public function resetAppDeliveryData() { unset($this->appDeliveryData_); }
  public function clearAppDeliveryData() { unset($this->appDeliveryData_); }
  public function hasAppDeliveryData() { return isset($this->appDeliveryData_); }
  public function getAppDeliveryData() { return $this->appDeliveryData_; }
  public function setAppDeliveryData(AndroidAppDeliveryData $value) { $this->appDeliveryData_ = $value; }
  
  // @@protoc_insertion_point(class_scope:PurchaseStatusResponse)
}

// message BillingProfileResponse
class BillingProfileResponse {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("BillingProfileResponse: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->result_ = $tmp;
          
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->billingProfile_ = new BillingProfile($fp, $len);
          ASSERT('$len == 0');
          break;
        case 3:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->userMessageHtml_ = $tmp;
          $limit-=$len;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->result_)) {
      fwrite($fp, "\x08");
      Protobuf::write_varint($fp, (int)$this->result_);
    }
    if (!is_null($this->billingProfile_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, $this->billingProfile_->size()); // message
      $this->billingProfile_->write($fp);
    }
    if (!is_null($this->userMessageHtml_)) {
      fwrite($fp, "\x1a");
      Protobuf::write_varint($fp, strlen((string)$this->userMessageHtml_));
      fwrite($fp, (string)$this->userMessageHtml_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->result_)) {
      $size += 1 + Protobuf::size_varint($this->result_);
    }
    if (!is_null($this->billingProfile_)) {
      $l = $this->billingProfile_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->userMessageHtml_)) {
      $l = strlen((string)$this->userMessageHtml_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('result_', $this->result_)
         . Protobuf::toString('billingProfile_', $this->billingProfile_)
         . Protobuf::toString('userMessageHtml_', $this->userMessageHtml_);
  }
  
  // optional int32 result = 1;

  protected $result_;
  public function resetResult() { unset($this->result_); }
  public function clearResult() { unset($this->result_); }
  public function hasResult() { return isset($this->result_); }
  public function getResult() { return $this->result_; }
  public function setResult($value) { $this->result_ = (string)$value; }
  
  // optional .BillingProfile billingProfile = 2;

  protected $billingProfile_;
  public function resetBillingProfile() { unset($this->billingProfile_); }
  public function clearBillingProfile() { unset($this->billingProfile_); }
  public function hasBillingProfile() { return isset($this->billingProfile_); }
  public function getBillingProfile() { return $this->billingProfile_; }
  public function setBillingProfile(BillingProfile $value) { $this->billingProfile_ = $value; }
  
  // optional string userMessageHtml = 3;

  protected $userMessageHtml_;
  public function resetUserMessageHtml() { unset($this->userMessageHtml_); }
  public function clearUserMessageHtml() { unset($this->userMessageHtml_); }
  public function hasUserMessageHtml() { return isset($this->userMessageHtml_); }
  public function getUserMessageHtml() { return $this->userMessageHtml_; }
  public function setUserMessageHtml($value) { $this->userMessageHtml_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:BillingProfileResponse)
}

// message CheckIabPromoResponse
class CheckIabPromoResponse {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("CheckIabPromoResponse: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->eligible_ = $tmp > 0 ? true : false;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->eligible_)) {
      fwrite($fp, "\x08");
      Protobuf::write_varint($fp, (int)$this->eligible_ ? 1 : 0);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->eligible_)) {
      $size += 2;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('eligible_', $this->eligible_);
  }
  
  // optional bool eligible = 1;

  protected $eligible_;
  public function resetEligible() { unset($this->eligible_); }
  public function clearEligible() { unset($this->eligible_); }
  public function hasEligible() { return isset($this->eligible_); }
  public function getEligible() { return $this->eligible_; }
  public function setEligible($value) { $this->eligible_ = (bool)$value; }
  
  // @@protoc_insertion_point(class_scope:CheckIabPromoResponse)
}

// message CheckInstrumentResponse
class CheckInstrumentResponse {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("CheckInstrumentResponse: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->userHasValidInstrument_ = $tmp > 0 ? true : false;
          break;
        case 2:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->checkoutTokenRequired_ = $tmp > 0 ? true : false;
          break;
        case 4:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->instrument_[] = new Instrument($fp, $len);
          ASSERT('$len == 0');
          break;
        case 5:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->eligibleInstrument_[] = new Instrument($fp, $len);
          ASSERT('$len == 0');
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->userHasValidInstrument_)) {
      fwrite($fp, "\x08");
      Protobuf::write_varint($fp, (int)$this->userHasValidInstrument_ ? 1 : 0);
    }
    if (!is_null($this->checkoutTokenRequired_)) {
      fwrite($fp, "\x10");
      Protobuf::write_varint($fp, (int)$this->checkoutTokenRequired_ ? 1 : 0);
    }
    if (!is_null($this->instrument_))
      foreach($this->instrument_ as $v) {
        fwrite($fp, "\"");
        Protobuf::write_varint($fp, $v->size()); // message
        $v->write($fp);
      }
    if (!is_null($this->eligibleInstrument_))
      foreach($this->eligibleInstrument_ as $v) {
        fwrite($fp, "*");
        Protobuf::write_varint($fp, $v->size()); // message
        $v->write($fp);
      }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->userHasValidInstrument_)) {
      $size += 2;
    }
    if (!is_null($this->checkoutTokenRequired_)) {
      $size += 2;
    }
    if (!is_null($this->instrument_))
      foreach($this->instrument_ as $v) {
        $l = $v->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
    if (!is_null($this->eligibleInstrument_))
      foreach($this->eligibleInstrument_ as $v) {
        $l = $v->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('userHasValidInstrument_', $this->userHasValidInstrument_)
         . Protobuf::toString('checkoutTokenRequired_', $this->checkoutTokenRequired_)
         . Protobuf::toString('instrument_', $this->instrument_)
         . Protobuf::toString('eligibleInstrument_', $this->eligibleInstrument_);
  }
  
  // optional bool userHasValidInstrument = 1;

  protected $userHasValidInstrument_;
  public function resetUserHasValidInstrument() { unset($this->userHasValidInstrument_); }
  public function clearUserHasValidInstrument() { unset($this->userHasValidInstrument_); }
  public function hasUserHasValidInstrument() { return isset($this->userHasValidInstrument_); }
  public function getUserHasValidInstrument() { return $this->userHasValidInstrument_; }
  public function setUserHasValidInstrument($value) { $this->userHasValidInstrument_ = (bool)$value; }
  
  // optional bool checkoutTokenRequired = 2;

  protected $checkoutTokenRequired_;
  public function resetCheckoutTokenRequired() { unset($this->checkoutTokenRequired_); }
  public function clearCheckoutTokenRequired() { unset($this->checkoutTokenRequired_); }
  public function hasCheckoutTokenRequired() { return isset($this->checkoutTokenRequired_); }
  public function getCheckoutTokenRequired() { return $this->checkoutTokenRequired_; }
  public function setCheckoutTokenRequired($value) { $this->checkoutTokenRequired_ = (bool)$value; }
  
  // repeated .Instrument instrument = 4;

  protected $instrument_ = array();
  public function clearInstrument() { $this->instrument_ = array(); }
  public function getInstrumentCount() { return count($this->instrument_); }
  public function hasInstrument() { return (count($this->instrument_) > 0); }
  public function indexOfInstrument($value) { return array_search($value,$this->instrument_);}
  public function removeInstrument($index) { unset($this->instrument_[$index]); }
  public function removeValInstrument($value) { $idx = array_search($value,$this->instrument_); if($idx !== FALSE){unset($this->instrument_[$idx]); }}
  public function removeValsInstrument($values) { foreach($values as $value){$idx = array_search($value,$this->instrument_); if($idx !== FALSE){unset($this->instrument_[$idx]); }}}
  public function pushInstrument($newvar) { return array_push($this->instrument_,$newvar); }
  public function popInstrument() { return array_pop($this->instrument_); }
  public function shiftInstrument() { return array_shift($this->instrument_); }
  public function unshiftInstrument($newvar) { return array_unshift($this->instrument_,$newvar); }
  public function getInstrument($index) { return $this->instrument_[$index]; }
  public function getInstrumentArray() { return $this->instrument_; }
  public function setInstrument($index, $value) {$this->instrument_[$index] = $value;	}
  public function addInstrument($value) { $this->instrument_[] = $value; }
  public function addAllInstrument(array $values) { foreach($values as $value) {$this->instrument_[] = $value;} }
  
  // repeated .Instrument eligibleInstrument = 5;

  protected $eligibleInstrument_ = array();
  public function clearEligibleInstrument() { $this->eligibleInstrument_ = array(); }
  public function getEligibleInstrumentCount() { return count($this->eligibleInstrument_); }
  public function hasEligibleInstrument() { return (count($this->eligibleInstrument_) > 0); }
  public function indexOfEligibleInstrument($value) { return array_search($value,$this->eligibleInstrument_);}
  public function removeEligibleInstrument($index) { unset($this->eligibleInstrument_[$index]); }
  public function removeValEligibleInstrument($value) { $idx = array_search($value,$this->eligibleInstrument_); if($idx !== FALSE){unset($this->eligibleInstrument_[$idx]); }}
  public function removeValsEligibleInstrument($values) { foreach($values as $value){$idx = array_search($value,$this->eligibleInstrument_); if($idx !== FALSE){unset($this->eligibleInstrument_[$idx]); }}}
  public function pushEligibleInstrument($newvar) { return array_push($this->eligibleInstrument_,$newvar); }
  public function popEligibleInstrument() { return array_pop($this->eligibleInstrument_); }
  public function shiftEligibleInstrument() { return array_shift($this->eligibleInstrument_); }
  public function unshiftEligibleInstrument($newvar) { return array_unshift($this->eligibleInstrument_,$newvar); }
  public function getEligibleInstrument($index) { return $this->eligibleInstrument_[$index]; }
  public function getEligibleInstrumentArray() { return $this->eligibleInstrument_; }
  public function setEligibleInstrument($index, $value) {$this->eligibleInstrument_[$index] = $value;	}
  public function addEligibleInstrument($value) { $this->eligibleInstrument_[] = $value; }
  public function addAllEligibleInstrument(array $values) { foreach($values as $value) {$this->eligibleInstrument_[] = $value;} }
  
  // @@protoc_insertion_point(class_scope:CheckInstrumentResponse)
}

// message InstrumentSetupInfoResponse
class InstrumentSetupInfoResponse {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("InstrumentSetupInfoResponse: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->setupInfo_[] = new InstrumentSetupInfo($fp, $len);
          ASSERT('$len == 0');
          break;
        case 2:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->checkoutTokenRequired_ = $tmp > 0 ? true : false;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->setupInfo_))
      foreach($this->setupInfo_ as $v) {
        fwrite($fp, "\x0a");
        Protobuf::write_varint($fp, $v->size()); // message
        $v->write($fp);
      }
    if (!is_null($this->checkoutTokenRequired_)) {
      fwrite($fp, "\x10");
      Protobuf::write_varint($fp, (int)$this->checkoutTokenRequired_ ? 1 : 0);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->setupInfo_))
      foreach($this->setupInfo_ as $v) {
        $l = $v->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
    if (!is_null($this->checkoutTokenRequired_)) {
      $size += 2;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('setupInfo_', $this->setupInfo_)
         . Protobuf::toString('checkoutTokenRequired_', $this->checkoutTokenRequired_);
  }
  
  // repeated .InstrumentSetupInfo setupInfo = 1;

  protected $setupInfo_ = array();
  public function clearSetupInfo() { $this->setupInfo_ = array(); }
  public function getSetupInfoCount() { return count($this->setupInfo_); }
  public function hasSetupInfo() { return (count($this->setupInfo_) > 0); }
  public function indexOfSetupInfo($value) { return array_search($value,$this->setupInfo_);}
  public function removeSetupInfo($index) { unset($this->setupInfo_[$index]); }
  public function removeValSetupInfo($value) { $idx = array_search($value,$this->setupInfo_); if($idx !== FALSE){unset($this->setupInfo_[$idx]); }}
  public function removeValsSetupInfo($values) { foreach($values as $value){$idx = array_search($value,$this->setupInfo_); if($idx !== FALSE){unset($this->setupInfo_[$idx]); }}}
  public function pushSetupInfo($newvar) { return array_push($this->setupInfo_,$newvar); }
  public function popSetupInfo() { return array_pop($this->setupInfo_); }
  public function shiftSetupInfo() { return array_shift($this->setupInfo_); }
  public function unshiftSetupInfo($newvar) { return array_unshift($this->setupInfo_,$newvar); }
  public function getSetupInfo($index) { return $this->setupInfo_[$index]; }
  public function getSetupInfoArray() { return $this->setupInfo_; }
  public function setSetupInfo($index, $value) {$this->setupInfo_[$index] = $value;	}
  public function addSetupInfo($value) { $this->setupInfo_[] = $value; }
  public function addAllSetupInfo(array $values) { foreach($values as $value) {$this->setupInfo_[] = $value;} }
  
  // optional bool checkoutTokenRequired = 2;

  protected $checkoutTokenRequired_;
  public function resetCheckoutTokenRequired() { unset($this->checkoutTokenRequired_); }
  public function clearCheckoutTokenRequired() { unset($this->checkoutTokenRequired_); }
  public function hasCheckoutTokenRequired() { return isset($this->checkoutTokenRequired_); }
  public function getCheckoutTokenRequired() { return $this->checkoutTokenRequired_; }
  public function setCheckoutTokenRequired($value) { $this->checkoutTokenRequired_ = (bool)$value; }
  
  // @@protoc_insertion_point(class_scope:InstrumentSetupInfoResponse)
}

// message RedeemGiftCardRequest
class RedeemGiftCardRequest {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("RedeemGiftCardRequest: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->giftCardPin_ = $tmp;
          $limit-=$len;
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->address_ = new Address($fp, $len);
          ASSERT('$len == 0');
          break;
        case 3:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->acceptedLegalDocumentId_[] = $tmp;
          $limit-=$len;
          break;
        case 4:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->checkoutToken_ = $tmp;
          $limit-=$len;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->giftCardPin_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, strlen((string)$this->giftCardPin_));
      fwrite($fp, (string)$this->giftCardPin_);
    }
    if (!is_null($this->address_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, $this->address_->size()); // message
      $this->address_->write($fp);
    }
    if (!is_null($this->acceptedLegalDocumentId_))
      foreach($this->acceptedLegalDocumentId_ as $v) {
        fwrite($fp, "\x1a");
        Protobuf::write_varint($fp, strlen((string)$v));
        fwrite($fp, (string)$v);
      }
    if (!is_null($this->checkoutToken_)) {
      fwrite($fp, "\"");
      Protobuf::write_varint($fp, strlen((string)$this->checkoutToken_));
      fwrite($fp, (string)$this->checkoutToken_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->giftCardPin_)) {
      $l = strlen((string)$this->giftCardPin_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->address_)) {
      $l = $this->address_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->acceptedLegalDocumentId_))
      foreach($this->acceptedLegalDocumentId_ as $v) {
        $l = strlen((string)$v);
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
    if (!is_null($this->checkoutToken_)) {
      $l = strlen((string)$this->checkoutToken_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('giftCardPin_', $this->giftCardPin_)
         . Protobuf::toString('address_', $this->address_)
         . Protobuf::toString('acceptedLegalDocumentId_', $this->acceptedLegalDocumentId_)
         . Protobuf::toString('checkoutToken_', $this->checkoutToken_);
  }
  
  // optional string giftCardPin = 1;

  protected $giftCardPin_;
  public function resetGiftCardPin() { unset($this->giftCardPin_); }
  public function clearGiftCardPin() { unset($this->giftCardPin_); }
  public function hasGiftCardPin() { return isset($this->giftCardPin_); }
  public function getGiftCardPin() { return $this->giftCardPin_; }
  public function setGiftCardPin($value) { $this->giftCardPin_ = (string)$value; }
  
  // optional .Address address = 2;

  protected $address_;
  public function resetAddress() { unset($this->address_); }
  public function clearAddress() { unset($this->address_); }
  public function hasAddress() { return isset($this->address_); }
  public function getAddress() { return $this->address_; }
  public function setAddress(Address $value) { $this->address_ = $value; }
  
  // repeated string acceptedLegalDocumentId = 3;

  protected $acceptedLegalDocumentId_ = array();
  public function clearAcceptedLegalDocumentId() { $this->acceptedLegalDocumentId_ = array(); }
  public function getAcceptedLegalDocumentIdCount() { return count($this->acceptedLegalDocumentId_); }
  public function hasAcceptedLegalDocumentId() { return (count($this->acceptedLegalDocumentId_) > 0); }
  public function indexOfAcceptedLegalDocumentId($value) { return array_search($value,$this->acceptedLegalDocumentId_);}
  public function removeAcceptedLegalDocumentId($index) { unset($this->acceptedLegalDocumentId_[$index]); }
  public function removeValAcceptedLegalDocumentId($value) { $idx = array_search($value,$this->acceptedLegalDocumentId_); if($idx !== FALSE){unset($this->acceptedLegalDocumentId_[$idx]); }}
  public function removeValsAcceptedLegalDocumentId($values) { foreach($values as $value){$idx = array_search($value,$this->acceptedLegalDocumentId_); if($idx !== FALSE){unset($this->acceptedLegalDocumentId_[$idx]); }}}
  public function pushAcceptedLegalDocumentId($newvar) { return array_push($this->acceptedLegalDocumentId_,(string)$newvar); }
  public function popAcceptedLegalDocumentId() { return array_pop($this->acceptedLegalDocumentId_); }
  public function shiftAcceptedLegalDocumentId() { return array_shift($this->acceptedLegalDocumentId_); }
  public function unshiftAcceptedLegalDocumentId($newvar) { return array_unshift($this->acceptedLegalDocumentId_,(string)$newvar); }
  public function getAcceptedLegalDocumentId($index) { return $this->acceptedLegalDocumentId_[$index]; }
  public function getAcceptedLegalDocumentIdArray() { return $this->acceptedLegalDocumentId_; }
  public function setAcceptedLegalDocumentId($index, $value) {$this->acceptedLegalDocumentId_[$index] = (string)$value;	}
  public function addAcceptedLegalDocumentId($value) { $this->acceptedLegalDocumentId_[] = (string)$value; }
  public function addAllAcceptedLegalDocumentId(array $values) { foreach($values as $value) {$this->acceptedLegalDocumentId_[] = (string)$value;} }
  
  // optional string checkoutToken = 4;

  protected $checkoutToken_;
  public function resetCheckoutToken() { unset($this->checkoutToken_); }
  public function clearCheckoutToken() { unset($this->checkoutToken_); }
  public function hasCheckoutToken() { return isset($this->checkoutToken_); }
  public function getCheckoutToken() { return $this->checkoutToken_; }
  public function setCheckoutToken($value) { $this->checkoutToken_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:RedeemGiftCardRequest)
}

// message RedeemGiftCardResponse
class RedeemGiftCardResponse {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("RedeemGiftCardResponse: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->result_ = $tmp;
          
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->userMessageHtml_ = $tmp;
          $limit-=$len;
          break;
        case 3:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->balanceHtml_ = $tmp;
          $limit-=$len;
          break;
        case 4:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->addressChallenge_ = new AddressChallenge($fp, $len);
          ASSERT('$len == 0');
          break;
        case 5:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->checkoutTokenRequired_ = $tmp > 0 ? true : false;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->result_)) {
      fwrite($fp, "\x08");
      Protobuf::write_varint($fp, (int)$this->result_);
    }
    if (!is_null($this->userMessageHtml_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, strlen((string)$this->userMessageHtml_));
      fwrite($fp, (string)$this->userMessageHtml_);
    }
    if (!is_null($this->balanceHtml_)) {
      fwrite($fp, "\x1a");
      Protobuf::write_varint($fp, strlen((string)$this->balanceHtml_));
      fwrite($fp, (string)$this->balanceHtml_);
    }
    if (!is_null($this->addressChallenge_)) {
      fwrite($fp, "\"");
      Protobuf::write_varint($fp, $this->addressChallenge_->size()); // message
      $this->addressChallenge_->write($fp);
    }
    if (!is_null($this->checkoutTokenRequired_)) {
      fwrite($fp, "(");
      Protobuf::write_varint($fp, (int)$this->checkoutTokenRequired_ ? 1 : 0);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->result_)) {
      $size += 1 + Protobuf::size_varint($this->result_);
    }
    if (!is_null($this->userMessageHtml_)) {
      $l = strlen((string)$this->userMessageHtml_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->balanceHtml_)) {
      $l = strlen((string)$this->balanceHtml_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->addressChallenge_)) {
      $l = $this->addressChallenge_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->checkoutTokenRequired_)) {
      $size += 2;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('result_', $this->result_)
         . Protobuf::toString('userMessageHtml_', $this->userMessageHtml_)
         . Protobuf::toString('balanceHtml_', $this->balanceHtml_)
         . Protobuf::toString('addressChallenge_', $this->addressChallenge_)
         . Protobuf::toString('checkoutTokenRequired_', $this->checkoutTokenRequired_);
  }
  
  // optional int32 result = 1;

  protected $result_;
  public function resetResult() { unset($this->result_); }
  public function clearResult() { unset($this->result_); }
  public function hasResult() { return isset($this->result_); }
  public function getResult() { return $this->result_; }
  public function setResult($value) { $this->result_ = (string)$value; }
  
  // optional string userMessageHtml = 2;

  protected $userMessageHtml_;
  public function resetUserMessageHtml() { unset($this->userMessageHtml_); }
  public function clearUserMessageHtml() { unset($this->userMessageHtml_); }
  public function hasUserMessageHtml() { return isset($this->userMessageHtml_); }
  public function getUserMessageHtml() { return $this->userMessageHtml_; }
  public function setUserMessageHtml($value) { $this->userMessageHtml_ = (string)$value; }
  
  // optional string balanceHtml = 3;

  protected $balanceHtml_;
  public function resetBalanceHtml() { unset($this->balanceHtml_); }
  public function clearBalanceHtml() { unset($this->balanceHtml_); }
  public function hasBalanceHtml() { return isset($this->balanceHtml_); }
  public function getBalanceHtml() { return $this->balanceHtml_; }
  public function setBalanceHtml($value) { $this->balanceHtml_ = (string)$value; }
  
  // optional .AddressChallenge addressChallenge = 4;

  protected $addressChallenge_;
  public function resetAddressChallenge() { unset($this->addressChallenge_); }
  public function clearAddressChallenge() { unset($this->addressChallenge_); }
  public function hasAddressChallenge() { return isset($this->addressChallenge_); }
  public function getAddressChallenge() { return $this->addressChallenge_; }
  public function setAddressChallenge(AddressChallenge $value) { $this->addressChallenge_ = $value; }
  
  // optional bool checkoutTokenRequired = 5;

  protected $checkoutTokenRequired_;
  public function resetCheckoutTokenRequired() { unset($this->checkoutTokenRequired_); }
  public function clearCheckoutTokenRequired() { unset($this->checkoutTokenRequired_); }
  public function hasCheckoutTokenRequired() { return isset($this->checkoutTokenRequired_); }
  public function getCheckoutTokenRequired() { return $this->checkoutTokenRequired_; }
  public function setCheckoutTokenRequired($value) { $this->checkoutTokenRequired_ = (bool)$value; }
  
  // @@protoc_insertion_point(class_scope:RedeemGiftCardResponse)
}

// message UpdateInstrumentRequest
class UpdateInstrumentRequest {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("UpdateInstrumentRequest: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->instrument_ = new Instrument($fp, $len);
          ASSERT('$len == 0');
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->checkoutToken_ = $tmp;
          $limit-=$len;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->instrument_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, $this->instrument_->size()); // message
      $this->instrument_->write($fp);
    }
    if (!is_null($this->checkoutToken_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, strlen((string)$this->checkoutToken_));
      fwrite($fp, (string)$this->checkoutToken_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->instrument_)) {
      $l = $this->instrument_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->checkoutToken_)) {
      $l = strlen((string)$this->checkoutToken_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('instrument_', $this->instrument_)
         . Protobuf::toString('checkoutToken_', $this->checkoutToken_);
  }
  
  // optional .Instrument instrument = 1;

  protected $instrument_;
  public function resetInstrument() { unset($this->instrument_); }
  public function clearInstrument() { unset($this->instrument_); }
  public function hasInstrument() { return isset($this->instrument_); }
  public function getInstrument() { return $this->instrument_; }
  public function setInstrument(Instrument $value) { $this->instrument_ = $value; }
  
  // optional string checkoutToken = 2;

  protected $checkoutToken_;
  public function resetCheckoutToken() { unset($this->checkoutToken_); }
  public function clearCheckoutToken() { unset($this->checkoutToken_); }
  public function hasCheckoutToken() { return isset($this->checkoutToken_); }
  public function getCheckoutToken() { return $this->checkoutToken_; }
  public function setCheckoutToken($value) { $this->checkoutToken_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:UpdateInstrumentRequest)
}

// message UpdateInstrumentResponse
class UpdateInstrumentResponse {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("UpdateInstrumentResponse: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->result_ = $tmp;
          
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->instrumentId_ = $tmp;
          $limit-=$len;
          break;
        case 3:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->userMessageHtml_ = $tmp;
          $limit-=$len;
          break;
        case 4:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->errorInputField_[] = new InputValidationError($fp, $len);
          ASSERT('$len == 0');
          break;
        case 5:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->checkoutTokenRequired_ = $tmp > 0 ? true : false;
          break;
        case 6:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->redeemedOffer_ = new RedeemedPromoOffer($fp, $len);
          ASSERT('$len == 0');
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->result_)) {
      fwrite($fp, "\x08");
      Protobuf::write_varint($fp, (int)$this->result_);
    }
    if (!is_null($this->instrumentId_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, strlen((string)$this->instrumentId_));
      fwrite($fp, (string)$this->instrumentId_);
    }
    if (!is_null($this->userMessageHtml_)) {
      fwrite($fp, "\x1a");
      Protobuf::write_varint($fp, strlen((string)$this->userMessageHtml_));
      fwrite($fp, (string)$this->userMessageHtml_);
    }
    if (!is_null($this->errorInputField_))
      foreach($this->errorInputField_ as $v) {
        fwrite($fp, "\"");
        Protobuf::write_varint($fp, $v->size()); // message
        $v->write($fp);
      }
    if (!is_null($this->checkoutTokenRequired_)) {
      fwrite($fp, "(");
      Protobuf::write_varint($fp, (int)$this->checkoutTokenRequired_ ? 1 : 0);
    }
    if (!is_null($this->redeemedOffer_)) {
      fwrite($fp, "2");
      Protobuf::write_varint($fp, $this->redeemedOffer_->size()); // message
      $this->redeemedOffer_->write($fp);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->result_)) {
      $size += 1 + Protobuf::size_varint($this->result_);
    }
    if (!is_null($this->instrumentId_)) {
      $l = strlen((string)$this->instrumentId_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->userMessageHtml_)) {
      $l = strlen((string)$this->userMessageHtml_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->errorInputField_))
      foreach($this->errorInputField_ as $v) {
        $l = $v->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
    if (!is_null($this->checkoutTokenRequired_)) {
      $size += 2;
    }
    if (!is_null($this->redeemedOffer_)) {
      $l = $this->redeemedOffer_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('result_', $this->result_)
         . Protobuf::toString('instrumentId_', $this->instrumentId_)
         . Protobuf::toString('userMessageHtml_', $this->userMessageHtml_)
         . Protobuf::toString('errorInputField_', $this->errorInputField_)
         . Protobuf::toString('checkoutTokenRequired_', $this->checkoutTokenRequired_)
         . Protobuf::toString('redeemedOffer_', $this->redeemedOffer_);
  }
  
  // optional int32 result = 1;

  protected $result_;
  public function resetResult() { unset($this->result_); }
  public function clearResult() { unset($this->result_); }
  public function hasResult() { return isset($this->result_); }
  public function getResult() { return $this->result_; }
  public function setResult($value) { $this->result_ = (string)$value; }
  
  // optional string instrumentId = 2;

  protected $instrumentId_;
  public function resetInstrumentId() { unset($this->instrumentId_); }
  public function clearInstrumentId() { unset($this->instrumentId_); }
  public function hasInstrumentId() { return isset($this->instrumentId_); }
  public function getInstrumentId() { return $this->instrumentId_; }
  public function setInstrumentId($value) { $this->instrumentId_ = (string)$value; }
  
  // optional string userMessageHtml = 3;

  protected $userMessageHtml_;
  public function resetUserMessageHtml() { unset($this->userMessageHtml_); }
  public function clearUserMessageHtml() { unset($this->userMessageHtml_); }
  public function hasUserMessageHtml() { return isset($this->userMessageHtml_); }
  public function getUserMessageHtml() { return $this->userMessageHtml_; }
  public function setUserMessageHtml($value) { $this->userMessageHtml_ = (string)$value; }
  
  // repeated .InputValidationError errorInputField = 4;

  protected $errorInputField_ = array();
  public function clearErrorInputField() { $this->errorInputField_ = array(); }
  public function getErrorInputFieldCount() { return count($this->errorInputField_); }
  public function hasErrorInputField() { return (count($this->errorInputField_) > 0); }
  public function indexOfErrorInputField($value) { return array_search($value,$this->errorInputField_);}
  public function removeErrorInputField($index) { unset($this->errorInputField_[$index]); }
  public function removeValErrorInputField($value) { $idx = array_search($value,$this->errorInputField_); if($idx !== FALSE){unset($this->errorInputField_[$idx]); }}
  public function removeValsErrorInputField($values) { foreach($values as $value){$idx = array_search($value,$this->errorInputField_); if($idx !== FALSE){unset($this->errorInputField_[$idx]); }}}
  public function pushErrorInputField($newvar) { return array_push($this->errorInputField_,$newvar); }
  public function popErrorInputField() { return array_pop($this->errorInputField_); }
  public function shiftErrorInputField() { return array_shift($this->errorInputField_); }
  public function unshiftErrorInputField($newvar) { return array_unshift($this->errorInputField_,$newvar); }
  public function getErrorInputField($index) { return $this->errorInputField_[$index]; }
  public function getErrorInputFieldArray() { return $this->errorInputField_; }
  public function setErrorInputField($index, $value) {$this->errorInputField_[$index] = $value;	}
  public function addErrorInputField($value) { $this->errorInputField_[] = $value; }
  public function addAllErrorInputField(array $values) { foreach($values as $value) {$this->errorInputField_[] = $value;} }
  
  // optional bool checkoutTokenRequired = 5;

  protected $checkoutTokenRequired_;
  public function resetCheckoutTokenRequired() { unset($this->checkoutTokenRequired_); }
  public function clearCheckoutTokenRequired() { unset($this->checkoutTokenRequired_); }
  public function hasCheckoutTokenRequired() { return isset($this->checkoutTokenRequired_); }
  public function getCheckoutTokenRequired() { return $this->checkoutTokenRequired_; }
  public function setCheckoutTokenRequired($value) { $this->checkoutTokenRequired_ = (bool)$value; }
  
  // optional .RedeemedPromoOffer redeemedOffer = 6;

  protected $redeemedOffer_;
  public function resetRedeemedOffer() { unset($this->redeemedOffer_); }
  public function clearRedeemedOffer() { unset($this->redeemedOffer_); }
  public function hasRedeemedOffer() { return isset($this->redeemedOffer_); }
  public function getRedeemedOffer() { return $this->redeemedOffer_; }
  public function setRedeemedOffer(RedeemedPromoOffer $value) { $this->redeemedOffer_ = $value; }
  
  // @@protoc_insertion_point(class_scope:UpdateInstrumentResponse)
}

// message InitiateAssociationResponse
class InitiateAssociationResponse {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("InitiateAssociationResponse: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->userToken_ = $tmp;
          $limit-=$len;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->userToken_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, strlen((string)$this->userToken_));
      fwrite($fp, (string)$this->userToken_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->userToken_)) {
      $l = strlen((string)$this->userToken_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('userToken_', $this->userToken_);
  }
  
  // optional string userToken = 1;

  protected $userToken_;
  public function resetUserToken() { unset($this->userToken_); }
  public function clearUserToken() { unset($this->userToken_); }
  public function hasUserToken() { return isset($this->userToken_); }
  public function getUserToken() { return $this->userToken_; }
  public function setUserToken($value) { $this->userToken_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:InitiateAssociationResponse)
}

// message VerifyAssociationResponse
class VerifyAssociationResponse {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("VerifyAssociationResponse: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->status_ = $tmp;
          
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->billingAddress_ = new Address($fp, $len);
          ASSERT('$len == 0');
          break;
        case 3:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->carrierTos_ = new CarrierTos($fp, $len);
          ASSERT('$len == 0');
          break;
        case 4:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->carrierErrorMessage_ = $tmp;
          $limit-=$len;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->status_)) {
      fwrite($fp, "\x08");
      Protobuf::write_varint($fp, (int)$this->status_);
    }
    if (!is_null($this->billingAddress_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, $this->billingAddress_->size()); // message
      $this->billingAddress_->write($fp);
    }
    if (!is_null($this->carrierTos_)) {
      fwrite($fp, "\x1a");
      Protobuf::write_varint($fp, $this->carrierTos_->size()); // message
      $this->carrierTos_->write($fp);
    }
    if (!is_null($this->carrierErrorMessage_)) {
      fwrite($fp, "\"");
      Protobuf::write_varint($fp, strlen((string)$this->carrierErrorMessage_));
      fwrite($fp, (string)$this->carrierErrorMessage_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->status_)) {
      $size += 1 + Protobuf::size_varint($this->status_);
    }
    if (!is_null($this->billingAddress_)) {
      $l = $this->billingAddress_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->carrierTos_)) {
      $l = $this->carrierTos_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->carrierErrorMessage_)) {
      $l = strlen((string)$this->carrierErrorMessage_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('status_', $this->status_)
         . Protobuf::toString('billingAddress_', $this->billingAddress_)
         . Protobuf::toString('carrierTos_', $this->carrierTos_)
         . Protobuf::toString('carrierErrorMessage_', $this->carrierErrorMessage_);
  }
  
  // optional int32 status = 1;

  protected $status_;
  public function resetStatus() { unset($this->status_); }
  public function clearStatus() { unset($this->status_); }
  public function hasStatus() { return isset($this->status_); }
  public function getStatus() { return $this->status_; }
  public function setStatus($value) { $this->status_ = (string)$value; }
  
  // optional .Address billingAddress = 2;

  protected $billingAddress_;
  public function resetBillingAddress() { unset($this->billingAddress_); }
  public function clearBillingAddress() { unset($this->billingAddress_); }
  public function hasBillingAddress() { return isset($this->billingAddress_); }
  public function getBillingAddress() { return $this->billingAddress_; }
  public function setBillingAddress(Address $value) { $this->billingAddress_ = $value; }
  
  // optional .CarrierTos carrierTos = 3;

  protected $carrierTos_;
  public function resetCarrierTos() { unset($this->carrierTos_); }
  public function clearCarrierTos() { unset($this->carrierTos_); }
  public function hasCarrierTos() { return isset($this->carrierTos_); }
  public function getCarrierTos() { return $this->carrierTos_; }
  public function setCarrierTos(CarrierTos $value) { $this->carrierTos_ = $value; }
  
  // optional string carrierErrorMessage = 4;

  protected $carrierErrorMessage_;
  public function resetCarrierErrorMessage() { unset($this->carrierErrorMessage_); }
  public function clearCarrierErrorMessage() { unset($this->carrierErrorMessage_); }
  public function hasCarrierErrorMessage() { return isset($this->carrierErrorMessage_); }
  public function getCarrierErrorMessage() { return $this->carrierErrorMessage_; }
  public function setCarrierErrorMessage($value) { $this->carrierErrorMessage_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:VerifyAssociationResponse)
}

// message AddressChallenge
class AddressChallenge {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("AddressChallenge: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->responseAddressParam_ = $tmp;
          $limit-=$len;
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->responseCheckboxesParam_ = $tmp;
          $limit-=$len;
          break;
        case 3:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->title_ = $tmp;
          $limit-=$len;
          break;
        case 4:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->descriptionHtml_ = $tmp;
          $limit-=$len;
          break;
        case 5:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->checkbox_[] = new FormCheckbox($fp, $len);
          ASSERT('$len == 0');
          break;
        case 6:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->address_ = new Address($fp, $len);
          ASSERT('$len == 0');
          break;
        case 7:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->errorInputField_[] = new InputValidationError($fp, $len);
          ASSERT('$len == 0');
          break;
        case 8:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->errorHtml_ = $tmp;
          $limit-=$len;
          break;
        case 9:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->requiredField_[] = $tmp;
          
          break;
        case 10:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->supportedCountry_[] = new Country($fp, $len);
          ASSERT('$len == 0');
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->responseAddressParam_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, strlen((string)$this->responseAddressParam_));
      fwrite($fp, (string)$this->responseAddressParam_);
    }
    if (!is_null($this->responseCheckboxesParam_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, strlen((string)$this->responseCheckboxesParam_));
      fwrite($fp, (string)$this->responseCheckboxesParam_);
    }
    if (!is_null($this->title_)) {
      fwrite($fp, "\x1a");
      Protobuf::write_varint($fp, strlen((string)$this->title_));
      fwrite($fp, (string)$this->title_);
    }
    if (!is_null($this->descriptionHtml_)) {
      fwrite($fp, "\"");
      Protobuf::write_varint($fp, strlen((string)$this->descriptionHtml_));
      fwrite($fp, (string)$this->descriptionHtml_);
    }
    if (!is_null($this->checkbox_))
      foreach($this->checkbox_ as $v) {
        fwrite($fp, "*");
        Protobuf::write_varint($fp, $v->size()); // message
        $v->write($fp);
      }
    if (!is_null($this->address_)) {
      fwrite($fp, "2");
      Protobuf::write_varint($fp, $this->address_->size()); // message
      $this->address_->write($fp);
    }
    if (!is_null($this->errorInputField_))
      foreach($this->errorInputField_ as $v) {
        fwrite($fp, ":");
        Protobuf::write_varint($fp, $v->size()); // message
        $v->write($fp);
      }
    if (!is_null($this->errorHtml_)) {
      fwrite($fp, "B");
      Protobuf::write_varint($fp, strlen((string)$this->errorHtml_));
      fwrite($fp, (string)$this->errorHtml_);
    }
    if (!is_null($this->requiredField_))
      foreach($this->requiredField_ as $v) {
        fwrite($fp, "H");
        Protobuf::write_varint($fp, (int)$v);
      }
    if (!is_null($this->supportedCountry_))
      foreach($this->supportedCountry_ as $v) {
        fwrite($fp, "R");
        Protobuf::write_varint($fp, $v->size()); // message
        $v->write($fp);
      }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->responseAddressParam_)) {
      $l = strlen((string)$this->responseAddressParam_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->responseCheckboxesParam_)) {
      $l = strlen((string)$this->responseCheckboxesParam_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->title_)) {
      $l = strlen((string)$this->title_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->descriptionHtml_)) {
      $l = strlen((string)$this->descriptionHtml_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->checkbox_))
      foreach($this->checkbox_ as $v) {
        $l = $v->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
    if (!is_null($this->address_)) {
      $l = $this->address_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->errorInputField_))
      foreach($this->errorInputField_ as $v) {
        $l = $v->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
    if (!is_null($this->errorHtml_)) {
      $l = strlen((string)$this->errorHtml_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->requiredField_))
      foreach($this->requiredField_ as $v) {
        $size += 1 + Protobuf::size_varint($v);
      }
    if (!is_null($this->supportedCountry_))
      foreach($this->supportedCountry_ as $v) {
        $l = $v->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('responseAddressParam_', $this->responseAddressParam_)
         . Protobuf::toString('responseCheckboxesParam_', $this->responseCheckboxesParam_)
         . Protobuf::toString('title_', $this->title_)
         . Protobuf::toString('descriptionHtml_', $this->descriptionHtml_)
         . Protobuf::toString('checkbox_', $this->checkbox_)
         . Protobuf::toString('address_', $this->address_)
         . Protobuf::toString('errorInputField_', $this->errorInputField_)
         . Protobuf::toString('errorHtml_', $this->errorHtml_)
         . Protobuf::toString('requiredField_', $this->requiredField_)
         . Protobuf::toString('supportedCountry_', $this->supportedCountry_);
  }
  
  // optional string responseAddressParam = 1;

  protected $responseAddressParam_;
  public function resetResponseAddressParam() { unset($this->responseAddressParam_); }
  public function clearResponseAddressParam() { unset($this->responseAddressParam_); }
  public function hasResponseAddressParam() { return isset($this->responseAddressParam_); }
  public function getResponseAddressParam() { return $this->responseAddressParam_; }
  public function setResponseAddressParam($value) { $this->responseAddressParam_ = (string)$value; }
  
  // optional string responseCheckboxesParam = 2;

  protected $responseCheckboxesParam_;
  public function resetResponseCheckboxesParam() { unset($this->responseCheckboxesParam_); }
  public function clearResponseCheckboxesParam() { unset($this->responseCheckboxesParam_); }
  public function hasResponseCheckboxesParam() { return isset($this->responseCheckboxesParam_); }
  public function getResponseCheckboxesParam() { return $this->responseCheckboxesParam_; }
  public function setResponseCheckboxesParam($value) { $this->responseCheckboxesParam_ = (string)$value; }
  
  // optional string title = 3;

  protected $title_;
  public function resetTitle() { unset($this->title_); }
  public function clearTitle() { unset($this->title_); }
  public function hasTitle() { return isset($this->title_); }
  public function getTitle() { return $this->title_; }
  public function setTitle($value) { $this->title_ = (string)$value; }
  
  // optional string descriptionHtml = 4;

  protected $descriptionHtml_;
  public function resetDescriptionHtml() { unset($this->descriptionHtml_); }
  public function clearDescriptionHtml() { unset($this->descriptionHtml_); }
  public function hasDescriptionHtml() { return isset($this->descriptionHtml_); }
  public function getDescriptionHtml() { return $this->descriptionHtml_; }
  public function setDescriptionHtml($value) { $this->descriptionHtml_ = (string)$value; }
  
  // repeated .FormCheckbox checkbox = 5;

  protected $checkbox_ = array();
  public function clearCheckbox() { $this->checkbox_ = array(); }
  public function getCheckboxCount() { return count($this->checkbox_); }
  public function hasCheckbox() { return (count($this->checkbox_) > 0); }
  public function indexOfCheckbox($value) { return array_search($value,$this->checkbox_);}
  public function removeCheckbox($index) { unset($this->checkbox_[$index]); }
  public function removeValCheckbox($value) { $idx = array_search($value,$this->checkbox_); if($idx !== FALSE){unset($this->checkbox_[$idx]); }}
  public function removeValsCheckbox($values) { foreach($values as $value){$idx = array_search($value,$this->checkbox_); if($idx !== FALSE){unset($this->checkbox_[$idx]); }}}
  public function pushCheckbox($newvar) { return array_push($this->checkbox_,$newvar); }
  public function popCheckbox() { return array_pop($this->checkbox_); }
  public function shiftCheckbox() { return array_shift($this->checkbox_); }
  public function unshiftCheckbox($newvar) { return array_unshift($this->checkbox_,$newvar); }
  public function getCheckbox($index) { return $this->checkbox_[$index]; }
  public function getCheckboxArray() { return $this->checkbox_; }
  public function setCheckbox($index, $value) {$this->checkbox_[$index] = $value;	}
  public function addCheckbox($value) { $this->checkbox_[] = $value; }
  public function addAllCheckbox(array $values) { foreach($values as $value) {$this->checkbox_[] = $value;} }
  
  // optional .Address address = 6;

  protected $address_;
  public function resetAddress() { unset($this->address_); }
  public function clearAddress() { unset($this->address_); }
  public function hasAddress() { return isset($this->address_); }
  public function getAddress() { return $this->address_; }
  public function setAddress(Address $value) { $this->address_ = $value; }
  
  // repeated .InputValidationError errorInputField = 7;

  protected $errorInputField_ = array();
  public function clearErrorInputField() { $this->errorInputField_ = array(); }
  public function getErrorInputFieldCount() { return count($this->errorInputField_); }
  public function hasErrorInputField() { return (count($this->errorInputField_) > 0); }
  public function indexOfErrorInputField($value) { return array_search($value,$this->errorInputField_);}
  public function removeErrorInputField($index) { unset($this->errorInputField_[$index]); }
  public function removeValErrorInputField($value) { $idx = array_search($value,$this->errorInputField_); if($idx !== FALSE){unset($this->errorInputField_[$idx]); }}
  public function removeValsErrorInputField($values) { foreach($values as $value){$idx = array_search($value,$this->errorInputField_); if($idx !== FALSE){unset($this->errorInputField_[$idx]); }}}
  public function pushErrorInputField($newvar) { return array_push($this->errorInputField_,$newvar); }
  public function popErrorInputField() { return array_pop($this->errorInputField_); }
  public function shiftErrorInputField() { return array_shift($this->errorInputField_); }
  public function unshiftErrorInputField($newvar) { return array_unshift($this->errorInputField_,$newvar); }
  public function getErrorInputField($index) { return $this->errorInputField_[$index]; }
  public function getErrorInputFieldArray() { return $this->errorInputField_; }
  public function setErrorInputField($index, $value) {$this->errorInputField_[$index] = $value;	}
  public function addErrorInputField($value) { $this->errorInputField_[] = $value; }
  public function addAllErrorInputField(array $values) { foreach($values as $value) {$this->errorInputField_[] = $value;} }
  
  // optional string errorHtml = 8;

  protected $errorHtml_;
  public function resetErrorHtml() { unset($this->errorHtml_); }
  public function clearErrorHtml() { unset($this->errorHtml_); }
  public function hasErrorHtml() { return isset($this->errorHtml_); }
  public function getErrorHtml() { return $this->errorHtml_; }
  public function setErrorHtml($value) { $this->errorHtml_ = (string)$value; }
  
  // repeated int32 requiredField = 9;

  protected $requiredField_ = array();
  public function clearRequiredField() { $this->requiredField_ = array(); }
  public function getRequiredFieldCount() { return count($this->requiredField_); }
  public function hasRequiredField() { return (count($this->requiredField_) > 0); }
  public function indexOfRequiredField($value) { return array_search($value,$this->requiredField_);}
  public function removeRequiredField($index) { unset($this->requiredField_[$index]); }
  public function removeValRequiredField($value) { $idx = array_search($value,$this->requiredField_); if($idx !== FALSE){unset($this->requiredField_[$idx]); }}
  public function removeValsRequiredField($values) { foreach($values as $value){$idx = array_search($value,$this->requiredField_); if($idx !== FALSE){unset($this->requiredField_[$idx]); }}}
  public function pushRequiredField($newvar) { return array_push($this->requiredField_,(string)$newvar); }
  public function popRequiredField() { return array_pop($this->requiredField_); }
  public function shiftRequiredField() { return array_shift($this->requiredField_); }
  public function unshiftRequiredField($newvar) { return array_unshift($this->requiredField_,(string)$newvar); }
  public function getRequiredField($index) { return $this->requiredField_[$index]; }
  public function getRequiredFieldArray() { return $this->requiredField_; }
  public function setRequiredField($index, $value) {$this->requiredField_[$index] = (string)$value;	}
  public function addRequiredField($value) { $this->requiredField_[] = (string)$value; }
  public function addAllRequiredField(array $values) { foreach($values as $value) {$this->requiredField_[] = (string)$value;} }
  
  // repeated .Country supportedCountry = 10;

  protected $supportedCountry_ = array();
  public function clearSupportedCountry() { $this->supportedCountry_ = array(); }
  public function getSupportedCountryCount() { return count($this->supportedCountry_); }
  public function hasSupportedCountry() { return (count($this->supportedCountry_) > 0); }
  public function indexOfSupportedCountry($value) { return array_search($value,$this->supportedCountry_);}
  public function removeSupportedCountry($index) { unset($this->supportedCountry_[$index]); }
  public function removeValSupportedCountry($value) { $idx = array_search($value,$this->supportedCountry_); if($idx !== FALSE){unset($this->supportedCountry_[$idx]); }}
  public function removeValsSupportedCountry($values) { foreach($values as $value){$idx = array_search($value,$this->supportedCountry_); if($idx !== FALSE){unset($this->supportedCountry_[$idx]); }}}
  public function pushSupportedCountry($newvar) { return array_push($this->supportedCountry_,$newvar); }
  public function popSupportedCountry() { return array_pop($this->supportedCountry_); }
  public function shiftSupportedCountry() { return array_shift($this->supportedCountry_); }
  public function unshiftSupportedCountry($newvar) { return array_unshift($this->supportedCountry_,$newvar); }
  public function getSupportedCountry($index) { return $this->supportedCountry_[$index]; }
  public function getSupportedCountryArray() { return $this->supportedCountry_; }
  public function setSupportedCountry($index, $value) {$this->supportedCountry_[$index] = $value;	}
  public function addSupportedCountry($value) { $this->supportedCountry_[] = $value; }
  public function addAllSupportedCountry(array $values) { foreach($values as $value) {$this->supportedCountry_[] = $value;} }
  
  // @@protoc_insertion_point(class_scope:AddressChallenge)
}

// message AuthenticationChallenge
class AuthenticationChallenge {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("AuthenticationChallenge: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->authenticationType_ = $tmp;
          
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->responseAuthenticationTypeParam_ = $tmp;
          $limit-=$len;
          break;
        case 3:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->responseRetryCountParam_ = $tmp;
          $limit-=$len;
          break;
        case 6:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->gaiaHeaderText_ = $tmp;
          $limit-=$len;
          break;
        case 7:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->gaiaDescriptionTextHtml_ = $tmp;
          $limit-=$len;
          break;
        case 8:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->gaiaFooterTextHtml_ = $tmp;
          $limit-=$len;
          break;
        case 9:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->gaiaOptOutCheckbox_ = new FormCheckbox($fp, $len);
          ASSERT('$len == 0');
          break;
        case 10:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->gaiaOptOutDescriptionTextHtml_ = $tmp;
          $limit-=$len;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->authenticationType_)) {
      fwrite($fp, "\x08");
      Protobuf::write_varint($fp, (int)$this->authenticationType_);
    }
    if (!is_null($this->responseAuthenticationTypeParam_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, strlen((string)$this->responseAuthenticationTypeParam_));
      fwrite($fp, (string)$this->responseAuthenticationTypeParam_);
    }
    if (!is_null($this->responseRetryCountParam_)) {
      fwrite($fp, "\x1a");
      Protobuf::write_varint($fp, strlen((string)$this->responseRetryCountParam_));
      fwrite($fp, (string)$this->responseRetryCountParam_);
    }
    if (!is_null($this->gaiaHeaderText_)) {
      fwrite($fp, "2");
      Protobuf::write_varint($fp, strlen((string)$this->gaiaHeaderText_));
      fwrite($fp, (string)$this->gaiaHeaderText_);
    }
    if (!is_null($this->gaiaDescriptionTextHtml_)) {
      fwrite($fp, ":");
      Protobuf::write_varint($fp, strlen((string)$this->gaiaDescriptionTextHtml_));
      fwrite($fp, (string)$this->gaiaDescriptionTextHtml_);
    }
    if (!is_null($this->gaiaFooterTextHtml_)) {
      fwrite($fp, "B");
      Protobuf::write_varint($fp, strlen((string)$this->gaiaFooterTextHtml_));
      fwrite($fp, (string)$this->gaiaFooterTextHtml_);
    }
    if (!is_null($this->gaiaOptOutCheckbox_)) {
      fwrite($fp, "J");
      Protobuf::write_varint($fp, $this->gaiaOptOutCheckbox_->size()); // message
      $this->gaiaOptOutCheckbox_->write($fp);
    }
    if (!is_null($this->gaiaOptOutDescriptionTextHtml_)) {
      fwrite($fp, "R");
      Protobuf::write_varint($fp, strlen((string)$this->gaiaOptOutDescriptionTextHtml_));
      fwrite($fp, (string)$this->gaiaOptOutDescriptionTextHtml_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->authenticationType_)) {
      $size += 1 + Protobuf::size_varint($this->authenticationType_);
    }
    if (!is_null($this->responseAuthenticationTypeParam_)) {
      $l = strlen((string)$this->responseAuthenticationTypeParam_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->responseRetryCountParam_)) {
      $l = strlen((string)$this->responseRetryCountParam_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->gaiaHeaderText_)) {
      $l = strlen((string)$this->gaiaHeaderText_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->gaiaDescriptionTextHtml_)) {
      $l = strlen((string)$this->gaiaDescriptionTextHtml_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->gaiaFooterTextHtml_)) {
      $l = strlen((string)$this->gaiaFooterTextHtml_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->gaiaOptOutCheckbox_)) {
      $l = $this->gaiaOptOutCheckbox_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->gaiaOptOutDescriptionTextHtml_)) {
      $l = strlen((string)$this->gaiaOptOutDescriptionTextHtml_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('authenticationType_', $this->authenticationType_)
         . Protobuf::toString('responseAuthenticationTypeParam_', $this->responseAuthenticationTypeParam_)
         . Protobuf::toString('responseRetryCountParam_', $this->responseRetryCountParam_)
         . Protobuf::toString('gaiaHeaderText_', $this->gaiaHeaderText_)
         . Protobuf::toString('gaiaDescriptionTextHtml_', $this->gaiaDescriptionTextHtml_)
         . Protobuf::toString('gaiaFooterTextHtml_', $this->gaiaFooterTextHtml_)
         . Protobuf::toString('gaiaOptOutCheckbox_', $this->gaiaOptOutCheckbox_)
         . Protobuf::toString('gaiaOptOutDescriptionTextHtml_', $this->gaiaOptOutDescriptionTextHtml_);
  }
  
  // optional int32 authenticationType = 1;

  protected $authenticationType_;
  public function resetAuthenticationType() { unset($this->authenticationType_); }
  public function clearAuthenticationType() { unset($this->authenticationType_); }
  public function hasAuthenticationType() { return isset($this->authenticationType_); }
  public function getAuthenticationType() { return $this->authenticationType_; }
  public function setAuthenticationType($value) { $this->authenticationType_ = (string)$value; }
  
  // optional string responseAuthenticationTypeParam = 2;

  protected $responseAuthenticationTypeParam_;
  public function resetResponseAuthenticationTypeParam() { unset($this->responseAuthenticationTypeParam_); }
  public function clearResponseAuthenticationTypeParam() { unset($this->responseAuthenticationTypeParam_); }
  public function hasResponseAuthenticationTypeParam() { return isset($this->responseAuthenticationTypeParam_); }
  public function getResponseAuthenticationTypeParam() { return $this->responseAuthenticationTypeParam_; }
  public function setResponseAuthenticationTypeParam($value) { $this->responseAuthenticationTypeParam_ = (string)$value; }
  
  // optional string responseRetryCountParam = 3;

  protected $responseRetryCountParam_;
  public function resetResponseRetryCountParam() { unset($this->responseRetryCountParam_); }
  public function clearResponseRetryCountParam() { unset($this->responseRetryCountParam_); }
  public function hasResponseRetryCountParam() { return isset($this->responseRetryCountParam_); }
  public function getResponseRetryCountParam() { return $this->responseRetryCountParam_; }
  public function setResponseRetryCountParam($value) { $this->responseRetryCountParam_ = (string)$value; }
  
  // optional string gaiaHeaderText = 6;

  protected $gaiaHeaderText_;
  public function resetGaiaHeaderText() { unset($this->gaiaHeaderText_); }
  public function clearGaiaHeaderText() { unset($this->gaiaHeaderText_); }
  public function hasGaiaHeaderText() { return isset($this->gaiaHeaderText_); }
  public function getGaiaHeaderText() { return $this->gaiaHeaderText_; }
  public function setGaiaHeaderText($value) { $this->gaiaHeaderText_ = (string)$value; }
  
  // optional string gaiaDescriptionTextHtml = 7;

  protected $gaiaDescriptionTextHtml_;
  public function resetGaiaDescriptionTextHtml() { unset($this->gaiaDescriptionTextHtml_); }
  public function clearGaiaDescriptionTextHtml() { unset($this->gaiaDescriptionTextHtml_); }
  public function hasGaiaDescriptionTextHtml() { return isset($this->gaiaDescriptionTextHtml_); }
  public function getGaiaDescriptionTextHtml() { return $this->gaiaDescriptionTextHtml_; }
  public function setGaiaDescriptionTextHtml($value) { $this->gaiaDescriptionTextHtml_ = (string)$value; }
  
  // optional string gaiaFooterTextHtml = 8;

  protected $gaiaFooterTextHtml_;
  public function resetGaiaFooterTextHtml() { unset($this->gaiaFooterTextHtml_); }
  public function clearGaiaFooterTextHtml() { unset($this->gaiaFooterTextHtml_); }
  public function hasGaiaFooterTextHtml() { return isset($this->gaiaFooterTextHtml_); }
  public function getGaiaFooterTextHtml() { return $this->gaiaFooterTextHtml_; }
  public function setGaiaFooterTextHtml($value) { $this->gaiaFooterTextHtml_ = (string)$value; }
  
  // optional .FormCheckbox gaiaOptOutCheckbox = 9;

  protected $gaiaOptOutCheckbox_;
  public function resetGaiaOptOutCheckbox() { unset($this->gaiaOptOutCheckbox_); }
  public function clearGaiaOptOutCheckbox() { unset($this->gaiaOptOutCheckbox_); }
  public function hasGaiaOptOutCheckbox() { return isset($this->gaiaOptOutCheckbox_); }
  public function getGaiaOptOutCheckbox() { return $this->gaiaOptOutCheckbox_; }
  public function setGaiaOptOutCheckbox(FormCheckbox $value) { $this->gaiaOptOutCheckbox_ = $value; }
  
  // optional string gaiaOptOutDescriptionTextHtml = 10;

  protected $gaiaOptOutDescriptionTextHtml_;
  public function resetGaiaOptOutDescriptionTextHtml() { unset($this->gaiaOptOutDescriptionTextHtml_); }
  public function clearGaiaOptOutDescriptionTextHtml() { unset($this->gaiaOptOutDescriptionTextHtml_); }
  public function hasGaiaOptOutDescriptionTextHtml() { return isset($this->gaiaOptOutDescriptionTextHtml_); }
  public function getGaiaOptOutDescriptionTextHtml() { return $this->gaiaOptOutDescriptionTextHtml_; }
  public function setGaiaOptOutDescriptionTextHtml($value) { $this->gaiaOptOutDescriptionTextHtml_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:AuthenticationChallenge)
}

// message Challenge
class Challenge {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("Challenge: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->addressChallenge_ = new AddressChallenge($fp, $len);
          ASSERT('$len == 0');
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->authenticationChallenge_ = new AuthenticationChallenge($fp, $len);
          ASSERT('$len == 0');
          break;
        case 3:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->webViewChallenge_ = new WebViewChallenge($fp, $len);
          ASSERT('$len == 0');
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->addressChallenge_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, $this->addressChallenge_->size()); // message
      $this->addressChallenge_->write($fp);
    }
    if (!is_null($this->authenticationChallenge_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, $this->authenticationChallenge_->size()); // message
      $this->authenticationChallenge_->write($fp);
    }
    if (!is_null($this->webViewChallenge_)) {
      fwrite($fp, "\x1a");
      Protobuf::write_varint($fp, $this->webViewChallenge_->size()); // message
      $this->webViewChallenge_->write($fp);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->addressChallenge_)) {
      $l = $this->addressChallenge_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->authenticationChallenge_)) {
      $l = $this->authenticationChallenge_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->webViewChallenge_)) {
      $l = $this->webViewChallenge_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('addressChallenge_', $this->addressChallenge_)
         . Protobuf::toString('authenticationChallenge_', $this->authenticationChallenge_)
         . Protobuf::toString('webViewChallenge_', $this->webViewChallenge_);
  }
  
  // optional .AddressChallenge addressChallenge = 1;

  protected $addressChallenge_;
  public function resetAddressChallenge() { unset($this->addressChallenge_); }
  public function clearAddressChallenge() { unset($this->addressChallenge_); }
  public function hasAddressChallenge() { return isset($this->addressChallenge_); }
  public function getAddressChallenge() { return $this->addressChallenge_; }
  public function setAddressChallenge(AddressChallenge $value) { $this->addressChallenge_ = $value; }
  
  // optional .AuthenticationChallenge authenticationChallenge = 2;

  protected $authenticationChallenge_;
  public function resetAuthenticationChallenge() { unset($this->authenticationChallenge_); }
  public function clearAuthenticationChallenge() { unset($this->authenticationChallenge_); }
  public function hasAuthenticationChallenge() { return isset($this->authenticationChallenge_); }
  public function getAuthenticationChallenge() { return $this->authenticationChallenge_; }
  public function setAuthenticationChallenge(AuthenticationChallenge $value) { $this->authenticationChallenge_ = $value; }
  
  // optional .WebViewChallenge webViewChallenge = 3;

  protected $webViewChallenge_;
  public function resetWebViewChallenge() { unset($this->webViewChallenge_); }
  public function clearWebViewChallenge() { unset($this->webViewChallenge_); }
  public function hasWebViewChallenge() { return isset($this->webViewChallenge_); }
  public function getWebViewChallenge() { return $this->webViewChallenge_; }
  public function setWebViewChallenge(WebViewChallenge $value) { $this->webViewChallenge_ = $value; }
  
  // @@protoc_insertion_point(class_scope:Challenge)
}

// message Country
class Country {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("Country: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->regionCode_ = $tmp;
          $limit-=$len;
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->displayName_ = $tmp;
          $limit-=$len;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->regionCode_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, strlen((string)$this->regionCode_));
      fwrite($fp, (string)$this->regionCode_);
    }
    if (!is_null($this->displayName_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, strlen((string)$this->displayName_));
      fwrite($fp, (string)$this->displayName_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->regionCode_)) {
      $l = strlen((string)$this->regionCode_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->displayName_)) {
      $l = strlen((string)$this->displayName_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('regionCode_', $this->regionCode_)
         . Protobuf::toString('displayName_', $this->displayName_);
  }
  
  // optional string regionCode = 1;

  protected $regionCode_;
  public function resetRegionCode() { unset($this->regionCode_); }
  public function clearRegionCode() { unset($this->regionCode_); }
  public function hasRegionCode() { return isset($this->regionCode_); }
  public function getRegionCode() { return $this->regionCode_; }
  public function setRegionCode($value) { $this->regionCode_ = (string)$value; }
  
  // optional string displayName = 2;

  protected $displayName_;
  public function resetDisplayName() { unset($this->displayName_); }
  public function clearDisplayName() { unset($this->displayName_); }
  public function hasDisplayName() { return isset($this->displayName_); }
  public function getDisplayName() { return $this->displayName_; }
  public function setDisplayName($value) { $this->displayName_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:Country)
}

// message FormCheckbox
class FormCheckbox {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("FormCheckbox: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->description_ = $tmp;
          $limit-=$len;
          break;
        case 2:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->checked_ = $tmp > 0 ? true : false;
          break;
        case 3:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->required_ = $tmp > 0 ? true : false;
          break;
        case 4:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->id_ = $tmp;
          $limit-=$len;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->description_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, strlen((string)$this->description_));
      fwrite($fp, (string)$this->description_);
    }
    if (!is_null($this->checked_)) {
      fwrite($fp, "\x10");
      Protobuf::write_varint($fp, (int)$this->checked_ ? 1 : 0);
    }
    if (!is_null($this->required_)) {
      fwrite($fp, "\x18");
      Protobuf::write_varint($fp, (int)$this->required_ ? 1 : 0);
    }
    if (!is_null($this->id_)) {
      fwrite($fp, "\"");
      Protobuf::write_varint($fp, strlen((string)$this->id_));
      fwrite($fp, (string)$this->id_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->description_)) {
      $l = strlen((string)$this->description_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->checked_)) {
      $size += 2;
    }
    if (!is_null($this->required_)) {
      $size += 2;
    }
    if (!is_null($this->id_)) {
      $l = strlen((string)$this->id_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('description_', $this->description_)
         . Protobuf::toString('checked_', $this->checked_)
         . Protobuf::toString('required_', $this->required_)
         . Protobuf::toString('id_', $this->id_);
  }
  
  // optional string description = 1;

  protected $description_;
  public function resetDescription() { unset($this->description_); }
  public function clearDescription() { unset($this->description_); }
  public function hasDescription() { return isset($this->description_); }
  public function getDescription() { return $this->description_; }
  public function setDescription($value) { $this->description_ = (string)$value; }
  
  // optional bool checked = 2;

  protected $checked_;
  public function resetChecked() { unset($this->checked_); }
  public function clearChecked() { unset($this->checked_); }
  public function hasChecked() { return isset($this->checked_); }
  public function getChecked() { return $this->checked_; }
  public function setChecked($value) { $this->checked_ = (bool)$value; }
  
  // optional bool required = 3;

  protected $required_;
  public function resetRequired() { unset($this->required_); }
  public function clearRequired() { unset($this->required_); }
  public function hasRequired() { return isset($this->required_); }
  public function getRequired() { return $this->required_; }
  public function setRequired($value) { $this->required_ = (bool)$value; }
  
  // optional string id = 4;

  protected $id_;
  public function resetId() { unset($this->id_); }
  public function clearId() { unset($this->id_); }
  public function hasId() { return isset($this->id_); }
  public function getId() { return $this->id_; }
  public function setId($value) { $this->id_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:FormCheckbox)
}

// message InputValidationError
class InputValidationError {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("InputValidationError: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->inputField_ = $tmp;
          
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->errorMessage_ = $tmp;
          $limit-=$len;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->inputField_)) {
      fwrite($fp, "\x08");
      Protobuf::write_varint($fp, (int)$this->inputField_);
    }
    if (!is_null($this->errorMessage_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, strlen((string)$this->errorMessage_));
      fwrite($fp, (string)$this->errorMessage_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->inputField_)) {
      $size += 1 + Protobuf::size_varint($this->inputField_);
    }
    if (!is_null($this->errorMessage_)) {
      $l = strlen((string)$this->errorMessage_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('inputField_', $this->inputField_)
         . Protobuf::toString('errorMessage_', $this->errorMessage_);
  }
  
  // optional int32 inputField = 1;

  protected $inputField_;
  public function resetInputField() { unset($this->inputField_); }
  public function clearInputField() { unset($this->inputField_); }
  public function hasInputField() { return isset($this->inputField_); }
  public function getInputField() { return $this->inputField_; }
  public function setInputField($value) { $this->inputField_ = (string)$value; }
  
  // optional string errorMessage = 2;

  protected $errorMessage_;
  public function resetErrorMessage() { unset($this->errorMessage_); }
  public function clearErrorMessage() { unset($this->errorMessage_); }
  public function hasErrorMessage() { return isset($this->errorMessage_); }
  public function getErrorMessage() { return $this->errorMessage_; }
  public function setErrorMessage($value) { $this->errorMessage_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:InputValidationError)
}

// message WebViewChallenge
class WebViewChallenge {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("WebViewChallenge: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->startUrl_ = $tmp;
          $limit-=$len;
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->targetUrlRegexp_ = $tmp;
          $limit-=$len;
          break;
        case 3:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->cancelButtonDisplayLabel_ = $tmp;
          $limit-=$len;
          break;
        case 4:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->responseTargetUrlParam_ = $tmp;
          $limit-=$len;
          break;
        case 5:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->cancelUrlRegexp_ = $tmp;
          $limit-=$len;
          break;
        case 6:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->title_ = $tmp;
          $limit-=$len;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->startUrl_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, strlen((string)$this->startUrl_));
      fwrite($fp, (string)$this->startUrl_);
    }
    if (!is_null($this->targetUrlRegexp_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, strlen((string)$this->targetUrlRegexp_));
      fwrite($fp, (string)$this->targetUrlRegexp_);
    }
    if (!is_null($this->cancelButtonDisplayLabel_)) {
      fwrite($fp, "\x1a");
      Protobuf::write_varint($fp, strlen((string)$this->cancelButtonDisplayLabel_));
      fwrite($fp, (string)$this->cancelButtonDisplayLabel_);
    }
    if (!is_null($this->responseTargetUrlParam_)) {
      fwrite($fp, "\"");
      Protobuf::write_varint($fp, strlen((string)$this->responseTargetUrlParam_));
      fwrite($fp, (string)$this->responseTargetUrlParam_);
    }
    if (!is_null($this->cancelUrlRegexp_)) {
      fwrite($fp, "*");
      Protobuf::write_varint($fp, strlen((string)$this->cancelUrlRegexp_));
      fwrite($fp, (string)$this->cancelUrlRegexp_);
    }
    if (!is_null($this->title_)) {
      fwrite($fp, "2");
      Protobuf::write_varint($fp, strlen((string)$this->title_));
      fwrite($fp, (string)$this->title_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->startUrl_)) {
      $l = strlen((string)$this->startUrl_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->targetUrlRegexp_)) {
      $l = strlen((string)$this->targetUrlRegexp_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->cancelButtonDisplayLabel_)) {
      $l = strlen((string)$this->cancelButtonDisplayLabel_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->responseTargetUrlParam_)) {
      $l = strlen((string)$this->responseTargetUrlParam_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->cancelUrlRegexp_)) {
      $l = strlen((string)$this->cancelUrlRegexp_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->title_)) {
      $l = strlen((string)$this->title_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('startUrl_', $this->startUrl_)
         . Protobuf::toString('targetUrlRegexp_', $this->targetUrlRegexp_)
         . Protobuf::toString('cancelButtonDisplayLabel_', $this->cancelButtonDisplayLabel_)
         . Protobuf::toString('responseTargetUrlParam_', $this->responseTargetUrlParam_)
         . Protobuf::toString('cancelUrlRegexp_', $this->cancelUrlRegexp_)
         . Protobuf::toString('title_', $this->title_);
  }
  
  // optional string startUrl = 1;

  protected $startUrl_;
  public function resetStartUrl() { unset($this->startUrl_); }
  public function clearStartUrl() { unset($this->startUrl_); }
  public function hasStartUrl() { return isset($this->startUrl_); }
  public function getStartUrl() { return $this->startUrl_; }
  public function setStartUrl($value) { $this->startUrl_ = (string)$value; }
  
  // optional string targetUrlRegexp = 2;

  protected $targetUrlRegexp_;
  public function resetTargetUrlRegexp() { unset($this->targetUrlRegexp_); }
  public function clearTargetUrlRegexp() { unset($this->targetUrlRegexp_); }
  public function hasTargetUrlRegexp() { return isset($this->targetUrlRegexp_); }
  public function getTargetUrlRegexp() { return $this->targetUrlRegexp_; }
  public function setTargetUrlRegexp($value) { $this->targetUrlRegexp_ = (string)$value; }
  
  // optional string cancelButtonDisplayLabel = 3;

  protected $cancelButtonDisplayLabel_;
  public function resetCancelButtonDisplayLabel() { unset($this->cancelButtonDisplayLabel_); }
  public function clearCancelButtonDisplayLabel() { unset($this->cancelButtonDisplayLabel_); }
  public function hasCancelButtonDisplayLabel() { return isset($this->cancelButtonDisplayLabel_); }
  public function getCancelButtonDisplayLabel() { return $this->cancelButtonDisplayLabel_; }
  public function setCancelButtonDisplayLabel($value) { $this->cancelButtonDisplayLabel_ = (string)$value; }
  
  // optional string responseTargetUrlParam = 4;

  protected $responseTargetUrlParam_;
  public function resetResponseTargetUrlParam() { unset($this->responseTargetUrlParam_); }
  public function clearResponseTargetUrlParam() { unset($this->responseTargetUrlParam_); }
  public function hasResponseTargetUrlParam() { return isset($this->responseTargetUrlParam_); }
  public function getResponseTargetUrlParam() { return $this->responseTargetUrlParam_; }
  public function setResponseTargetUrlParam($value) { $this->responseTargetUrlParam_ = (string)$value; }
  
  // optional string cancelUrlRegexp = 5;

  protected $cancelUrlRegexp_;
  public function resetCancelUrlRegexp() { unset($this->cancelUrlRegexp_); }
  public function clearCancelUrlRegexp() { unset($this->cancelUrlRegexp_); }
  public function hasCancelUrlRegexp() { return isset($this->cancelUrlRegexp_); }
  public function getCancelUrlRegexp() { return $this->cancelUrlRegexp_; }
  public function setCancelUrlRegexp($value) { $this->cancelUrlRegexp_ = (string)$value; }
  
  // optional string title = 6;

  protected $title_;
  public function resetTitle() { unset($this->title_); }
  public function clearTitle() { unset($this->title_); }
  public function hasTitle() { return isset($this->title_); }
  public function getTitle() { return $this->title_; }
  public function setTitle($value) { $this->title_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:WebViewChallenge)
}

// message AddCreditCardPromoOffer
class AddCreditCardPromoOffer {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("AddCreditCardPromoOffer: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->headerText_ = $tmp;
          $limit-=$len;
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->descriptionHtml_ = $tmp;
          $limit-=$len;
          break;
        case 3:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->image_ = new Image($fp, $len);
          ASSERT('$len == 0');
          break;
        case 4:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->introductoryTextHtml_ = $tmp;
          $limit-=$len;
          break;
        case 5:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->offerTitle_ = $tmp;
          $limit-=$len;
          break;
        case 6:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->noActionDescription_ = $tmp;
          $limit-=$len;
          break;
        case 7:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->termsAndConditionsHtml_ = $tmp;
          $limit-=$len;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->headerText_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, strlen((string)$this->headerText_));
      fwrite($fp, (string)$this->headerText_);
    }
    if (!is_null($this->descriptionHtml_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, strlen((string)$this->descriptionHtml_));
      fwrite($fp, (string)$this->descriptionHtml_);
    }
    if (!is_null($this->image_)) {
      fwrite($fp, "\x1a");
      Protobuf::write_varint($fp, $this->image_->size()); // message
      $this->image_->write($fp);
    }
    if (!is_null($this->introductoryTextHtml_)) {
      fwrite($fp, "\"");
      Protobuf::write_varint($fp, strlen((string)$this->introductoryTextHtml_));
      fwrite($fp, (string)$this->introductoryTextHtml_);
    }
    if (!is_null($this->offerTitle_)) {
      fwrite($fp, "*");
      Protobuf::write_varint($fp, strlen((string)$this->offerTitle_));
      fwrite($fp, (string)$this->offerTitle_);
    }
    if (!is_null($this->noActionDescription_)) {
      fwrite($fp, "2");
      Protobuf::write_varint($fp, strlen((string)$this->noActionDescription_));
      fwrite($fp, (string)$this->noActionDescription_);
    }
    if (!is_null($this->termsAndConditionsHtml_)) {
      fwrite($fp, ":");
      Protobuf::write_varint($fp, strlen((string)$this->termsAndConditionsHtml_));
      fwrite($fp, (string)$this->termsAndConditionsHtml_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->headerText_)) {
      $l = strlen((string)$this->headerText_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->descriptionHtml_)) {
      $l = strlen((string)$this->descriptionHtml_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->image_)) {
      $l = $this->image_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->introductoryTextHtml_)) {
      $l = strlen((string)$this->introductoryTextHtml_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->offerTitle_)) {
      $l = strlen((string)$this->offerTitle_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->noActionDescription_)) {
      $l = strlen((string)$this->noActionDescription_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->termsAndConditionsHtml_)) {
      $l = strlen((string)$this->termsAndConditionsHtml_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('headerText_', $this->headerText_)
         . Protobuf::toString('descriptionHtml_', $this->descriptionHtml_)
         . Protobuf::toString('image_', $this->image_)
         . Protobuf::toString('introductoryTextHtml_', $this->introductoryTextHtml_)
         . Protobuf::toString('offerTitle_', $this->offerTitle_)
         . Protobuf::toString('noActionDescription_', $this->noActionDescription_)
         . Protobuf::toString('termsAndConditionsHtml_', $this->termsAndConditionsHtml_);
  }
  
  // optional string headerText = 1;

  protected $headerText_;
  public function resetHeaderText() { unset($this->headerText_); }
  public function clearHeaderText() { unset($this->headerText_); }
  public function hasHeaderText() { return isset($this->headerText_); }
  public function getHeaderText() { return $this->headerText_; }
  public function setHeaderText($value) { $this->headerText_ = (string)$value; }
  
  // optional string descriptionHtml = 2;

  protected $descriptionHtml_;
  public function resetDescriptionHtml() { unset($this->descriptionHtml_); }
  public function clearDescriptionHtml() { unset($this->descriptionHtml_); }
  public function hasDescriptionHtml() { return isset($this->descriptionHtml_); }
  public function getDescriptionHtml() { return $this->descriptionHtml_; }
  public function setDescriptionHtml($value) { $this->descriptionHtml_ = (string)$value; }
  
  // optional .Image image = 3;

  protected $image_;
  public function resetImage() { unset($this->image_); }
  public function clearImage() { unset($this->image_); }
  public function hasImage() { return isset($this->image_); }
  public function getImage() { return $this->image_; }
  public function setImage(Image $value) { $this->image_ = $value; }
  
  // optional string introductoryTextHtml = 4;

  protected $introductoryTextHtml_;
  public function resetIntroductoryTextHtml() { unset($this->introductoryTextHtml_); }
  public function clearIntroductoryTextHtml() { unset($this->introductoryTextHtml_); }
  public function hasIntroductoryTextHtml() { return isset($this->introductoryTextHtml_); }
  public function getIntroductoryTextHtml() { return $this->introductoryTextHtml_; }
  public function setIntroductoryTextHtml($value) { $this->introductoryTextHtml_ = (string)$value; }
  
  // optional string offerTitle = 5;

  protected $offerTitle_;
  public function resetOfferTitle() { unset($this->offerTitle_); }
  public function clearOfferTitle() { unset($this->offerTitle_); }
  public function hasOfferTitle() { return isset($this->offerTitle_); }
  public function getOfferTitle() { return $this->offerTitle_; }
  public function setOfferTitle($value) { $this->offerTitle_ = (string)$value; }
  
  // optional string noActionDescription = 6;

  protected $noActionDescription_;
  public function resetNoActionDescription() { unset($this->noActionDescription_); }
  public function clearNoActionDescription() { unset($this->noActionDescription_); }
  public function hasNoActionDescription() { return isset($this->noActionDescription_); }
  public function getNoActionDescription() { return $this->noActionDescription_; }
  public function setNoActionDescription($value) { $this->noActionDescription_ = (string)$value; }
  
  // optional string termsAndConditionsHtml = 7;

  protected $termsAndConditionsHtml_;
  public function resetTermsAndConditionsHtml() { unset($this->termsAndConditionsHtml_); }
  public function clearTermsAndConditionsHtml() { unset($this->termsAndConditionsHtml_); }
  public function hasTermsAndConditionsHtml() { return isset($this->termsAndConditionsHtml_); }
  public function getTermsAndConditionsHtml() { return $this->termsAndConditionsHtml_; }
  public function setTermsAndConditionsHtml($value) { $this->termsAndConditionsHtml_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:AddCreditCardPromoOffer)
}

// message AvailablePromoOffer
class AvailablePromoOffer {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("AvailablePromoOffer: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->addCreditCardOffer_ = new AddCreditCardPromoOffer($fp, $len);
          ASSERT('$len == 0');
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->addCreditCardOffer_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, $this->addCreditCardOffer_->size()); // message
      $this->addCreditCardOffer_->write($fp);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->addCreditCardOffer_)) {
      $l = $this->addCreditCardOffer_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('addCreditCardOffer_', $this->addCreditCardOffer_);
  }
  
  // optional .AddCreditCardPromoOffer addCreditCardOffer = 1;

  protected $addCreditCardOffer_;
  public function resetAddCreditCardOffer() { unset($this->addCreditCardOffer_); }
  public function clearAddCreditCardOffer() { unset($this->addCreditCardOffer_); }
  public function hasAddCreditCardOffer() { return isset($this->addCreditCardOffer_); }
  public function getAddCreditCardOffer() { return $this->addCreditCardOffer_; }
  public function setAddCreditCardOffer(AddCreditCardPromoOffer $value) { $this->addCreditCardOffer_ = $value; }
  
  // @@protoc_insertion_point(class_scope:AvailablePromoOffer)
}

// message CheckPromoOfferResponse
class CheckPromoOfferResponse {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("CheckPromoOfferResponse: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->availableOffer_[] = new AvailablePromoOffer($fp, $len);
          ASSERT('$len == 0');
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->redeemedOffer_ = new RedeemedPromoOffer($fp, $len);
          ASSERT('$len == 0');
          break;
        case 3:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->checkoutTokenRequired_ = $tmp > 0 ? true : false;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->availableOffer_))
      foreach($this->availableOffer_ as $v) {
        fwrite($fp, "\x0a");
        Protobuf::write_varint($fp, $v->size()); // message
        $v->write($fp);
      }
    if (!is_null($this->redeemedOffer_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, $this->redeemedOffer_->size()); // message
      $this->redeemedOffer_->write($fp);
    }
    if (!is_null($this->checkoutTokenRequired_)) {
      fwrite($fp, "\x18");
      Protobuf::write_varint($fp, (int)$this->checkoutTokenRequired_ ? 1 : 0);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->availableOffer_))
      foreach($this->availableOffer_ as $v) {
        $l = $v->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
    if (!is_null($this->redeemedOffer_)) {
      $l = $this->redeemedOffer_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->checkoutTokenRequired_)) {
      $size += 2;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('availableOffer_', $this->availableOffer_)
         . Protobuf::toString('redeemedOffer_', $this->redeemedOffer_)
         . Protobuf::toString('checkoutTokenRequired_', $this->checkoutTokenRequired_);
  }
  
  // repeated .AvailablePromoOffer availableOffer = 1;

  protected $availableOffer_ = array();
  public function clearAvailableOffer() { $this->availableOffer_ = array(); }
  public function getAvailableOfferCount() { return count($this->availableOffer_); }
  public function hasAvailableOffer() { return (count($this->availableOffer_) > 0); }
  public function indexOfAvailableOffer($value) { return array_search($value,$this->availableOffer_);}
  public function removeAvailableOffer($index) { unset($this->availableOffer_[$index]); }
  public function removeValAvailableOffer($value) { $idx = array_search($value,$this->availableOffer_); if($idx !== FALSE){unset($this->availableOffer_[$idx]); }}
  public function removeValsAvailableOffer($values) { foreach($values as $value){$idx = array_search($value,$this->availableOffer_); if($idx !== FALSE){unset($this->availableOffer_[$idx]); }}}
  public function pushAvailableOffer($newvar) { return array_push($this->availableOffer_,$newvar); }
  public function popAvailableOffer() { return array_pop($this->availableOffer_); }
  public function shiftAvailableOffer() { return array_shift($this->availableOffer_); }
  public function unshiftAvailableOffer($newvar) { return array_unshift($this->availableOffer_,$newvar); }
  public function getAvailableOffer($index) { return $this->availableOffer_[$index]; }
  public function getAvailableOfferArray() { return $this->availableOffer_; }
  public function setAvailableOffer($index, $value) {$this->availableOffer_[$index] = $value;	}
  public function addAvailableOffer($value) { $this->availableOffer_[] = $value; }
  public function addAllAvailableOffer(array $values) { foreach($values as $value) {$this->availableOffer_[] = $value;} }
  
  // optional .RedeemedPromoOffer redeemedOffer = 2;

  protected $redeemedOffer_;
  public function resetRedeemedOffer() { unset($this->redeemedOffer_); }
  public function clearRedeemedOffer() { unset($this->redeemedOffer_); }
  public function hasRedeemedOffer() { return isset($this->redeemedOffer_); }
  public function getRedeemedOffer() { return $this->redeemedOffer_; }
  public function setRedeemedOffer(RedeemedPromoOffer $value) { $this->redeemedOffer_ = $value; }
  
  // optional bool checkoutTokenRequired = 3;

  protected $checkoutTokenRequired_;
  public function resetCheckoutTokenRequired() { unset($this->checkoutTokenRequired_); }
  public function clearCheckoutTokenRequired() { unset($this->checkoutTokenRequired_); }
  public function hasCheckoutTokenRequired() { return isset($this->checkoutTokenRequired_); }
  public function getCheckoutTokenRequired() { return $this->checkoutTokenRequired_; }
  public function setCheckoutTokenRequired($value) { $this->checkoutTokenRequired_ = (bool)$value; }
  
  // @@protoc_insertion_point(class_scope:CheckPromoOfferResponse)
}

// message RedeemedPromoOffer
class RedeemedPromoOffer {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("RedeemedPromoOffer: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->headerText_ = $tmp;
          $limit-=$len;
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->descriptionHtml_ = $tmp;
          $limit-=$len;
          break;
        case 3:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->image_ = new Image($fp, $len);
          ASSERT('$len == 0');
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->headerText_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, strlen((string)$this->headerText_));
      fwrite($fp, (string)$this->headerText_);
    }
    if (!is_null($this->descriptionHtml_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, strlen((string)$this->descriptionHtml_));
      fwrite($fp, (string)$this->descriptionHtml_);
    }
    if (!is_null($this->image_)) {
      fwrite($fp, "\x1a");
      Protobuf::write_varint($fp, $this->image_->size()); // message
      $this->image_->write($fp);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->headerText_)) {
      $l = strlen((string)$this->headerText_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->descriptionHtml_)) {
      $l = strlen((string)$this->descriptionHtml_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->image_)) {
      $l = $this->image_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('headerText_', $this->headerText_)
         . Protobuf::toString('descriptionHtml_', $this->descriptionHtml_)
         . Protobuf::toString('image_', $this->image_);
  }
  
  // optional string headerText = 1;

  protected $headerText_;
  public function resetHeaderText() { unset($this->headerText_); }
  public function clearHeaderText() { unset($this->headerText_); }
  public function hasHeaderText() { return isset($this->headerText_); }
  public function getHeaderText() { return $this->headerText_; }
  public function setHeaderText($value) { $this->headerText_ = (string)$value; }
  
  // optional string descriptionHtml = 2;

  protected $descriptionHtml_;
  public function resetDescriptionHtml() { unset($this->descriptionHtml_); }
  public function clearDescriptionHtml() { unset($this->descriptionHtml_); }
  public function hasDescriptionHtml() { return isset($this->descriptionHtml_); }
  public function getDescriptionHtml() { return $this->descriptionHtml_; }
  public function setDescriptionHtml($value) { $this->descriptionHtml_ = (string)$value; }
  
  // optional .Image image = 3;

  protected $image_;
  public function resetImage() { unset($this->image_); }
  public function clearImage() { unset($this->image_); }
  public function hasImage() { return isset($this->image_); }
  public function getImage() { return $this->image_; }
  public function setImage(Image $value) { $this->image_ = $value; }
  
  // @@protoc_insertion_point(class_scope:RedeemedPromoOffer)
}

// message Docid
class Docid {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("Docid: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->backendDocid_ = $tmp;
          $limit-=$len;
          break;
        case 2:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->type_ = $tmp;
          
          break;
        case 3:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->backend_ = $tmp;
          
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->backendDocid_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, strlen((string)$this->backendDocid_));
      fwrite($fp, (string)$this->backendDocid_);
    }
    if (!is_null($this->type_)) {
      fwrite($fp, "\x10");
      Protobuf::write_varint($fp, (int)$this->type_);
    }
    if (!is_null($this->backend_)) {
      fwrite($fp, "\x18");
      Protobuf::write_varint($fp, (int)$this->backend_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->backendDocid_)) {
      $l = strlen((string)$this->backendDocid_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->type_)) {
      $size += 1 + Protobuf::size_varint($this->type_);
    }
    if (!is_null($this->backend_)) {
      $size += 1 + Protobuf::size_varint($this->backend_);
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('backendDocid_', $this->backendDocid_)
         . Protobuf::toString('type_', $this->type_)
         . Protobuf::toString('backend_', $this->backend_);
  }
  
  // optional string backendDocid = 1;

  protected $backendDocid_;
  public function resetBackendDocid() { unset($this->backendDocid_); }
  public function clearBackendDocid() { unset($this->backendDocid_); }
  public function hasBackendDocid() { return isset($this->backendDocid_); }
  public function getBackendDocid() { return $this->backendDocid_; }
  public function setBackendDocid($value) { $this->backendDocid_ = (string)$value; }
  
  // optional int32 type = 2;

  protected $type_;
  public function resetType() { unset($this->type_); }
  public function clearType() { unset($this->type_); }
  public function hasType() { return isset($this->type_); }
  public function getType() { return $this->type_; }
  public function setType($value) { $this->type_ = (string)$value; }
  
  // optional int32 backend = 3;

  protected $backend_;
  public function resetBackend() { unset($this->backend_); }
  public function clearBackend() { unset($this->backend_); }
  public function hasBackend() { return isset($this->backend_); }
  public function getBackend() { return $this->backend_; }
  public function setBackend($value) { $this->backend_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:Docid)
}

// message Install
class Install {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("Install: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 1');
          $tmp = Protobuf::read_uint64($fp);
          if ($tmp === false)
            throw new Exception('Protobuf::read_unint64 returned false');
          $this->androidId_ = $tmp;
          $limit-=8;
          break;
        case 2:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->version_ = $tmp;
          
          break;
        case 3:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->bundled_ = $tmp > 0 ? true : false;
          break;
        case 4:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->pending_ = $tmp > 0 ? true : false;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->androidId_)) {
      fwrite($fp, "\x09");
      Protobuf::write_uint64($fp, (int)$this->androidId_);
    }
    if (!is_null($this->version_)) {
      fwrite($fp, "\x10");
      Protobuf::write_varint($fp, (int)$this->version_);
    }
    if (!is_null($this->bundled_)) {
      fwrite($fp, "\x18");
      Protobuf::write_varint($fp, (int)$this->bundled_ ? 1 : 0);
    }
    if (!is_null($this->pending_)) {
      fwrite($fp, " ");
      Protobuf::write_varint($fp, (int)$this->pending_ ? 1 : 0);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->androidId_)) {
      $size += 9;
    }
    if (!is_null($this->version_)) {
      $size += 1 + Protobuf::size_varint($this->version_);
    }
    if (!is_null($this->bundled_)) {
      $size += 2;
    }
    if (!is_null($this->pending_)) {
      $size += 2;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('androidId_', $this->androidId_)
         . Protobuf::toString('version_', $this->version_)
         . Protobuf::toString('bundled_', $this->bundled_)
         . Protobuf::toString('pending_', $this->pending_);
  }
  
  // optional fixed64 androidId = 1;

  protected $androidId_;
  public function resetAndroidId() { unset($this->androidId_); }
  public function clearAndroidId() { unset($this->androidId_); }
  public function hasAndroidId() { return isset($this->androidId_); }
  public function getAndroidId() { return $this->androidId_; }
  public function setAndroidId($value) { $this->androidId_ = (int)$value; }
  
  // optional int32 version = 2;

  protected $version_;
  public function resetVersion() { unset($this->version_); }
  public function clearVersion() { unset($this->version_); }
  public function hasVersion() { return isset($this->version_); }
  public function getVersion() { return $this->version_; }
  public function setVersion($value) { $this->version_ = (string)$value; }
  
  // optional bool bundled = 3;

  protected $bundled_;
  public function resetBundled() { unset($this->bundled_); }
  public function clearBundled() { unset($this->bundled_); }
  public function hasBundled() { return isset($this->bundled_); }
  public function getBundled() { return $this->bundled_; }
  public function setBundled($value) { $this->bundled_ = (bool)$value; }
  
  // optional bool pending = 4;

  protected $pending_;
  public function resetPending() { unset($this->pending_); }
  public function clearPending() { unset($this->pending_); }
  public function hasPending() { return isset($this->pending_); }
  public function getPending() { return $this->pending_; }
  public function setPending($value) { $this->pending_ = (bool)$value; }
  
  // @@protoc_insertion_point(class_scope:Install)
}

// message Offer
class Offer {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("Offer: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->micros_ = $tmp;
          
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->currencyCode_ = $tmp;
          $limit-=$len;
          break;
        case 3:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->formattedAmount_ = $tmp;
          $limit-=$len;
          break;
        case 4:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->convertedPrice_[] = new Offer($fp, $len);
          ASSERT('$len == 0');
          break;
        case 5:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->checkoutFlowRequired_ = $tmp > 0 ? true : false;
          break;
        case 6:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->fullPriceMicros_ = $tmp;
          
          break;
        case 7:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->formattedFullAmount_ = $tmp;
          $limit-=$len;
          break;
        case 8:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->offerType_ = $tmp;
          
          break;
        case 9:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->rentalTerms_ = new RentalTerms($fp, $len);
          ASSERT('$len == 0');
          break;
        case 10:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->onSaleDate_ = $tmp;
          
          break;
        case 11:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->promotionLabel_[] = $tmp;
          $limit-=$len;
          break;
        case 12:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->subscriptionTerms_ = new SubscriptionTerms($fp, $len);
          ASSERT('$len == 0');
          break;
        case 13:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->formattedName_ = $tmp;
          $limit-=$len;
          break;
        case 14:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->formattedDescription_ = $tmp;
          $limit-=$len;
          break;
        case 15:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->preorder_ = $tmp > 0 ? true : false;
          break;
        case 16:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->onSaleDateDisplayTimeZoneOffsetMsec_ = $tmp;
          
          break;
        case 17:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->licensedOfferType_ = $tmp;
          
          break;
        case 18:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->subscriptionContentTerms_ = new SubscriptionContentTerms($fp, $len);
          ASSERT('$len == 0');
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->micros_)) {
      fwrite($fp, "\x08");
      Protobuf::write_varint($fp, (int)$this->micros_);
    }
    if (!is_null($this->currencyCode_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, strlen((string)$this->currencyCode_));
      fwrite($fp, (string)$this->currencyCode_);
    }
    if (!is_null($this->formattedAmount_)) {
      fwrite($fp, "\x1a");
      Protobuf::write_varint($fp, strlen((string)$this->formattedAmount_));
      fwrite($fp, (string)$this->formattedAmount_);
    }
    if (!is_null($this->convertedPrice_))
      foreach($this->convertedPrice_ as $v) {
        fwrite($fp, "\"");
        Protobuf::write_varint($fp, $v->size()); // message
        $v->write($fp);
      }
    if (!is_null($this->checkoutFlowRequired_)) {
      fwrite($fp, "(");
      Protobuf::write_varint($fp, (int)$this->checkoutFlowRequired_ ? 1 : 0);
    }
    if (!is_null($this->fullPriceMicros_)) {
      fwrite($fp, "0");
      Protobuf::write_varint($fp, (int)$this->fullPriceMicros_);
    }
    if (!is_null($this->formattedFullAmount_)) {
      fwrite($fp, ":");
      Protobuf::write_varint($fp, strlen((string)$this->formattedFullAmount_));
      fwrite($fp, (string)$this->formattedFullAmount_);
    }
    if (!is_null($this->offerType_)) {
      fwrite($fp, "@");
      Protobuf::write_varint($fp, (int)$this->offerType_);
    }
    if (!is_null($this->rentalTerms_)) {
      fwrite($fp, "J");
      Protobuf::write_varint($fp, $this->rentalTerms_->size()); // message
      $this->rentalTerms_->write($fp);
    }
    if (!is_null($this->onSaleDate_)) {
      fwrite($fp, "P");
      Protobuf::write_varint($fp, (int)$this->onSaleDate_);
    }
    if (!is_null($this->promotionLabel_))
      foreach($this->promotionLabel_ as $v) {
        fwrite($fp, "Z");
        Protobuf::write_varint($fp, strlen((string)$v));
        fwrite($fp, (string)$v);
      }
    if (!is_null($this->subscriptionTerms_)) {
      fwrite($fp, "b");
      Protobuf::write_varint($fp, $this->subscriptionTerms_->size()); // message
      $this->subscriptionTerms_->write($fp);
    }
    if (!is_null($this->formattedName_)) {
      fwrite($fp, "j");
      Protobuf::write_varint($fp, strlen((string)$this->formattedName_));
      fwrite($fp, (string)$this->formattedName_);
    }
    if (!is_null($this->formattedDescription_)) {
      fwrite($fp, "r");
      Protobuf::write_varint($fp, strlen((string)$this->formattedDescription_));
      fwrite($fp, (string)$this->formattedDescription_);
    }
    if (!is_null($this->preorder_)) {
      fwrite($fp, "x");
      Protobuf::write_varint($fp, (int)$this->preorder_ ? 1 : 0);
    }
    if (!is_null($this->onSaleDateDisplayTimeZoneOffsetMsec_)) {
      fwrite($fp, "\x80\x01");
      Protobuf::write_varint($fp, (int)$this->onSaleDateDisplayTimeZoneOffsetMsec_);
    }
    if (!is_null($this->licensedOfferType_)) {
      fwrite($fp, "\x88\x01");
      Protobuf::write_varint($fp, (int)$this->licensedOfferType_);
    }
    if (!is_null($this->subscriptionContentTerms_)) {
      fwrite($fp, "\x92\x01");
      Protobuf::write_varint($fp, $this->subscriptionContentTerms_->size()); // message
      $this->subscriptionContentTerms_->write($fp);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->micros_)) {
      $size += 1 + Protobuf::size_varint($this->micros_);
    }
    if (!is_null($this->currencyCode_)) {
      $l = strlen((string)$this->currencyCode_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->formattedAmount_)) {
      $l = strlen((string)$this->formattedAmount_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->convertedPrice_))
      foreach($this->convertedPrice_ as $v) {
        $l = $v->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
    if (!is_null($this->checkoutFlowRequired_)) {
      $size += 2;
    }
    if (!is_null($this->fullPriceMicros_)) {
      $size += 1 + Protobuf::size_varint($this->fullPriceMicros_);
    }
    if (!is_null($this->formattedFullAmount_)) {
      $l = strlen((string)$this->formattedFullAmount_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->offerType_)) {
      $size += 1 + Protobuf::size_varint($this->offerType_);
    }
    if (!is_null($this->rentalTerms_)) {
      $l = $this->rentalTerms_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->onSaleDate_)) {
      $size += 1 + Protobuf::size_varint($this->onSaleDate_);
    }
    if (!is_null($this->promotionLabel_))
      foreach($this->promotionLabel_ as $v) {
        $l = strlen((string)$v);
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
    if (!is_null($this->subscriptionTerms_)) {
      $l = $this->subscriptionTerms_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->formattedName_)) {
      $l = strlen((string)$this->formattedName_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->formattedDescription_)) {
      $l = strlen((string)$this->formattedDescription_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->preorder_)) {
      $size += 2;
    }
    if (!is_null($this->onSaleDateDisplayTimeZoneOffsetMsec_)) {
      $size += 2 + Protobuf::size_varint($this->onSaleDateDisplayTimeZoneOffsetMsec_);
    }
    if (!is_null($this->licensedOfferType_)) {
      $size += 2 + Protobuf::size_varint($this->licensedOfferType_);
    }
    if (!is_null($this->subscriptionContentTerms_)) {
      $l = $this->subscriptionContentTerms_->size();
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('micros_', $this->micros_)
         . Protobuf::toString('currencyCode_', $this->currencyCode_)
         . Protobuf::toString('formattedAmount_', $this->formattedAmount_)
         . Protobuf::toString('convertedPrice_', $this->convertedPrice_)
         . Protobuf::toString('checkoutFlowRequired_', $this->checkoutFlowRequired_)
         . Protobuf::toString('fullPriceMicros_', $this->fullPriceMicros_)
         . Protobuf::toString('formattedFullAmount_', $this->formattedFullAmount_)
         . Protobuf::toString('offerType_', $this->offerType_)
         . Protobuf::toString('rentalTerms_', $this->rentalTerms_)
         . Protobuf::toString('onSaleDate_', $this->onSaleDate_)
         . Protobuf::toString('promotionLabel_', $this->promotionLabel_)
         . Protobuf::toString('subscriptionTerms_', $this->subscriptionTerms_)
         . Protobuf::toString('formattedName_', $this->formattedName_)
         . Protobuf::toString('formattedDescription_', $this->formattedDescription_)
         . Protobuf::toString('preorder_', $this->preorder_)
         . Protobuf::toString('onSaleDateDisplayTimeZoneOffsetMsec_', $this->onSaleDateDisplayTimeZoneOffsetMsec_)
         . Protobuf::toString('licensedOfferType_', $this->licensedOfferType_)
         . Protobuf::toString('subscriptionContentTerms_', $this->subscriptionContentTerms_);
  }
  
  // optional int64 micros = 1;

  protected $micros_;
  public function resetMicros() { unset($this->micros_); }
  public function clearMicros() { unset($this->micros_); }
  public function hasMicros() { return isset($this->micros_); }
  public function getMicros() { return $this->micros_; }
  public function setMicros($value) { $this->micros_ = (string)$value; }
  
  // optional string currencyCode = 2;

  protected $currencyCode_;
  public function resetCurrencyCode() { unset($this->currencyCode_); }
  public function clearCurrencyCode() { unset($this->currencyCode_); }
  public function hasCurrencyCode() { return isset($this->currencyCode_); }
  public function getCurrencyCode() { return $this->currencyCode_; }
  public function setCurrencyCode($value) { $this->currencyCode_ = (string)$value; }
  
  // optional string formattedAmount = 3;

  protected $formattedAmount_;
  public function resetFormattedAmount() { unset($this->formattedAmount_); }
  public function clearFormattedAmount() { unset($this->formattedAmount_); }
  public function hasFormattedAmount() { return isset($this->formattedAmount_); }
  public function getFormattedAmount() { return $this->formattedAmount_; }
  public function setFormattedAmount($value) { $this->formattedAmount_ = (string)$value; }
  
  // repeated .Offer convertedPrice = 4;

  protected $convertedPrice_ = array();
  public function clearConvertedPrice() { $this->convertedPrice_ = array(); }
  public function getConvertedPriceCount() { return count($this->convertedPrice_); }
  public function hasConvertedPrice() { return (count($this->convertedPrice_) > 0); }
  public function indexOfConvertedPrice($value) { return array_search($value,$this->convertedPrice_);}
  public function removeConvertedPrice($index) { unset($this->convertedPrice_[$index]); }
  public function removeValConvertedPrice($value) { $idx = array_search($value,$this->convertedPrice_); if($idx !== FALSE){unset($this->convertedPrice_[$idx]); }}
  public function removeValsConvertedPrice($values) { foreach($values as $value){$idx = array_search($value,$this->convertedPrice_); if($idx !== FALSE){unset($this->convertedPrice_[$idx]); }}}
  public function pushConvertedPrice($newvar) { return array_push($this->convertedPrice_,$newvar); }
  public function popConvertedPrice() { return array_pop($this->convertedPrice_); }
  public function shiftConvertedPrice() { return array_shift($this->convertedPrice_); }
  public function unshiftConvertedPrice($newvar) { return array_unshift($this->convertedPrice_,$newvar); }
  public function getConvertedPrice($index) { return $this->convertedPrice_[$index]; }
  public function getConvertedPriceArray() { return $this->convertedPrice_; }
  public function setConvertedPrice($index, $value) {$this->convertedPrice_[$index] = $value;	}
  public function addConvertedPrice($value) { $this->convertedPrice_[] = $value; }
  public function addAllConvertedPrice(array $values) { foreach($values as $value) {$this->convertedPrice_[] = $value;} }
  
  // optional bool checkoutFlowRequired = 5;

  protected $checkoutFlowRequired_;
  public function resetCheckoutFlowRequired() { unset($this->checkoutFlowRequired_); }
  public function clearCheckoutFlowRequired() { unset($this->checkoutFlowRequired_); }
  public function hasCheckoutFlowRequired() { return isset($this->checkoutFlowRequired_); }
  public function getCheckoutFlowRequired() { return $this->checkoutFlowRequired_; }
  public function setCheckoutFlowRequired($value) { $this->checkoutFlowRequired_ = (bool)$value; }
  
  // optional int64 fullPriceMicros = 6;

  protected $fullPriceMicros_;
  public function resetFullPriceMicros() { unset($this->fullPriceMicros_); }
  public function clearFullPriceMicros() { unset($this->fullPriceMicros_); }
  public function hasFullPriceMicros() { return isset($this->fullPriceMicros_); }
  public function getFullPriceMicros() { return $this->fullPriceMicros_; }
  public function setFullPriceMicros($value) { $this->fullPriceMicros_ = (string)$value; }
  
  // optional string formattedFullAmount = 7;

  protected $formattedFullAmount_;
  public function resetFormattedFullAmount() { unset($this->formattedFullAmount_); }
  public function clearFormattedFullAmount() { unset($this->formattedFullAmount_); }
  public function hasFormattedFullAmount() { return isset($this->formattedFullAmount_); }
  public function getFormattedFullAmount() { return $this->formattedFullAmount_; }
  public function setFormattedFullAmount($value) { $this->formattedFullAmount_ = (string)$value; }
  
  // optional int32 offerType = 8;

  protected $offerType_;
  public function resetOfferType() { unset($this->offerType_); }
  public function clearOfferType() { unset($this->offerType_); }
  public function hasOfferType() { return isset($this->offerType_); }
  public function getOfferType() { return $this->offerType_; }
  public function setOfferType($value) { $this->offerType_ = (string)$value; }
  
  // optional .RentalTerms rentalTerms = 9;

  protected $rentalTerms_;
  public function resetRentalTerms() { unset($this->rentalTerms_); }
  public function clearRentalTerms() { unset($this->rentalTerms_); }
  public function hasRentalTerms() { return isset($this->rentalTerms_); }
  public function getRentalTerms() { return $this->rentalTerms_; }
  public function setRentalTerms(RentalTerms $value) { $this->rentalTerms_ = $value; }
  
  // optional int64 onSaleDate = 10;

  protected $onSaleDate_;
  public function resetOnSaleDate() { unset($this->onSaleDate_); }
  public function clearOnSaleDate() { unset($this->onSaleDate_); }
  public function hasOnSaleDate() { return isset($this->onSaleDate_); }
  public function getOnSaleDate() { return $this->onSaleDate_; }
  public function setOnSaleDate($value) { $this->onSaleDate_ = (string)$value; }
  
  // repeated string promotionLabel = 11;

  protected $promotionLabel_ = array();
  public function clearPromotionLabel() { $this->promotionLabel_ = array(); }
  public function getPromotionLabelCount() { return count($this->promotionLabel_); }
  public function hasPromotionLabel() { return (count($this->promotionLabel_) > 0); }
  public function indexOfPromotionLabel($value) { return array_search($value,$this->promotionLabel_);}
  public function removePromotionLabel($index) { unset($this->promotionLabel_[$index]); }
  public function removeValPromotionLabel($value) { $idx = array_search($value,$this->promotionLabel_); if($idx !== FALSE){unset($this->promotionLabel_[$idx]); }}
  public function removeValsPromotionLabel($values) { foreach($values as $value){$idx = array_search($value,$this->promotionLabel_); if($idx !== FALSE){unset($this->promotionLabel_[$idx]); }}}
  public function pushPromotionLabel($newvar) { return array_push($this->promotionLabel_,(string)$newvar); }
  public function popPromotionLabel() { return array_pop($this->promotionLabel_); }
  public function shiftPromotionLabel() { return array_shift($this->promotionLabel_); }
  public function unshiftPromotionLabel($newvar) { return array_unshift($this->promotionLabel_,(string)$newvar); }
  public function getPromotionLabel($index) { return $this->promotionLabel_[$index]; }
  public function getPromotionLabelArray() { return $this->promotionLabel_; }
  public function setPromotionLabel($index, $value) {$this->promotionLabel_[$index] = (string)$value;	}
  public function addPromotionLabel($value) { $this->promotionLabel_[] = (string)$value; }
  public function addAllPromotionLabel(array $values) { foreach($values as $value) {$this->promotionLabel_[] = (string)$value;} }
  
  // optional .SubscriptionTerms subscriptionTerms = 12;

  protected $subscriptionTerms_;
  public function resetSubscriptionTerms() { unset($this->subscriptionTerms_); }
  public function clearSubscriptionTerms() { unset($this->subscriptionTerms_); }
  public function hasSubscriptionTerms() { return isset($this->subscriptionTerms_); }
  public function getSubscriptionTerms() { return $this->subscriptionTerms_; }
  public function setSubscriptionTerms(SubscriptionTerms $value) { $this->subscriptionTerms_ = $value; }
  
  // optional string formattedName = 13;

  protected $formattedName_;
  public function resetFormattedName() { unset($this->formattedName_); }
  public function clearFormattedName() { unset($this->formattedName_); }
  public function hasFormattedName() { return isset($this->formattedName_); }
  public function getFormattedName() { return $this->formattedName_; }
  public function setFormattedName($value) { $this->formattedName_ = (string)$value; }
  
  // optional string formattedDescription = 14;

  protected $formattedDescription_;
  public function resetFormattedDescription() { unset($this->formattedDescription_); }
  public function clearFormattedDescription() { unset($this->formattedDescription_); }
  public function hasFormattedDescription() { return isset($this->formattedDescription_); }
  public function getFormattedDescription() { return $this->formattedDescription_; }
  public function setFormattedDescription($value) { $this->formattedDescription_ = (string)$value; }
  
  // optional bool preorder = 15;

  protected $preorder_;
  public function resetPreorder() { unset($this->preorder_); }
  public function clearPreorder() { unset($this->preorder_); }
  public function hasPreorder() { return isset($this->preorder_); }
  public function getPreorder() { return $this->preorder_; }
  public function setPreorder($value) { $this->preorder_ = (bool)$value; }
  
  // optional int32 onSaleDateDisplayTimeZoneOffsetMsec = 16;

  protected $onSaleDateDisplayTimeZoneOffsetMsec_;
  public function resetOnSaleDateDisplayTimeZoneOffsetMsec() { unset($this->onSaleDateDisplayTimeZoneOffsetMsec_); }
  public function clearOnSaleDateDisplayTimeZoneOffsetMsec() { unset($this->onSaleDateDisplayTimeZoneOffsetMsec_); }
  public function hasOnSaleDateDisplayTimeZoneOffsetMsec() { return isset($this->onSaleDateDisplayTimeZoneOffsetMsec_); }
  public function getOnSaleDateDisplayTimeZoneOffsetMsec() { return $this->onSaleDateDisplayTimeZoneOffsetMsec_; }
  public function setOnSaleDateDisplayTimeZoneOffsetMsec($value) { $this->onSaleDateDisplayTimeZoneOffsetMsec_ = (string)$value; }
  
  // optional int32 licensedOfferType = 17;

  protected $licensedOfferType_;
  public function resetLicensedOfferType() { unset($this->licensedOfferType_); }
  public function clearLicensedOfferType() { unset($this->licensedOfferType_); }
  public function hasLicensedOfferType() { return isset($this->licensedOfferType_); }
  public function getLicensedOfferType() { return $this->licensedOfferType_; }
  public function setLicensedOfferType($value) { $this->licensedOfferType_ = (string)$value; }
  
  // optional .SubscriptionContentTerms subscriptionContentTerms = 18;

  protected $subscriptionContentTerms_;
  public function resetSubscriptionContentTerms() { unset($this->subscriptionContentTerms_); }
  public function clearSubscriptionContentTerms() { unset($this->subscriptionContentTerms_); }
  public function hasSubscriptionContentTerms() { return isset($this->subscriptionContentTerms_); }
  public function getSubscriptionContentTerms() { return $this->subscriptionContentTerms_; }
  public function setSubscriptionContentTerms(SubscriptionContentTerms $value) { $this->subscriptionContentTerms_ = $value; }
  
  // @@protoc_insertion_point(class_scope:Offer)
}

// message RentalTerms
class RentalTerms {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("RentalTerms: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->deprecatedGrantPeriodSeconds_ = $tmp;
          
          break;
        case 2:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->deprecatedActivatePeriodSeconds_ = $tmp;
          
          break;
        case 3:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->grantPeriod_ = new TimePeriod($fp, $len);
          ASSERT('$len == 0');
          break;
        case 4:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->activatePeriod_ = new TimePeriod($fp, $len);
          ASSERT('$len == 0');
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->deprecatedGrantPeriodSeconds_)) {
      fwrite($fp, "\x08");
      Protobuf::write_varint($fp, (int)$this->deprecatedGrantPeriodSeconds_);
    }
    if (!is_null($this->deprecatedActivatePeriodSeconds_)) {
      fwrite($fp, "\x10");
      Protobuf::write_varint($fp, (int)$this->deprecatedActivatePeriodSeconds_);
    }
    if (!is_null($this->grantPeriod_)) {
      fwrite($fp, "\x1a");
      Protobuf::write_varint($fp, $this->grantPeriod_->size()); // message
      $this->grantPeriod_->write($fp);
    }
    if (!is_null($this->activatePeriod_)) {
      fwrite($fp, "\"");
      Protobuf::write_varint($fp, $this->activatePeriod_->size()); // message
      $this->activatePeriod_->write($fp);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->deprecatedGrantPeriodSeconds_)) {
      $size += 1 + Protobuf::size_varint($this->deprecatedGrantPeriodSeconds_);
    }
    if (!is_null($this->deprecatedActivatePeriodSeconds_)) {
      $size += 1 + Protobuf::size_varint($this->deprecatedActivatePeriodSeconds_);
    }
    if (!is_null($this->grantPeriod_)) {
      $l = $this->grantPeriod_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->activatePeriod_)) {
      $l = $this->activatePeriod_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('deprecatedGrantPeriodSeconds_', $this->deprecatedGrantPeriodSeconds_)
         . Protobuf::toString('deprecatedActivatePeriodSeconds_', $this->deprecatedActivatePeriodSeconds_)
         . Protobuf::toString('grantPeriod_', $this->grantPeriod_)
         . Protobuf::toString('activatePeriod_', $this->activatePeriod_);
  }
  
  // optional int32 deprecatedGrantPeriodSeconds = 1;

  protected $deprecatedGrantPeriodSeconds_;
  public function resetDeprecatedGrantPeriodSeconds() { unset($this->deprecatedGrantPeriodSeconds_); }
  public function clearDeprecatedGrantPeriodSeconds() { unset($this->deprecatedGrantPeriodSeconds_); }
  public function hasDeprecatedGrantPeriodSeconds() { return isset($this->deprecatedGrantPeriodSeconds_); }
  public function getDeprecatedGrantPeriodSeconds() { return $this->deprecatedGrantPeriodSeconds_; }
  public function setDeprecatedGrantPeriodSeconds($value) { $this->deprecatedGrantPeriodSeconds_ = (string)$value; }
  
  // optional int32 deprecatedActivatePeriodSeconds = 2;

  protected $deprecatedActivatePeriodSeconds_;
  public function resetDeprecatedActivatePeriodSeconds() { unset($this->deprecatedActivatePeriodSeconds_); }
  public function clearDeprecatedActivatePeriodSeconds() { unset($this->deprecatedActivatePeriodSeconds_); }
  public function hasDeprecatedActivatePeriodSeconds() { return isset($this->deprecatedActivatePeriodSeconds_); }
  public function getDeprecatedActivatePeriodSeconds() { return $this->deprecatedActivatePeriodSeconds_; }
  public function setDeprecatedActivatePeriodSeconds($value) { $this->deprecatedActivatePeriodSeconds_ = (string)$value; }
  
  // optional .TimePeriod grantPeriod = 3;

  protected $grantPeriod_;
  public function resetGrantPeriod() { unset($this->grantPeriod_); }
  public function clearGrantPeriod() { unset($this->grantPeriod_); }
  public function hasGrantPeriod() { return isset($this->grantPeriod_); }
  public function getGrantPeriod() { return $this->grantPeriod_; }
  public function setGrantPeriod(TimePeriod $value) { $this->grantPeriod_ = $value; }
  
  // optional .TimePeriod activatePeriod = 4;

  protected $activatePeriod_;
  public function resetActivatePeriod() { unset($this->activatePeriod_); }
  public function clearActivatePeriod() { unset($this->activatePeriod_); }
  public function hasActivatePeriod() { return isset($this->activatePeriod_); }
  public function getActivatePeriod() { return $this->activatePeriod_; }
  public function setActivatePeriod(TimePeriod $value) { $this->activatePeriod_ = $value; }
  
  // @@protoc_insertion_point(class_scope:RentalTerms)
}

// message SignedData
class SignedData {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("SignedData: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->signedData_ = $tmp;
          $limit-=$len;
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->signature_ = $tmp;
          $limit-=$len;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->signedData_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, strlen((string)$this->signedData_));
      fwrite($fp, (string)$this->signedData_);
    }
    if (!is_null($this->signature_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, strlen((string)$this->signature_));
      fwrite($fp, (string)$this->signature_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->signedData_)) {
      $l = strlen((string)$this->signedData_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->signature_)) {
      $l = strlen((string)$this->signature_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('signedData_', $this->signedData_)
         . Protobuf::toString('signature_', $this->signature_);
  }
  
  // optional string signedData = 1;

  protected $signedData_;
  public function resetSignedData() { unset($this->signedData_); }
  public function clearSignedData() { unset($this->signedData_); }
  public function hasSignedData() { return isset($this->signedData_); }
  public function getSignedData() { return $this->signedData_; }
  public function setSignedData($value) { $this->signedData_ = (string)$value; }
  
  // optional string signature = 2;

  protected $signature_;
  public function resetSignature() { unset($this->signature_); }
  public function clearSignature() { unset($this->signature_); }
  public function hasSignature() { return isset($this->signature_); }
  public function getSignature() { return $this->signature_; }
  public function setSignature($value) { $this->signature_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:SignedData)
}

// message SubscriptionContentTerms
class SubscriptionContentTerms {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("SubscriptionContentTerms: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->requiredSubscription_ = new Docid($fp, $len);
          ASSERT('$len == 0');
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->requiredSubscription_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, $this->requiredSubscription_->size()); // message
      $this->requiredSubscription_->write($fp);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->requiredSubscription_)) {
      $l = $this->requiredSubscription_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('requiredSubscription_', $this->requiredSubscription_);
  }
  
  // optional .Docid requiredSubscription = 1;

  protected $requiredSubscription_;
  public function resetRequiredSubscription() { unset($this->requiredSubscription_); }
  public function clearRequiredSubscription() { unset($this->requiredSubscription_); }
  public function hasRequiredSubscription() { return isset($this->requiredSubscription_); }
  public function getRequiredSubscription() { return $this->requiredSubscription_; }
  public function setRequiredSubscription(Docid $value) { $this->requiredSubscription_ = $value; }
  
  // @@protoc_insertion_point(class_scope:SubscriptionContentTerms)
}

// message SubscriptionTerms
class SubscriptionTerms {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("SubscriptionTerms: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->recurringPeriod_ = new TimePeriod($fp, $len);
          ASSERT('$len == 0');
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->trialPeriod_ = new TimePeriod($fp, $len);
          ASSERT('$len == 0');
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->recurringPeriod_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, $this->recurringPeriod_->size()); // message
      $this->recurringPeriod_->write($fp);
    }
    if (!is_null($this->trialPeriod_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, $this->trialPeriod_->size()); // message
      $this->trialPeriod_->write($fp);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->recurringPeriod_)) {
      $l = $this->recurringPeriod_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->trialPeriod_)) {
      $l = $this->trialPeriod_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('recurringPeriod_', $this->recurringPeriod_)
         . Protobuf::toString('trialPeriod_', $this->trialPeriod_);
  }
  
  // optional .TimePeriod recurringPeriod = 1;

  protected $recurringPeriod_;
  public function resetRecurringPeriod() { unset($this->recurringPeriod_); }
  public function clearRecurringPeriod() { unset($this->recurringPeriod_); }
  public function hasRecurringPeriod() { return isset($this->recurringPeriod_); }
  public function getRecurringPeriod() { return $this->recurringPeriod_; }
  public function setRecurringPeriod(TimePeriod $value) { $this->recurringPeriod_ = $value; }
  
  // optional .TimePeriod trialPeriod = 2;

  protected $trialPeriod_;
  public function resetTrialPeriod() { unset($this->trialPeriod_); }
  public function clearTrialPeriod() { unset($this->trialPeriod_); }
  public function hasTrialPeriod() { return isset($this->trialPeriod_); }
  public function getTrialPeriod() { return $this->trialPeriod_; }
  public function setTrialPeriod(TimePeriod $value) { $this->trialPeriod_ = $value; }
  
  // @@protoc_insertion_point(class_scope:SubscriptionTerms)
}

// message TimePeriod
class TimePeriod {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("TimePeriod: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->unit_ = $tmp;
          
          break;
        case 2:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->count_ = $tmp;
          
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->unit_)) {
      fwrite($fp, "\x08");
      Protobuf::write_varint($fp, (int)$this->unit_);
    }
    if (!is_null($this->count_)) {
      fwrite($fp, "\x10");
      Protobuf::write_varint($fp, (int)$this->count_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->unit_)) {
      $size += 1 + Protobuf::size_varint($this->unit_);
    }
    if (!is_null($this->count_)) {
      $size += 1 + Protobuf::size_varint($this->count_);
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('unit_', $this->unit_)
         . Protobuf::toString('count_', $this->count_);
  }
  
  // optional int32 unit = 1;

  protected $unit_;
  public function resetUnit() { unset($this->unit_); }
  public function clearUnit() { unset($this->unit_); }
  public function hasUnit() { return isset($this->unit_); }
  public function getUnit() { return $this->unit_; }
  public function setUnit($value) { $this->unit_ = (string)$value; }
  
  // optional int32 count = 2;

  protected $count_;
  public function resetCount() { unset($this->count_); }
  public function clearCount() { unset($this->count_); }
  public function hasCount() { return isset($this->count_); }
  public function getCount() { return $this->count_; }
  public function setCount($value) { $this->count_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:TimePeriod)
}

// message BillingAddressSpec
class BillingAddressSpec {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("BillingAddressSpec: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->billingAddressType_ = $tmp;
          
          break;
        case 2:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->requiredField_[] = $tmp;
          
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->billingAddressType_)) {
      fwrite($fp, "\x08");
      Protobuf::write_varint($fp, (int)$this->billingAddressType_);
    }
    if (!is_null($this->requiredField_))
      foreach($this->requiredField_ as $v) {
        fwrite($fp, "\x10");
        Protobuf::write_varint($fp, (int)$v);
      }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->billingAddressType_)) {
      $size += 1 + Protobuf::size_varint($this->billingAddressType_);
    }
    if (!is_null($this->requiredField_))
      foreach($this->requiredField_ as $v) {
        $size += 1 + Protobuf::size_varint($v);
      }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('billingAddressType_', $this->billingAddressType_)
         . Protobuf::toString('requiredField_', $this->requiredField_);
  }
  
  // optional int32 billingAddressType = 1;

  protected $billingAddressType_;
  public function resetBillingAddressType() { unset($this->billingAddressType_); }
  public function clearBillingAddressType() { unset($this->billingAddressType_); }
  public function hasBillingAddressType() { return isset($this->billingAddressType_); }
  public function getBillingAddressType() { return $this->billingAddressType_; }
  public function setBillingAddressType($value) { $this->billingAddressType_ = (string)$value; }
  
  // repeated int32 requiredField = 2;

  protected $requiredField_ = array();
  public function clearRequiredField() { $this->requiredField_ = array(); }
  public function getRequiredFieldCount() { return count($this->requiredField_); }
  public function hasRequiredField() { return (count($this->requiredField_) > 0); }
  public function indexOfRequiredField($value) { return array_search($value,$this->requiredField_);}
  public function removeRequiredField($index) { unset($this->requiredField_[$index]); }
  public function removeValRequiredField($value) { $idx = array_search($value,$this->requiredField_); if($idx !== FALSE){unset($this->requiredField_[$idx]); }}
  public function removeValsRequiredField($values) { foreach($values as $value){$idx = array_search($value,$this->requiredField_); if($idx !== FALSE){unset($this->requiredField_[$idx]); }}}
  public function pushRequiredField($newvar) { return array_push($this->requiredField_,(string)$newvar); }
  public function popRequiredField() { return array_pop($this->requiredField_); }
  public function shiftRequiredField() { return array_shift($this->requiredField_); }
  public function unshiftRequiredField($newvar) { return array_unshift($this->requiredField_,(string)$newvar); }
  public function getRequiredField($index) { return $this->requiredField_[$index]; }
  public function getRequiredFieldArray() { return $this->requiredField_; }
  public function setRequiredField($index, $value) {$this->requiredField_[$index] = (string)$value;	}
  public function addRequiredField($value) { $this->requiredField_[] = (string)$value; }
  public function addAllRequiredField(array $values) { foreach($values as $value) {$this->requiredField_[] = (string)$value;} }
  
  // @@protoc_insertion_point(class_scope:BillingAddressSpec)
}

// message BillingProfile
class BillingProfile {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("BillingProfile: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->instrument_[] = new Instrument($fp, $len);
          ASSERT('$len == 0');
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->selectedExternalInstrumentId_ = $tmp;
          $limit-=$len;
          break;
        case 3:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->billingProfileOption_[] = new BillingProfileOption($fp, $len);
          ASSERT('$len == 0');
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->instrument_))
      foreach($this->instrument_ as $v) {
        fwrite($fp, "\x0a");
        Protobuf::write_varint($fp, $v->size()); // message
        $v->write($fp);
      }
    if (!is_null($this->selectedExternalInstrumentId_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, strlen((string)$this->selectedExternalInstrumentId_));
      fwrite($fp, (string)$this->selectedExternalInstrumentId_);
    }
    if (!is_null($this->billingProfileOption_))
      foreach($this->billingProfileOption_ as $v) {
        fwrite($fp, "\x1a");
        Protobuf::write_varint($fp, $v->size()); // message
        $v->write($fp);
      }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->instrument_))
      foreach($this->instrument_ as $v) {
        $l = $v->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
    if (!is_null($this->selectedExternalInstrumentId_)) {
      $l = strlen((string)$this->selectedExternalInstrumentId_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->billingProfileOption_))
      foreach($this->billingProfileOption_ as $v) {
        $l = $v->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('instrument_', $this->instrument_)
         . Protobuf::toString('selectedExternalInstrumentId_', $this->selectedExternalInstrumentId_)
         . Protobuf::toString('billingProfileOption_', $this->billingProfileOption_);
  }
  
  // repeated .Instrument instrument = 1;

  protected $instrument_ = array();
  public function clearInstrument() { $this->instrument_ = array(); }
  public function getInstrumentCount() { return count($this->instrument_); }
  public function hasInstrument() { return (count($this->instrument_) > 0); }
  public function indexOfInstrument($value) { return array_search($value,$this->instrument_);}
  public function removeInstrument($index) { unset($this->instrument_[$index]); }
  public function removeValInstrument($value) { $idx = array_search($value,$this->instrument_); if($idx !== FALSE){unset($this->instrument_[$idx]); }}
  public function removeValsInstrument($values) { foreach($values as $value){$idx = array_search($value,$this->instrument_); if($idx !== FALSE){unset($this->instrument_[$idx]); }}}
  public function pushInstrument($newvar) { return array_push($this->instrument_,$newvar); }
  public function popInstrument() { return array_pop($this->instrument_); }
  public function shiftInstrument() { return array_shift($this->instrument_); }
  public function unshiftInstrument($newvar) { return array_unshift($this->instrument_,$newvar); }
  public function getInstrument($index) { return $this->instrument_[$index]; }
  public function getInstrumentArray() { return $this->instrument_; }
  public function setInstrument($index, $value) {$this->instrument_[$index] = $value;	}
  public function addInstrument($value) { $this->instrument_[] = $value; }
  public function addAllInstrument(array $values) { foreach($values as $value) {$this->instrument_[] = $value;} }
  
  // optional string selectedExternalInstrumentId = 2;

  protected $selectedExternalInstrumentId_;
  public function resetSelectedExternalInstrumentId() { unset($this->selectedExternalInstrumentId_); }
  public function clearSelectedExternalInstrumentId() { unset($this->selectedExternalInstrumentId_); }
  public function hasSelectedExternalInstrumentId() { return isset($this->selectedExternalInstrumentId_); }
  public function getSelectedExternalInstrumentId() { return $this->selectedExternalInstrumentId_; }
  public function setSelectedExternalInstrumentId($value) { $this->selectedExternalInstrumentId_ = (string)$value; }
  
  // repeated .BillingProfileOption billingProfileOption = 3;

  protected $billingProfileOption_ = array();
  public function clearBillingProfileOption() { $this->billingProfileOption_ = array(); }
  public function getBillingProfileOptionCount() { return count($this->billingProfileOption_); }
  public function hasBillingProfileOption() { return (count($this->billingProfileOption_) > 0); }
  public function indexOfBillingProfileOption($value) { return array_search($value,$this->billingProfileOption_);}
  public function removeBillingProfileOption($index) { unset($this->billingProfileOption_[$index]); }
  public function removeValBillingProfileOption($value) { $idx = array_search($value,$this->billingProfileOption_); if($idx !== FALSE){unset($this->billingProfileOption_[$idx]); }}
  public function removeValsBillingProfileOption($values) { foreach($values as $value){$idx = array_search($value,$this->billingProfileOption_); if($idx !== FALSE){unset($this->billingProfileOption_[$idx]); }}}
  public function pushBillingProfileOption($newvar) { return array_push($this->billingProfileOption_,$newvar); }
  public function popBillingProfileOption() { return array_pop($this->billingProfileOption_); }
  public function shiftBillingProfileOption() { return array_shift($this->billingProfileOption_); }
  public function unshiftBillingProfileOption($newvar) { return array_unshift($this->billingProfileOption_,$newvar); }
  public function getBillingProfileOption($index) { return $this->billingProfileOption_[$index]; }
  public function getBillingProfileOptionArray() { return $this->billingProfileOption_; }
  public function setBillingProfileOption($index, $value) {$this->billingProfileOption_[$index] = $value;	}
  public function addBillingProfileOption($value) { $this->billingProfileOption_[] = $value; }
  public function addAllBillingProfileOption(array $values) { foreach($values as $value) {$this->billingProfileOption_[] = $value;} }
  
  // @@protoc_insertion_point(class_scope:BillingProfile)
}

// message BillingProfileOption
class BillingProfileOption {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("BillingProfileOption: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->type_ = $tmp;
          
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->displayTitle_ = $tmp;
          $limit-=$len;
          break;
        case 3:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->externalInstrumentId_ = $tmp;
          $limit-=$len;
          break;
        case 4:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->topupInfo_ = new TopupInfo($fp, $len);
          ASSERT('$len == 0');
          break;
        case 5:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->carrierBillingInstrumentStatus_ = new CarrierBillingInstrumentStatus($fp, $len);
          ASSERT('$len == 0');
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->type_)) {
      fwrite($fp, "\x08");
      Protobuf::write_varint($fp, (int)$this->type_);
    }
    if (!is_null($this->displayTitle_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, strlen((string)$this->displayTitle_));
      fwrite($fp, (string)$this->displayTitle_);
    }
    if (!is_null($this->externalInstrumentId_)) {
      fwrite($fp, "\x1a");
      Protobuf::write_varint($fp, strlen((string)$this->externalInstrumentId_));
      fwrite($fp, (string)$this->externalInstrumentId_);
    }
    if (!is_null($this->topupInfo_)) {
      fwrite($fp, "\"");
      Protobuf::write_varint($fp, $this->topupInfo_->size()); // message
      $this->topupInfo_->write($fp);
    }
    if (!is_null($this->carrierBillingInstrumentStatus_)) {
      fwrite($fp, "*");
      Protobuf::write_varint($fp, $this->carrierBillingInstrumentStatus_->size()); // message
      $this->carrierBillingInstrumentStatus_->write($fp);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->type_)) {
      $size += 1 + Protobuf::size_varint($this->type_);
    }
    if (!is_null($this->displayTitle_)) {
      $l = strlen((string)$this->displayTitle_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->externalInstrumentId_)) {
      $l = strlen((string)$this->externalInstrumentId_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->topupInfo_)) {
      $l = $this->topupInfo_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->carrierBillingInstrumentStatus_)) {
      $l = $this->carrierBillingInstrumentStatus_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('type_', $this->type_)
         . Protobuf::toString('displayTitle_', $this->displayTitle_)
         . Protobuf::toString('externalInstrumentId_', $this->externalInstrumentId_)
         . Protobuf::toString('topupInfo_', $this->topupInfo_)
         . Protobuf::toString('carrierBillingInstrumentStatus_', $this->carrierBillingInstrumentStatus_);
  }
  
  // optional int32 type = 1;

  protected $type_;
  public function resetType() { unset($this->type_); }
  public function clearType() { unset($this->type_); }
  public function hasType() { return isset($this->type_); }
  public function getType() { return $this->type_; }
  public function setType($value) { $this->type_ = (string)$value; }
  
  // optional string displayTitle = 2;

  protected $displayTitle_;
  public function resetDisplayTitle() { unset($this->displayTitle_); }
  public function clearDisplayTitle() { unset($this->displayTitle_); }
  public function hasDisplayTitle() { return isset($this->displayTitle_); }
  public function getDisplayTitle() { return $this->displayTitle_; }
  public function setDisplayTitle($value) { $this->displayTitle_ = (string)$value; }
  
  // optional string externalInstrumentId = 3;

  protected $externalInstrumentId_;
  public function resetExternalInstrumentId() { unset($this->externalInstrumentId_); }
  public function clearExternalInstrumentId() { unset($this->externalInstrumentId_); }
  public function hasExternalInstrumentId() { return isset($this->externalInstrumentId_); }
  public function getExternalInstrumentId() { return $this->externalInstrumentId_; }
  public function setExternalInstrumentId($value) { $this->externalInstrumentId_ = (string)$value; }
  
  // optional .TopupInfo topupInfo = 4;

  protected $topupInfo_;
  public function resetTopupInfo() { unset($this->topupInfo_); }
  public function clearTopupInfo() { unset($this->topupInfo_); }
  public function hasTopupInfo() { return isset($this->topupInfo_); }
  public function getTopupInfo() { return $this->topupInfo_; }
  public function setTopupInfo(TopupInfo $value) { $this->topupInfo_ = $value; }
  
  // optional .CarrierBillingInstrumentStatus carrierBillingInstrumentStatus = 5;

  protected $carrierBillingInstrumentStatus_;
  public function resetCarrierBillingInstrumentStatus() { unset($this->carrierBillingInstrumentStatus_); }
  public function clearCarrierBillingInstrumentStatus() { unset($this->carrierBillingInstrumentStatus_); }
  public function hasCarrierBillingInstrumentStatus() { return isset($this->carrierBillingInstrumentStatus_); }
  public function getCarrierBillingInstrumentStatus() { return $this->carrierBillingInstrumentStatus_; }
  public function setCarrierBillingInstrumentStatus(CarrierBillingInstrumentStatus $value) { $this->carrierBillingInstrumentStatus_ = $value; }
  
  // @@protoc_insertion_point(class_scope:BillingProfileOption)
}

// message CarrierBillingCredentials
class CarrierBillingCredentials {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("CarrierBillingCredentials: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->value_ = $tmp;
          $limit-=$len;
          break;
        case 2:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->expiration_ = $tmp;
          
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->value_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, strlen((string)$this->value_));
      fwrite($fp, (string)$this->value_);
    }
    if (!is_null($this->expiration_)) {
      fwrite($fp, "\x10");
      Protobuf::write_varint($fp, (int)$this->expiration_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->value_)) {
      $l = strlen((string)$this->value_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->expiration_)) {
      $size += 1 + Protobuf::size_varint($this->expiration_);
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('value_', $this->value_)
         . Protobuf::toString('expiration_', $this->expiration_);
  }
  
  // optional string value = 1;

  protected $value_;
  public function resetValue() { unset($this->value_); }
  public function clearValue() { unset($this->value_); }
  public function hasValue() { return isset($this->value_); }
  public function getValue() { return $this->value_; }
  public function setValue($value) { $this->value_ = (string)$value; }
  
  // optional int64 expiration = 2;

  protected $expiration_;
  public function resetExpiration() { unset($this->expiration_); }
  public function clearExpiration() { unset($this->expiration_); }
  public function hasExpiration() { return isset($this->expiration_); }
  public function getExpiration() { return $this->expiration_; }
  public function setExpiration($value) { $this->expiration_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:CarrierBillingCredentials)
}

// message CarrierBillingInstrument
class CarrierBillingInstrument {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("CarrierBillingInstrument: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->instrumentKey_ = $tmp;
          $limit-=$len;
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->accountType_ = $tmp;
          $limit-=$len;
          break;
        case 3:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->currencyCode_ = $tmp;
          $limit-=$len;
          break;
        case 4:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->transactionLimit_ = $tmp;
          
          break;
        case 5:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->subscriberIdentifier_ = $tmp;
          $limit-=$len;
          break;
        case 6:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->encryptedSubscriberInfo_ = new EncryptedSubscriberInfo($fp, $len);
          ASSERT('$len == 0');
          break;
        case 7:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->credentials_ = new CarrierBillingCredentials($fp, $len);
          ASSERT('$len == 0');
          break;
        case 8:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->acceptedCarrierTos_ = new CarrierTos($fp, $len);
          ASSERT('$len == 0');
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->instrumentKey_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, strlen((string)$this->instrumentKey_));
      fwrite($fp, (string)$this->instrumentKey_);
    }
    if (!is_null($this->accountType_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, strlen((string)$this->accountType_));
      fwrite($fp, (string)$this->accountType_);
    }
    if (!is_null($this->currencyCode_)) {
      fwrite($fp, "\x1a");
      Protobuf::write_varint($fp, strlen((string)$this->currencyCode_));
      fwrite($fp, (string)$this->currencyCode_);
    }
    if (!is_null($this->transactionLimit_)) {
      fwrite($fp, " ");
      Protobuf::write_varint($fp, (int)$this->transactionLimit_);
    }
    if (!is_null($this->subscriberIdentifier_)) {
      fwrite($fp, "*");
      Protobuf::write_varint($fp, strlen((string)$this->subscriberIdentifier_));
      fwrite($fp, (string)$this->subscriberIdentifier_);
    }
    if (!is_null($this->encryptedSubscriberInfo_)) {
      fwrite($fp, "2");
      Protobuf::write_varint($fp, $this->encryptedSubscriberInfo_->size()); // message
      $this->encryptedSubscriberInfo_->write($fp);
    }
    if (!is_null($this->credentials_)) {
      fwrite($fp, ":");
      Protobuf::write_varint($fp, $this->credentials_->size()); // message
      $this->credentials_->write($fp);
    }
    if (!is_null($this->acceptedCarrierTos_)) {
      fwrite($fp, "B");
      Protobuf::write_varint($fp, $this->acceptedCarrierTos_->size()); // message
      $this->acceptedCarrierTos_->write($fp);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->instrumentKey_)) {
      $l = strlen((string)$this->instrumentKey_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->accountType_)) {
      $l = strlen((string)$this->accountType_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->currencyCode_)) {
      $l = strlen((string)$this->currencyCode_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->transactionLimit_)) {
      $size += 1 + Protobuf::size_varint($this->transactionLimit_);
    }
    if (!is_null($this->subscriberIdentifier_)) {
      $l = strlen((string)$this->subscriberIdentifier_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->encryptedSubscriberInfo_)) {
      $l = $this->encryptedSubscriberInfo_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->credentials_)) {
      $l = $this->credentials_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->acceptedCarrierTos_)) {
      $l = $this->acceptedCarrierTos_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('instrumentKey_', $this->instrumentKey_)
         . Protobuf::toString('accountType_', $this->accountType_)
         . Protobuf::toString('currencyCode_', $this->currencyCode_)
         . Protobuf::toString('transactionLimit_', $this->transactionLimit_)
         . Protobuf::toString('subscriberIdentifier_', $this->subscriberIdentifier_)
         . Protobuf::toString('encryptedSubscriberInfo_', $this->encryptedSubscriberInfo_)
         . Protobuf::toString('credentials_', $this->credentials_)
         . Protobuf::toString('acceptedCarrierTos_', $this->acceptedCarrierTos_);
  }
  
  // optional string instrumentKey = 1;

  protected $instrumentKey_;
  public function resetInstrumentKey() { unset($this->instrumentKey_); }
  public function clearInstrumentKey() { unset($this->instrumentKey_); }
  public function hasInstrumentKey() { return isset($this->instrumentKey_); }
  public function getInstrumentKey() { return $this->instrumentKey_; }
  public function setInstrumentKey($value) { $this->instrumentKey_ = (string)$value; }
  
  // optional string accountType = 2;

  protected $accountType_;
  public function resetAccountType() { unset($this->accountType_); }
  public function clearAccountType() { unset($this->accountType_); }
  public function hasAccountType() { return isset($this->accountType_); }
  public function getAccountType() { return $this->accountType_; }
  public function setAccountType($value) { $this->accountType_ = (string)$value; }
  
  // optional string currencyCode = 3;

  protected $currencyCode_;
  public function resetCurrencyCode() { unset($this->currencyCode_); }
  public function clearCurrencyCode() { unset($this->currencyCode_); }
  public function hasCurrencyCode() { return isset($this->currencyCode_); }
  public function getCurrencyCode() { return $this->currencyCode_; }
  public function setCurrencyCode($value) { $this->currencyCode_ = (string)$value; }
  
  // optional int64 transactionLimit = 4;

  protected $transactionLimit_;
  public function resetTransactionLimit() { unset($this->transactionLimit_); }
  public function clearTransactionLimit() { unset($this->transactionLimit_); }
  public function hasTransactionLimit() { return isset($this->transactionLimit_); }
  public function getTransactionLimit() { return $this->transactionLimit_; }
  public function setTransactionLimit($value) { $this->transactionLimit_ = (string)$value; }
  
  // optional string subscriberIdentifier = 5;

  protected $subscriberIdentifier_;
  public function resetSubscriberIdentifier() { unset($this->subscriberIdentifier_); }
  public function clearSubscriberIdentifier() { unset($this->subscriberIdentifier_); }
  public function hasSubscriberIdentifier() { return isset($this->subscriberIdentifier_); }
  public function getSubscriberIdentifier() { return $this->subscriberIdentifier_; }
  public function setSubscriberIdentifier($value) { $this->subscriberIdentifier_ = (string)$value; }
  
  // optional .EncryptedSubscriberInfo encryptedSubscriberInfo = 6;

  protected $encryptedSubscriberInfo_;
  public function resetEncryptedSubscriberInfo() { unset($this->encryptedSubscriberInfo_); }
  public function clearEncryptedSubscriberInfo() { unset($this->encryptedSubscriberInfo_); }
  public function hasEncryptedSubscriberInfo() { return isset($this->encryptedSubscriberInfo_); }
  public function getEncryptedSubscriberInfo() { return $this->encryptedSubscriberInfo_; }
  public function setEncryptedSubscriberInfo(EncryptedSubscriberInfo $value) { $this->encryptedSubscriberInfo_ = $value; }
  
  // optional .CarrierBillingCredentials credentials = 7;

  protected $credentials_;
  public function resetCredentials() { unset($this->credentials_); }
  public function clearCredentials() { unset($this->credentials_); }
  public function hasCredentials() { return isset($this->credentials_); }
  public function getCredentials() { return $this->credentials_; }
  public function setCredentials(CarrierBillingCredentials $value) { $this->credentials_ = $value; }
  
  // optional .CarrierTos acceptedCarrierTos = 8;

  protected $acceptedCarrierTos_;
  public function resetAcceptedCarrierTos() { unset($this->acceptedCarrierTos_); }
  public function clearAcceptedCarrierTos() { unset($this->acceptedCarrierTos_); }
  public function hasAcceptedCarrierTos() { return isset($this->acceptedCarrierTos_); }
  public function getAcceptedCarrierTos() { return $this->acceptedCarrierTos_; }
  public function setAcceptedCarrierTos(CarrierTos $value) { $this->acceptedCarrierTos_ = $value; }
  
  // @@protoc_insertion_point(class_scope:CarrierBillingInstrument)
}

// message CarrierBillingInstrumentStatus
class CarrierBillingInstrumentStatus {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("CarrierBillingInstrumentStatus: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->carrierTos_ = new CarrierTos($fp, $len);
          ASSERT('$len == 0');
          break;
        case 2:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->associationRequired_ = $tmp > 0 ? true : false;
          break;
        case 3:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->passwordRequired_ = $tmp > 0 ? true : false;
          break;
        case 4:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->carrierPasswordPrompt_ = new PasswordPrompt($fp, $len);
          ASSERT('$len == 0');
          break;
        case 5:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->apiVersion_ = $tmp;
          
          break;
        case 6:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->name_ = $tmp;
          $limit-=$len;
          break;
        case 7:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->deviceAssociation_ = new DeviceAssociation($fp, $len);
          ASSERT('$len == 0');
          break;
        case 8:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->carrierSupportPhoneNumber_ = $tmp;
          $limit-=$len;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->carrierTos_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, $this->carrierTos_->size()); // message
      $this->carrierTos_->write($fp);
    }
    if (!is_null($this->associationRequired_)) {
      fwrite($fp, "\x10");
      Protobuf::write_varint($fp, (int)$this->associationRequired_ ? 1 : 0);
    }
    if (!is_null($this->passwordRequired_)) {
      fwrite($fp, "\x18");
      Protobuf::write_varint($fp, (int)$this->passwordRequired_ ? 1 : 0);
    }
    if (!is_null($this->carrierPasswordPrompt_)) {
      fwrite($fp, "\"");
      Protobuf::write_varint($fp, $this->carrierPasswordPrompt_->size()); // message
      $this->carrierPasswordPrompt_->write($fp);
    }
    if (!is_null($this->apiVersion_)) {
      fwrite($fp, "(");
      Protobuf::write_varint($fp, (int)$this->apiVersion_);
    }
    if (!is_null($this->name_)) {
      fwrite($fp, "2");
      Protobuf::write_varint($fp, strlen((string)$this->name_));
      fwrite($fp, (string)$this->name_);
    }
    if (!is_null($this->deviceAssociation_)) {
      fwrite($fp, ":");
      Protobuf::write_varint($fp, $this->deviceAssociation_->size()); // message
      $this->deviceAssociation_->write($fp);
    }
    if (!is_null($this->carrierSupportPhoneNumber_)) {
      fwrite($fp, "B");
      Protobuf::write_varint($fp, strlen((string)$this->carrierSupportPhoneNumber_));
      fwrite($fp, (string)$this->carrierSupportPhoneNumber_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->carrierTos_)) {
      $l = $this->carrierTos_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->associationRequired_)) {
      $size += 2;
    }
    if (!is_null($this->passwordRequired_)) {
      $size += 2;
    }
    if (!is_null($this->carrierPasswordPrompt_)) {
      $l = $this->carrierPasswordPrompt_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->apiVersion_)) {
      $size += 1 + Protobuf::size_varint($this->apiVersion_);
    }
    if (!is_null($this->name_)) {
      $l = strlen((string)$this->name_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->deviceAssociation_)) {
      $l = $this->deviceAssociation_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->carrierSupportPhoneNumber_)) {
      $l = strlen((string)$this->carrierSupportPhoneNumber_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('carrierTos_', $this->carrierTos_)
         . Protobuf::toString('associationRequired_', $this->associationRequired_)
         . Protobuf::toString('passwordRequired_', $this->passwordRequired_)
         . Protobuf::toString('carrierPasswordPrompt_', $this->carrierPasswordPrompt_)
         . Protobuf::toString('apiVersion_', $this->apiVersion_)
         . Protobuf::toString('name_', $this->name_)
         . Protobuf::toString('deviceAssociation_', $this->deviceAssociation_)
         . Protobuf::toString('carrierSupportPhoneNumber_', $this->carrierSupportPhoneNumber_);
  }
  
  // optional .CarrierTos carrierTos = 1;

  protected $carrierTos_;
  public function resetCarrierTos() { unset($this->carrierTos_); }
  public function clearCarrierTos() { unset($this->carrierTos_); }
  public function hasCarrierTos() { return isset($this->carrierTos_); }
  public function getCarrierTos() { return $this->carrierTos_; }
  public function setCarrierTos(CarrierTos $value) { $this->carrierTos_ = $value; }
  
  // optional bool associationRequired = 2;

  protected $associationRequired_;
  public function resetAssociationRequired() { unset($this->associationRequired_); }
  public function clearAssociationRequired() { unset($this->associationRequired_); }
  public function hasAssociationRequired() { return isset($this->associationRequired_); }
  public function getAssociationRequired() { return $this->associationRequired_; }
  public function setAssociationRequired($value) { $this->associationRequired_ = (bool)$value; }
  
  // optional bool passwordRequired = 3;

  protected $passwordRequired_;
  public function resetPasswordRequired() { unset($this->passwordRequired_); }
  public function clearPasswordRequired() { unset($this->passwordRequired_); }
  public function hasPasswordRequired() { return isset($this->passwordRequired_); }
  public function getPasswordRequired() { return $this->passwordRequired_; }
  public function setPasswordRequired($value) { $this->passwordRequired_ = (bool)$value; }
  
  // optional .PasswordPrompt carrierPasswordPrompt = 4;

  protected $carrierPasswordPrompt_;
  public function resetCarrierPasswordPrompt() { unset($this->carrierPasswordPrompt_); }
  public function clearCarrierPasswordPrompt() { unset($this->carrierPasswordPrompt_); }
  public function hasCarrierPasswordPrompt() { return isset($this->carrierPasswordPrompt_); }
  public function getCarrierPasswordPrompt() { return $this->carrierPasswordPrompt_; }
  public function setCarrierPasswordPrompt(PasswordPrompt $value) { $this->carrierPasswordPrompt_ = $value; }
  
  // optional int32 apiVersion = 5;

  protected $apiVersion_;
  public function resetApiVersion() { unset($this->apiVersion_); }
  public function clearApiVersion() { unset($this->apiVersion_); }
  public function hasApiVersion() { return isset($this->apiVersion_); }
  public function getApiVersion() { return $this->apiVersion_; }
  public function setApiVersion($value) { $this->apiVersion_ = (string)$value; }
  
  // optional string name = 6;

  protected $name_;
  public function resetName() { unset($this->name_); }
  public function clearName() { unset($this->name_); }
  public function hasName() { return isset($this->name_); }
  public function getName() { return $this->name_; }
  public function setName($value) { $this->name_ = (string)$value; }
  
  // optional .DeviceAssociation deviceAssociation = 7;

  protected $deviceAssociation_;
  public function resetDeviceAssociation() { unset($this->deviceAssociation_); }
  public function clearDeviceAssociation() { unset($this->deviceAssociation_); }
  public function hasDeviceAssociation() { return isset($this->deviceAssociation_); }
  public function getDeviceAssociation() { return $this->deviceAssociation_; }
  public function setDeviceAssociation(DeviceAssociation $value) { $this->deviceAssociation_ = $value; }
  
  // optional string carrierSupportPhoneNumber = 8;

  protected $carrierSupportPhoneNumber_;
  public function resetCarrierSupportPhoneNumber() { unset($this->carrierSupportPhoneNumber_); }
  public function clearCarrierSupportPhoneNumber() { unset($this->carrierSupportPhoneNumber_); }
  public function hasCarrierSupportPhoneNumber() { return isset($this->carrierSupportPhoneNumber_); }
  public function getCarrierSupportPhoneNumber() { return $this->carrierSupportPhoneNumber_; }
  public function setCarrierSupportPhoneNumber($value) { $this->carrierSupportPhoneNumber_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:CarrierBillingInstrumentStatus)
}

// message CarrierTos
class CarrierTos {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("CarrierTos: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->dcbTos_ = new CarrierTosEntry($fp, $len);
          ASSERT('$len == 0');
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->piiTos_ = new CarrierTosEntry($fp, $len);
          ASSERT('$len == 0');
          break;
        case 3:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->needsDcbTosAcceptance_ = $tmp > 0 ? true : false;
          break;
        case 4:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->needsPiiTosAcceptance_ = $tmp > 0 ? true : false;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->dcbTos_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, $this->dcbTos_->size()); // message
      $this->dcbTos_->write($fp);
    }
    if (!is_null($this->piiTos_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, $this->piiTos_->size()); // message
      $this->piiTos_->write($fp);
    }
    if (!is_null($this->needsDcbTosAcceptance_)) {
      fwrite($fp, "\x18");
      Protobuf::write_varint($fp, (int)$this->needsDcbTosAcceptance_ ? 1 : 0);
    }
    if (!is_null($this->needsPiiTosAcceptance_)) {
      fwrite($fp, " ");
      Protobuf::write_varint($fp, (int)$this->needsPiiTosAcceptance_ ? 1 : 0);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->dcbTos_)) {
      $l = $this->dcbTos_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->piiTos_)) {
      $l = $this->piiTos_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->needsDcbTosAcceptance_)) {
      $size += 2;
    }
    if (!is_null($this->needsPiiTosAcceptance_)) {
      $size += 2;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('dcbTos_', $this->dcbTos_)
         . Protobuf::toString('piiTos_', $this->piiTos_)
         . Protobuf::toString('needsDcbTosAcceptance_', $this->needsDcbTosAcceptance_)
         . Protobuf::toString('needsPiiTosAcceptance_', $this->needsPiiTosAcceptance_);
  }
  
  // optional .CarrierTosEntry dcbTos = 1;

  protected $dcbTos_;
  public function resetDcbTos() { unset($this->dcbTos_); }
  public function clearDcbTos() { unset($this->dcbTos_); }
  public function hasDcbTos() { return isset($this->dcbTos_); }
  public function getDcbTos() { return $this->dcbTos_; }
  public function setDcbTos(CarrierTosEntry $value) { $this->dcbTos_ = $value; }
  
  // optional .CarrierTosEntry piiTos = 2;

  protected $piiTos_;
  public function resetPiiTos() { unset($this->piiTos_); }
  public function clearPiiTos() { unset($this->piiTos_); }
  public function hasPiiTos() { return isset($this->piiTos_); }
  public function getPiiTos() { return $this->piiTos_; }
  public function setPiiTos(CarrierTosEntry $value) { $this->piiTos_ = $value; }
  
  // optional bool needsDcbTosAcceptance = 3;

  protected $needsDcbTosAcceptance_;
  public function resetNeedsDcbTosAcceptance() { unset($this->needsDcbTosAcceptance_); }
  public function clearNeedsDcbTosAcceptance() { unset($this->needsDcbTosAcceptance_); }
  public function hasNeedsDcbTosAcceptance() { return isset($this->needsDcbTosAcceptance_); }
  public function getNeedsDcbTosAcceptance() { return $this->needsDcbTosAcceptance_; }
  public function setNeedsDcbTosAcceptance($value) { $this->needsDcbTosAcceptance_ = (bool)$value; }
  
  // optional bool needsPiiTosAcceptance = 4;

  protected $needsPiiTosAcceptance_;
  public function resetNeedsPiiTosAcceptance() { unset($this->needsPiiTosAcceptance_); }
  public function clearNeedsPiiTosAcceptance() { unset($this->needsPiiTosAcceptance_); }
  public function hasNeedsPiiTosAcceptance() { return isset($this->needsPiiTosAcceptance_); }
  public function getNeedsPiiTosAcceptance() { return $this->needsPiiTosAcceptance_; }
  public function setNeedsPiiTosAcceptance($value) { $this->needsPiiTosAcceptance_ = (bool)$value; }
  
  // @@protoc_insertion_point(class_scope:CarrierTos)
}

// message CarrierTosEntry
class CarrierTosEntry {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("CarrierTosEntry: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->url_ = $tmp;
          $limit-=$len;
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->version_ = $tmp;
          $limit-=$len;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->url_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, strlen((string)$this->url_));
      fwrite($fp, (string)$this->url_);
    }
    if (!is_null($this->version_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, strlen((string)$this->version_));
      fwrite($fp, (string)$this->version_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->url_)) {
      $l = strlen((string)$this->url_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->version_)) {
      $l = strlen((string)$this->version_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('url_', $this->url_)
         . Protobuf::toString('version_', $this->version_);
  }
  
  // optional string url = 1;

  protected $url_;
  public function resetUrl() { unset($this->url_); }
  public function clearUrl() { unset($this->url_); }
  public function hasUrl() { return isset($this->url_); }
  public function getUrl() { return $this->url_; }
  public function setUrl($value) { $this->url_ = (string)$value; }
  
  // optional string version = 2;

  protected $version_;
  public function resetVersion() { unset($this->version_); }
  public function clearVersion() { unset($this->version_); }
  public function hasVersion() { return isset($this->version_); }
  public function getVersion() { return $this->version_; }
  public function setVersion($value) { $this->version_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:CarrierTosEntry)
}

// message CreditCardInstrument
class CreditCardInstrument {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("CreditCardInstrument: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->type_ = $tmp;
          
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->escrowHandle_ = $tmp;
          $limit-=$len;
          break;
        case 3:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->lastDigits_ = $tmp;
          $limit-=$len;
          break;
        case 4:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->expirationMonth_ = $tmp;
          
          break;
        case 5:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->expirationYear_ = $tmp;
          
          break;
        case 6:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->escrowEfeParam_[] = new EfeParam($fp, $len);
          ASSERT('$len == 0');
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->type_)) {
      fwrite($fp, "\x08");
      Protobuf::write_varint($fp, (int)$this->type_);
    }
    if (!is_null($this->escrowHandle_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, strlen((string)$this->escrowHandle_));
      fwrite($fp, (string)$this->escrowHandle_);
    }
    if (!is_null($this->lastDigits_)) {
      fwrite($fp, "\x1a");
      Protobuf::write_varint($fp, strlen((string)$this->lastDigits_));
      fwrite($fp, (string)$this->lastDigits_);
    }
    if (!is_null($this->expirationMonth_)) {
      fwrite($fp, " ");
      Protobuf::write_varint($fp, (int)$this->expirationMonth_);
    }
    if (!is_null($this->expirationYear_)) {
      fwrite($fp, "(");
      Protobuf::write_varint($fp, (int)$this->expirationYear_);
    }
    if (!is_null($this->escrowEfeParam_))
      foreach($this->escrowEfeParam_ as $v) {
        fwrite($fp, "2");
        Protobuf::write_varint($fp, $v->size()); // message
        $v->write($fp);
      }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->type_)) {
      $size += 1 + Protobuf::size_varint($this->type_);
    }
    if (!is_null($this->escrowHandle_)) {
      $l = strlen((string)$this->escrowHandle_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->lastDigits_)) {
      $l = strlen((string)$this->lastDigits_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->expirationMonth_)) {
      $size += 1 + Protobuf::size_varint($this->expirationMonth_);
    }
    if (!is_null($this->expirationYear_)) {
      $size += 1 + Protobuf::size_varint($this->expirationYear_);
    }
    if (!is_null($this->escrowEfeParam_))
      foreach($this->escrowEfeParam_ as $v) {
        $l = $v->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('type_', $this->type_)
         . Protobuf::toString('escrowHandle_', $this->escrowHandle_)
         . Protobuf::toString('lastDigits_', $this->lastDigits_)
         . Protobuf::toString('expirationMonth_', $this->expirationMonth_)
         . Protobuf::toString('expirationYear_', $this->expirationYear_)
         . Protobuf::toString('escrowEfeParam_', $this->escrowEfeParam_);
  }
  
  // optional int32 type = 1;

  protected $type_;
  public function resetType() { unset($this->type_); }
  public function clearType() { unset($this->type_); }
  public function hasType() { return isset($this->type_); }
  public function getType() { return $this->type_; }
  public function setType($value) { $this->type_ = (string)$value; }
  
  // optional string escrowHandle = 2;

  protected $escrowHandle_;
  public function resetEscrowHandle() { unset($this->escrowHandle_); }
  public function clearEscrowHandle() { unset($this->escrowHandle_); }
  public function hasEscrowHandle() { return isset($this->escrowHandle_); }
  public function getEscrowHandle() { return $this->escrowHandle_; }
  public function setEscrowHandle($value) { $this->escrowHandle_ = (string)$value; }
  
  // optional string lastDigits = 3;

  protected $lastDigits_;
  public function resetLastDigits() { unset($this->lastDigits_); }
  public function clearLastDigits() { unset($this->lastDigits_); }
  public function hasLastDigits() { return isset($this->lastDigits_); }
  public function getLastDigits() { return $this->lastDigits_; }
  public function setLastDigits($value) { $this->lastDigits_ = (string)$value; }
  
  // optional int32 expirationMonth = 4;

  protected $expirationMonth_;
  public function resetExpirationMonth() { unset($this->expirationMonth_); }
  public function clearExpirationMonth() { unset($this->expirationMonth_); }
  public function hasExpirationMonth() { return isset($this->expirationMonth_); }
  public function getExpirationMonth() { return $this->expirationMonth_; }
  public function setExpirationMonth($value) { $this->expirationMonth_ = (string)$value; }
  
  // optional int32 expirationYear = 5;

  protected $expirationYear_;
  public function resetExpirationYear() { unset($this->expirationYear_); }
  public function clearExpirationYear() { unset($this->expirationYear_); }
  public function hasExpirationYear() { return isset($this->expirationYear_); }
  public function getExpirationYear() { return $this->expirationYear_; }
  public function setExpirationYear($value) { $this->expirationYear_ = (string)$value; }
  
  // repeated .EfeParam escrowEfeParam = 6;

  protected $escrowEfeParam_ = array();
  public function clearEscrowEfeParam() { $this->escrowEfeParam_ = array(); }
  public function getEscrowEfeParamCount() { return count($this->escrowEfeParam_); }
  public function hasEscrowEfeParam() { return (count($this->escrowEfeParam_) > 0); }
  public function indexOfEscrowEfeParam($value) { return array_search($value,$this->escrowEfeParam_);}
  public function removeEscrowEfeParam($index) { unset($this->escrowEfeParam_[$index]); }
  public function removeValEscrowEfeParam($value) { $idx = array_search($value,$this->escrowEfeParam_); if($idx !== FALSE){unset($this->escrowEfeParam_[$idx]); }}
  public function removeValsEscrowEfeParam($values) { foreach($values as $value){$idx = array_search($value,$this->escrowEfeParam_); if($idx !== FALSE){unset($this->escrowEfeParam_[$idx]); }}}
  public function pushEscrowEfeParam($newvar) { return array_push($this->escrowEfeParam_,$newvar); }
  public function popEscrowEfeParam() { return array_pop($this->escrowEfeParam_); }
  public function shiftEscrowEfeParam() { return array_shift($this->escrowEfeParam_); }
  public function unshiftEscrowEfeParam($newvar) { return array_unshift($this->escrowEfeParam_,$newvar); }
  public function getEscrowEfeParam($index) { return $this->escrowEfeParam_[$index]; }
  public function getEscrowEfeParamArray() { return $this->escrowEfeParam_; }
  public function setEscrowEfeParam($index, $value) {$this->escrowEfeParam_[$index] = $value;	}
  public function addEscrowEfeParam($value) { $this->escrowEfeParam_[] = $value; }
  public function addAllEscrowEfeParam(array $values) { foreach($values as $value) {$this->escrowEfeParam_[] = $value;} }
  
  // @@protoc_insertion_point(class_scope:CreditCardInstrument)
}

// message DeviceAssociation
class DeviceAssociation {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("DeviceAssociation: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->userTokenRequestMessage_ = $tmp;
          $limit-=$len;
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->userTokenRequestAddress_ = $tmp;
          $limit-=$len;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->userTokenRequestMessage_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, strlen((string)$this->userTokenRequestMessage_));
      fwrite($fp, (string)$this->userTokenRequestMessage_);
    }
    if (!is_null($this->userTokenRequestAddress_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, strlen((string)$this->userTokenRequestAddress_));
      fwrite($fp, (string)$this->userTokenRequestAddress_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->userTokenRequestMessage_)) {
      $l = strlen((string)$this->userTokenRequestMessage_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->userTokenRequestAddress_)) {
      $l = strlen((string)$this->userTokenRequestAddress_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('userTokenRequestMessage_', $this->userTokenRequestMessage_)
         . Protobuf::toString('userTokenRequestAddress_', $this->userTokenRequestAddress_);
  }
  
  // optional string userTokenRequestMessage = 1;

  protected $userTokenRequestMessage_;
  public function resetUserTokenRequestMessage() { unset($this->userTokenRequestMessage_); }
  public function clearUserTokenRequestMessage() { unset($this->userTokenRequestMessage_); }
  public function hasUserTokenRequestMessage() { return isset($this->userTokenRequestMessage_); }
  public function getUserTokenRequestMessage() { return $this->userTokenRequestMessage_; }
  public function setUserTokenRequestMessage($value) { $this->userTokenRequestMessage_ = (string)$value; }
  
  // optional string userTokenRequestAddress = 2;

  protected $userTokenRequestAddress_;
  public function resetUserTokenRequestAddress() { unset($this->userTokenRequestAddress_); }
  public function clearUserTokenRequestAddress() { unset($this->userTokenRequestAddress_); }
  public function hasUserTokenRequestAddress() { return isset($this->userTokenRequestAddress_); }
  public function getUserTokenRequestAddress() { return $this->userTokenRequestAddress_; }
  public function setUserTokenRequestAddress($value) { $this->userTokenRequestAddress_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:DeviceAssociation)
}

// message DisabledInfo
class DisabledInfo {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("DisabledInfo: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->disabledReason_ = $tmp;
          
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->disabledMessageHtml_ = $tmp;
          $limit-=$len;
          break;
        case 3:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->errorMessage_ = $tmp;
          $limit-=$len;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->disabledReason_)) {
      fwrite($fp, "\x08");
      Protobuf::write_varint($fp, (int)$this->disabledReason_);
    }
    if (!is_null($this->disabledMessageHtml_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, strlen((string)$this->disabledMessageHtml_));
      fwrite($fp, (string)$this->disabledMessageHtml_);
    }
    if (!is_null($this->errorMessage_)) {
      fwrite($fp, "\x1a");
      Protobuf::write_varint($fp, strlen((string)$this->errorMessage_));
      fwrite($fp, (string)$this->errorMessage_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->disabledReason_)) {
      $size += 1 + Protobuf::size_varint($this->disabledReason_);
    }
    if (!is_null($this->disabledMessageHtml_)) {
      $l = strlen((string)$this->disabledMessageHtml_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->errorMessage_)) {
      $l = strlen((string)$this->errorMessage_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('disabledReason_', $this->disabledReason_)
         . Protobuf::toString('disabledMessageHtml_', $this->disabledMessageHtml_)
         . Protobuf::toString('errorMessage_', $this->errorMessage_);
  }
  
  // optional int32 disabledReason = 1;

  protected $disabledReason_;
  public function resetDisabledReason() { unset($this->disabledReason_); }
  public function clearDisabledReason() { unset($this->disabledReason_); }
  public function hasDisabledReason() { return isset($this->disabledReason_); }
  public function getDisabledReason() { return $this->disabledReason_; }
  public function setDisabledReason($value) { $this->disabledReason_ = (string)$value; }
  
  // optional string disabledMessageHtml = 2;

  protected $disabledMessageHtml_;
  public function resetDisabledMessageHtml() { unset($this->disabledMessageHtml_); }
  public function clearDisabledMessageHtml() { unset($this->disabledMessageHtml_); }
  public function hasDisabledMessageHtml() { return isset($this->disabledMessageHtml_); }
  public function getDisabledMessageHtml() { return $this->disabledMessageHtml_; }
  public function setDisabledMessageHtml($value) { $this->disabledMessageHtml_ = (string)$value; }
  
  // optional string errorMessage = 3;

  protected $errorMessage_;
  public function resetErrorMessage() { unset($this->errorMessage_); }
  public function clearErrorMessage() { unset($this->errorMessage_); }
  public function hasErrorMessage() { return isset($this->errorMessage_); }
  public function getErrorMessage() { return $this->errorMessage_; }
  public function setErrorMessage($value) { $this->errorMessage_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:DisabledInfo)
}

// message EfeParam
class EfeParam {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("EfeParam: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->key_ = $tmp;
          
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->value_ = $tmp;
          $limit-=$len;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->key_)) {
      fwrite($fp, "\x08");
      Protobuf::write_varint($fp, (int)$this->key_);
    }
    if (!is_null($this->value_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, strlen((string)$this->value_));
      fwrite($fp, (string)$this->value_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->key_)) {
      $size += 1 + Protobuf::size_varint($this->key_);
    }
    if (!is_null($this->value_)) {
      $l = strlen((string)$this->value_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('key_', $this->key_)
         . Protobuf::toString('value_', $this->value_);
  }
  
  // optional int32 key = 1;

  protected $key_;
  public function resetKey() { unset($this->key_); }
  public function clearKey() { unset($this->key_); }
  public function hasKey() { return isset($this->key_); }
  public function getKey() { return $this->key_; }
  public function setKey($value) { $this->key_ = (string)$value; }
  
  // optional string value = 2;

  protected $value_;
  public function resetValue() { unset($this->value_); }
  public function clearValue() { unset($this->value_); }
  public function hasValue() { return isset($this->value_); }
  public function getValue() { return $this->value_; }
  public function setValue($value) { $this->value_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:EfeParam)
}

// message Instrument
class Instrument {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("Instrument: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->externalInstrumentId_ = $tmp;
          $limit-=$len;
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->billingAddress_ = new Address($fp, $len);
          ASSERT('$len == 0');
          break;
        case 3:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->creditCard_ = new CreditCardInstrument($fp, $len);
          ASSERT('$len == 0');
          break;
        case 4:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->carrierBilling_ = new CarrierBillingInstrument($fp, $len);
          ASSERT('$len == 0');
          break;
        case 5:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->billingAddressSpec_ = new BillingAddressSpec($fp, $len);
          ASSERT('$len == 0');
          break;
        case 6:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->instrumentFamily_ = $tmp;
          
          break;
        case 7:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->carrierBillingStatus_ = new CarrierBillingInstrumentStatus($fp, $len);
          ASSERT('$len == 0');
          break;
        case 8:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->displayTitle_ = $tmp;
          $limit-=$len;
          break;
        case 9:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->topupInfoDeprecated_ = new TopupInfo($fp, $len);
          ASSERT('$len == 0');
          break;
        case 10:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->version_ = $tmp;
          
          break;
        case 11:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->storedValue_ = new StoredValueInstrument($fp, $len);
          ASSERT('$len == 0');
          break;
        case 12:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->disabledInfo_[] = new DisabledInfo($fp, $len);
          ASSERT('$len == 0');
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->externalInstrumentId_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, strlen((string)$this->externalInstrumentId_));
      fwrite($fp, (string)$this->externalInstrumentId_);
    }
    if (!is_null($this->billingAddress_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, $this->billingAddress_->size()); // message
      $this->billingAddress_->write($fp);
    }
    if (!is_null($this->creditCard_)) {
      fwrite($fp, "\x1a");
      Protobuf::write_varint($fp, $this->creditCard_->size()); // message
      $this->creditCard_->write($fp);
    }
    if (!is_null($this->carrierBilling_)) {
      fwrite($fp, "\"");
      Protobuf::write_varint($fp, $this->carrierBilling_->size()); // message
      $this->carrierBilling_->write($fp);
    }
    if (!is_null($this->billingAddressSpec_)) {
      fwrite($fp, "*");
      Protobuf::write_varint($fp, $this->billingAddressSpec_->size()); // message
      $this->billingAddressSpec_->write($fp);
    }
    if (!is_null($this->instrumentFamily_)) {
      fwrite($fp, "0");
      Protobuf::write_varint($fp, (int)$this->instrumentFamily_);
    }
    if (!is_null($this->carrierBillingStatus_)) {
      fwrite($fp, ":");
      Protobuf::write_varint($fp, $this->carrierBillingStatus_->size()); // message
      $this->carrierBillingStatus_->write($fp);
    }
    if (!is_null($this->displayTitle_)) {
      fwrite($fp, "B");
      Protobuf::write_varint($fp, strlen((string)$this->displayTitle_));
      fwrite($fp, (string)$this->displayTitle_);
    }
    if (!is_null($this->topupInfoDeprecated_)) {
      fwrite($fp, "J");
      Protobuf::write_varint($fp, $this->topupInfoDeprecated_->size()); // message
      $this->topupInfoDeprecated_->write($fp);
    }
    if (!is_null($this->version_)) {
      fwrite($fp, "P");
      Protobuf::write_varint($fp, (int)$this->version_);
    }
    if (!is_null($this->storedValue_)) {
      fwrite($fp, "Z");
      Protobuf::write_varint($fp, $this->storedValue_->size()); // message
      $this->storedValue_->write($fp);
    }
    if (!is_null($this->disabledInfo_))
      foreach($this->disabledInfo_ as $v) {
        fwrite($fp, "b");
        Protobuf::write_varint($fp, $v->size()); // message
        $v->write($fp);
      }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->externalInstrumentId_)) {
      $l = strlen((string)$this->externalInstrumentId_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->billingAddress_)) {
      $l = $this->billingAddress_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->creditCard_)) {
      $l = $this->creditCard_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->carrierBilling_)) {
      $l = $this->carrierBilling_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->billingAddressSpec_)) {
      $l = $this->billingAddressSpec_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->instrumentFamily_)) {
      $size += 1 + Protobuf::size_varint($this->instrumentFamily_);
    }
    if (!is_null($this->carrierBillingStatus_)) {
      $l = $this->carrierBillingStatus_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->displayTitle_)) {
      $l = strlen((string)$this->displayTitle_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->topupInfoDeprecated_)) {
      $l = $this->topupInfoDeprecated_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->version_)) {
      $size += 1 + Protobuf::size_varint($this->version_);
    }
    if (!is_null($this->storedValue_)) {
      $l = $this->storedValue_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->disabledInfo_))
      foreach($this->disabledInfo_ as $v) {
        $l = $v->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('externalInstrumentId_', $this->externalInstrumentId_)
         . Protobuf::toString('billingAddress_', $this->billingAddress_)
         . Protobuf::toString('creditCard_', $this->creditCard_)
         . Protobuf::toString('carrierBilling_', $this->carrierBilling_)
         . Protobuf::toString('billingAddressSpec_', $this->billingAddressSpec_)
         . Protobuf::toString('instrumentFamily_', $this->instrumentFamily_)
         . Protobuf::toString('carrierBillingStatus_', $this->carrierBillingStatus_)
         . Protobuf::toString('displayTitle_', $this->displayTitle_)
         . Protobuf::toString('topupInfoDeprecated_', $this->topupInfoDeprecated_)
         . Protobuf::toString('version_', $this->version_)
         . Protobuf::toString('storedValue_', $this->storedValue_)
         . Protobuf::toString('disabledInfo_', $this->disabledInfo_);
  }
  
  // optional string externalInstrumentId = 1;

  protected $externalInstrumentId_;
  public function resetExternalInstrumentId() { unset($this->externalInstrumentId_); }
  public function clearExternalInstrumentId() { unset($this->externalInstrumentId_); }
  public function hasExternalInstrumentId() { return isset($this->externalInstrumentId_); }
  public function getExternalInstrumentId() { return $this->externalInstrumentId_; }
  public function setExternalInstrumentId($value) { $this->externalInstrumentId_ = (string)$value; }
  
  // optional .Address billingAddress = 2;

  protected $billingAddress_;
  public function resetBillingAddress() { unset($this->billingAddress_); }
  public function clearBillingAddress() { unset($this->billingAddress_); }
  public function hasBillingAddress() { return isset($this->billingAddress_); }
  public function getBillingAddress() { return $this->billingAddress_; }
  public function setBillingAddress(Address $value) { $this->billingAddress_ = $value; }
  
  // optional .CreditCardInstrument creditCard = 3;

  protected $creditCard_;
  public function resetCreditCard() { unset($this->creditCard_); }
  public function clearCreditCard() { unset($this->creditCard_); }
  public function hasCreditCard() { return isset($this->creditCard_); }
  public function getCreditCard() { return $this->creditCard_; }
  public function setCreditCard(CreditCardInstrument $value) { $this->creditCard_ = $value; }
  
  // optional .CarrierBillingInstrument carrierBilling = 4;

  protected $carrierBilling_;
  public function resetCarrierBilling() { unset($this->carrierBilling_); }
  public function clearCarrierBilling() { unset($this->carrierBilling_); }
  public function hasCarrierBilling() { return isset($this->carrierBilling_); }
  public function getCarrierBilling() { return $this->carrierBilling_; }
  public function setCarrierBilling(CarrierBillingInstrument $value) { $this->carrierBilling_ = $value; }
  
  // optional .BillingAddressSpec billingAddressSpec = 5;

  protected $billingAddressSpec_;
  public function resetBillingAddressSpec() { unset($this->billingAddressSpec_); }
  public function clearBillingAddressSpec() { unset($this->billingAddressSpec_); }
  public function hasBillingAddressSpec() { return isset($this->billingAddressSpec_); }
  public function getBillingAddressSpec() { return $this->billingAddressSpec_; }
  public function setBillingAddressSpec(BillingAddressSpec $value) { $this->billingAddressSpec_ = $value; }
  
  // optional int32 instrumentFamily = 6;

  protected $instrumentFamily_;
  public function resetInstrumentFamily() { unset($this->instrumentFamily_); }
  public function clearInstrumentFamily() { unset($this->instrumentFamily_); }
  public function hasInstrumentFamily() { return isset($this->instrumentFamily_); }
  public function getInstrumentFamily() { return $this->instrumentFamily_; }
  public function setInstrumentFamily($value) { $this->instrumentFamily_ = (string)$value; }
  
  // optional .CarrierBillingInstrumentStatus carrierBillingStatus = 7;

  protected $carrierBillingStatus_;
  public function resetCarrierBillingStatus() { unset($this->carrierBillingStatus_); }
  public function clearCarrierBillingStatus() { unset($this->carrierBillingStatus_); }
  public function hasCarrierBillingStatus() { return isset($this->carrierBillingStatus_); }
  public function getCarrierBillingStatus() { return $this->carrierBillingStatus_; }
  public function setCarrierBillingStatus(CarrierBillingInstrumentStatus $value) { $this->carrierBillingStatus_ = $value; }
  
  // optional string displayTitle = 8;

  protected $displayTitle_;
  public function resetDisplayTitle() { unset($this->displayTitle_); }
  public function clearDisplayTitle() { unset($this->displayTitle_); }
  public function hasDisplayTitle() { return isset($this->displayTitle_); }
  public function getDisplayTitle() { return $this->displayTitle_; }
  public function setDisplayTitle($value) { $this->displayTitle_ = (string)$value; }
  
  // optional .TopupInfo topupInfoDeprecated = 9;

  protected $topupInfoDeprecated_;
  public function resetTopupInfoDeprecated() { unset($this->topupInfoDeprecated_); }
  public function clearTopupInfoDeprecated() { unset($this->topupInfoDeprecated_); }
  public function hasTopupInfoDeprecated() { return isset($this->topupInfoDeprecated_); }
  public function getTopupInfoDeprecated() { return $this->topupInfoDeprecated_; }
  public function setTopupInfoDeprecated(TopupInfo $value) { $this->topupInfoDeprecated_ = $value; }
  
  // optional int32 version = 10;

  protected $version_;
  public function resetVersion() { unset($this->version_); }
  public function clearVersion() { unset($this->version_); }
  public function hasVersion() { return isset($this->version_); }
  public function getVersion() { return $this->version_; }
  public function setVersion($value) { $this->version_ = (string)$value; }
  
  // optional .StoredValueInstrument storedValue = 11;

  protected $storedValue_;
  public function resetStoredValue() { unset($this->storedValue_); }
  public function clearStoredValue() { unset($this->storedValue_); }
  public function hasStoredValue() { return isset($this->storedValue_); }
  public function getStoredValue() { return $this->storedValue_; }
  public function setStoredValue(StoredValueInstrument $value) { $this->storedValue_ = $value; }
  
  // repeated .DisabledInfo disabledInfo = 12;

  protected $disabledInfo_ = array();
  public function clearDisabledInfo() { $this->disabledInfo_ = array(); }
  public function getDisabledInfoCount() { return count($this->disabledInfo_); }
  public function hasDisabledInfo() { return (count($this->disabledInfo_) > 0); }
  public function indexOfDisabledInfo($value) { return array_search($value,$this->disabledInfo_);}
  public function removeDisabledInfo($index) { unset($this->disabledInfo_[$index]); }
  public function removeValDisabledInfo($value) { $idx = array_search($value,$this->disabledInfo_); if($idx !== FALSE){unset($this->disabledInfo_[$idx]); }}
  public function removeValsDisabledInfo($values) { foreach($values as $value){$idx = array_search($value,$this->disabledInfo_); if($idx !== FALSE){unset($this->disabledInfo_[$idx]); }}}
  public function pushDisabledInfo($newvar) { return array_push($this->disabledInfo_,$newvar); }
  public function popDisabledInfo() { return array_pop($this->disabledInfo_); }
  public function shiftDisabledInfo() { return array_shift($this->disabledInfo_); }
  public function unshiftDisabledInfo($newvar) { return array_unshift($this->disabledInfo_,$newvar); }
  public function getDisabledInfo($index) { return $this->disabledInfo_[$index]; }
  public function getDisabledInfoArray() { return $this->disabledInfo_; }
  public function setDisabledInfo($index, $value) {$this->disabledInfo_[$index] = $value;	}
  public function addDisabledInfo($value) { $this->disabledInfo_[] = $value; }
  public function addAllDisabledInfo(array $values) { foreach($values as $value) {$this->disabledInfo_[] = $value;} }
  
  // @@protoc_insertion_point(class_scope:Instrument)
}

// message InstrumentSetupInfo
class InstrumentSetupInfo {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("InstrumentSetupInfo: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->instrumentFamily_ = $tmp;
          
          break;
        case 2:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->supported_ = $tmp > 0 ? true : false;
          break;
        case 3:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->addressChallenge_ = new AddressChallenge($fp, $len);
          ASSERT('$len == 0');
          break;
        case 4:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->balance_ = new Money($fp, $len);
          ASSERT('$len == 0');
          break;
        case 5:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->footerHtml_[] = $tmp;
          $limit-=$len;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->instrumentFamily_)) {
      fwrite($fp, "\x08");
      Protobuf::write_varint($fp, (int)$this->instrumentFamily_);
    }
    if (!is_null($this->supported_)) {
      fwrite($fp, "\x10");
      Protobuf::write_varint($fp, (int)$this->supported_ ? 1 : 0);
    }
    if (!is_null($this->addressChallenge_)) {
      fwrite($fp, "\x1a");
      Protobuf::write_varint($fp, $this->addressChallenge_->size()); // message
      $this->addressChallenge_->write($fp);
    }
    if (!is_null($this->balance_)) {
      fwrite($fp, "\"");
      Protobuf::write_varint($fp, $this->balance_->size()); // message
      $this->balance_->write($fp);
    }
    if (!is_null($this->footerHtml_))
      foreach($this->footerHtml_ as $v) {
        fwrite($fp, "*");
        Protobuf::write_varint($fp, strlen((string)$v));
        fwrite($fp, (string)$v);
      }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->instrumentFamily_)) {
      $size += 1 + Protobuf::size_varint($this->instrumentFamily_);
    }
    if (!is_null($this->supported_)) {
      $size += 2;
    }
    if (!is_null($this->addressChallenge_)) {
      $l = $this->addressChallenge_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->balance_)) {
      $l = $this->balance_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->footerHtml_))
      foreach($this->footerHtml_ as $v) {
        $l = strlen((string)$v);
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('instrumentFamily_', $this->instrumentFamily_)
         . Protobuf::toString('supported_', $this->supported_)
         . Protobuf::toString('addressChallenge_', $this->addressChallenge_)
         . Protobuf::toString('balance_', $this->balance_)
         . Protobuf::toString('footerHtml_', $this->footerHtml_);
  }
  
  // optional int32 instrumentFamily = 1;

  protected $instrumentFamily_;
  public function resetInstrumentFamily() { unset($this->instrumentFamily_); }
  public function clearInstrumentFamily() { unset($this->instrumentFamily_); }
  public function hasInstrumentFamily() { return isset($this->instrumentFamily_); }
  public function getInstrumentFamily() { return $this->instrumentFamily_; }
  public function setInstrumentFamily($value) { $this->instrumentFamily_ = (string)$value; }
  
  // optional bool supported = 2;

  protected $supported_;
  public function resetSupported() { unset($this->supported_); }
  public function clearSupported() { unset($this->supported_); }
  public function hasSupported() { return isset($this->supported_); }
  public function getSupported() { return $this->supported_; }
  public function setSupported($value) { $this->supported_ = (bool)$value; }
  
  // optional .AddressChallenge addressChallenge = 3;

  protected $addressChallenge_;
  public function resetAddressChallenge() { unset($this->addressChallenge_); }
  public function clearAddressChallenge() { unset($this->addressChallenge_); }
  public function hasAddressChallenge() { return isset($this->addressChallenge_); }
  public function getAddressChallenge() { return $this->addressChallenge_; }
  public function setAddressChallenge(AddressChallenge $value) { $this->addressChallenge_ = $value; }
  
  // optional .Money balance = 4;

  protected $balance_;
  public function resetBalance() { unset($this->balance_); }
  public function clearBalance() { unset($this->balance_); }
  public function hasBalance() { return isset($this->balance_); }
  public function getBalance() { return $this->balance_; }
  public function setBalance(Money $value) { $this->balance_ = $value; }
  
  // repeated string footerHtml = 5;

  protected $footerHtml_ = array();
  public function clearFooterHtml() { $this->footerHtml_ = array(); }
  public function getFooterHtmlCount() { return count($this->footerHtml_); }
  public function hasFooterHtml() { return (count($this->footerHtml_) > 0); }
  public function indexOfFooterHtml($value) { return array_search($value,$this->footerHtml_);}
  public function removeFooterHtml($index) { unset($this->footerHtml_[$index]); }
  public function removeValFooterHtml($value) { $idx = array_search($value,$this->footerHtml_); if($idx !== FALSE){unset($this->footerHtml_[$idx]); }}
  public function removeValsFooterHtml($values) { foreach($values as $value){$idx = array_search($value,$this->footerHtml_); if($idx !== FALSE){unset($this->footerHtml_[$idx]); }}}
  public function pushFooterHtml($newvar) { return array_push($this->footerHtml_,(string)$newvar); }
  public function popFooterHtml() { return array_pop($this->footerHtml_); }
  public function shiftFooterHtml() { return array_shift($this->footerHtml_); }
  public function unshiftFooterHtml($newvar) { return array_unshift($this->footerHtml_,(string)$newvar); }
  public function getFooterHtml($index) { return $this->footerHtml_[$index]; }
  public function getFooterHtmlArray() { return $this->footerHtml_; }
  public function setFooterHtml($index, $value) {$this->footerHtml_[$index] = (string)$value;	}
  public function addFooterHtml($value) { $this->footerHtml_[] = (string)$value; }
  public function addAllFooterHtml(array $values) { foreach($values as $value) {$this->footerHtml_[] = (string)$value;} }
  
  // @@protoc_insertion_point(class_scope:InstrumentSetupInfo)
}

// message PasswordPrompt
class PasswordPrompt {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("PasswordPrompt: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->prompt_ = $tmp;
          $limit-=$len;
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->forgotPasswordUrl_ = $tmp;
          $limit-=$len;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->prompt_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, strlen((string)$this->prompt_));
      fwrite($fp, (string)$this->prompt_);
    }
    if (!is_null($this->forgotPasswordUrl_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, strlen((string)$this->forgotPasswordUrl_));
      fwrite($fp, (string)$this->forgotPasswordUrl_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->prompt_)) {
      $l = strlen((string)$this->prompt_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->forgotPasswordUrl_)) {
      $l = strlen((string)$this->forgotPasswordUrl_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('prompt_', $this->prompt_)
         . Protobuf::toString('forgotPasswordUrl_', $this->forgotPasswordUrl_);
  }
  
  // optional string prompt = 1;

  protected $prompt_;
  public function resetPrompt() { unset($this->prompt_); }
  public function clearPrompt() { unset($this->prompt_); }
  public function hasPrompt() { return isset($this->prompt_); }
  public function getPrompt() { return $this->prompt_; }
  public function setPrompt($value) { $this->prompt_ = (string)$value; }
  
  // optional string forgotPasswordUrl = 2;

  protected $forgotPasswordUrl_;
  public function resetForgotPasswordUrl() { unset($this->forgotPasswordUrl_); }
  public function clearForgotPasswordUrl() { unset($this->forgotPasswordUrl_); }
  public function hasForgotPasswordUrl() { return isset($this->forgotPasswordUrl_); }
  public function getForgotPasswordUrl() { return $this->forgotPasswordUrl_; }
  public function setForgotPasswordUrl($value) { $this->forgotPasswordUrl_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:PasswordPrompt)
}

// message StoredValueInstrument
class StoredValueInstrument {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("StoredValueInstrument: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->type_ = $tmp;
          
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->balance_ = new Money($fp, $len);
          ASSERT('$len == 0');
          break;
        case 3:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->topupInfo_ = new TopupInfo($fp, $len);
          ASSERT('$len == 0');
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->type_)) {
      fwrite($fp, "\x08");
      Protobuf::write_varint($fp, (int)$this->type_);
    }
    if (!is_null($this->balance_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, $this->balance_->size()); // message
      $this->balance_->write($fp);
    }
    if (!is_null($this->topupInfo_)) {
      fwrite($fp, "\x1a");
      Protobuf::write_varint($fp, $this->topupInfo_->size()); // message
      $this->topupInfo_->write($fp);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->type_)) {
      $size += 1 + Protobuf::size_varint($this->type_);
    }
    if (!is_null($this->balance_)) {
      $l = $this->balance_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->topupInfo_)) {
      $l = $this->topupInfo_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('type_', $this->type_)
         . Protobuf::toString('balance_', $this->balance_)
         . Protobuf::toString('topupInfo_', $this->topupInfo_);
  }
  
  // optional int32 type = 1;

  protected $type_;
  public function resetType() { unset($this->type_); }
  public function clearType() { unset($this->type_); }
  public function hasType() { return isset($this->type_); }
  public function getType() { return $this->type_; }
  public function setType($value) { $this->type_ = (string)$value; }
  
  // optional .Money balance = 2;

  protected $balance_;
  public function resetBalance() { unset($this->balance_); }
  public function clearBalance() { unset($this->balance_); }
  public function hasBalance() { return isset($this->balance_); }
  public function getBalance() { return $this->balance_; }
  public function setBalance(Money $value) { $this->balance_ = $value; }
  
  // optional .TopupInfo topupInfo = 3;

  protected $topupInfo_;
  public function resetTopupInfo() { unset($this->topupInfo_); }
  public function clearTopupInfo() { unset($this->topupInfo_); }
  public function hasTopupInfo() { return isset($this->topupInfo_); }
  public function getTopupInfo() { return $this->topupInfo_; }
  public function setTopupInfo(TopupInfo $value) { $this->topupInfo_ = $value; }
  
  // @@protoc_insertion_point(class_scope:StoredValueInstrument)
}

// message TopupInfo
class TopupInfo {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("TopupInfo: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->optionsContainerDocidDeprecated_ = $tmp;
          $limit-=$len;
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->optionsListUrl_ = $tmp;
          $limit-=$len;
          break;
        case 3:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->subtitle_ = $tmp;
          $limit-=$len;
          break;
        case 4:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->optionsContainerDocid_ = new Docid($fp, $len);
          ASSERT('$len == 0');
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->optionsContainerDocidDeprecated_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, strlen((string)$this->optionsContainerDocidDeprecated_));
      fwrite($fp, (string)$this->optionsContainerDocidDeprecated_);
    }
    if (!is_null($this->optionsListUrl_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, strlen((string)$this->optionsListUrl_));
      fwrite($fp, (string)$this->optionsListUrl_);
    }
    if (!is_null($this->subtitle_)) {
      fwrite($fp, "\x1a");
      Protobuf::write_varint($fp, strlen((string)$this->subtitle_));
      fwrite($fp, (string)$this->subtitle_);
    }
    if (!is_null($this->optionsContainerDocid_)) {
      fwrite($fp, "\"");
      Protobuf::write_varint($fp, $this->optionsContainerDocid_->size()); // message
      $this->optionsContainerDocid_->write($fp);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->optionsContainerDocidDeprecated_)) {
      $l = strlen((string)$this->optionsContainerDocidDeprecated_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->optionsListUrl_)) {
      $l = strlen((string)$this->optionsListUrl_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->subtitle_)) {
      $l = strlen((string)$this->subtitle_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->optionsContainerDocid_)) {
      $l = $this->optionsContainerDocid_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('optionsContainerDocidDeprecated_', $this->optionsContainerDocidDeprecated_)
         . Protobuf::toString('optionsListUrl_', $this->optionsListUrl_)
         . Protobuf::toString('subtitle_', $this->subtitle_)
         . Protobuf::toString('optionsContainerDocid_', $this->optionsContainerDocid_);
  }
  
  // optional string optionsContainerDocidDeprecated = 1;

  protected $optionsContainerDocidDeprecated_;
  public function resetOptionsContainerDocidDeprecated() { unset($this->optionsContainerDocidDeprecated_); }
  public function clearOptionsContainerDocidDeprecated() { unset($this->optionsContainerDocidDeprecated_); }
  public function hasOptionsContainerDocidDeprecated() { return isset($this->optionsContainerDocidDeprecated_); }
  public function getOptionsContainerDocidDeprecated() { return $this->optionsContainerDocidDeprecated_; }
  public function setOptionsContainerDocidDeprecated($value) { $this->optionsContainerDocidDeprecated_ = (string)$value; }
  
  // optional string optionsListUrl = 2;

  protected $optionsListUrl_;
  public function resetOptionsListUrl() { unset($this->optionsListUrl_); }
  public function clearOptionsListUrl() { unset($this->optionsListUrl_); }
  public function hasOptionsListUrl() { return isset($this->optionsListUrl_); }
  public function getOptionsListUrl() { return $this->optionsListUrl_; }
  public function setOptionsListUrl($value) { $this->optionsListUrl_ = (string)$value; }
  
  // optional string subtitle = 3;

  protected $subtitle_;
  public function resetSubtitle() { unset($this->subtitle_); }
  public function clearSubtitle() { unset($this->subtitle_); }
  public function hasSubtitle() { return isset($this->subtitle_); }
  public function getSubtitle() { return $this->subtitle_; }
  public function setSubtitle($value) { $this->subtitle_ = (string)$value; }
  
  // optional .Docid optionsContainerDocid = 4;

  protected $optionsContainerDocid_;
  public function resetOptionsContainerDocid() { unset($this->optionsContainerDocid_); }
  public function clearOptionsContainerDocid() { unset($this->optionsContainerDocid_); }
  public function hasOptionsContainerDocid() { return isset($this->optionsContainerDocid_); }
  public function getOptionsContainerDocid() { return $this->optionsContainerDocid_; }
  public function setOptionsContainerDocid(Docid $value) { $this->optionsContainerDocid_ = $value; }
  
  // @@protoc_insertion_point(class_scope:TopupInfo)
}

// message ConsumePurchaseResponse
class ConsumePurchaseResponse {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("ConsumePurchaseResponse: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->libraryUpdate_ = new LibraryUpdate($fp, $len);
          ASSERT('$len == 0');
          break;
        case 2:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->status_ = $tmp;
          
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->libraryUpdate_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, $this->libraryUpdate_->size()); // message
      $this->libraryUpdate_->write($fp);
    }
    if (!is_null($this->status_)) {
      fwrite($fp, "\x10");
      Protobuf::write_varint($fp, (int)$this->status_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->libraryUpdate_)) {
      $l = $this->libraryUpdate_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->status_)) {
      $size += 1 + Protobuf::size_varint($this->status_);
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('libraryUpdate_', $this->libraryUpdate_)
         . Protobuf::toString('status_', $this->status_);
  }
  
  // optional .LibraryUpdate libraryUpdate = 1;

  protected $libraryUpdate_;
  public function resetLibraryUpdate() { unset($this->libraryUpdate_); }
  public function clearLibraryUpdate() { unset($this->libraryUpdate_); }
  public function hasLibraryUpdate() { return isset($this->libraryUpdate_); }
  public function getLibraryUpdate() { return $this->libraryUpdate_; }
  public function setLibraryUpdate(LibraryUpdate $value) { $this->libraryUpdate_ = $value; }
  
  // optional int32 status = 2;

  protected $status_;
  public function resetStatus() { unset($this->status_); }
  public function clearStatus() { unset($this->status_); }
  public function hasStatus() { return isset($this->status_); }
  public function getStatus() { return $this->status_; }
  public function setStatus($value) { $this->status_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:ConsumePurchaseResponse)
}

// message ContainerMetadata
class ContainerMetadata {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("ContainerMetadata: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->browseUrl_ = $tmp;
          $limit-=$len;
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->nextPageUrl_ = $tmp;
          $limit-=$len;
          break;
        case 3:
          ASSERT('$wire == 1');
          $tmp = Protobuf::read_double($fp);
          if ($tmp === false)
            throw new Exception('Protobuf::read_double returned false');
          $this->relevance_ = $tmp;
          $limit-=8;
          break;
        case 4:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->estimatedResults_ = $tmp;
          
          break;
        case 5:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->analyticsCookie_ = $tmp;
          $limit-=$len;
          break;
        case 6:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->ordered_ = $tmp > 0 ? true : false;
          break;
        case 7:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->containerView_[] = new ContainerView($fp, $len);
          ASSERT('$len == 0');
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->browseUrl_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, strlen((string)$this->browseUrl_));
      fwrite($fp, (string)$this->browseUrl_);
    }
    if (!is_null($this->nextPageUrl_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, strlen((string)$this->nextPageUrl_));
      fwrite($fp, (string)$this->nextPageUrl_);
    }
    if (!is_null($this->relevance_)) {
      fwrite($fp, "\x19");
      Protobuf::write_double($fp, (double)$this->relevance_);
    }
    if (!is_null($this->estimatedResults_)) {
      fwrite($fp, " ");
      Protobuf::write_varint($fp, (int)$this->estimatedResults_);
    }
    if (!is_null($this->analyticsCookie_)) {
      fwrite($fp, "*");
      Protobuf::write_varint($fp, strlen((string)$this->analyticsCookie_));
      fwrite($fp, (string)$this->analyticsCookie_);
    }
    if (!is_null($this->ordered_)) {
      fwrite($fp, "0");
      Protobuf::write_varint($fp, (int)$this->ordered_ ? 1 : 0);
    }
    if (!is_null($this->containerView_))
      foreach($this->containerView_ as $v) {
        fwrite($fp, ":");
        Protobuf::write_varint($fp, $v->size()); // message
        $v->write($fp);
      }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->browseUrl_)) {
      $l = strlen((string)$this->browseUrl_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->nextPageUrl_)) {
      $l = strlen((string)$this->nextPageUrl_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->relevance_)) {
      $size += 9;
    }
    if (!is_null($this->estimatedResults_)) {
      $size += 1 + Protobuf::size_varint($this->estimatedResults_);
    }
    if (!is_null($this->analyticsCookie_)) {
      $l = strlen((string)$this->analyticsCookie_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->ordered_)) {
      $size += 2;
    }
    if (!is_null($this->containerView_))
      foreach($this->containerView_ as $v) {
        $l = $v->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('browseUrl_', $this->browseUrl_)
         . Protobuf::toString('nextPageUrl_', $this->nextPageUrl_)
         . Protobuf::toString('relevance_', $this->relevance_)
         . Protobuf::toString('estimatedResults_', $this->estimatedResults_)
         . Protobuf::toString('analyticsCookie_', $this->analyticsCookie_)
         . Protobuf::toString('ordered_', $this->ordered_)
         . Protobuf::toString('containerView_', $this->containerView_);
  }
  
  // optional string browseUrl = 1;

  protected $browseUrl_;
  public function resetBrowseUrl() { unset($this->browseUrl_); }
  public function clearBrowseUrl() { unset($this->browseUrl_); }
  public function hasBrowseUrl() { return isset($this->browseUrl_); }
  public function getBrowseUrl() { return $this->browseUrl_; }
  public function setBrowseUrl($value) { $this->browseUrl_ = (string)$value; }
  
  // optional string nextPageUrl = 2;

  protected $nextPageUrl_;
  public function resetNextPageUrl() { unset($this->nextPageUrl_); }
  public function clearNextPageUrl() { unset($this->nextPageUrl_); }
  public function hasNextPageUrl() { return isset($this->nextPageUrl_); }
  public function getNextPageUrl() { return $this->nextPageUrl_; }
  public function setNextPageUrl($value) { $this->nextPageUrl_ = (string)$value; }
  
  // optional double relevance = 3;

  protected $relevance_;
  public function resetRelevance() { unset($this->relevance_); }
  public function clearRelevance() { unset($this->relevance_); }
  public function hasRelevance() { return isset($this->relevance_); }
  public function getRelevance() { return $this->relevance_; }
  public function setRelevance($value) { $this->relevance_ = (float)$value; }
  
  // optional int64 estimatedResults = 4;

  protected $estimatedResults_;
  public function resetEstimatedResults() { unset($this->estimatedResults_); }
  public function clearEstimatedResults() { unset($this->estimatedResults_); }
  public function hasEstimatedResults() { return isset($this->estimatedResults_); }
  public function getEstimatedResults() { return $this->estimatedResults_; }
  public function setEstimatedResults($value) { $this->estimatedResults_ = (string)$value; }
  
  // optional string analyticsCookie = 5;

  protected $analyticsCookie_;
  public function resetAnalyticsCookie() { unset($this->analyticsCookie_); }
  public function clearAnalyticsCookie() { unset($this->analyticsCookie_); }
  public function hasAnalyticsCookie() { return isset($this->analyticsCookie_); }
  public function getAnalyticsCookie() { return $this->analyticsCookie_; }
  public function setAnalyticsCookie($value) { $this->analyticsCookie_ = (string)$value; }
  
  // optional bool ordered = 6;

  protected $ordered_;
  public function resetOrdered() { unset($this->ordered_); }
  public function clearOrdered() { unset($this->ordered_); }
  public function hasOrdered() { return isset($this->ordered_); }
  public function getOrdered() { return $this->ordered_; }
  public function setOrdered($value) { $this->ordered_ = (bool)$value; }
  
  // repeated .ContainerView containerView = 7;

  protected $containerView_ = array();
  public function clearContainerView() { $this->containerView_ = array(); }
  public function getContainerViewCount() { return count($this->containerView_); }
  public function hasContainerView() { return (count($this->containerView_) > 0); }
  public function indexOfContainerView($value) { return array_search($value,$this->containerView_);}
  public function removeContainerView($index) { unset($this->containerView_[$index]); }
  public function removeValContainerView($value) { $idx = array_search($value,$this->containerView_); if($idx !== FALSE){unset($this->containerView_[$idx]); }}
  public function removeValsContainerView($values) { foreach($values as $value){$idx = array_search($value,$this->containerView_); if($idx !== FALSE){unset($this->containerView_[$idx]); }}}
  public function pushContainerView($newvar) { return array_push($this->containerView_,$newvar); }
  public function popContainerView() { return array_pop($this->containerView_); }
  public function shiftContainerView() { return array_shift($this->containerView_); }
  public function unshiftContainerView($newvar) { return array_unshift($this->containerView_,$newvar); }
  public function getContainerView($index) { return $this->containerView_[$index]; }
  public function getContainerViewArray() { return $this->containerView_; }
  public function setContainerView($index, $value) {$this->containerView_[$index] = $value;	}
  public function addContainerView($value) { $this->containerView_[] = $value; }
  public function addAllContainerView(array $values) { foreach($values as $value) {$this->containerView_[] = $value;} }
  
  // @@protoc_insertion_point(class_scope:ContainerMetadata)
}

// message ContainerView
class ContainerView {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("ContainerView: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->selected_ = $tmp > 0 ? true : false;
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->title_ = $tmp;
          $limit-=$len;
          break;
        case 3:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->listUrl_ = $tmp;
          $limit-=$len;
          break;
        case 4:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->serverLogsCookie_ = $tmp;
          $limit-=$len;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->selected_)) {
      fwrite($fp, "\x08");
      Protobuf::write_varint($fp, (int)$this->selected_ ? 1 : 0);
    }
    if (!is_null($this->title_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, strlen((string)$this->title_));
      fwrite($fp, (string)$this->title_);
    }
    if (!is_null($this->listUrl_)) {
      fwrite($fp, "\x1a");
      Protobuf::write_varint($fp, strlen((string)$this->listUrl_));
      fwrite($fp, (string)$this->listUrl_);
    }
    if (!is_null($this->serverLogsCookie_)) {
      fwrite($fp, "\"");
      Protobuf::write_varint($fp, strlen((string)$this->serverLogsCookie_));
      fwrite($fp, (string)$this->serverLogsCookie_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->selected_)) {
      $size += 2;
    }
    if (!is_null($this->title_)) {
      $l = strlen((string)$this->title_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->listUrl_)) {
      $l = strlen((string)$this->listUrl_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->serverLogsCookie_)) {
      $l = strlen((string)$this->serverLogsCookie_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('selected_', $this->selected_)
         . Protobuf::toString('title_', $this->title_)
         . Protobuf::toString('listUrl_', $this->listUrl_)
         . Protobuf::toString('serverLogsCookie_', $this->serverLogsCookie_);
  }
  
  // optional bool selected = 1;

  protected $selected_;
  public function resetSelected() { unset($this->selected_); }
  public function clearSelected() { unset($this->selected_); }
  public function hasSelected() { return isset($this->selected_); }
  public function getSelected() { return $this->selected_; }
  public function setSelected($value) { $this->selected_ = (bool)$value; }
  
  // optional string title = 2;

  protected $title_;
  public function resetTitle() { unset($this->title_); }
  public function clearTitle() { unset($this->title_); }
  public function hasTitle() { return isset($this->title_); }
  public function getTitle() { return $this->title_; }
  public function setTitle($value) { $this->title_ = (string)$value; }
  
  // optional string listUrl = 3;

  protected $listUrl_;
  public function resetListUrl() { unset($this->listUrl_); }
  public function clearListUrl() { unset($this->listUrl_); }
  public function hasListUrl() { return isset($this->listUrl_); }
  public function getListUrl() { return $this->listUrl_; }
  public function setListUrl($value) { $this->listUrl_ = (string)$value; }
  
  // optional bytes serverLogsCookie = 4;

  protected $serverLogsCookie_;
  public function resetServerLogsCookie() { unset($this->serverLogsCookie_); }
  public function clearServerLogsCookie() { unset($this->serverLogsCookie_); }
  public function hasServerLogsCookie() { return isset($this->serverLogsCookie_); }
  public function getServerLogsCookie() { return $this->serverLogsCookie_; }
  public function setServerLogsCookie($value) { $this->serverLogsCookie_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:ContainerView)
}

// message FlagContentResponse
class FlagContentResponse {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("FlagContentResponse: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  public function size() {
    $size = 0;
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown);
  }
  
  // @@protoc_insertion_point(class_scope:FlagContentResponse)
}


// group DebugInfo.Timing
class DebugInfo_Timing {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("DebugInfo_Timing: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 2:
          ASSERT('$wire == 4');
          break 2;
        case 3:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->name_ = $tmp;
          $limit-=$len;
          break;
        case 4:
          ASSERT('$wire == 1');
          $tmp = Protobuf::read_double($fp);
          if ($tmp === false)
            throw new Exception('Protobuf::read_double returned false');
          $this->timeInMs_ = $tmp;
          $limit-=8;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->name_)) {
      fwrite($fp, "\x1a");
      Protobuf::write_varint($fp, strlen((string)$this->name_));
      fwrite($fp, (string)$this->name_);
    }
    if (!is_null($this->timeInMs_)) {
      fwrite($fp, "!");
      Protobuf::write_double($fp, (double)$this->timeInMs_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->name_)) {
      $l = strlen((string)$this->name_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->timeInMs_)) {
      $size += 9;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('name_', $this->name_)
         . Protobuf::toString('timeInMs_', $this->timeInMs_);
  }
  
  // optional string name = 3;

  protected $name_;
  public function resetName() { unset($this->name_); }
  public function clearName() { unset($this->name_); }
  public function hasName() { return isset($this->name_); }
  public function getName() { return $this->name_; }
  public function setName($value) { $this->name_ = (string)$value; }
  
  // optional double timeInMs = 4;

  protected $timeInMs_;
  public function resetTimeInMs() { unset($this->timeInMs_); }
  public function clearTimeInMs() { unset($this->timeInMs_); }
  public function hasTimeInMs() { return isset($this->timeInMs_); }
  public function getTimeInMs() { return $this->timeInMs_; }
  public function setTimeInMs($value) { $this->timeInMs_ = (float)$value; }
  
  // @@protoc_insertion_point(class_scope:DebugInfo.Timing)
}

// message DebugInfo
class DebugInfo {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("DebugInfo: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->message_[] = $tmp;
          $limit-=$len;
          break;
        case 2:
          ASSERT('$wire == 3');
          $this->timing_[] = new DebugInfo_Timing($fp, $limit);
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->message_))
      foreach($this->message_ as $v) {
        fwrite($fp, "\x0a");
        Protobuf::write_varint($fp, strlen((string)$v));
        fwrite($fp, (string)$v);
      }
    if (!is_null($this->timing_))
      foreach($this->timing_ as $v) {
        fwrite($fp, "\x13");
        $v->write($fp); // group
        fwrite($fp, "\x14");
      }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->message_))
      foreach($this->message_ as $v) {
        $l = strlen((string)$v);
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
    if (!is_null($this->timing_))
      foreach($this->timing_ as $v) {
        $size += 2 + $v->size();
      }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('message_', $this->message_)
         . Protobuf::toString('timing_', $this->timing_);
  }
  
  // repeated string message = 1;

  protected $message_ = array();
  public function clearMessage() { $this->message_ = array(); }
  public function getMessageCount() { return count($this->message_); }
  public function hasMessage() { return (count($this->message_) > 0); }
  public function indexOfMessage($value) { return array_search($value,$this->message_);}
  public function removeMessage($index) { unset($this->message_[$index]); }
  public function removeValMessage($value) { $idx = array_search($value,$this->message_); if($idx !== FALSE){unset($this->message_[$idx]); }}
  public function removeValsMessage($values) { foreach($values as $value){$idx = array_search($value,$this->message_); if($idx !== FALSE){unset($this->message_[$idx]); }}}
  public function pushMessage($newvar) { return array_push($this->message_,(string)$newvar); }
  public function popMessage() { return array_pop($this->message_); }
  public function shiftMessage() { return array_shift($this->message_); }
  public function unshiftMessage($newvar) { return array_unshift($this->message_,(string)$newvar); }
  public function getMessage($index) { return $this->message_[$index]; }
  public function getMessageArray() { return $this->message_; }
  public function setMessage($index, $value) {$this->message_[$index] = (string)$value;	}
  public function addMessage($value) { $this->message_[] = (string)$value; }
  public function addAllMessage(array $values) { foreach($values as $value) {$this->message_[] = (string)$value;} }
  
  // repeated group Timing = 2
  protected $timing_ = array();
  public function clearTiming() { $this->timing_ = array(); }
  public function getTimingCount() { return count($this->timing_); }
  public function hasTiming() { return (count($this->timing_) > 0); }
  public function indexOfTiming($value) { return array_search($value,$this->timing_);}
  public function removeTiming($index) { unset($this->timing_[$index]); }
  public function removeValTiming($value) { $idx = array_search($value,$this->timing_); if($idx !== FALSE){unset($this->timing_[$idx]); }}
  public function removeValsTiming($values) { foreach($values as $value){$idx = array_search($value,$this->timing_); if($idx !== FALSE){unset($this->timing_[$idx]); }}}
  public function pushTiming($newvar) { return array_push($this->timing_,$newvar); }
  public function popTiming() { return array_pop($this->timing_); }
  public function shiftTiming() { return array_shift($this->timing_); }
  public function unshiftTiming($newvar) { return array_unshift($this->timing_,$newvar); }
  public function getTiming($index) { return $this->timing_[$index]; }
  public function getTimingArray() { return $this->timing_; }
  public function setTiming($index, $value) {$this->timing_[$index] = $value;	}
  public function addTiming($value) { $this->timing_[] = $value; }
  public function addAllTiming(array $values) { foreach($values as $value) {$this->timing_[] = $value;} }
  
  // @@protoc_insertion_point(class_scope:DebugInfo)
}

// message DebugSettingsResponse
class DebugSettingsResponse {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("DebugSettingsResponse: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->playCountryOverride_ = $tmp;
          $limit-=$len;
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->playCountryDebugInfo_ = $tmp;
          $limit-=$len;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->playCountryOverride_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, strlen((string)$this->playCountryOverride_));
      fwrite($fp, (string)$this->playCountryOverride_);
    }
    if (!is_null($this->playCountryDebugInfo_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, strlen((string)$this->playCountryDebugInfo_));
      fwrite($fp, (string)$this->playCountryDebugInfo_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->playCountryOverride_)) {
      $l = strlen((string)$this->playCountryOverride_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->playCountryDebugInfo_)) {
      $l = strlen((string)$this->playCountryDebugInfo_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('playCountryOverride_', $this->playCountryOverride_)
         . Protobuf::toString('playCountryDebugInfo_', $this->playCountryDebugInfo_);
  }
  
  // optional string playCountryOverride = 1;

  protected $playCountryOverride_;
  public function resetPlayCountryOverride() { unset($this->playCountryOverride_); }
  public function clearPlayCountryOverride() { unset($this->playCountryOverride_); }
  public function hasPlayCountryOverride() { return isset($this->playCountryOverride_); }
  public function getPlayCountryOverride() { return $this->playCountryOverride_; }
  public function setPlayCountryOverride($value) { $this->playCountryOverride_ = (string)$value; }
  
  // optional string playCountryDebugInfo = 2;

  protected $playCountryDebugInfo_;
  public function resetPlayCountryDebugInfo() { unset($this->playCountryDebugInfo_); }
  public function clearPlayCountryDebugInfo() { unset($this->playCountryDebugInfo_); }
  public function hasPlayCountryDebugInfo() { return isset($this->playCountryDebugInfo_); }
  public function getPlayCountryDebugInfo() { return $this->playCountryDebugInfo_; }
  public function setPlayCountryDebugInfo($value) { $this->playCountryDebugInfo_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:DebugSettingsResponse)
}

// message DeliveryResponse
class DeliveryResponse {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("DeliveryResponse: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->status_ = $tmp;
          
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->appDeliveryData_ = new AndroidAppDeliveryData($fp, $len);
          ASSERT('$len == 0');
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->status_)) {
      fwrite($fp, "\x08");
      Protobuf::write_varint($fp, (int)$this->status_);
    }
    if (!is_null($this->appDeliveryData_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, $this->appDeliveryData_->size()); // message
      $this->appDeliveryData_->write($fp);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->status_)) {
      $size += 1 + Protobuf::size_varint($this->status_);
    }
    if (!is_null($this->appDeliveryData_)) {
      $l = $this->appDeliveryData_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('status_', $this->status_)
         . Protobuf::toString('appDeliveryData_', $this->appDeliveryData_);
  }
  
  // optional int32 status = 1;

  protected $status_;
  public function resetStatus() { unset($this->status_); }
  public function clearStatus() { unset($this->status_); }
  public function hasStatus() { return isset($this->status_); }
  public function getStatus() { return $this->status_; }
  public function setStatus($value) { $this->status_ = (string)$value; }
  
  // optional .AndroidAppDeliveryData appDeliveryData = 2;

  protected $appDeliveryData_;
  public function resetAppDeliveryData() { unset($this->appDeliveryData_); }
  public function clearAppDeliveryData() { unset($this->appDeliveryData_); }
  public function hasAppDeliveryData() { return isset($this->appDeliveryData_); }
  public function getAppDeliveryData() { return $this->appDeliveryData_; }
  public function setAppDeliveryData(AndroidAppDeliveryData $value) { $this->appDeliveryData_ = $value; }
  
  // @@protoc_insertion_point(class_scope:DeliveryResponse)
}

// message BulkDetailsEntry
class BulkDetailsEntry {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("BulkDetailsEntry: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->doc_ = new DocV2($fp, $len);
          ASSERT('$len == 0');
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->doc_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, $this->doc_->size()); // message
      $this->doc_->write($fp);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->doc_)) {
      $l = $this->doc_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('doc_', $this->doc_);
  }
  
  // optional .DocV2 doc = 1;

  protected $doc_;
  public function resetDoc() { unset($this->doc_); }
  public function clearDoc() { unset($this->doc_); }
  public function hasDoc() { return isset($this->doc_); }
  public function getDoc() { return $this->doc_; }
  public function setDoc(DocV2 $value) { $this->doc_ = $value; }
  
  // @@protoc_insertion_point(class_scope:BulkDetailsEntry)
}

// message BulkDetailsRequest
class BulkDetailsRequest {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("BulkDetailsRequest: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->docid_[] = $tmp;
          $limit-=$len;
          break;
        case 2:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->includeChildDocs_ = $tmp > 0 ? true : false;
          break;
        case 3:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->includeDetails_ = $tmp > 0 ? true : false;
          break;
        case 4:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->sourcePackageName_ = $tmp;
          $limit-=$len;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->docid_))
      foreach($this->docid_ as $v) {
        fwrite($fp, "\x0a");
        Protobuf::write_varint($fp, strlen((string)$v));
        fwrite($fp, (string)$v);
      }
    if (!is_null($this->includeChildDocs_)) {
      fwrite($fp, "\x10");
      Protobuf::write_varint($fp, (int)$this->includeChildDocs_ ? 1 : 0);
    }
    if (!is_null($this->includeDetails_)) {
      fwrite($fp, "\x18");
      Protobuf::write_varint($fp, (int)$this->includeDetails_ ? 1 : 0);
    }
    if (!is_null($this->sourcePackageName_)) {
      fwrite($fp, "\"");
      Protobuf::write_varint($fp, strlen((string)$this->sourcePackageName_));
      fwrite($fp, (string)$this->sourcePackageName_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->docid_))
      foreach($this->docid_ as $v) {
        $l = strlen((string)$v);
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
    if (!is_null($this->includeChildDocs_)) {
      $size += 2;
    }
    if (!is_null($this->includeDetails_)) {
      $size += 2;
    }
    if (!is_null($this->sourcePackageName_)) {
      $l = strlen((string)$this->sourcePackageName_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('docid_', $this->docid_)
         . Protobuf::toString('includeChildDocs_', $this->includeChildDocs_)
         . Protobuf::toString('includeDetails_', $this->includeDetails_)
         . Protobuf::toString('sourcePackageName_', $this->sourcePackageName_);
  }
  
  // repeated string docid = 1;

  protected $docid_ = array();
  public function clearDocid() { $this->docid_ = array(); }
  public function getDocidCount() { return count($this->docid_); }
  public function hasDocid() { return (count($this->docid_) > 0); }
  public function indexOfDocid($value) { return array_search($value,$this->docid_);}
  public function removeDocid($index) { unset($this->docid_[$index]); }
  public function removeValDocid($value) { $idx = array_search($value,$this->docid_); if($idx !== FALSE){unset($this->docid_[$idx]); }}
  public function removeValsDocid($values) { foreach($values as $value){$idx = array_search($value,$this->docid_); if($idx !== FALSE){unset($this->docid_[$idx]); }}}
  public function pushDocid($newvar) { return array_push($this->docid_,(string)$newvar); }
  public function popDocid() { return array_pop($this->docid_); }
  public function shiftDocid() { return array_shift($this->docid_); }
  public function unshiftDocid($newvar) { return array_unshift($this->docid_,(string)$newvar); }
  public function getDocid($index) { return $this->docid_[$index]; }
  public function getDocidArray() { return $this->docid_; }
  public function setDocid($index, $value) {$this->docid_[$index] = (string)$value;	}
  public function addDocid($value) { $this->docid_[] = (string)$value; }
  public function addAllDocid(array $values) { foreach($values as $value) {$this->docid_[] = (string)$value;} }
  
  // optional bool includeChildDocs = 2;

  protected $includeChildDocs_;
  public function resetIncludeChildDocs() { unset($this->includeChildDocs_); }
  public function clearIncludeChildDocs() { unset($this->includeChildDocs_); }
  public function hasIncludeChildDocs() { return isset($this->includeChildDocs_); }
  public function getIncludeChildDocs() { return $this->includeChildDocs_; }
  public function setIncludeChildDocs($value) { $this->includeChildDocs_ = (bool)$value; }
  
  // optional bool includeDetails = 3;

  protected $includeDetails_;
  public function resetIncludeDetails() { unset($this->includeDetails_); }
  public function clearIncludeDetails() { unset($this->includeDetails_); }
  public function hasIncludeDetails() { return isset($this->includeDetails_); }
  public function getIncludeDetails() { return $this->includeDetails_; }
  public function setIncludeDetails($value) { $this->includeDetails_ = (bool)$value; }
  
  // optional string sourcePackageName = 4;

  protected $sourcePackageName_;
  public function resetSourcePackageName() { unset($this->sourcePackageName_); }
  public function clearSourcePackageName() { unset($this->sourcePackageName_); }
  public function hasSourcePackageName() { return isset($this->sourcePackageName_); }
  public function getSourcePackageName() { return $this->sourcePackageName_; }
  public function setSourcePackageName($value) { $this->sourcePackageName_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:BulkDetailsRequest)
}

// message BulkDetailsResponse
class BulkDetailsResponse {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("BulkDetailsResponse: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->entry_[] = new BulkDetailsEntry($fp, $len);
          ASSERT('$len == 0');
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->entry_))
      foreach($this->entry_ as $v) {
        fwrite($fp, "\x0a");
        Protobuf::write_varint($fp, $v->size()); // message
        $v->write($fp);
      }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->entry_))
      foreach($this->entry_ as $v) {
        $l = $v->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('entry_', $this->entry_);
  }
  
  // repeated .BulkDetailsEntry entry = 1;

  protected $entry_ = array();
  public function clearEntry() { $this->entry_ = array(); }
  public function getEntryCount() { return count($this->entry_); }
  public function hasEntry() { return (count($this->entry_) > 0); }
  public function indexOfEntry($value) { return array_search($value,$this->entry_);}
  public function removeEntry($index) { unset($this->entry_[$index]); }
  public function removeValEntry($value) { $idx = array_search($value,$this->entry_); if($idx !== FALSE){unset($this->entry_[$idx]); }}
  public function removeValsEntry($values) { foreach($values as $value){$idx = array_search($value,$this->entry_); if($idx !== FALSE){unset($this->entry_[$idx]); }}}
  public function pushEntry($newvar) { return array_push($this->entry_,$newvar); }
  public function popEntry() { return array_pop($this->entry_); }
  public function shiftEntry() { return array_shift($this->entry_); }
  public function unshiftEntry($newvar) { return array_unshift($this->entry_,$newvar); }
  public function getEntry($index) { return $this->entry_[$index]; }
  public function getEntryArray() { return $this->entry_; }
  public function setEntry($index, $value) {$this->entry_[$index] = $value;	}
  public function addEntry($value) { $this->entry_[] = $value; }
  public function addAllEntry(array $values) { foreach($values as $value) {$this->entry_[] = $value;} }
  
  // @@protoc_insertion_point(class_scope:BulkDetailsResponse)
}

// message DetailsResponse
class DetailsResponse {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("DetailsResponse: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->docV1_ = new DocV1($fp, $len);
          ASSERT('$len == 0');
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->analyticsCookie_ = $tmp;
          $limit-=$len;
          break;
        case 3:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->userReview_ = new Review($fp, $len);
          ASSERT('$len == 0');
          break;
        case 4:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->docV2_ = new DocV2($fp, $len);
          ASSERT('$len == 0');
          break;
        case 5:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->footerHtml_ = $tmp;
          $limit-=$len;
          break;
        case 6:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->serverLogsCookie_ = $tmp;
          $limit-=$len;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->docV1_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, $this->docV1_->size()); // message
      $this->docV1_->write($fp);
    }
    if (!is_null($this->analyticsCookie_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, strlen((string)$this->analyticsCookie_));
      fwrite($fp, (string)$this->analyticsCookie_);
    }
    if (!is_null($this->userReview_)) {
      fwrite($fp, "\x1a");
      Protobuf::write_varint($fp, $this->userReview_->size()); // message
      $this->userReview_->write($fp);
    }
    if (!is_null($this->docV2_)) {
      fwrite($fp, "\"");
      Protobuf::write_varint($fp, $this->docV2_->size()); // message
      $this->docV2_->write($fp);
    }
    if (!is_null($this->footerHtml_)) {
      fwrite($fp, "*");
      Protobuf::write_varint($fp, strlen((string)$this->footerHtml_));
      fwrite($fp, (string)$this->footerHtml_);
    }
    if (!is_null($this->serverLogsCookie_)) {
      fwrite($fp, "2");
      Protobuf::write_varint($fp, strlen((string)$this->serverLogsCookie_));
      fwrite($fp, (string)$this->serverLogsCookie_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->docV1_)) {
      $l = $this->docV1_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->analyticsCookie_)) {
      $l = strlen((string)$this->analyticsCookie_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->userReview_)) {
      $l = $this->userReview_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->docV2_)) {
      $l = $this->docV2_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->footerHtml_)) {
      $l = strlen((string)$this->footerHtml_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->serverLogsCookie_)) {
      $l = strlen((string)$this->serverLogsCookie_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('docV1_', $this->docV1_)
         . Protobuf::toString('analyticsCookie_', $this->analyticsCookie_)
         . Protobuf::toString('userReview_', $this->userReview_)
         . Protobuf::toString('docV2_', $this->docV2_)
         . Protobuf::toString('footerHtml_', $this->footerHtml_)
         . Protobuf::toString('serverLogsCookie_', $this->serverLogsCookie_);
  }
  
  // optional .DocV1 docV1 = 1;

  protected $docV1_;
  public function resetDocV1() { unset($this->docV1_); }
  public function clearDocV1() { unset($this->docV1_); }
  public function hasDocV1() { return isset($this->docV1_); }
  public function getDocV1() { return $this->docV1_; }
  public function setDocV1(DocV1 $value) { $this->docV1_ = $value; }
  
  // optional string analyticsCookie = 2;

  protected $analyticsCookie_;
  public function resetAnalyticsCookie() { unset($this->analyticsCookie_); }
  public function clearAnalyticsCookie() { unset($this->analyticsCookie_); }
  public function hasAnalyticsCookie() { return isset($this->analyticsCookie_); }
  public function getAnalyticsCookie() { return $this->analyticsCookie_; }
  public function setAnalyticsCookie($value) { $this->analyticsCookie_ = (string)$value; }
  
  // optional .Review userReview = 3;

  protected $userReview_;
  public function resetUserReview() { unset($this->userReview_); }
  public function clearUserReview() { unset($this->userReview_); }
  public function hasUserReview() { return isset($this->userReview_); }
  public function getUserReview() { return $this->userReview_; }
  public function setUserReview(Review $value) { $this->userReview_ = $value; }
  
  // optional .DocV2 docV2 = 4;

  protected $docV2_;
  public function resetDocV2() { unset($this->docV2_); }
  public function clearDocV2() { unset($this->docV2_); }
  public function hasDocV2() { return isset($this->docV2_); }
  public function getDocV2() { return $this->docV2_; }
  public function setDocV2(DocV2 $value) { $this->docV2_ = $value; }
  
  // optional string footerHtml = 5;

  protected $footerHtml_;
  public function resetFooterHtml() { unset($this->footerHtml_); }
  public function clearFooterHtml() { unset($this->footerHtml_); }
  public function hasFooterHtml() { return isset($this->footerHtml_); }
  public function getFooterHtml() { return $this->footerHtml_; }
  public function setFooterHtml($value) { $this->footerHtml_ = (string)$value; }
  
  // optional bytes serverLogsCookie = 6;

  protected $serverLogsCookie_;
  public function resetServerLogsCookie() { unset($this->serverLogsCookie_); }
  public function clearServerLogsCookie() { unset($this->serverLogsCookie_); }
  public function hasServerLogsCookie() { return isset($this->serverLogsCookie_); }
  public function getServerLogsCookie() { return $this->serverLogsCookie_; }
  public function setServerLogsCookie($value) { $this->serverLogsCookie_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:DetailsResponse)
}

// message DeviceConfigurationProto
class DeviceConfigurationProto {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("DeviceConfigurationProto: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->touchScreen_ = $tmp;
          
          break;
        case 2:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->keyboard_ = $tmp;
          
          break;
        case 3:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->navigation_ = $tmp;
          
          break;
        case 4:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->screenLayout_ = $tmp;
          
          break;
        case 5:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->hasHardKeyboard_ = $tmp > 0 ? true : false;
          break;
        case 6:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->hasFiveWayNavigation_ = $tmp > 0 ? true : false;
          break;
        case 7:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->screenDensity_ = $tmp;
          
          break;
        case 8:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->glEsVersion_ = $tmp;
          
          break;
        case 9:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->systemSharedLibrary_[] = $tmp;
          $limit-=$len;
          break;
        case 10:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->systemAvailableFeature_[] = $tmp;
          $limit-=$len;
          break;
        case 11:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->nativePlatform_[] = $tmp;
          $limit-=$len;
          break;
        case 12:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->screenWidth_ = $tmp;
          
          break;
        case 13:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->screenHeight_ = $tmp;
          
          break;
        case 14:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->systemSupportedLocale_[] = $tmp;
          $limit-=$len;
          break;
        case 15:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->glExtension_[] = $tmp;
          $limit-=$len;
          break;
        case 16:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->deviceClass_ = $tmp;
          
          break;
        case 17:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->maxApkDownloadSizeMb_ = $tmp;
          
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->touchScreen_)) {
      fwrite($fp, "\x08");
      Protobuf::write_varint($fp, (int)$this->touchScreen_);
    }
    if (!is_null($this->keyboard_)) {
      fwrite($fp, "\x10");
      Protobuf::write_varint($fp, (int)$this->keyboard_);
    }
    if (!is_null($this->navigation_)) {
      fwrite($fp, "\x18");
      Protobuf::write_varint($fp, (int)$this->navigation_);
    }
    if (!is_null($this->screenLayout_)) {
      fwrite($fp, " ");
      Protobuf::write_varint($fp, (int)$this->screenLayout_);
    }
    if (!is_null($this->hasHardKeyboard_)) {
      fwrite($fp, "(");
      Protobuf::write_varint($fp, (int)$this->hasHardKeyboard_ ? 1 : 0);
    }
    if (!is_null($this->hasFiveWayNavigation_)) {
      fwrite($fp, "0");
      Protobuf::write_varint($fp, (int)$this->hasFiveWayNavigation_ ? 1 : 0);
    }
    if (!is_null($this->screenDensity_)) {
      fwrite($fp, "8");
      Protobuf::write_varint($fp, (int)$this->screenDensity_);
    }
    if (!is_null($this->glEsVersion_)) {
      fwrite($fp, "@");
      Protobuf::write_varint($fp, (int)$this->glEsVersion_);
    }
    if (!is_null($this->systemSharedLibrary_))
      foreach($this->systemSharedLibrary_ as $v) {
        fwrite($fp, "J");
        Protobuf::write_varint($fp, strlen((string)$v));
        fwrite($fp, (string)$v);
      }
    if (!is_null($this->systemAvailableFeature_))
      foreach($this->systemAvailableFeature_ as $v) {
        fwrite($fp, "R");
        Protobuf::write_varint($fp, strlen((string)$v));
        fwrite($fp, (string)$v);
      }
    if (!is_null($this->nativePlatform_))
      foreach($this->nativePlatform_ as $v) {
        fwrite($fp, "Z");
        Protobuf::write_varint($fp, strlen((string)$v));
        fwrite($fp, (string)$v);
      }
    if (!is_null($this->screenWidth_)) {
      fwrite($fp, "`");
      Protobuf::write_varint($fp, (int)$this->screenWidth_);
    }
    if (!is_null($this->screenHeight_)) {
      fwrite($fp, "h");
      Protobuf::write_varint($fp, (int)$this->screenHeight_);
    }
    if (!is_null($this->systemSupportedLocale_))
      foreach($this->systemSupportedLocale_ as $v) {
        fwrite($fp, "r");
        Protobuf::write_varint($fp, strlen((string)$v));
        fwrite($fp, (string)$v);
      }
    if (!is_null($this->glExtension_))
      foreach($this->glExtension_ as $v) {
        fwrite($fp, "z");
        Protobuf::write_varint($fp, strlen((string)$v));
        fwrite($fp, (string)$v);
      }
    if (!is_null($this->deviceClass_)) {
      fwrite($fp, "\x80\x01");
      Protobuf::write_varint($fp, (int)$this->deviceClass_);
    }
    if (!is_null($this->maxApkDownloadSizeMb_)) {
      fwrite($fp, "\x88\x01");
      Protobuf::write_varint($fp, (int)$this->maxApkDownloadSizeMb_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->touchScreen_)) {
      $size += 1 + Protobuf::size_varint($this->touchScreen_);
    }
    if (!is_null($this->keyboard_)) {
      $size += 1 + Protobuf::size_varint($this->keyboard_);
    }
    if (!is_null($this->navigation_)) {
      $size += 1 + Protobuf::size_varint($this->navigation_);
    }
    if (!is_null($this->screenLayout_)) {
      $size += 1 + Protobuf::size_varint($this->screenLayout_);
    }
    if (!is_null($this->hasHardKeyboard_)) {
      $size += 2;
    }
    if (!is_null($this->hasFiveWayNavigation_)) {
      $size += 2;
    }
    if (!is_null($this->screenDensity_)) {
      $size += 1 + Protobuf::size_varint($this->screenDensity_);
    }
    if (!is_null($this->glEsVersion_)) {
      $size += 1 + Protobuf::size_varint($this->glEsVersion_);
    }
    if (!is_null($this->systemSharedLibrary_))
      foreach($this->systemSharedLibrary_ as $v) {
        $l = strlen((string)$v);
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
    if (!is_null($this->systemAvailableFeature_))
      foreach($this->systemAvailableFeature_ as $v) {
        $l = strlen((string)$v);
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
    if (!is_null($this->nativePlatform_))
      foreach($this->nativePlatform_ as $v) {
        $l = strlen((string)$v);
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
    if (!is_null($this->screenWidth_)) {
      $size += 1 + Protobuf::size_varint($this->screenWidth_);
    }
    if (!is_null($this->screenHeight_)) {
      $size += 1 + Protobuf::size_varint($this->screenHeight_);
    }
    if (!is_null($this->systemSupportedLocale_))
      foreach($this->systemSupportedLocale_ as $v) {
        $l = strlen((string)$v);
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
    if (!is_null($this->glExtension_))
      foreach($this->glExtension_ as $v) {
        $l = strlen((string)$v);
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
    if (!is_null($this->deviceClass_)) {
      $size += 2 + Protobuf::size_varint($this->deviceClass_);
    }
    if (!is_null($this->maxApkDownloadSizeMb_)) {
      $size += 2 + Protobuf::size_varint($this->maxApkDownloadSizeMb_);
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('touchScreen_', $this->touchScreen_)
         . Protobuf::toString('keyboard_', $this->keyboard_)
         . Protobuf::toString('navigation_', $this->navigation_)
         . Protobuf::toString('screenLayout_', $this->screenLayout_)
         . Protobuf::toString('hasHardKeyboard_', $this->hasHardKeyboard_)
         . Protobuf::toString('hasFiveWayNavigation_', $this->hasFiveWayNavigation_)
         . Protobuf::toString('screenDensity_', $this->screenDensity_)
         . Protobuf::toString('glEsVersion_', $this->glEsVersion_)
         . Protobuf::toString('systemSharedLibrary_', $this->systemSharedLibrary_)
         . Protobuf::toString('systemAvailableFeature_', $this->systemAvailableFeature_)
         . Protobuf::toString('nativePlatform_', $this->nativePlatform_)
         . Protobuf::toString('screenWidth_', $this->screenWidth_)
         . Protobuf::toString('screenHeight_', $this->screenHeight_)
         . Protobuf::toString('systemSupportedLocale_', $this->systemSupportedLocale_)
         . Protobuf::toString('glExtension_', $this->glExtension_)
         . Protobuf::toString('deviceClass_', $this->deviceClass_)
         . Protobuf::toString('maxApkDownloadSizeMb_', $this->maxApkDownloadSizeMb_);
  }
  
  // optional int32 touchScreen = 1;

  protected $touchScreen_;
  public function resetTouchScreen() { unset($this->touchScreen_); }
  public function clearTouchScreen() { unset($this->touchScreen_); }
  public function hasTouchScreen() { return isset($this->touchScreen_); }
  public function getTouchScreen() { return $this->touchScreen_; }
  public function setTouchScreen($value) { $this->touchScreen_ = (string)$value; }
  
  // optional int32 keyboard = 2;

  protected $keyboard_;
  public function resetKeyboard() { unset($this->keyboard_); }
  public function clearKeyboard() { unset($this->keyboard_); }
  public function hasKeyboard() { return isset($this->keyboard_); }
  public function getKeyboard() { return $this->keyboard_; }
  public function setKeyboard($value) { $this->keyboard_ = (string)$value; }
  
  // optional int32 navigation = 3;

  protected $navigation_;
  public function resetNavigation() { unset($this->navigation_); }
  public function clearNavigation() { unset($this->navigation_); }
  public function hasNavigation() { return isset($this->navigation_); }
  public function getNavigation() { return $this->navigation_; }
  public function setNavigation($value) { $this->navigation_ = (string)$value; }
  
  // optional int32 screenLayout = 4;

  protected $screenLayout_;
  public function resetScreenLayout() { unset($this->screenLayout_); }
  public function clearScreenLayout() { unset($this->screenLayout_); }
  public function hasScreenLayout() { return isset($this->screenLayout_); }
  public function getScreenLayout() { return $this->screenLayout_; }
  public function setScreenLayout($value) { $this->screenLayout_ = (string)$value; }
  
  // optional bool hasHardKeyboard = 5;

  protected $hasHardKeyboard_;
  public function resetHasHardKeyboard() { unset($this->hasHardKeyboard_); }
  public function clearHasHardKeyboard() { unset($this->hasHardKeyboard_); }
  public function hasHasHardKeyboard() { return isset($this->hasHardKeyboard_); }
  public function getHasHardKeyboard() { return $this->hasHardKeyboard_; }
  public function setHasHardKeyboard($value) { $this->hasHardKeyboard_ = (bool)$value; }
  
  // optional bool hasFiveWayNavigation = 6;

  protected $hasFiveWayNavigation_;
  public function resetHasFiveWayNavigation() { unset($this->hasFiveWayNavigation_); }
  public function clearHasFiveWayNavigation() { unset($this->hasFiveWayNavigation_); }
  public function hasHasFiveWayNavigation() { return isset($this->hasFiveWayNavigation_); }
  public function getHasFiveWayNavigation() { return $this->hasFiveWayNavigation_; }
  public function setHasFiveWayNavigation($value) { $this->hasFiveWayNavigation_ = (bool)$value; }
  
  // optional int32 screenDensity = 7;

  protected $screenDensity_;
  public function resetScreenDensity() { unset($this->screenDensity_); }
  public function clearScreenDensity() { unset($this->screenDensity_); }
  public function hasScreenDensity() { return isset($this->screenDensity_); }
  public function getScreenDensity() { return $this->screenDensity_; }
  public function setScreenDensity($value) { $this->screenDensity_ = (string)$value; }
  
  // optional int32 glEsVersion = 8;

  protected $glEsVersion_;
  public function resetGlEsVersion() { unset($this->glEsVersion_); }
  public function clearGlEsVersion() { unset($this->glEsVersion_); }
  public function hasGlEsVersion() { return isset($this->glEsVersion_); }
  public function getGlEsVersion() { return $this->glEsVersion_; }
  public function setGlEsVersion($value) { $this->glEsVersion_ = (string)$value; }
  
  // repeated string systemSharedLibrary = 9;

  protected $systemSharedLibrary_ = array();
  public function clearSystemSharedLibrary() { $this->systemSharedLibrary_ = array(); }
  public function getSystemSharedLibraryCount() { return count($this->systemSharedLibrary_); }
  public function hasSystemSharedLibrary() { return (count($this->systemSharedLibrary_) > 0); }
  public function indexOfSystemSharedLibrary($value) { return array_search($value,$this->systemSharedLibrary_);}
  public function removeSystemSharedLibrary($index) { unset($this->systemSharedLibrary_[$index]); }
  public function removeValSystemSharedLibrary($value) { $idx = array_search($value,$this->systemSharedLibrary_); if($idx !== FALSE){unset($this->systemSharedLibrary_[$idx]); }}
  public function removeValsSystemSharedLibrary($values) { foreach($values as $value){$idx = array_search($value,$this->systemSharedLibrary_); if($idx !== FALSE){unset($this->systemSharedLibrary_[$idx]); }}}
  public function pushSystemSharedLibrary($newvar) { return array_push($this->systemSharedLibrary_,(string)$newvar); }
  public function popSystemSharedLibrary() { return array_pop($this->systemSharedLibrary_); }
  public function shiftSystemSharedLibrary() { return array_shift($this->systemSharedLibrary_); }
  public function unshiftSystemSharedLibrary($newvar) { return array_unshift($this->systemSharedLibrary_,(string)$newvar); }
  public function getSystemSharedLibrary($index) { return $this->systemSharedLibrary_[$index]; }
  public function getSystemSharedLibraryArray() { return $this->systemSharedLibrary_; }
  public function setSystemSharedLibrary($index, $value) {$this->systemSharedLibrary_[$index] = (string)$value;	}
  public function addSystemSharedLibrary($value) { $this->systemSharedLibrary_[] = (string)$value; }
  public function addAllSystemSharedLibrary(array $values) { foreach($values as $value) {$this->systemSharedLibrary_[] = (string)$value;} }
  
  // repeated string systemAvailableFeature = 10;

  protected $systemAvailableFeature_ = array();
  public function clearSystemAvailableFeature() { $this->systemAvailableFeature_ = array(); }
  public function getSystemAvailableFeatureCount() { return count($this->systemAvailableFeature_); }
  public function hasSystemAvailableFeature() { return (count($this->systemAvailableFeature_) > 0); }
  public function indexOfSystemAvailableFeature($value) { return array_search($value,$this->systemAvailableFeature_);}
  public function removeSystemAvailableFeature($index) { unset($this->systemAvailableFeature_[$index]); }
  public function removeValSystemAvailableFeature($value) { $idx = array_search($value,$this->systemAvailableFeature_); if($idx !== FALSE){unset($this->systemAvailableFeature_[$idx]); }}
  public function removeValsSystemAvailableFeature($values) { foreach($values as $value){$idx = array_search($value,$this->systemAvailableFeature_); if($idx !== FALSE){unset($this->systemAvailableFeature_[$idx]); }}}
  public function pushSystemAvailableFeature($newvar) { return array_push($this->systemAvailableFeature_,(string)$newvar); }
  public function popSystemAvailableFeature() { return array_pop($this->systemAvailableFeature_); }
  public function shiftSystemAvailableFeature() { return array_shift($this->systemAvailableFeature_); }
  public function unshiftSystemAvailableFeature($newvar) { return array_unshift($this->systemAvailableFeature_,(string)$newvar); }
  public function getSystemAvailableFeature($index) { return $this->systemAvailableFeature_[$index]; }
  public function getSystemAvailableFeatureArray() { return $this->systemAvailableFeature_; }
  public function setSystemAvailableFeature($index, $value) {$this->systemAvailableFeature_[$index] = (string)$value;	}
  public function addSystemAvailableFeature($value) { $this->systemAvailableFeature_[] = (string)$value; }
  public function addAllSystemAvailableFeature(array $values) { foreach($values as $value) {$this->systemAvailableFeature_[] = (string)$value;} }
  
  // repeated string nativePlatform = 11;

  protected $nativePlatform_ = array();
  public function clearNativePlatform() { $this->nativePlatform_ = array(); }
  public function getNativePlatformCount() { return count($this->nativePlatform_); }
  public function hasNativePlatform() { return (count($this->nativePlatform_) > 0); }
  public function indexOfNativePlatform($value) { return array_search($value,$this->nativePlatform_);}
  public function removeNativePlatform($index) { unset($this->nativePlatform_[$index]); }
  public function removeValNativePlatform($value) { $idx = array_search($value,$this->nativePlatform_); if($idx !== FALSE){unset($this->nativePlatform_[$idx]); }}
  public function removeValsNativePlatform($values) { foreach($values as $value){$idx = array_search($value,$this->nativePlatform_); if($idx !== FALSE){unset($this->nativePlatform_[$idx]); }}}
  public function pushNativePlatform($newvar) { return array_push($this->nativePlatform_,(string)$newvar); }
  public function popNativePlatform() { return array_pop($this->nativePlatform_); }
  public function shiftNativePlatform() { return array_shift($this->nativePlatform_); }
  public function unshiftNativePlatform($newvar) { return array_unshift($this->nativePlatform_,(string)$newvar); }
  public function getNativePlatform($index) { return $this->nativePlatform_[$index]; }
  public function getNativePlatformArray() { return $this->nativePlatform_; }
  public function setNativePlatform($index, $value) {$this->nativePlatform_[$index] = (string)$value;	}
  public function addNativePlatform($value) { $this->nativePlatform_[] = (string)$value; }
  public function addAllNativePlatform(array $values) { foreach($values as $value) {$this->nativePlatform_[] = (string)$value;} }
  
  // optional int32 screenWidth = 12;

  protected $screenWidth_;
  public function resetScreenWidth() { unset($this->screenWidth_); }
  public function clearScreenWidth() { unset($this->screenWidth_); }
  public function hasScreenWidth() { return isset($this->screenWidth_); }
  public function getScreenWidth() { return $this->screenWidth_; }
  public function setScreenWidth($value) { $this->screenWidth_ = (string)$value; }
  
  // optional int32 screenHeight = 13;

  protected $screenHeight_;
  public function resetScreenHeight() { unset($this->screenHeight_); }
  public function clearScreenHeight() { unset($this->screenHeight_); }
  public function hasScreenHeight() { return isset($this->screenHeight_); }
  public function getScreenHeight() { return $this->screenHeight_; }
  public function setScreenHeight($value) { $this->screenHeight_ = (string)$value; }
  
  // repeated string systemSupportedLocale = 14;

  protected $systemSupportedLocale_ = array();
  public function clearSystemSupportedLocale() { $this->systemSupportedLocale_ = array(); }
  public function getSystemSupportedLocaleCount() { return count($this->systemSupportedLocale_); }
  public function hasSystemSupportedLocale() { return (count($this->systemSupportedLocale_) > 0); }
  public function indexOfSystemSupportedLocale($value) { return array_search($value,$this->systemSupportedLocale_);}
  public function removeSystemSupportedLocale($index) { unset($this->systemSupportedLocale_[$index]); }
  public function removeValSystemSupportedLocale($value) { $idx = array_search($value,$this->systemSupportedLocale_); if($idx !== FALSE){unset($this->systemSupportedLocale_[$idx]); }}
  public function removeValsSystemSupportedLocale($values) { foreach($values as $value){$idx = array_search($value,$this->systemSupportedLocale_); if($idx !== FALSE){unset($this->systemSupportedLocale_[$idx]); }}}
  public function pushSystemSupportedLocale($newvar) { return array_push($this->systemSupportedLocale_,(string)$newvar); }
  public function popSystemSupportedLocale() { return array_pop($this->systemSupportedLocale_); }
  public function shiftSystemSupportedLocale() { return array_shift($this->systemSupportedLocale_); }
  public function unshiftSystemSupportedLocale($newvar) { return array_unshift($this->systemSupportedLocale_,(string)$newvar); }
  public function getSystemSupportedLocale($index) { return $this->systemSupportedLocale_[$index]; }
  public function getSystemSupportedLocaleArray() { return $this->systemSupportedLocale_; }
  public function setSystemSupportedLocale($index, $value) {$this->systemSupportedLocale_[$index] = (string)$value;	}
  public function addSystemSupportedLocale($value) { $this->systemSupportedLocale_[] = (string)$value; }
  public function addAllSystemSupportedLocale(array $values) { foreach($values as $value) {$this->systemSupportedLocale_[] = (string)$value;} }
  
  // repeated string glExtension = 15;

  protected $glExtension_ = array();
  public function clearGlExtension() { $this->glExtension_ = array(); }
  public function getGlExtensionCount() { return count($this->glExtension_); }
  public function hasGlExtension() { return (count($this->glExtension_) > 0); }
  public function indexOfGlExtension($value) { return array_search($value,$this->glExtension_);}
  public function removeGlExtension($index) { unset($this->glExtension_[$index]); }
  public function removeValGlExtension($value) { $idx = array_search($value,$this->glExtension_); if($idx !== FALSE){unset($this->glExtension_[$idx]); }}
  public function removeValsGlExtension($values) { foreach($values as $value){$idx = array_search($value,$this->glExtension_); if($idx !== FALSE){unset($this->glExtension_[$idx]); }}}
  public function pushGlExtension($newvar) { return array_push($this->glExtension_,(string)$newvar); }
  public function popGlExtension() { return array_pop($this->glExtension_); }
  public function shiftGlExtension() { return array_shift($this->glExtension_); }
  public function unshiftGlExtension($newvar) { return array_unshift($this->glExtension_,(string)$newvar); }
  public function getGlExtension($index) { return $this->glExtension_[$index]; }
  public function getGlExtensionArray() { return $this->glExtension_; }
  public function setGlExtension($index, $value) {$this->glExtension_[$index] = (string)$value;	}
  public function addGlExtension($value) { $this->glExtension_[] = (string)$value; }
  public function addAllGlExtension(array $values) { foreach($values as $value) {$this->glExtension_[] = (string)$value;} }
  
  // optional int32 deviceClass = 16;

  protected $deviceClass_;
  public function resetDeviceClass() { unset($this->deviceClass_); }
  public function clearDeviceClass() { unset($this->deviceClass_); }
  public function hasDeviceClass() { return isset($this->deviceClass_); }
  public function getDeviceClass() { return $this->deviceClass_; }
  public function setDeviceClass($value) { $this->deviceClass_ = (string)$value; }
  
  // optional int32 maxApkDownloadSizeMb = 17;

  protected $maxApkDownloadSizeMb_;
  public function resetMaxApkDownloadSizeMb() { unset($this->maxApkDownloadSizeMb_); }
  public function clearMaxApkDownloadSizeMb() { unset($this->maxApkDownloadSizeMb_); }
  public function hasMaxApkDownloadSizeMb() { return isset($this->maxApkDownloadSizeMb_); }
  public function getMaxApkDownloadSizeMb() { return $this->maxApkDownloadSizeMb_; }
  public function setMaxApkDownloadSizeMb($value) { $this->maxApkDownloadSizeMb_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:DeviceConfigurationProto)
}

// message Document
class Document {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("Document: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->docid_ = new Docid($fp, $len);
          ASSERT('$len == 0');
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->fetchDocid_ = new Docid($fp, $len);
          ASSERT('$len == 0');
          break;
        case 3:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->sampleDocid_ = new Docid($fp, $len);
          ASSERT('$len == 0');
          break;
        case 4:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->title_ = $tmp;
          $limit-=$len;
          break;
        case 5:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->url_ = $tmp;
          $limit-=$len;
          break;
        case 6:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->snippet_[] = $tmp;
          $limit-=$len;
          break;
        case 7:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->priceDeprecated_ = new Offer($fp, $len);
          ASSERT('$len == 0');
          break;
        case 9:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->availability_ = new Availability($fp, $len);
          ASSERT('$len == 0');
          break;
        case 10:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->image_[] = new Image($fp, $len);
          ASSERT('$len == 0');
          break;
        case 11:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->child_[] = new Document($fp, $len);
          ASSERT('$len == 0');
          break;
        case 13:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->aggregateRating_ = new AggregateRating($fp, $len);
          ASSERT('$len == 0');
          break;
        case 14:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->offer_[] = new Offer($fp, $len);
          ASSERT('$len == 0');
          break;
        case 15:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->translatedSnippet_[] = new TranslatedText($fp, $len);
          ASSERT('$len == 0');
          break;
        case 16:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->documentVariant_[] = new DocumentVariant($fp, $len);
          ASSERT('$len == 0');
          break;
        case 17:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->categoryId_[] = $tmp;
          $limit-=$len;
          break;
        case 18:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->decoration_[] = new Document($fp, $len);
          ASSERT('$len == 0');
          break;
        case 19:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->parent_[] = new Document($fp, $len);
          ASSERT('$len == 0');
          break;
        case 20:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->privacyPolicyUrl_ = $tmp;
          $limit-=$len;
          break;
        case 21:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->consumptionUrl_ = $tmp;
          $limit-=$len;
          break;
        case 22:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->estimatedNumChildren_ = $tmp;
          
          break;
        case 23:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->subtitle_ = $tmp;
          $limit-=$len;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->docid_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, $this->docid_->size()); // message
      $this->docid_->write($fp);
    }
    if (!is_null($this->fetchDocid_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, $this->fetchDocid_->size()); // message
      $this->fetchDocid_->write($fp);
    }
    if (!is_null($this->sampleDocid_)) {
      fwrite($fp, "\x1a");
      Protobuf::write_varint($fp, $this->sampleDocid_->size()); // message
      $this->sampleDocid_->write($fp);
    }
    if (!is_null($this->title_)) {
      fwrite($fp, "\"");
      Protobuf::write_varint($fp, strlen((string)$this->title_));
      fwrite($fp, (string)$this->title_);
    }
    if (!is_null($this->url_)) {
      fwrite($fp, "*");
      Protobuf::write_varint($fp, strlen((string)$this->url_));
      fwrite($fp, (string)$this->url_);
    }
    if (!is_null($this->snippet_))
      foreach($this->snippet_ as $v) {
        fwrite($fp, "2");
        Protobuf::write_varint($fp, strlen((string)$v));
        fwrite($fp, (string)$v);
      }
    if (!is_null($this->priceDeprecated_)) {
      fwrite($fp, ":");
      Protobuf::write_varint($fp, $this->priceDeprecated_->size()); // message
      $this->priceDeprecated_->write($fp);
    }
    if (!is_null($this->availability_)) {
      fwrite($fp, "J");
      Protobuf::write_varint($fp, $this->availability_->size()); // message
      $this->availability_->write($fp);
    }
    if (!is_null($this->image_))
      foreach($this->image_ as $v) {
        fwrite($fp, "R");
        Protobuf::write_varint($fp, $v->size()); // message
        $v->write($fp);
      }
    if (!is_null($this->child_))
      foreach($this->child_ as $v) {
        fwrite($fp, "Z");
        Protobuf::write_varint($fp, $v->size()); // message
        $v->write($fp);
      }
    if (!is_null($this->aggregateRating_)) {
      fwrite($fp, "j");
      Protobuf::write_varint($fp, $this->aggregateRating_->size()); // message
      $this->aggregateRating_->write($fp);
    }
    if (!is_null($this->offer_))
      foreach($this->offer_ as $v) {
        fwrite($fp, "r");
        Protobuf::write_varint($fp, $v->size()); // message
        $v->write($fp);
      }
    if (!is_null($this->translatedSnippet_))
      foreach($this->translatedSnippet_ as $v) {
        fwrite($fp, "z");
        Protobuf::write_varint($fp, $v->size()); // message
        $v->write($fp);
      }
    if (!is_null($this->documentVariant_))
      foreach($this->documentVariant_ as $v) {
        fwrite($fp, "\x82\x01");
        Protobuf::write_varint($fp, $v->size()); // message
        $v->write($fp);
      }
    if (!is_null($this->categoryId_))
      foreach($this->categoryId_ as $v) {
        fwrite($fp, "\x8a\x01");
        Protobuf::write_varint($fp, strlen((string)$v));
        fwrite($fp, (string)$v);
      }
    if (!is_null($this->decoration_))
      foreach($this->decoration_ as $v) {
        fwrite($fp, "\x92\x01");
        Protobuf::write_varint($fp, $v->size()); // message
        $v->write($fp);
      }
    if (!is_null($this->parent_))
      foreach($this->parent_ as $v) {
        fwrite($fp, "\x9a\x01");
        Protobuf::write_varint($fp, $v->size()); // message
        $v->write($fp);
      }
    if (!is_null($this->privacyPolicyUrl_)) {
      fwrite($fp, "\xa2\x01");
      Protobuf::write_varint($fp, strlen((string)$this->privacyPolicyUrl_));
      fwrite($fp, (string)$this->privacyPolicyUrl_);
    }
    if (!is_null($this->consumptionUrl_)) {
      fwrite($fp, "\xaa\x01");
      Protobuf::write_varint($fp, strlen((string)$this->consumptionUrl_));
      fwrite($fp, (string)$this->consumptionUrl_);
    }
    if (!is_null($this->estimatedNumChildren_)) {
      fwrite($fp, "\xb0\x01");
      Protobuf::write_varint($fp, (int)$this->estimatedNumChildren_);
    }
    if (!is_null($this->subtitle_)) {
      fwrite($fp, "\xba\x01");
      Protobuf::write_varint($fp, strlen((string)$this->subtitle_));
      fwrite($fp, (string)$this->subtitle_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->docid_)) {
      $l = $this->docid_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->fetchDocid_)) {
      $l = $this->fetchDocid_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->sampleDocid_)) {
      $l = $this->sampleDocid_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->title_)) {
      $l = strlen((string)$this->title_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->url_)) {
      $l = strlen((string)$this->url_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->snippet_))
      foreach($this->snippet_ as $v) {
        $l = strlen((string)$v);
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
    if (!is_null($this->priceDeprecated_)) {
      $l = $this->priceDeprecated_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->availability_)) {
      $l = $this->availability_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->image_))
      foreach($this->image_ as $v) {
        $l = $v->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
    if (!is_null($this->child_))
      foreach($this->child_ as $v) {
        $l = $v->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
    if (!is_null($this->aggregateRating_)) {
      $l = $this->aggregateRating_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->offer_))
      foreach($this->offer_ as $v) {
        $l = $v->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
    if (!is_null($this->translatedSnippet_))
      foreach($this->translatedSnippet_ as $v) {
        $l = $v->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
    if (!is_null($this->documentVariant_))
      foreach($this->documentVariant_ as $v) {
        $l = $v->size();
        $size += 2 + Protobuf::size_varint($l) + $l;
      }
    if (!is_null($this->categoryId_))
      foreach($this->categoryId_ as $v) {
        $l = strlen((string)$v);
        $size += 2 + Protobuf::size_varint($l) + $l;
      }
    if (!is_null($this->decoration_))
      foreach($this->decoration_ as $v) {
        $l = $v->size();
        $size += 2 + Protobuf::size_varint($l) + $l;
      }
    if (!is_null($this->parent_))
      foreach($this->parent_ as $v) {
        $l = $v->size();
        $size += 2 + Protobuf::size_varint($l) + $l;
      }
    if (!is_null($this->privacyPolicyUrl_)) {
      $l = strlen((string)$this->privacyPolicyUrl_);
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->consumptionUrl_)) {
      $l = strlen((string)$this->consumptionUrl_);
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->estimatedNumChildren_)) {
      $size += 2 + Protobuf::size_varint($this->estimatedNumChildren_);
    }
    if (!is_null($this->subtitle_)) {
      $l = strlen((string)$this->subtitle_);
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('docid_', $this->docid_)
         . Protobuf::toString('fetchDocid_', $this->fetchDocid_)
         . Protobuf::toString('sampleDocid_', $this->sampleDocid_)
         . Protobuf::toString('title_', $this->title_)
         . Protobuf::toString('url_', $this->url_)
         . Protobuf::toString('snippet_', $this->snippet_)
         . Protobuf::toString('priceDeprecated_', $this->priceDeprecated_)
         . Protobuf::toString('availability_', $this->availability_)
         . Protobuf::toString('image_', $this->image_)
         . Protobuf::toString('child_', $this->child_)
         . Protobuf::toString('aggregateRating_', $this->aggregateRating_)
         . Protobuf::toString('offer_', $this->offer_)
         . Protobuf::toString('translatedSnippet_', $this->translatedSnippet_)
         . Protobuf::toString('documentVariant_', $this->documentVariant_)
         . Protobuf::toString('categoryId_', $this->categoryId_)
         . Protobuf::toString('decoration_', $this->decoration_)
         . Protobuf::toString('parent_', $this->parent_)
         . Protobuf::toString('privacyPolicyUrl_', $this->privacyPolicyUrl_)
         . Protobuf::toString('consumptionUrl_', $this->consumptionUrl_)
         . Protobuf::toString('estimatedNumChildren_', $this->estimatedNumChildren_)
         . Protobuf::toString('subtitle_', $this->subtitle_);
  }
  
  // optional .Docid docid = 1;

  protected $docid_;
  public function resetDocid() { unset($this->docid_); }
  public function clearDocid() { unset($this->docid_); }
  public function hasDocid() { return isset($this->docid_); }
  public function getDocid() { return $this->docid_; }
  public function setDocid(Docid $value) { $this->docid_ = $value; }
  
  // optional .Docid fetchDocid = 2;

  protected $fetchDocid_;
  public function resetFetchDocid() { unset($this->fetchDocid_); }
  public function clearFetchDocid() { unset($this->fetchDocid_); }
  public function hasFetchDocid() { return isset($this->fetchDocid_); }
  public function getFetchDocid() { return $this->fetchDocid_; }
  public function setFetchDocid(Docid $value) { $this->fetchDocid_ = $value; }
  
  // optional .Docid sampleDocid = 3;

  protected $sampleDocid_;
  public function resetSampleDocid() { unset($this->sampleDocid_); }
  public function clearSampleDocid() { unset($this->sampleDocid_); }
  public function hasSampleDocid() { return isset($this->sampleDocid_); }
  public function getSampleDocid() { return $this->sampleDocid_; }
  public function setSampleDocid(Docid $value) { $this->sampleDocid_ = $value; }
  
  // optional string title = 4;

  protected $title_;
  public function resetTitle() { unset($this->title_); }
  public function clearTitle() { unset($this->title_); }
  public function hasTitle() { return isset($this->title_); }
  public function getTitle() { return $this->title_; }
  public function setTitle($value) { $this->title_ = (string)$value; }
  
  // optional string url = 5;

  protected $url_;
  public function resetUrl() { unset($this->url_); }
  public function clearUrl() { unset($this->url_); }
  public function hasUrl() { return isset($this->url_); }
  public function getUrl() { return $this->url_; }
  public function setUrl($value) { $this->url_ = (string)$value; }
  
  // repeated string snippet = 6;

  protected $snippet_ = array();
  public function clearSnippet() { $this->snippet_ = array(); }
  public function getSnippetCount() { return count($this->snippet_); }
  public function hasSnippet() { return (count($this->snippet_) > 0); }
  public function indexOfSnippet($value) { return array_search($value,$this->snippet_);}
  public function removeSnippet($index) { unset($this->snippet_[$index]); }
  public function removeValSnippet($value) { $idx = array_search($value,$this->snippet_); if($idx !== FALSE){unset($this->snippet_[$idx]); }}
  public function removeValsSnippet($values) { foreach($values as $value){$idx = array_search($value,$this->snippet_); if($idx !== FALSE){unset($this->snippet_[$idx]); }}}
  public function pushSnippet($newvar) { return array_push($this->snippet_,(string)$newvar); }
  public function popSnippet() { return array_pop($this->snippet_); }
  public function shiftSnippet() { return array_shift($this->snippet_); }
  public function unshiftSnippet($newvar) { return array_unshift($this->snippet_,(string)$newvar); }
  public function getSnippet($index) { return $this->snippet_[$index]; }
  public function getSnippetArray() { return $this->snippet_; }
  public function setSnippet($index, $value) {$this->snippet_[$index] = (string)$value;	}
  public function addSnippet($value) { $this->snippet_[] = (string)$value; }
  public function addAllSnippet(array $values) { foreach($values as $value) {$this->snippet_[] = (string)$value;} }
  
  // optional .Offer priceDeprecated = 7;

  protected $priceDeprecated_;
  public function resetPriceDeprecated() { unset($this->priceDeprecated_); }
  public function clearPriceDeprecated() { unset($this->priceDeprecated_); }
  public function hasPriceDeprecated() { return isset($this->priceDeprecated_); }
  public function getPriceDeprecated() { return $this->priceDeprecated_; }
  public function setPriceDeprecated(Offer $value) { $this->priceDeprecated_ = $value; }
  
  // optional .Availability availability = 9;

  protected $availability_;
  public function resetAvailability() { unset($this->availability_); }
  public function clearAvailability() { unset($this->availability_); }
  public function hasAvailability() { return isset($this->availability_); }
  public function getAvailability() { return $this->availability_; }
  public function setAvailability(Availability $value) { $this->availability_ = $value; }
  
  // repeated .Image image = 10;

  protected $image_ = array();
  public function clearImage() { $this->image_ = array(); }
  public function getImageCount() { return count($this->image_); }
  public function hasImage() { return (count($this->image_) > 0); }
  public function indexOfImage($value) { return array_search($value,$this->image_);}
  public function removeImage($index) { unset($this->image_[$index]); }
  public function removeValImage($value) { $idx = array_search($value,$this->image_); if($idx !== FALSE){unset($this->image_[$idx]); }}
  public function removeValsImage($values) { foreach($values as $value){$idx = array_search($value,$this->image_); if($idx !== FALSE){unset($this->image_[$idx]); }}}
  public function pushImage($newvar) { return array_push($this->image_,$newvar); }
  public function popImage() { return array_pop($this->image_); }
  public function shiftImage() { return array_shift($this->image_); }
  public function unshiftImage($newvar) { return array_unshift($this->image_,$newvar); }
  public function getImage($index) { return $this->image_[$index]; }
  public function getImageArray() { return $this->image_; }
  public function setImage($index, $value) {$this->image_[$index] = $value;	}
  public function addImage($value) { $this->image_[] = $value; }
  public function addAllImage(array $values) { foreach($values as $value) {$this->image_[] = $value;} }
  
  // repeated .Document child = 11;

  protected $child_ = array();
  public function clearChild() { $this->child_ = array(); }
  public function getChildCount() { return count($this->child_); }
  public function hasChild() { return (count($this->child_) > 0); }
  public function indexOfChild($value) { return array_search($value,$this->child_);}
  public function removeChild($index) { unset($this->child_[$index]); }
  public function removeValChild($value) { $idx = array_search($value,$this->child_); if($idx !== FALSE){unset($this->child_[$idx]); }}
  public function removeValsChild($values) { foreach($values as $value){$idx = array_search($value,$this->child_); if($idx !== FALSE){unset($this->child_[$idx]); }}}
  public function pushChild($newvar) { return array_push($this->child_,$newvar); }
  public function popChild() { return array_pop($this->child_); }
  public function shiftChild() { return array_shift($this->child_); }
  public function unshiftChild($newvar) { return array_unshift($this->child_,$newvar); }
  public function getChild($index) { return $this->child_[$index]; }
  public function getChildArray() { return $this->child_; }
  public function setChild($index, $value) {$this->child_[$index] = $value;	}
  public function addChild($value) { $this->child_[] = $value; }
  public function addAllChild(array $values) { foreach($values as $value) {$this->child_[] = $value;} }
  
  // optional .AggregateRating aggregateRating = 13;

  protected $aggregateRating_;
  public function resetAggregateRating() { unset($this->aggregateRating_); }
  public function clearAggregateRating() { unset($this->aggregateRating_); }
  public function hasAggregateRating() { return isset($this->aggregateRating_); }
  public function getAggregateRating() { return $this->aggregateRating_; }
  public function setAggregateRating(AggregateRating $value) { $this->aggregateRating_ = $value; }
  
  // repeated .Offer offer = 14;

  protected $offer_ = array();
  public function clearOffer() { $this->offer_ = array(); }
  public function getOfferCount() { return count($this->offer_); }
  public function hasOffer() { return (count($this->offer_) > 0); }
  public function indexOfOffer($value) { return array_search($value,$this->offer_);}
  public function removeOffer($index) { unset($this->offer_[$index]); }
  public function removeValOffer($value) { $idx = array_search($value,$this->offer_); if($idx !== FALSE){unset($this->offer_[$idx]); }}
  public function removeValsOffer($values) { foreach($values as $value){$idx = array_search($value,$this->offer_); if($idx !== FALSE){unset($this->offer_[$idx]); }}}
  public function pushOffer($newvar) { return array_push($this->offer_,$newvar); }
  public function popOffer() { return array_pop($this->offer_); }
  public function shiftOffer() { return array_shift($this->offer_); }
  public function unshiftOffer($newvar) { return array_unshift($this->offer_,$newvar); }
  public function getOffer($index) { return $this->offer_[$index]; }
  public function getOfferArray() { return $this->offer_; }
  public function setOffer($index, $value) {$this->offer_[$index] = $value;	}
  public function addOffer($value) { $this->offer_[] = $value; }
  public function addAllOffer(array $values) { foreach($values as $value) {$this->offer_[] = $value;} }
  
  // repeated .TranslatedText translatedSnippet = 15;

  protected $translatedSnippet_ = array();
  public function clearTranslatedSnippet() { $this->translatedSnippet_ = array(); }
  public function getTranslatedSnippetCount() { return count($this->translatedSnippet_); }
  public function hasTranslatedSnippet() { return (count($this->translatedSnippet_) > 0); }
  public function indexOfTranslatedSnippet($value) { return array_search($value,$this->translatedSnippet_);}
  public function removeTranslatedSnippet($index) { unset($this->translatedSnippet_[$index]); }
  public function removeValTranslatedSnippet($value) { $idx = array_search($value,$this->translatedSnippet_); if($idx !== FALSE){unset($this->translatedSnippet_[$idx]); }}
  public function removeValsTranslatedSnippet($values) { foreach($values as $value){$idx = array_search($value,$this->translatedSnippet_); if($idx !== FALSE){unset($this->translatedSnippet_[$idx]); }}}
  public function pushTranslatedSnippet($newvar) { return array_push($this->translatedSnippet_,$newvar); }
  public function popTranslatedSnippet() { return array_pop($this->translatedSnippet_); }
  public function shiftTranslatedSnippet() { return array_shift($this->translatedSnippet_); }
  public function unshiftTranslatedSnippet($newvar) { return array_unshift($this->translatedSnippet_,$newvar); }
  public function getTranslatedSnippet($index) { return $this->translatedSnippet_[$index]; }
  public function getTranslatedSnippetArray() { return $this->translatedSnippet_; }
  public function setTranslatedSnippet($index, $value) {$this->translatedSnippet_[$index] = $value;	}
  public function addTranslatedSnippet($value) { $this->translatedSnippet_[] = $value; }
  public function addAllTranslatedSnippet(array $values) { foreach($values as $value) {$this->translatedSnippet_[] = $value;} }
  
  // repeated .DocumentVariant documentVariant = 16;

  protected $documentVariant_ = array();
  public function clearDocumentVariant() { $this->documentVariant_ = array(); }
  public function getDocumentVariantCount() { return count($this->documentVariant_); }
  public function hasDocumentVariant() { return (count($this->documentVariant_) > 0); }
  public function indexOfDocumentVariant($value) { return array_search($value,$this->documentVariant_);}
  public function removeDocumentVariant($index) { unset($this->documentVariant_[$index]); }
  public function removeValDocumentVariant($value) { $idx = array_search($value,$this->documentVariant_); if($idx !== FALSE){unset($this->documentVariant_[$idx]); }}
  public function removeValsDocumentVariant($values) { foreach($values as $value){$idx = array_search($value,$this->documentVariant_); if($idx !== FALSE){unset($this->documentVariant_[$idx]); }}}
  public function pushDocumentVariant($newvar) { return array_push($this->documentVariant_,$newvar); }
  public function popDocumentVariant() { return array_pop($this->documentVariant_); }
  public function shiftDocumentVariant() { return array_shift($this->documentVariant_); }
  public function unshiftDocumentVariant($newvar) { return array_unshift($this->documentVariant_,$newvar); }
  public function getDocumentVariant($index) { return $this->documentVariant_[$index]; }
  public function getDocumentVariantArray() { return $this->documentVariant_; }
  public function setDocumentVariant($index, $value) {$this->documentVariant_[$index] = $value;	}
  public function addDocumentVariant($value) { $this->documentVariant_[] = $value; }
  public function addAllDocumentVariant(array $values) { foreach($values as $value) {$this->documentVariant_[] = $value;} }
  
  // repeated string categoryId = 17;

  protected $categoryId_ = array();
  public function clearCategoryId() { $this->categoryId_ = array(); }
  public function getCategoryIdCount() { return count($this->categoryId_); }
  public function hasCategoryId() { return (count($this->categoryId_) > 0); }
  public function indexOfCategoryId($value) { return array_search($value,$this->categoryId_);}
  public function removeCategoryId($index) { unset($this->categoryId_[$index]); }
  public function removeValCategoryId($value) { $idx = array_search($value,$this->categoryId_); if($idx !== FALSE){unset($this->categoryId_[$idx]); }}
  public function removeValsCategoryId($values) { foreach($values as $value){$idx = array_search($value,$this->categoryId_); if($idx !== FALSE){unset($this->categoryId_[$idx]); }}}
  public function pushCategoryId($newvar) { return array_push($this->categoryId_,(string)$newvar); }
  public function popCategoryId() { return array_pop($this->categoryId_); }
  public function shiftCategoryId() { return array_shift($this->categoryId_); }
  public function unshiftCategoryId($newvar) { return array_unshift($this->categoryId_,(string)$newvar); }
  public function getCategoryId($index) { return $this->categoryId_[$index]; }
  public function getCategoryIdArray() { return $this->categoryId_; }
  public function setCategoryId($index, $value) {$this->categoryId_[$index] = (string)$value;	}
  public function addCategoryId($value) { $this->categoryId_[] = (string)$value; }
  public function addAllCategoryId(array $values) { foreach($values as $value) {$this->categoryId_[] = (string)$value;} }
  
  // repeated .Document decoration = 18;

  protected $decoration_ = array();
  public function clearDecoration() { $this->decoration_ = array(); }
  public function getDecorationCount() { return count($this->decoration_); }
  public function hasDecoration() { return (count($this->decoration_) > 0); }
  public function indexOfDecoration($value) { return array_search($value,$this->decoration_);}
  public function removeDecoration($index) { unset($this->decoration_[$index]); }
  public function removeValDecoration($value) { $idx = array_search($value,$this->decoration_); if($idx !== FALSE){unset($this->decoration_[$idx]); }}
  public function removeValsDecoration($values) { foreach($values as $value){$idx = array_search($value,$this->decoration_); if($idx !== FALSE){unset($this->decoration_[$idx]); }}}
  public function pushDecoration($newvar) { return array_push($this->decoration_,$newvar); }
  public function popDecoration() { return array_pop($this->decoration_); }
  public function shiftDecoration() { return array_shift($this->decoration_); }
  public function unshiftDecoration($newvar) { return array_unshift($this->decoration_,$newvar); }
  public function getDecoration($index) { return $this->decoration_[$index]; }
  public function getDecorationArray() { return $this->decoration_; }
  public function setDecoration($index, $value) {$this->decoration_[$index] = $value;	}
  public function addDecoration($value) { $this->decoration_[] = $value; }
  public function addAllDecoration(array $values) { foreach($values as $value) {$this->decoration_[] = $value;} }
  
  // repeated .Document parent = 19;

  protected $parent_ = array();
  public function clearParent() { $this->parent_ = array(); }
  public function getParentCount() { return count($this->parent_); }
  public function hasParent() { return (count($this->parent_) > 0); }
  public function indexOfParent($value) { return array_search($value,$this->parent_);}
  public function removeParent($index) { unset($this->parent_[$index]); }
  public function removeValParent($value) { $idx = array_search($value,$this->parent_); if($idx !== FALSE){unset($this->parent_[$idx]); }}
  public function removeValsParent($values) { foreach($values as $value){$idx = array_search($value,$this->parent_); if($idx !== FALSE){unset($this->parent_[$idx]); }}}
  public function pushParent($newvar) { return array_push($this->parent_,$newvar); }
  public function popParent() { return array_pop($this->parent_); }
  public function shiftParent() { return array_shift($this->parent_); }
  public function unshiftParent($newvar) { return array_unshift($this->parent_,$newvar); }
  public function getParent($index) { return $this->parent_[$index]; }
  public function getParentArray() { return $this->parent_; }
  public function setParent($index, $value) {$this->parent_[$index] = $value;	}
  public function addParent($value) { $this->parent_[] = $value; }
  public function addAllParent(array $values) { foreach($values as $value) {$this->parent_[] = $value;} }
  
  // optional string privacyPolicyUrl = 20;

  protected $privacyPolicyUrl_;
  public function resetPrivacyPolicyUrl() { unset($this->privacyPolicyUrl_); }
  public function clearPrivacyPolicyUrl() { unset($this->privacyPolicyUrl_); }
  public function hasPrivacyPolicyUrl() { return isset($this->privacyPolicyUrl_); }
  public function getPrivacyPolicyUrl() { return $this->privacyPolicyUrl_; }
  public function setPrivacyPolicyUrl($value) { $this->privacyPolicyUrl_ = (string)$value; }
  
  // optional string consumptionUrl = 21;

  protected $consumptionUrl_;
  public function resetConsumptionUrl() { unset($this->consumptionUrl_); }
  public function clearConsumptionUrl() { unset($this->consumptionUrl_); }
  public function hasConsumptionUrl() { return isset($this->consumptionUrl_); }
  public function getConsumptionUrl() { return $this->consumptionUrl_; }
  public function setConsumptionUrl($value) { $this->consumptionUrl_ = (string)$value; }
  
  // optional int32 estimatedNumChildren = 22;

  protected $estimatedNumChildren_;
  public function resetEstimatedNumChildren() { unset($this->estimatedNumChildren_); }
  public function clearEstimatedNumChildren() { unset($this->estimatedNumChildren_); }
  public function hasEstimatedNumChildren() { return isset($this->estimatedNumChildren_); }
  public function getEstimatedNumChildren() { return $this->estimatedNumChildren_; }
  public function setEstimatedNumChildren($value) { $this->estimatedNumChildren_ = (string)$value; }
  
  // optional string subtitle = 23;

  protected $subtitle_;
  public function resetSubtitle() { unset($this->subtitle_); }
  public function clearSubtitle() { unset($this->subtitle_); }
  public function hasSubtitle() { return isset($this->subtitle_); }
  public function getSubtitle() { return $this->subtitle_; }
  public function setSubtitle($value) { $this->subtitle_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:Document)
}

// message DocumentVariant
class DocumentVariant {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("DocumentVariant: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->variationType_ = $tmp;
          
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->rule_ = new Rule($fp, $len);
          ASSERT('$len == 0');
          break;
        case 3:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->title_ = $tmp;
          $limit-=$len;
          break;
        case 4:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->snippet_[] = $tmp;
          $limit-=$len;
          break;
        case 5:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->recentChanges_ = $tmp;
          $limit-=$len;
          break;
        case 6:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->autoTranslation_[] = new TranslatedText($fp, $len);
          ASSERT('$len == 0');
          break;
        case 7:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->offer_[] = new Offer($fp, $len);
          ASSERT('$len == 0');
          break;
        case 9:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->channelId_ = $tmp;
          
          break;
        case 10:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->child_[] = new Document($fp, $len);
          ASSERT('$len == 0');
          break;
        case 11:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->decoration_[] = new Document($fp, $len);
          ASSERT('$len == 0');
          break;
        case 12:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->image_[] = new Image($fp, $len);
          ASSERT('$len == 0');
          break;
        case 13:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->categoryId_[] = $tmp;
          $limit-=$len;
          break;
        case 14:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->subtitle_ = $tmp;
          $limit-=$len;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->variationType_)) {
      fwrite($fp, "\x08");
      Protobuf::write_varint($fp, (int)$this->variationType_);
    }
    if (!is_null($this->rule_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, $this->rule_->size()); // message
      $this->rule_->write($fp);
    }
    if (!is_null($this->title_)) {
      fwrite($fp, "\x1a");
      Protobuf::write_varint($fp, strlen((string)$this->title_));
      fwrite($fp, (string)$this->title_);
    }
    if (!is_null($this->snippet_))
      foreach($this->snippet_ as $v) {
        fwrite($fp, "\"");
        Protobuf::write_varint($fp, strlen((string)$v));
        fwrite($fp, (string)$v);
      }
    if (!is_null($this->recentChanges_)) {
      fwrite($fp, "*");
      Protobuf::write_varint($fp, strlen((string)$this->recentChanges_));
      fwrite($fp, (string)$this->recentChanges_);
    }
    if (!is_null($this->autoTranslation_))
      foreach($this->autoTranslation_ as $v) {
        fwrite($fp, "2");
        Protobuf::write_varint($fp, $v->size()); // message
        $v->write($fp);
      }
    if (!is_null($this->offer_))
      foreach($this->offer_ as $v) {
        fwrite($fp, ":");
        Protobuf::write_varint($fp, $v->size()); // message
        $v->write($fp);
      }
    if (!is_null($this->channelId_)) {
      fwrite($fp, "H");
      Protobuf::write_varint($fp, (int)$this->channelId_);
    }
    if (!is_null($this->child_))
      foreach($this->child_ as $v) {
        fwrite($fp, "R");
        Protobuf::write_varint($fp, $v->size()); // message
        $v->write($fp);
      }
    if (!is_null($this->decoration_))
      foreach($this->decoration_ as $v) {
        fwrite($fp, "Z");
        Protobuf::write_varint($fp, $v->size()); // message
        $v->write($fp);
      }
    if (!is_null($this->image_))
      foreach($this->image_ as $v) {
        fwrite($fp, "b");
        Protobuf::write_varint($fp, $v->size()); // message
        $v->write($fp);
      }
    if (!is_null($this->categoryId_))
      foreach($this->categoryId_ as $v) {
        fwrite($fp, "j");
        Protobuf::write_varint($fp, strlen((string)$v));
        fwrite($fp, (string)$v);
      }
    if (!is_null($this->subtitle_)) {
      fwrite($fp, "r");
      Protobuf::write_varint($fp, strlen((string)$this->subtitle_));
      fwrite($fp, (string)$this->subtitle_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->variationType_)) {
      $size += 1 + Protobuf::size_varint($this->variationType_);
    }
    if (!is_null($this->rule_)) {
      $l = $this->rule_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->title_)) {
      $l = strlen((string)$this->title_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->snippet_))
      foreach($this->snippet_ as $v) {
        $l = strlen((string)$v);
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
    if (!is_null($this->recentChanges_)) {
      $l = strlen((string)$this->recentChanges_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->autoTranslation_))
      foreach($this->autoTranslation_ as $v) {
        $l = $v->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
    if (!is_null($this->offer_))
      foreach($this->offer_ as $v) {
        $l = $v->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
    if (!is_null($this->channelId_)) {
      $size += 1 + Protobuf::size_varint($this->channelId_);
    }
    if (!is_null($this->child_))
      foreach($this->child_ as $v) {
        $l = $v->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
    if (!is_null($this->decoration_))
      foreach($this->decoration_ as $v) {
        $l = $v->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
    if (!is_null($this->image_))
      foreach($this->image_ as $v) {
        $l = $v->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
    if (!is_null($this->categoryId_))
      foreach($this->categoryId_ as $v) {
        $l = strlen((string)$v);
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
    if (!is_null($this->subtitle_)) {
      $l = strlen((string)$this->subtitle_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('variationType_', $this->variationType_)
         . Protobuf::toString('rule_', $this->rule_)
         . Protobuf::toString('title_', $this->title_)
         . Protobuf::toString('snippet_', $this->snippet_)
         . Protobuf::toString('recentChanges_', $this->recentChanges_)
         . Protobuf::toString('autoTranslation_', $this->autoTranslation_)
         . Protobuf::toString('offer_', $this->offer_)
         . Protobuf::toString('channelId_', $this->channelId_)
         . Protobuf::toString('child_', $this->child_)
         . Protobuf::toString('decoration_', $this->decoration_)
         . Protobuf::toString('image_', $this->image_)
         . Protobuf::toString('categoryId_', $this->categoryId_)
         . Protobuf::toString('subtitle_', $this->subtitle_);
  }
  
  // optional int32 variationType = 1;

  protected $variationType_;
  public function resetVariationType() { unset($this->variationType_); }
  public function clearVariationType() { unset($this->variationType_); }
  public function hasVariationType() { return isset($this->variationType_); }
  public function getVariationType() { return $this->variationType_; }
  public function setVariationType($value) { $this->variationType_ = (string)$value; }
  
  // optional .Rule rule = 2;

  protected $rule_;
  public function resetRule() { unset($this->rule_); }
  public function clearRule() { unset($this->rule_); }
  public function hasRule() { return isset($this->rule_); }
  public function getRule() { return $this->rule_; }
  public function setRule(Rule $value) { $this->rule_ = $value; }
  
  // optional string title = 3;

  protected $title_;
  public function resetTitle() { unset($this->title_); }
  public function clearTitle() { unset($this->title_); }
  public function hasTitle() { return isset($this->title_); }
  public function getTitle() { return $this->title_; }
  public function setTitle($value) { $this->title_ = (string)$value; }
  
  // repeated string snippet = 4;

  protected $snippet_ = array();
  public function clearSnippet() { $this->snippet_ = array(); }
  public function getSnippetCount() { return count($this->snippet_); }
  public function hasSnippet() { return (count($this->snippet_) > 0); }
  public function indexOfSnippet($value) { return array_search($value,$this->snippet_);}
  public function removeSnippet($index) { unset($this->snippet_[$index]); }
  public function removeValSnippet($value) { $idx = array_search($value,$this->snippet_); if($idx !== FALSE){unset($this->snippet_[$idx]); }}
  public function removeValsSnippet($values) { foreach($values as $value){$idx = array_search($value,$this->snippet_); if($idx !== FALSE){unset($this->snippet_[$idx]); }}}
  public function pushSnippet($newvar) { return array_push($this->snippet_,(string)$newvar); }
  public function popSnippet() { return array_pop($this->snippet_); }
  public function shiftSnippet() { return array_shift($this->snippet_); }
  public function unshiftSnippet($newvar) { return array_unshift($this->snippet_,(string)$newvar); }
  public function getSnippet($index) { return $this->snippet_[$index]; }
  public function getSnippetArray() { return $this->snippet_; }
  public function setSnippet($index, $value) {$this->snippet_[$index] = (string)$value;	}
  public function addSnippet($value) { $this->snippet_[] = (string)$value; }
  public function addAllSnippet(array $values) { foreach($values as $value) {$this->snippet_[] = (string)$value;} }
  
  // optional string recentChanges = 5;

  protected $recentChanges_;
  public function resetRecentChanges() { unset($this->recentChanges_); }
  public function clearRecentChanges() { unset($this->recentChanges_); }
  public function hasRecentChanges() { return isset($this->recentChanges_); }
  public function getRecentChanges() { return $this->recentChanges_; }
  public function setRecentChanges($value) { $this->recentChanges_ = (string)$value; }
  
  // repeated .TranslatedText autoTranslation = 6;

  protected $autoTranslation_ = array();
  public function clearAutoTranslation() { $this->autoTranslation_ = array(); }
  public function getAutoTranslationCount() { return count($this->autoTranslation_); }
  public function hasAutoTranslation() { return (count($this->autoTranslation_) > 0); }
  public function indexOfAutoTranslation($value) { return array_search($value,$this->autoTranslation_);}
  public function removeAutoTranslation($index) { unset($this->autoTranslation_[$index]); }
  public function removeValAutoTranslation($value) { $idx = array_search($value,$this->autoTranslation_); if($idx !== FALSE){unset($this->autoTranslation_[$idx]); }}
  public function removeValsAutoTranslation($values) { foreach($values as $value){$idx = array_search($value,$this->autoTranslation_); if($idx !== FALSE){unset($this->autoTranslation_[$idx]); }}}
  public function pushAutoTranslation($newvar) { return array_push($this->autoTranslation_,$newvar); }
  public function popAutoTranslation() { return array_pop($this->autoTranslation_); }
  public function shiftAutoTranslation() { return array_shift($this->autoTranslation_); }
  public function unshiftAutoTranslation($newvar) { return array_unshift($this->autoTranslation_,$newvar); }
  public function getAutoTranslation($index) { return $this->autoTranslation_[$index]; }
  public function getAutoTranslationArray() { return $this->autoTranslation_; }
  public function setAutoTranslation($index, $value) {$this->autoTranslation_[$index] = $value;	}
  public function addAutoTranslation($value) { $this->autoTranslation_[] = $value; }
  public function addAllAutoTranslation(array $values) { foreach($values as $value) {$this->autoTranslation_[] = $value;} }
  
  // repeated .Offer offer = 7;

  protected $offer_ = array();
  public function clearOffer() { $this->offer_ = array(); }
  public function getOfferCount() { return count($this->offer_); }
  public function hasOffer() { return (count($this->offer_) > 0); }
  public function indexOfOffer($value) { return array_search($value,$this->offer_);}
  public function removeOffer($index) { unset($this->offer_[$index]); }
  public function removeValOffer($value) { $idx = array_search($value,$this->offer_); if($idx !== FALSE){unset($this->offer_[$idx]); }}
  public function removeValsOffer($values) { foreach($values as $value){$idx = array_search($value,$this->offer_); if($idx !== FALSE){unset($this->offer_[$idx]); }}}
  public function pushOffer($newvar) { return array_push($this->offer_,$newvar); }
  public function popOffer() { return array_pop($this->offer_); }
  public function shiftOffer() { return array_shift($this->offer_); }
  public function unshiftOffer($newvar) { return array_unshift($this->offer_,$newvar); }
  public function getOffer($index) { return $this->offer_[$index]; }
  public function getOfferArray() { return $this->offer_; }
  public function setOffer($index, $value) {$this->offer_[$index] = $value;	}
  public function addOffer($value) { $this->offer_[] = $value; }
  public function addAllOffer(array $values) { foreach($values as $value) {$this->offer_[] = $value;} }
  
  // optional int64 channelId = 9;

  protected $channelId_;
  public function resetChannelId() { unset($this->channelId_); }
  public function clearChannelId() { unset($this->channelId_); }
  public function hasChannelId() { return isset($this->channelId_); }
  public function getChannelId() { return $this->channelId_; }
  public function setChannelId($value) { $this->channelId_ = (string)$value; }
  
  // repeated .Document child = 10;

  protected $child_ = array();
  public function clearChild() { $this->child_ = array(); }
  public function getChildCount() { return count($this->child_); }
  public function hasChild() { return (count($this->child_) > 0); }
  public function indexOfChild($value) { return array_search($value,$this->child_);}
  public function removeChild($index) { unset($this->child_[$index]); }
  public function removeValChild($value) { $idx = array_search($value,$this->child_); if($idx !== FALSE){unset($this->child_[$idx]); }}
  public function removeValsChild($values) { foreach($values as $value){$idx = array_search($value,$this->child_); if($idx !== FALSE){unset($this->child_[$idx]); }}}
  public function pushChild($newvar) { return array_push($this->child_,$newvar); }
  public function popChild() { return array_pop($this->child_); }
  public function shiftChild() { return array_shift($this->child_); }
  public function unshiftChild($newvar) { return array_unshift($this->child_,$newvar); }
  public function getChild($index) { return $this->child_[$index]; }
  public function getChildArray() { return $this->child_; }
  public function setChild($index, $value) {$this->child_[$index] = $value;	}
  public function addChild($value) { $this->child_[] = $value; }
  public function addAllChild(array $values) { foreach($values as $value) {$this->child_[] = $value;} }
  
  // repeated .Document decoration = 11;

  protected $decoration_ = array();
  public function clearDecoration() { $this->decoration_ = array(); }
  public function getDecorationCount() { return count($this->decoration_); }
  public function hasDecoration() { return (count($this->decoration_) > 0); }
  public function indexOfDecoration($value) { return array_search($value,$this->decoration_);}
  public function removeDecoration($index) { unset($this->decoration_[$index]); }
  public function removeValDecoration($value) { $idx = array_search($value,$this->decoration_); if($idx !== FALSE){unset($this->decoration_[$idx]); }}
  public function removeValsDecoration($values) { foreach($values as $value){$idx = array_search($value,$this->decoration_); if($idx !== FALSE){unset($this->decoration_[$idx]); }}}
  public function pushDecoration($newvar) { return array_push($this->decoration_,$newvar); }
  public function popDecoration() { return array_pop($this->decoration_); }
  public function shiftDecoration() { return array_shift($this->decoration_); }
  public function unshiftDecoration($newvar) { return array_unshift($this->decoration_,$newvar); }
  public function getDecoration($index) { return $this->decoration_[$index]; }
  public function getDecorationArray() { return $this->decoration_; }
  public function setDecoration($index, $value) {$this->decoration_[$index] = $value;	}
  public function addDecoration($value) { $this->decoration_[] = $value; }
  public function addAllDecoration(array $values) { foreach($values as $value) {$this->decoration_[] = $value;} }
  
  // repeated .Image image = 12;

  protected $image_ = array();
  public function clearImage() { $this->image_ = array(); }
  public function getImageCount() { return count($this->image_); }
  public function hasImage() { return (count($this->image_) > 0); }
  public function indexOfImage($value) { return array_search($value,$this->image_);}
  public function removeImage($index) { unset($this->image_[$index]); }
  public function removeValImage($value) { $idx = array_search($value,$this->image_); if($idx !== FALSE){unset($this->image_[$idx]); }}
  public function removeValsImage($values) { foreach($values as $value){$idx = array_search($value,$this->image_); if($idx !== FALSE){unset($this->image_[$idx]); }}}
  public function pushImage($newvar) { return array_push($this->image_,$newvar); }
  public function popImage() { return array_pop($this->image_); }
  public function shiftImage() { return array_shift($this->image_); }
  public function unshiftImage($newvar) { return array_unshift($this->image_,$newvar); }
  public function getImage($index) { return $this->image_[$index]; }
  public function getImageArray() { return $this->image_; }
  public function setImage($index, $value) {$this->image_[$index] = $value;	}
  public function addImage($value) { $this->image_[] = $value; }
  public function addAllImage(array $values) { foreach($values as $value) {$this->image_[] = $value;} }
  
  // repeated string categoryId = 13;

  protected $categoryId_ = array();
  public function clearCategoryId() { $this->categoryId_ = array(); }
  public function getCategoryIdCount() { return count($this->categoryId_); }
  public function hasCategoryId() { return (count($this->categoryId_) > 0); }
  public function indexOfCategoryId($value) { return array_search($value,$this->categoryId_);}
  public function removeCategoryId($index) { unset($this->categoryId_[$index]); }
  public function removeValCategoryId($value) { $idx = array_search($value,$this->categoryId_); if($idx !== FALSE){unset($this->categoryId_[$idx]); }}
  public function removeValsCategoryId($values) { foreach($values as $value){$idx = array_search($value,$this->categoryId_); if($idx !== FALSE){unset($this->categoryId_[$idx]); }}}
  public function pushCategoryId($newvar) { return array_push($this->categoryId_,(string)$newvar); }
  public function popCategoryId() { return array_pop($this->categoryId_); }
  public function shiftCategoryId() { return array_shift($this->categoryId_); }
  public function unshiftCategoryId($newvar) { return array_unshift($this->categoryId_,(string)$newvar); }
  public function getCategoryId($index) { return $this->categoryId_[$index]; }
  public function getCategoryIdArray() { return $this->categoryId_; }
  public function setCategoryId($index, $value) {$this->categoryId_[$index] = (string)$value;	}
  public function addCategoryId($value) { $this->categoryId_[] = (string)$value; }
  public function addAllCategoryId(array $values) { foreach($values as $value) {$this->categoryId_[] = (string)$value;} }
  
  // optional string subtitle = 14;

  protected $subtitle_;
  public function resetSubtitle() { unset($this->subtitle_); }
  public function clearSubtitle() { unset($this->subtitle_); }
  public function hasSubtitle() { return isset($this->subtitle_); }
  public function getSubtitle() { return $this->subtitle_; }
  public function setSubtitle($value) { $this->subtitle_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:DocumentVariant)
}


// group Image.Dimension
class Image_Dimension {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("Image_Dimension: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 2:
          ASSERT('$wire == 4');
          break 2;
        case 3:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->width_ = $tmp;
          
          break;
        case 4:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->height_ = $tmp;
          
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->width_)) {
      fwrite($fp, "\x18");
      Protobuf::write_varint($fp, (int)$this->width_);
    }
    if (!is_null($this->height_)) {
      fwrite($fp, " ");
      Protobuf::write_varint($fp, (int)$this->height_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->width_)) {
      $size += 1 + Protobuf::size_varint($this->width_);
    }
    if (!is_null($this->height_)) {
      $size += 1 + Protobuf::size_varint($this->height_);
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('width_', $this->width_)
         . Protobuf::toString('height_', $this->height_);
  }
  
  // optional int32 width = 3;

  protected $width_;
  public function resetWidth() { unset($this->width_); }
  public function clearWidth() { unset($this->width_); }
  public function hasWidth() { return isset($this->width_); }
  public function getWidth() { return $this->width_; }
  public function setWidth($value) { $this->width_ = (string)$value; }
  
  // optional int32 height = 4;

  protected $height_;
  public function resetHeight() { unset($this->height_); }
  public function clearHeight() { unset($this->height_); }
  public function hasHeight() { return isset($this->height_); }
  public function getHeight() { return $this->height_; }
  public function setHeight($value) { $this->height_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:Image.Dimension)
}


// group Image.Citation
class Image_Citation {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("Image_Citation: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 10:
          ASSERT('$wire == 4');
          break 2;
        case 11:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->titleLocalized_ = $tmp;
          $limit-=$len;
          break;
        case 12:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->url_ = $tmp;
          $limit-=$len;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->titleLocalized_)) {
      fwrite($fp, "Z");
      Protobuf::write_varint($fp, strlen((string)$this->titleLocalized_));
      fwrite($fp, (string)$this->titleLocalized_);
    }
    if (!is_null($this->url_)) {
      fwrite($fp, "b");
      Protobuf::write_varint($fp, strlen((string)$this->url_));
      fwrite($fp, (string)$this->url_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->titleLocalized_)) {
      $l = strlen((string)$this->titleLocalized_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->url_)) {
      $l = strlen((string)$this->url_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('titleLocalized_', $this->titleLocalized_)
         . Protobuf::toString('url_', $this->url_);
  }
  
  // optional string titleLocalized = 11;

  protected $titleLocalized_;
  public function resetTitleLocalized() { unset($this->titleLocalized_); }
  public function clearTitleLocalized() { unset($this->titleLocalized_); }
  public function hasTitleLocalized() { return isset($this->titleLocalized_); }
  public function getTitleLocalized() { return $this->titleLocalized_; }
  public function setTitleLocalized($value) { $this->titleLocalized_ = (string)$value; }
  
  // optional string url = 12;

  protected $url_;
  public function resetUrl() { unset($this->url_); }
  public function clearUrl() { unset($this->url_); }
  public function hasUrl() { return isset($this->url_); }
  public function getUrl() { return $this->url_; }
  public function setUrl($value) { $this->url_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:Image.Citation)
}

// message Image
class Image {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("Image: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->imageType_ = $tmp;
          
          break;
        case 2:
          ASSERT('$wire == 3');
          $this->dimension_ = new Image_Dimension($fp, $limit);
          break;
        case 5:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->imageUrl_ = $tmp;
          $limit-=$len;
          break;
        case 6:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->altTextLocalized_ = $tmp;
          $limit-=$len;
          break;
        case 7:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->secureUrl_ = $tmp;
          $limit-=$len;
          break;
        case 8:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->positionInSequence_ = $tmp;
          
          break;
        case 9:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->supportsFifeUrlOptions_ = $tmp > 0 ? true : false;
          break;
        case 10:
          ASSERT('$wire == 3');
          $this->citation_ = new Image_Citation($fp, $limit);
          break;
        case 14:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->durationSeconds_ = $tmp;
          
          break;
        case 15:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->fillColorRgb_ = $tmp;
          $limit-=$len;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->imageType_)) {
      fwrite($fp, "\x08");
      Protobuf::write_varint($fp, (int)$this->imageType_);
    }
    if (!is_null($this->dimension_)) {
      fwrite($fp, "\x13");
      $this->dimension_->write($fp); // group
      fwrite($fp, "\x14");
    }
    if (!is_null($this->imageUrl_)) {
      fwrite($fp, "*");
      Protobuf::write_varint($fp, strlen((string)$this->imageUrl_));
      fwrite($fp, (string)$this->imageUrl_);
    }
    if (!is_null($this->altTextLocalized_)) {
      fwrite($fp, "2");
      Protobuf::write_varint($fp, strlen((string)$this->altTextLocalized_));
      fwrite($fp, (string)$this->altTextLocalized_);
    }
    if (!is_null($this->secureUrl_)) {
      fwrite($fp, ":");
      Protobuf::write_varint($fp, strlen((string)$this->secureUrl_));
      fwrite($fp, (string)$this->secureUrl_);
    }
    if (!is_null($this->positionInSequence_)) {
      fwrite($fp, "@");
      Protobuf::write_varint($fp, (int)$this->positionInSequence_);
    }
    if (!is_null($this->supportsFifeUrlOptions_)) {
      fwrite($fp, "H");
      Protobuf::write_varint($fp, (int)$this->supportsFifeUrlOptions_ ? 1 : 0);
    }
    if (!is_null($this->citation_)) {
      fwrite($fp, "S");
      $this->citation_->write($fp); // group
      fwrite($fp, "T");
    }
    if (!is_null($this->durationSeconds_)) {
      fwrite($fp, "p");
      Protobuf::write_varint($fp, (int)$this->durationSeconds_);
    }
    if (!is_null($this->fillColorRgb_)) {
      fwrite($fp, "z");
      Protobuf::write_varint($fp, strlen((string)$this->fillColorRgb_));
      fwrite($fp, (string)$this->fillColorRgb_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->imageType_)) {
      $size += 1 + Protobuf::size_varint($this->imageType_);
    }
    if (!is_null($this->dimension_)) {
      $size += 2 + $this->dimension_->size();
    }
    if (!is_null($this->imageUrl_)) {
      $l = strlen((string)$this->imageUrl_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->altTextLocalized_)) {
      $l = strlen((string)$this->altTextLocalized_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->secureUrl_)) {
      $l = strlen((string)$this->secureUrl_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->positionInSequence_)) {
      $size += 1 + Protobuf::size_varint($this->positionInSequence_);
    }
    if (!is_null($this->supportsFifeUrlOptions_)) {
      $size += 2;
    }
    if (!is_null($this->citation_)) {
      $size += 2 + $this->citation_->size();
    }
    if (!is_null($this->durationSeconds_)) {
      $size += 1 + Protobuf::size_varint($this->durationSeconds_);
    }
    if (!is_null($this->fillColorRgb_)) {
      $l = strlen((string)$this->fillColorRgb_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('imageType_', $this->imageType_)
         . Protobuf::toString('dimension_', $this->dimension_)
         . Protobuf::toString('imageUrl_', $this->imageUrl_)
         . Protobuf::toString('altTextLocalized_', $this->altTextLocalized_)
         . Protobuf::toString('secureUrl_', $this->secureUrl_)
         . Protobuf::toString('positionInSequence_', $this->positionInSequence_)
         . Protobuf::toString('supportsFifeUrlOptions_', $this->supportsFifeUrlOptions_)
         . Protobuf::toString('citation_', $this->citation_)
         . Protobuf::toString('durationSeconds_', $this->durationSeconds_)
         . Protobuf::toString('fillColorRgb_', $this->fillColorRgb_);
  }
  
  // optional int32 imageType = 1;

  protected $imageType_;
  public function resetImageType() { unset($this->imageType_); }
  public function clearImageType() { unset($this->imageType_); }
  public function hasImageType() { return isset($this->imageType_); }
  public function getImageType() { return $this->imageType_; }
  public function setImageType($value) { $this->imageType_ = (string)$value; }
  
  // optional group Dimension = 2
  protected $dimension_;
  public function resetDimension() { unset($this->dimension_); }
  public function clearDimension() { unset($this->dimension_); }
  public function hasDimension() { return isset($this->dimension_); }
  public function getDimension() { return $this->dimension_; }
  public function setDimension(Image_Dimension $value) { $this->dimension_ = $value; }
  
  // optional string imageUrl = 5;

  protected $imageUrl_;
  public function resetImageUrl() { unset($this->imageUrl_); }
  public function clearImageUrl() { unset($this->imageUrl_); }
  public function hasImageUrl() { return isset($this->imageUrl_); }
  public function getImageUrl() { return $this->imageUrl_; }
  public function setImageUrl($value) { $this->imageUrl_ = (string)$value; }
  
  // optional string altTextLocalized = 6;

  protected $altTextLocalized_;
  public function resetAltTextLocalized() { unset($this->altTextLocalized_); }
  public function clearAltTextLocalized() { unset($this->altTextLocalized_); }
  public function hasAltTextLocalized() { return isset($this->altTextLocalized_); }
  public function getAltTextLocalized() { return $this->altTextLocalized_; }
  public function setAltTextLocalized($value) { $this->altTextLocalized_ = (string)$value; }
  
  // optional string secureUrl = 7;

  protected $secureUrl_;
  public function resetSecureUrl() { unset($this->secureUrl_); }
  public function clearSecureUrl() { unset($this->secureUrl_); }
  public function hasSecureUrl() { return isset($this->secureUrl_); }
  public function getSecureUrl() { return $this->secureUrl_; }
  public function setSecureUrl($value) { $this->secureUrl_ = (string)$value; }
  
  // optional int32 positionInSequence = 8;

  protected $positionInSequence_;
  public function resetPositionInSequence() { unset($this->positionInSequence_); }
  public function clearPositionInSequence() { unset($this->positionInSequence_); }
  public function hasPositionInSequence() { return isset($this->positionInSequence_); }
  public function getPositionInSequence() { return $this->positionInSequence_; }
  public function setPositionInSequence($value) { $this->positionInSequence_ = (string)$value; }
  
  // optional bool supportsFifeUrlOptions = 9;

  protected $supportsFifeUrlOptions_;
  public function resetSupportsFifeUrlOptions() { unset($this->supportsFifeUrlOptions_); }
  public function clearSupportsFifeUrlOptions() { unset($this->supportsFifeUrlOptions_); }
  public function hasSupportsFifeUrlOptions() { return isset($this->supportsFifeUrlOptions_); }
  public function getSupportsFifeUrlOptions() { return $this->supportsFifeUrlOptions_; }
  public function setSupportsFifeUrlOptions($value) { $this->supportsFifeUrlOptions_ = (bool)$value; }
  
  // optional group Citation = 10
  protected $citation_;
  public function resetCitation() { unset($this->citation_); }
  public function clearCitation() { unset($this->citation_); }
  public function hasCitation() { return isset($this->citation_); }
  public function getCitation() { return $this->citation_; }
  public function setCitation(Image_Citation $value) { $this->citation_ = $value; }
  
  // optional int32 durationSeconds = 14;

  protected $durationSeconds_;
  public function resetDurationSeconds() { unset($this->durationSeconds_); }
  public function clearDurationSeconds() { unset($this->durationSeconds_); }
  public function hasDurationSeconds() { return isset($this->durationSeconds_); }
  public function getDurationSeconds() { return $this->durationSeconds_; }
  public function setDurationSeconds($value) { $this->durationSeconds_ = (string)$value; }
  
  // optional string fillColorRgb = 15;

  protected $fillColorRgb_;
  public function resetFillColorRgb() { unset($this->fillColorRgb_); }
  public function clearFillColorRgb() { unset($this->fillColorRgb_); }
  public function hasFillColorRgb() { return isset($this->fillColorRgb_); }
  public function getFillColorRgb() { return $this->fillColorRgb_; }
  public function setFillColorRgb($value) { $this->fillColorRgb_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:Image)
}

// message TranslatedText
class TranslatedText {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("TranslatedText: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->text_ = $tmp;
          $limit-=$len;
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->sourceLocale_ = $tmp;
          $limit-=$len;
          break;
        case 3:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->targetLocale_ = $tmp;
          $limit-=$len;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->text_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, strlen((string)$this->text_));
      fwrite($fp, (string)$this->text_);
    }
    if (!is_null($this->sourceLocale_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, strlen((string)$this->sourceLocale_));
      fwrite($fp, (string)$this->sourceLocale_);
    }
    if (!is_null($this->targetLocale_)) {
      fwrite($fp, "\x1a");
      Protobuf::write_varint($fp, strlen((string)$this->targetLocale_));
      fwrite($fp, (string)$this->targetLocale_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->text_)) {
      $l = strlen((string)$this->text_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->sourceLocale_)) {
      $l = strlen((string)$this->sourceLocale_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->targetLocale_)) {
      $l = strlen((string)$this->targetLocale_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('text_', $this->text_)
         . Protobuf::toString('sourceLocale_', $this->sourceLocale_)
         . Protobuf::toString('targetLocale_', $this->targetLocale_);
  }
  
  // optional string text = 1;

  protected $text_;
  public function resetText() { unset($this->text_); }
  public function clearText() { unset($this->text_); }
  public function hasText() { return isset($this->text_); }
  public function getText() { return $this->text_; }
  public function setText($value) { $this->text_ = (string)$value; }
  
  // optional string sourceLocale = 2;

  protected $sourceLocale_;
  public function resetSourceLocale() { unset($this->sourceLocale_); }
  public function clearSourceLocale() { unset($this->sourceLocale_); }
  public function hasSourceLocale() { return isset($this->sourceLocale_); }
  public function getSourceLocale() { return $this->sourceLocale_; }
  public function setSourceLocale($value) { $this->sourceLocale_ = (string)$value; }
  
  // optional string targetLocale = 3;

  protected $targetLocale_;
  public function resetTargetLocale() { unset($this->targetLocale_); }
  public function clearTargetLocale() { unset($this->targetLocale_); }
  public function hasTargetLocale() { return isset($this->targetLocale_); }
  public function getTargetLocale() { return $this->targetLocale_; }
  public function setTargetLocale($value) { $this->targetLocale_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:TranslatedText)
}

// message Badge
class Badge {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("Badge: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->title_ = $tmp;
          $limit-=$len;
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->image_[] = new Image($fp, $len);
          ASSERT('$len == 0');
          break;
        case 3:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->browseUrl_ = $tmp;
          $limit-=$len;
          break;
        case 4:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->description_ = $tmp;
          $limit-=$len;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->title_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, strlen((string)$this->title_));
      fwrite($fp, (string)$this->title_);
    }
    if (!is_null($this->image_))
      foreach($this->image_ as $v) {
        fwrite($fp, "\x12");
        Protobuf::write_varint($fp, $v->size()); // message
        $v->write($fp);
      }
    if (!is_null($this->browseUrl_)) {
      fwrite($fp, "\x1a");
      Protobuf::write_varint($fp, strlen((string)$this->browseUrl_));
      fwrite($fp, (string)$this->browseUrl_);
    }
    if (!is_null($this->description_)) {
      fwrite($fp, "\"");
      Protobuf::write_varint($fp, strlen((string)$this->description_));
      fwrite($fp, (string)$this->description_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->title_)) {
      $l = strlen((string)$this->title_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->image_))
      foreach($this->image_ as $v) {
        $l = $v->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
    if (!is_null($this->browseUrl_)) {
      $l = strlen((string)$this->browseUrl_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->description_)) {
      $l = strlen((string)$this->description_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('title_', $this->title_)
         . Protobuf::toString('image_', $this->image_)
         . Protobuf::toString('browseUrl_', $this->browseUrl_)
         . Protobuf::toString('description_', $this->description_);
  }
  
  // optional string title = 1;

  protected $title_;
  public function resetTitle() { unset($this->title_); }
  public function clearTitle() { unset($this->title_); }
  public function hasTitle() { return isset($this->title_); }
  public function getTitle() { return $this->title_; }
  public function setTitle($value) { $this->title_ = (string)$value; }
  
  // repeated .Image image = 2;

  protected $image_ = array();
  public function clearImage() { $this->image_ = array(); }
  public function getImageCount() { return count($this->image_); }
  public function hasImage() { return (count($this->image_) > 0); }
  public function indexOfImage($value) { return array_search($value,$this->image_);}
  public function removeImage($index) { unset($this->image_[$index]); }
  public function removeValImage($value) { $idx = array_search($value,$this->image_); if($idx !== FALSE){unset($this->image_[$idx]); }}
  public function removeValsImage($values) { foreach($values as $value){$idx = array_search($value,$this->image_); if($idx !== FALSE){unset($this->image_[$idx]); }}}
  public function pushImage($newvar) { return array_push($this->image_,$newvar); }
  public function popImage() { return array_pop($this->image_); }
  public function shiftImage() { return array_shift($this->image_); }
  public function unshiftImage($newvar) { return array_unshift($this->image_,$newvar); }
  public function getImage($index) { return $this->image_[$index]; }
  public function getImageArray() { return $this->image_; }
  public function setImage($index, $value) {$this->image_[$index] = $value;	}
  public function addImage($value) { $this->image_[] = $value; }
  public function addAllImage(array $values) { foreach($values as $value) {$this->image_[] = $value;} }
  
  // optional string browseUrl = 3;

  protected $browseUrl_;
  public function resetBrowseUrl() { unset($this->browseUrl_); }
  public function clearBrowseUrl() { unset($this->browseUrl_); }
  public function hasBrowseUrl() { return isset($this->browseUrl_); }
  public function getBrowseUrl() { return $this->browseUrl_; }
  public function setBrowseUrl($value) { $this->browseUrl_ = (string)$value; }
  
  // optional string description = 4;

  protected $description_;
  public function resetDescription() { unset($this->description_); }
  public function clearDescription() { unset($this->description_); }
  public function hasDescription() { return isset($this->description_); }
  public function getDescription() { return $this->description_; }
  public function setDescription($value) { $this->description_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:Badge)
}

// message BadgeContainer
class BadgeContainer {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("BadgeContainer: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->title_ = $tmp;
          $limit-=$len;
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->image_[] = new Image($fp, $len);
          ASSERT('$len == 0');
          break;
        case 3:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->badge_[] = new Badge($fp, $len);
          ASSERT('$len == 0');
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->title_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, strlen((string)$this->title_));
      fwrite($fp, (string)$this->title_);
    }
    if (!is_null($this->image_))
      foreach($this->image_ as $v) {
        fwrite($fp, "\x12");
        Protobuf::write_varint($fp, $v->size()); // message
        $v->write($fp);
      }
    if (!is_null($this->badge_))
      foreach($this->badge_ as $v) {
        fwrite($fp, "\x1a");
        Protobuf::write_varint($fp, $v->size()); // message
        $v->write($fp);
      }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->title_)) {
      $l = strlen((string)$this->title_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->image_))
      foreach($this->image_ as $v) {
        $l = $v->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
    if (!is_null($this->badge_))
      foreach($this->badge_ as $v) {
        $l = $v->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('title_', $this->title_)
         . Protobuf::toString('image_', $this->image_)
         . Protobuf::toString('badge_', $this->badge_);
  }
  
  // optional string title = 1;

  protected $title_;
  public function resetTitle() { unset($this->title_); }
  public function clearTitle() { unset($this->title_); }
  public function hasTitle() { return isset($this->title_); }
  public function getTitle() { return $this->title_; }
  public function setTitle($value) { $this->title_ = (string)$value; }
  
  // repeated .Image image = 2;

  protected $image_ = array();
  public function clearImage() { $this->image_ = array(); }
  public function getImageCount() { return count($this->image_); }
  public function hasImage() { return (count($this->image_) > 0); }
  public function indexOfImage($value) { return array_search($value,$this->image_);}
  public function removeImage($index) { unset($this->image_[$index]); }
  public function removeValImage($value) { $idx = array_search($value,$this->image_); if($idx !== FALSE){unset($this->image_[$idx]); }}
  public function removeValsImage($values) { foreach($values as $value){$idx = array_search($value,$this->image_); if($idx !== FALSE){unset($this->image_[$idx]); }}}
  public function pushImage($newvar) { return array_push($this->image_,$newvar); }
  public function popImage() { return array_pop($this->image_); }
  public function shiftImage() { return array_shift($this->image_); }
  public function unshiftImage($newvar) { return array_unshift($this->image_,$newvar); }
  public function getImage($index) { return $this->image_[$index]; }
  public function getImageArray() { return $this->image_; }
  public function setImage($index, $value) {$this->image_[$index] = $value;	}
  public function addImage($value) { $this->image_[] = $value; }
  public function addAllImage(array $values) { foreach($values as $value) {$this->image_[] = $value;} }
  
  // repeated .Badge badge = 3;

  protected $badge_ = array();
  public function clearBadge() { $this->badge_ = array(); }
  public function getBadgeCount() { return count($this->badge_); }
  public function hasBadge() { return (count($this->badge_) > 0); }
  public function indexOfBadge($value) { return array_search($value,$this->badge_);}
  public function removeBadge($index) { unset($this->badge_[$index]); }
  public function removeValBadge($value) { $idx = array_search($value,$this->badge_); if($idx !== FALSE){unset($this->badge_[$idx]); }}
  public function removeValsBadge($values) { foreach($values as $value){$idx = array_search($value,$this->badge_); if($idx !== FALSE){unset($this->badge_[$idx]); }}}
  public function pushBadge($newvar) { return array_push($this->badge_,$newvar); }
  public function popBadge() { return array_pop($this->badge_); }
  public function shiftBadge() { return array_shift($this->badge_); }
  public function unshiftBadge($newvar) { return array_unshift($this->badge_,$newvar); }
  public function getBadge($index) { return $this->badge_[$index]; }
  public function getBadgeArray() { return $this->badge_; }
  public function setBadge($index, $value) {$this->badge_[$index] = $value;	}
  public function addBadge($value) { $this->badge_[] = $value; }
  public function addAllBadge(array $values) { foreach($values as $value) {$this->badge_[] = $value;} }
  
  // @@protoc_insertion_point(class_scope:BadgeContainer)
}

// message ContainerWithBanner
class ContainerWithBanner {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("ContainerWithBanner: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->colorThemeArgb_ = $tmp;
          $limit-=$len;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->colorThemeArgb_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, strlen((string)$this->colorThemeArgb_));
      fwrite($fp, (string)$this->colorThemeArgb_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->colorThemeArgb_)) {
      $l = strlen((string)$this->colorThemeArgb_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('colorThemeArgb_', $this->colorThemeArgb_);
  }
  
  // optional string colorThemeArgb = 1;

  protected $colorThemeArgb_;
  public function resetColorThemeArgb() { unset($this->colorThemeArgb_); }
  public function clearColorThemeArgb() { unset($this->colorThemeArgb_); }
  public function hasColorThemeArgb() { return isset($this->colorThemeArgb_); }
  public function getColorThemeArgb() { return $this->colorThemeArgb_; }
  public function setColorThemeArgb($value) { $this->colorThemeArgb_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:ContainerWithBanner)
}

// message DealOfTheDay
class DealOfTheDay {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("DealOfTheDay: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->featuredHeader_ = $tmp;
          $limit-=$len;
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->colorThemeArgb_ = $tmp;
          $limit-=$len;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->featuredHeader_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, strlen((string)$this->featuredHeader_));
      fwrite($fp, (string)$this->featuredHeader_);
    }
    if (!is_null($this->colorThemeArgb_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, strlen((string)$this->colorThemeArgb_));
      fwrite($fp, (string)$this->colorThemeArgb_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->featuredHeader_)) {
      $l = strlen((string)$this->featuredHeader_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->colorThemeArgb_)) {
      $l = strlen((string)$this->colorThemeArgb_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('featuredHeader_', $this->featuredHeader_)
         . Protobuf::toString('colorThemeArgb_', $this->colorThemeArgb_);
  }
  
  // optional string featuredHeader = 1;

  protected $featuredHeader_;
  public function resetFeaturedHeader() { unset($this->featuredHeader_); }
  public function clearFeaturedHeader() { unset($this->featuredHeader_); }
  public function hasFeaturedHeader() { return isset($this->featuredHeader_); }
  public function getFeaturedHeader() { return $this->featuredHeader_; }
  public function setFeaturedHeader($value) { $this->featuredHeader_ = (string)$value; }
  
  // optional string colorThemeArgb = 2;

  protected $colorThemeArgb_;
  public function resetColorThemeArgb() { unset($this->colorThemeArgb_); }
  public function clearColorThemeArgb() { unset($this->colorThemeArgb_); }
  public function hasColorThemeArgb() { return isset($this->colorThemeArgb_); }
  public function getColorThemeArgb() { return $this->colorThemeArgb_; }
  public function setColorThemeArgb($value) { $this->colorThemeArgb_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:DealOfTheDay)
}

// message Dismissal
class Dismissal {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("Dismissal: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->url_ = $tmp;
          $limit-=$len;
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->descriptionHtml_ = $tmp;
          $limit-=$len;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->url_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, strlen((string)$this->url_));
      fwrite($fp, (string)$this->url_);
    }
    if (!is_null($this->descriptionHtml_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, strlen((string)$this->descriptionHtml_));
      fwrite($fp, (string)$this->descriptionHtml_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->url_)) {
      $l = strlen((string)$this->url_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->descriptionHtml_)) {
      $l = strlen((string)$this->descriptionHtml_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('url_', $this->url_)
         . Protobuf::toString('descriptionHtml_', $this->descriptionHtml_);
  }
  
  // optional string url = 1;

  protected $url_;
  public function resetUrl() { unset($this->url_); }
  public function clearUrl() { unset($this->url_); }
  public function hasUrl() { return isset($this->url_); }
  public function getUrl() { return $this->url_; }
  public function setUrl($value) { $this->url_ = (string)$value; }
  
  // optional string descriptionHtml = 2;

  protected $descriptionHtml_;
  public function resetDescriptionHtml() { unset($this->descriptionHtml_); }
  public function clearDescriptionHtml() { unset($this->descriptionHtml_); }
  public function hasDescriptionHtml() { return isset($this->descriptionHtml_); }
  public function getDescriptionHtml() { return $this->descriptionHtml_; }
  public function setDescriptionHtml($value) { $this->descriptionHtml_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:Dismissal)
}

// message EditorialSeriesContainer
class EditorialSeriesContainer {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("EditorialSeriesContainer: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->seriesTitle_ = $tmp;
          $limit-=$len;
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->seriesSubtitle_ = $tmp;
          $limit-=$len;
          break;
        case 3:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->episodeTitle_ = $tmp;
          $limit-=$len;
          break;
        case 4:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->episodeSubtitle_ = $tmp;
          $limit-=$len;
          break;
        case 5:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->colorThemeArgb_ = $tmp;
          $limit-=$len;
          break;
        case 6:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->videoSnippet_[] = new VideoSnippet($fp, $len);
          ASSERT('$len == 0');
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->seriesTitle_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, strlen((string)$this->seriesTitle_));
      fwrite($fp, (string)$this->seriesTitle_);
    }
    if (!is_null($this->seriesSubtitle_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, strlen((string)$this->seriesSubtitle_));
      fwrite($fp, (string)$this->seriesSubtitle_);
    }
    if (!is_null($this->episodeTitle_)) {
      fwrite($fp, "\x1a");
      Protobuf::write_varint($fp, strlen((string)$this->episodeTitle_));
      fwrite($fp, (string)$this->episodeTitle_);
    }
    if (!is_null($this->episodeSubtitle_)) {
      fwrite($fp, "\"");
      Protobuf::write_varint($fp, strlen((string)$this->episodeSubtitle_));
      fwrite($fp, (string)$this->episodeSubtitle_);
    }
    if (!is_null($this->colorThemeArgb_)) {
      fwrite($fp, "*");
      Protobuf::write_varint($fp, strlen((string)$this->colorThemeArgb_));
      fwrite($fp, (string)$this->colorThemeArgb_);
    }
    if (!is_null($this->videoSnippet_))
      foreach($this->videoSnippet_ as $v) {
        fwrite($fp, "2");
        Protobuf::write_varint($fp, $v->size()); // message
        $v->write($fp);
      }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->seriesTitle_)) {
      $l = strlen((string)$this->seriesTitle_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->seriesSubtitle_)) {
      $l = strlen((string)$this->seriesSubtitle_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->episodeTitle_)) {
      $l = strlen((string)$this->episodeTitle_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->episodeSubtitle_)) {
      $l = strlen((string)$this->episodeSubtitle_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->colorThemeArgb_)) {
      $l = strlen((string)$this->colorThemeArgb_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->videoSnippet_))
      foreach($this->videoSnippet_ as $v) {
        $l = $v->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('seriesTitle_', $this->seriesTitle_)
         . Protobuf::toString('seriesSubtitle_', $this->seriesSubtitle_)
         . Protobuf::toString('episodeTitle_', $this->episodeTitle_)
         . Protobuf::toString('episodeSubtitle_', $this->episodeSubtitle_)
         . Protobuf::toString('colorThemeArgb_', $this->colorThemeArgb_)
         . Protobuf::toString('videoSnippet_', $this->videoSnippet_);
  }
  
  // optional string seriesTitle = 1;

  protected $seriesTitle_;
  public function resetSeriesTitle() { unset($this->seriesTitle_); }
  public function clearSeriesTitle() { unset($this->seriesTitle_); }
  public function hasSeriesTitle() { return isset($this->seriesTitle_); }
  public function getSeriesTitle() { return $this->seriesTitle_; }
  public function setSeriesTitle($value) { $this->seriesTitle_ = (string)$value; }
  
  // optional string seriesSubtitle = 2;

  protected $seriesSubtitle_;
  public function resetSeriesSubtitle() { unset($this->seriesSubtitle_); }
  public function clearSeriesSubtitle() { unset($this->seriesSubtitle_); }
  public function hasSeriesSubtitle() { return isset($this->seriesSubtitle_); }
  public function getSeriesSubtitle() { return $this->seriesSubtitle_; }
  public function setSeriesSubtitle($value) { $this->seriesSubtitle_ = (string)$value; }
  
  // optional string episodeTitle = 3;

  protected $episodeTitle_;
  public function resetEpisodeTitle() { unset($this->episodeTitle_); }
  public function clearEpisodeTitle() { unset($this->episodeTitle_); }
  public function hasEpisodeTitle() { return isset($this->episodeTitle_); }
  public function getEpisodeTitle() { return $this->episodeTitle_; }
  public function setEpisodeTitle($value) { $this->episodeTitle_ = (string)$value; }
  
  // optional string episodeSubtitle = 4;

  protected $episodeSubtitle_;
  public function resetEpisodeSubtitle() { unset($this->episodeSubtitle_); }
  public function clearEpisodeSubtitle() { unset($this->episodeSubtitle_); }
  public function hasEpisodeSubtitle() { return isset($this->episodeSubtitle_); }
  public function getEpisodeSubtitle() { return $this->episodeSubtitle_; }
  public function setEpisodeSubtitle($value) { $this->episodeSubtitle_ = (string)$value; }
  
  // optional string colorThemeArgb = 5;

  protected $colorThemeArgb_;
  public function resetColorThemeArgb() { unset($this->colorThemeArgb_); }
  public function clearColorThemeArgb() { unset($this->colorThemeArgb_); }
  public function hasColorThemeArgb() { return isset($this->colorThemeArgb_); }
  public function getColorThemeArgb() { return $this->colorThemeArgb_; }
  public function setColorThemeArgb($value) { $this->colorThemeArgb_ = (string)$value; }
  
  // repeated .VideoSnippet videoSnippet = 6;

  protected $videoSnippet_ = array();
  public function clearVideoSnippet() { $this->videoSnippet_ = array(); }
  public function getVideoSnippetCount() { return count($this->videoSnippet_); }
  public function hasVideoSnippet() { return (count($this->videoSnippet_) > 0); }
  public function indexOfVideoSnippet($value) { return array_search($value,$this->videoSnippet_);}
  public function removeVideoSnippet($index) { unset($this->videoSnippet_[$index]); }
  public function removeValVideoSnippet($value) { $idx = array_search($value,$this->videoSnippet_); if($idx !== FALSE){unset($this->videoSnippet_[$idx]); }}
  public function removeValsVideoSnippet($values) { foreach($values as $value){$idx = array_search($value,$this->videoSnippet_); if($idx !== FALSE){unset($this->videoSnippet_[$idx]); }}}
  public function pushVideoSnippet($newvar) { return array_push($this->videoSnippet_,$newvar); }
  public function popVideoSnippet() { return array_pop($this->videoSnippet_); }
  public function shiftVideoSnippet() { return array_shift($this->videoSnippet_); }
  public function unshiftVideoSnippet($newvar) { return array_unshift($this->videoSnippet_,$newvar); }
  public function getVideoSnippet($index) { return $this->videoSnippet_[$index]; }
  public function getVideoSnippetArray() { return $this->videoSnippet_; }
  public function setVideoSnippet($index, $value) {$this->videoSnippet_[$index] = $value;	}
  public function addVideoSnippet($value) { $this->videoSnippet_[] = $value; }
  public function addAllVideoSnippet(array $values) { foreach($values as $value) {$this->videoSnippet_[] = $value;} }
  
  // @@protoc_insertion_point(class_scope:EditorialSeriesContainer)
}

// message Link
class Link {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("Link: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->uri_ = $tmp;
          $limit-=$len;
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->resolvedLink_ = new ResolvedLink($fp, $len);
          ASSERT('$len == 0');
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->uri_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, strlen((string)$this->uri_));
      fwrite($fp, (string)$this->uri_);
    }
    if (!is_null($this->resolvedLink_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, $this->resolvedLink_->size()); // message
      $this->resolvedLink_->write($fp);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->uri_)) {
      $l = strlen((string)$this->uri_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->resolvedLink_)) {
      $l = $this->resolvedLink_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('uri_', $this->uri_)
         . Protobuf::toString('resolvedLink_', $this->resolvedLink_);
  }
  
  // optional string uri = 1;

  protected $uri_;
  public function resetUri() { unset($this->uri_); }
  public function clearUri() { unset($this->uri_); }
  public function hasUri() { return isset($this->uri_); }
  public function getUri() { return $this->uri_; }
  public function setUri($value) { $this->uri_ = (string)$value; }
  
  // optional .ResolvedLink resolvedLink = 2;

  protected $resolvedLink_;
  public function resetResolvedLink() { unset($this->resolvedLink_); }
  public function clearResolvedLink() { unset($this->resolvedLink_); }
  public function hasResolvedLink() { return isset($this->resolvedLink_); }
  public function getResolvedLink() { return $this->resolvedLink_; }
  public function setResolvedLink(ResolvedLink $value) { $this->resolvedLink_ = $value; }
  
  // @@protoc_insertion_point(class_scope:Link)
}

// message NextBanner
class NextBanner {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("NextBanner: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->title_ = $tmp;
          $limit-=$len;
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->subtitle_ = $tmp;
          $limit-=$len;
          break;
        case 3:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->colorTextArgb_ = $tmp;
          $limit-=$len;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->title_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, strlen((string)$this->title_));
      fwrite($fp, (string)$this->title_);
    }
    if (!is_null($this->subtitle_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, strlen((string)$this->subtitle_));
      fwrite($fp, (string)$this->subtitle_);
    }
    if (!is_null($this->colorTextArgb_)) {
      fwrite($fp, "\x1a");
      Protobuf::write_varint($fp, strlen((string)$this->colorTextArgb_));
      fwrite($fp, (string)$this->colorTextArgb_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->title_)) {
      $l = strlen((string)$this->title_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->subtitle_)) {
      $l = strlen((string)$this->subtitle_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->colorTextArgb_)) {
      $l = strlen((string)$this->colorTextArgb_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('title_', $this->title_)
         . Protobuf::toString('subtitle_', $this->subtitle_)
         . Protobuf::toString('colorTextArgb_', $this->colorTextArgb_);
  }
  
  // optional string title = 1;

  protected $title_;
  public function resetTitle() { unset($this->title_); }
  public function clearTitle() { unset($this->title_); }
  public function hasTitle() { return isset($this->title_); }
  public function getTitle() { return $this->title_; }
  public function setTitle($value) { $this->title_ = (string)$value; }
  
  // optional string subtitle = 2;

  protected $subtitle_;
  public function resetSubtitle() { unset($this->subtitle_); }
  public function clearSubtitle() { unset($this->subtitle_); }
  public function hasSubtitle() { return isset($this->subtitle_); }
  public function getSubtitle() { return $this->subtitle_; }
  public function setSubtitle($value) { $this->subtitle_ = (string)$value; }
  
  // optional string colorTextArgb = 3;

  protected $colorTextArgb_;
  public function resetColorTextArgb() { unset($this->colorTextArgb_); }
  public function clearColorTextArgb() { unset($this->colorTextArgb_); }
  public function hasColorTextArgb() { return isset($this->colorTextArgb_); }
  public function getColorTextArgb() { return $this->colorTextArgb_; }
  public function setColorTextArgb($value) { $this->colorTextArgb_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:NextBanner)
}

// message ObsoleteReason
class ObsoleteReason {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("ObsoleteReason: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->briefReason_ = $tmp;
          $limit-=$len;
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->obsoleteDetailedReason_ = $tmp;
          $limit-=$len;
          break;
        case 3:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->uniqueId_ = $tmp;
          $limit-=$len;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->briefReason_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, strlen((string)$this->briefReason_));
      fwrite($fp, (string)$this->briefReason_);
    }
    if (!is_null($this->obsoleteDetailedReason_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, strlen((string)$this->obsoleteDetailedReason_));
      fwrite($fp, (string)$this->obsoleteDetailedReason_);
    }
    if (!is_null($this->uniqueId_)) {
      fwrite($fp, "\x1a");
      Protobuf::write_varint($fp, strlen((string)$this->uniqueId_));
      fwrite($fp, (string)$this->uniqueId_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->briefReason_)) {
      $l = strlen((string)$this->briefReason_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->obsoleteDetailedReason_)) {
      $l = strlen((string)$this->obsoleteDetailedReason_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->uniqueId_)) {
      $l = strlen((string)$this->uniqueId_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('briefReason_', $this->briefReason_)
         . Protobuf::toString('obsoleteDetailedReason_', $this->obsoleteDetailedReason_)
         . Protobuf::toString('uniqueId_', $this->uniqueId_);
  }
  
  // optional string briefReason = 1;

  protected $briefReason_;
  public function resetBriefReason() { unset($this->briefReason_); }
  public function clearBriefReason() { unset($this->briefReason_); }
  public function hasBriefReason() { return isset($this->briefReason_); }
  public function getBriefReason() { return $this->briefReason_; }
  public function setBriefReason($value) { $this->briefReason_ = (string)$value; }
  
  // optional string obsoleteDetailedReason = 2;

  protected $obsoleteDetailedReason_;
  public function resetObsoleteDetailedReason() { unset($this->obsoleteDetailedReason_); }
  public function clearObsoleteDetailedReason() { unset($this->obsoleteDetailedReason_); }
  public function hasObsoleteDetailedReason() { return isset($this->obsoleteDetailedReason_); }
  public function getObsoleteDetailedReason() { return $this->obsoleteDetailedReason_; }
  public function setObsoleteDetailedReason($value) { $this->obsoleteDetailedReason_ = (string)$value; }
  
  // optional string uniqueId = 3;

  protected $uniqueId_;
  public function resetUniqueId() { unset($this->uniqueId_); }
  public function clearUniqueId() { unset($this->uniqueId_); }
  public function hasUniqueId() { return isset($this->uniqueId_); }
  public function getUniqueId() { return $this->uniqueId_; }
  public function setUniqueId($value) { $this->uniqueId_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:ObsoleteReason)
}

// message PlusOneData
class PlusOneData {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("PlusOneData: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->setByUser_ = $tmp > 0 ? true : false;
          break;
        case 2:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->total_ = $tmp;
          
          break;
        case 3:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->circlesTotal_ = $tmp;
          
          break;
        case 4:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->circlesProfiles_[] = new PlusProfile($fp, $len);
          ASSERT('$len == 0');
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->setByUser_)) {
      fwrite($fp, "\x08");
      Protobuf::write_varint($fp, (int)$this->setByUser_ ? 1 : 0);
    }
    if (!is_null($this->total_)) {
      fwrite($fp, "\x10");
      Protobuf::write_varint($fp, (int)$this->total_);
    }
    if (!is_null($this->circlesTotal_)) {
      fwrite($fp, "\x18");
      Protobuf::write_varint($fp, (int)$this->circlesTotal_);
    }
    if (!is_null($this->circlesProfiles_))
      foreach($this->circlesProfiles_ as $v) {
        fwrite($fp, "\"");
        Protobuf::write_varint($fp, $v->size()); // message
        $v->write($fp);
      }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->setByUser_)) {
      $size += 2;
    }
    if (!is_null($this->total_)) {
      $size += 1 + Protobuf::size_varint($this->total_);
    }
    if (!is_null($this->circlesTotal_)) {
      $size += 1 + Protobuf::size_varint($this->circlesTotal_);
    }
    if (!is_null($this->circlesProfiles_))
      foreach($this->circlesProfiles_ as $v) {
        $l = $v->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('setByUser_', $this->setByUser_)
         . Protobuf::toString('total_', $this->total_)
         . Protobuf::toString('circlesTotal_', $this->circlesTotal_)
         . Protobuf::toString('circlesProfiles_', $this->circlesProfiles_);
  }
  
  // optional bool setByUser = 1;

  protected $setByUser_;
  public function resetSetByUser() { unset($this->setByUser_); }
  public function clearSetByUser() { unset($this->setByUser_); }
  public function hasSetByUser() { return isset($this->setByUser_); }
  public function getSetByUser() { return $this->setByUser_; }
  public function setSetByUser($value) { $this->setByUser_ = (bool)$value; }
  
  // optional int64 total = 2;

  protected $total_;
  public function resetTotal() { unset($this->total_); }
  public function clearTotal() { unset($this->total_); }
  public function hasTotal() { return isset($this->total_); }
  public function getTotal() { return $this->total_; }
  public function setTotal($value) { $this->total_ = (string)$value; }
  
  // optional int64 circlesTotal = 3;

  protected $circlesTotal_;
  public function resetCirclesTotal() { unset($this->circlesTotal_); }
  public function clearCirclesTotal() { unset($this->circlesTotal_); }
  public function hasCirclesTotal() { return isset($this->circlesTotal_); }
  public function getCirclesTotal() { return $this->circlesTotal_; }
  public function setCirclesTotal($value) { $this->circlesTotal_ = (string)$value; }
  
  // repeated .PlusProfile circlesProfiles = 4;

  protected $circlesProfiles_ = array();
  public function clearCirclesProfiles() { $this->circlesProfiles_ = array(); }
  public function getCirclesProfilesCount() { return count($this->circlesProfiles_); }
  public function hasCirclesProfiles() { return (count($this->circlesProfiles_) > 0); }
  public function indexOfCirclesProfiles($value) { return array_search($value,$this->circlesProfiles_);}
  public function removeCirclesProfiles($index) { unset($this->circlesProfiles_[$index]); }
  public function removeValCirclesProfiles($value) { $idx = array_search($value,$this->circlesProfiles_); if($idx !== FALSE){unset($this->circlesProfiles_[$idx]); }}
  public function removeValsCirclesProfiles($values) { foreach($values as $value){$idx = array_search($value,$this->circlesProfiles_); if($idx !== FALSE){unset($this->circlesProfiles_[$idx]); }}}
  public function pushCirclesProfiles($newvar) { return array_push($this->circlesProfiles_,$newvar); }
  public function popCirclesProfiles() { return array_pop($this->circlesProfiles_); }
  public function shiftCirclesProfiles() { return array_shift($this->circlesProfiles_); }
  public function unshiftCirclesProfiles($newvar) { return array_unshift($this->circlesProfiles_,$newvar); }
  public function getCirclesProfiles($index) { return $this->circlesProfiles_[$index]; }
  public function getCirclesProfilesArray() { return $this->circlesProfiles_; }
  public function setCirclesProfiles($index, $value) {$this->circlesProfiles_[$index] = $value;	}
  public function addCirclesProfiles($value) { $this->circlesProfiles_[] = $value; }
  public function addAllCirclesProfiles(array $values) { foreach($values as $value) {$this->circlesProfiles_[] = $value;} }
  
  // @@protoc_insertion_point(class_scope:PlusOneData)
}

// message PromotedDoc
class PromotedDoc {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("PromotedDoc: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->title_ = $tmp;
          $limit-=$len;
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->subtitle_ = $tmp;
          $limit-=$len;
          break;
        case 3:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->image_[] = new Image($fp, $len);
          ASSERT('$len == 0');
          break;
        case 4:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->descriptionHtml_ = $tmp;
          $limit-=$len;
          break;
        case 5:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->detailsUrl_ = $tmp;
          $limit-=$len;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->title_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, strlen((string)$this->title_));
      fwrite($fp, (string)$this->title_);
    }
    if (!is_null($this->subtitle_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, strlen((string)$this->subtitle_));
      fwrite($fp, (string)$this->subtitle_);
    }
    if (!is_null($this->image_))
      foreach($this->image_ as $v) {
        fwrite($fp, "\x1a");
        Protobuf::write_varint($fp, $v->size()); // message
        $v->write($fp);
      }
    if (!is_null($this->descriptionHtml_)) {
      fwrite($fp, "\"");
      Protobuf::write_varint($fp, strlen((string)$this->descriptionHtml_));
      fwrite($fp, (string)$this->descriptionHtml_);
    }
    if (!is_null($this->detailsUrl_)) {
      fwrite($fp, "*");
      Protobuf::write_varint($fp, strlen((string)$this->detailsUrl_));
      fwrite($fp, (string)$this->detailsUrl_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->title_)) {
      $l = strlen((string)$this->title_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->subtitle_)) {
      $l = strlen((string)$this->subtitle_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->image_))
      foreach($this->image_ as $v) {
        $l = $v->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
    if (!is_null($this->descriptionHtml_)) {
      $l = strlen((string)$this->descriptionHtml_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->detailsUrl_)) {
      $l = strlen((string)$this->detailsUrl_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('title_', $this->title_)
         . Protobuf::toString('subtitle_', $this->subtitle_)
         . Protobuf::toString('image_', $this->image_)
         . Protobuf::toString('descriptionHtml_', $this->descriptionHtml_)
         . Protobuf::toString('detailsUrl_', $this->detailsUrl_);
  }
  
  // optional string title = 1;

  protected $title_;
  public function resetTitle() { unset($this->title_); }
  public function clearTitle() { unset($this->title_); }
  public function hasTitle() { return isset($this->title_); }
  public function getTitle() { return $this->title_; }
  public function setTitle($value) { $this->title_ = (string)$value; }
  
  // optional string subtitle = 2;

  protected $subtitle_;
  public function resetSubtitle() { unset($this->subtitle_); }
  public function clearSubtitle() { unset($this->subtitle_); }
  public function hasSubtitle() { return isset($this->subtitle_); }
  public function getSubtitle() { return $this->subtitle_; }
  public function setSubtitle($value) { $this->subtitle_ = (string)$value; }
  
  // repeated .Image image = 3;

  protected $image_ = array();
  public function clearImage() { $this->image_ = array(); }
  public function getImageCount() { return count($this->image_); }
  public function hasImage() { return (count($this->image_) > 0); }
  public function indexOfImage($value) { return array_search($value,$this->image_);}
  public function removeImage($index) { unset($this->image_[$index]); }
  public function removeValImage($value) { $idx = array_search($value,$this->image_); if($idx !== FALSE){unset($this->image_[$idx]); }}
  public function removeValsImage($values) { foreach($values as $value){$idx = array_search($value,$this->image_); if($idx !== FALSE){unset($this->image_[$idx]); }}}
  public function pushImage($newvar) { return array_push($this->image_,$newvar); }
  public function popImage() { return array_pop($this->image_); }
  public function shiftImage() { return array_shift($this->image_); }
  public function unshiftImage($newvar) { return array_unshift($this->image_,$newvar); }
  public function getImage($index) { return $this->image_[$index]; }
  public function getImageArray() { return $this->image_; }
  public function setImage($index, $value) {$this->image_[$index] = $value;	}
  public function addImage($value) { $this->image_[] = $value; }
  public function addAllImage(array $values) { foreach($values as $value) {$this->image_[] = $value;} }
  
  // optional string descriptionHtml = 4;

  protected $descriptionHtml_;
  public function resetDescriptionHtml() { unset($this->descriptionHtml_); }
  public function clearDescriptionHtml() { unset($this->descriptionHtml_); }
  public function hasDescriptionHtml() { return isset($this->descriptionHtml_); }
  public function getDescriptionHtml() { return $this->descriptionHtml_; }
  public function setDescriptionHtml($value) { $this->descriptionHtml_ = (string)$value; }
  
  // optional string detailsUrl = 5;

  protected $detailsUrl_;
  public function resetDetailsUrl() { unset($this->detailsUrl_); }
  public function clearDetailsUrl() { unset($this->detailsUrl_); }
  public function hasDetailsUrl() { return isset($this->detailsUrl_); }
  public function getDetailsUrl() { return $this->detailsUrl_; }
  public function setDetailsUrl($value) { $this->detailsUrl_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:PromotedDoc)
}

// message Reason
class Reason {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("Reason: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 3:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->descriptionHtml_ = $tmp;
          $limit-=$len;
          break;
        case 4:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->reasonPlusProfiles_ = new ReasonPlusProfiles($fp, $len);
          ASSERT('$len == 0');
          break;
        case 5:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->reasonReview_ = new ReasonReview($fp, $len);
          ASSERT('$len == 0');
          break;
        case 7:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->dismissal_ = new Dismissal($fp, $len);
          ASSERT('$len == 0');
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->descriptionHtml_)) {
      fwrite($fp, "\x1a");
      Protobuf::write_varint($fp, strlen((string)$this->descriptionHtml_));
      fwrite($fp, (string)$this->descriptionHtml_);
    }
    if (!is_null($this->reasonPlusProfiles_)) {
      fwrite($fp, "\"");
      Protobuf::write_varint($fp, $this->reasonPlusProfiles_->size()); // message
      $this->reasonPlusProfiles_->write($fp);
    }
    if (!is_null($this->reasonReview_)) {
      fwrite($fp, "*");
      Protobuf::write_varint($fp, $this->reasonReview_->size()); // message
      $this->reasonReview_->write($fp);
    }
    if (!is_null($this->dismissal_)) {
      fwrite($fp, ":");
      Protobuf::write_varint($fp, $this->dismissal_->size()); // message
      $this->dismissal_->write($fp);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->descriptionHtml_)) {
      $l = strlen((string)$this->descriptionHtml_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->reasonPlusProfiles_)) {
      $l = $this->reasonPlusProfiles_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->reasonReview_)) {
      $l = $this->reasonReview_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->dismissal_)) {
      $l = $this->dismissal_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('descriptionHtml_', $this->descriptionHtml_)
         . Protobuf::toString('reasonPlusProfiles_', $this->reasonPlusProfiles_)
         . Protobuf::toString('reasonReview_', $this->reasonReview_)
         . Protobuf::toString('dismissal_', $this->dismissal_);
  }
  
  // optional string descriptionHtml = 3;

  protected $descriptionHtml_;
  public function resetDescriptionHtml() { unset($this->descriptionHtml_); }
  public function clearDescriptionHtml() { unset($this->descriptionHtml_); }
  public function hasDescriptionHtml() { return isset($this->descriptionHtml_); }
  public function getDescriptionHtml() { return $this->descriptionHtml_; }
  public function setDescriptionHtml($value) { $this->descriptionHtml_ = (string)$value; }
  
  // optional .ReasonPlusProfiles reasonPlusProfiles = 4;

  protected $reasonPlusProfiles_;
  public function resetReasonPlusProfiles() { unset($this->reasonPlusProfiles_); }
  public function clearReasonPlusProfiles() { unset($this->reasonPlusProfiles_); }
  public function hasReasonPlusProfiles() { return isset($this->reasonPlusProfiles_); }
  public function getReasonPlusProfiles() { return $this->reasonPlusProfiles_; }
  public function setReasonPlusProfiles(ReasonPlusProfiles $value) { $this->reasonPlusProfiles_ = $value; }
  
  // optional .ReasonReview reasonReview = 5;

  protected $reasonReview_;
  public function resetReasonReview() { unset($this->reasonReview_); }
  public function clearReasonReview() { unset($this->reasonReview_); }
  public function hasReasonReview() { return isset($this->reasonReview_); }
  public function getReasonReview() { return $this->reasonReview_; }
  public function setReasonReview(ReasonReview $value) { $this->reasonReview_ = $value; }
  
  // optional .Dismissal dismissal = 7;

  protected $dismissal_;
  public function resetDismissal() { unset($this->dismissal_); }
  public function clearDismissal() { unset($this->dismissal_); }
  public function hasDismissal() { return isset($this->dismissal_); }
  public function getDismissal() { return $this->dismissal_; }
  public function setDismissal(Dismissal $value) { $this->dismissal_ = $value; }
  
  // @@protoc_insertion_point(class_scope:Reason)
}

// message ReasonPlusProfiles
class ReasonPlusProfiles {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("ReasonPlusProfiles: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->localizedDescriptionHtml_ = $tmp;
          $limit-=$len;
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->plusProfile_[] = new PlusProfile($fp, $len);
          ASSERT('$len == 0');
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->localizedDescriptionHtml_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, strlen((string)$this->localizedDescriptionHtml_));
      fwrite($fp, (string)$this->localizedDescriptionHtml_);
    }
    if (!is_null($this->plusProfile_))
      foreach($this->plusProfile_ as $v) {
        fwrite($fp, "\x12");
        Protobuf::write_varint($fp, $v->size()); // message
        $v->write($fp);
      }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->localizedDescriptionHtml_)) {
      $l = strlen((string)$this->localizedDescriptionHtml_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->plusProfile_))
      foreach($this->plusProfile_ as $v) {
        $l = $v->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('localizedDescriptionHtml_', $this->localizedDescriptionHtml_)
         . Protobuf::toString('plusProfile_', $this->plusProfile_);
  }
  
  // optional string localizedDescriptionHtml = 1;

  protected $localizedDescriptionHtml_;
  public function resetLocalizedDescriptionHtml() { unset($this->localizedDescriptionHtml_); }
  public function clearLocalizedDescriptionHtml() { unset($this->localizedDescriptionHtml_); }
  public function hasLocalizedDescriptionHtml() { return isset($this->localizedDescriptionHtml_); }
  public function getLocalizedDescriptionHtml() { return $this->localizedDescriptionHtml_; }
  public function setLocalizedDescriptionHtml($value) { $this->localizedDescriptionHtml_ = (string)$value; }
  
  // repeated .PlusProfile plusProfile = 2;

  protected $plusProfile_ = array();
  public function clearPlusProfile() { $this->plusProfile_ = array(); }
  public function getPlusProfileCount() { return count($this->plusProfile_); }
  public function hasPlusProfile() { return (count($this->plusProfile_) > 0); }
  public function indexOfPlusProfile($value) { return array_search($value,$this->plusProfile_);}
  public function removePlusProfile($index) { unset($this->plusProfile_[$index]); }
  public function removeValPlusProfile($value) { $idx = array_search($value,$this->plusProfile_); if($idx !== FALSE){unset($this->plusProfile_[$idx]); }}
  public function removeValsPlusProfile($values) { foreach($values as $value){$idx = array_search($value,$this->plusProfile_); if($idx !== FALSE){unset($this->plusProfile_[$idx]); }}}
  public function pushPlusProfile($newvar) { return array_push($this->plusProfile_,$newvar); }
  public function popPlusProfile() { return array_pop($this->plusProfile_); }
  public function shiftPlusProfile() { return array_shift($this->plusProfile_); }
  public function unshiftPlusProfile($newvar) { return array_unshift($this->plusProfile_,$newvar); }
  public function getPlusProfile($index) { return $this->plusProfile_[$index]; }
  public function getPlusProfileArray() { return $this->plusProfile_; }
  public function setPlusProfile($index, $value) {$this->plusProfile_[$index] = $value;	}
  public function addPlusProfile($value) { $this->plusProfile_[] = $value; }
  public function addAllPlusProfile(array $values) { foreach($values as $value) {$this->plusProfile_[] = $value;} }
  
  // @@protoc_insertion_point(class_scope:ReasonPlusProfiles)
}

// message ReasonReview
class ReasonReview {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("ReasonReview: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->review_ = new Review($fp, $len);
          ASSERT('$len == 0');
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->review_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, $this->review_->size()); // message
      $this->review_->write($fp);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->review_)) {
      $l = $this->review_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('review_', $this->review_);
  }
  
  // optional .Review review = 1;

  protected $review_;
  public function resetReview() { unset($this->review_); }
  public function clearReview() { unset($this->review_); }
  public function hasReview() { return isset($this->review_); }
  public function getReview() { return $this->review_; }
  public function setReview(Review $value) { $this->review_ = $value; }
  
  // @@protoc_insertion_point(class_scope:ReasonReview)
}

// message RecommendationsContainer
class RecommendationsContainer {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("RecommendationsContainer: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  public function size() {
    $size = 0;
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown);
  }
  
  // @@protoc_insertion_point(class_scope:RecommendationsContainer)
}

// message SectionMetadata
class SectionMetadata {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("SectionMetadata: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->header_ = $tmp;
          $limit-=$len;
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->listUrl_ = $tmp;
          $limit-=$len;
          break;
        case 3:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->browseUrl_ = $tmp;
          $limit-=$len;
          break;
        case 4:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->descriptionHtml_ = $tmp;
          $limit-=$len;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->header_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, strlen((string)$this->header_));
      fwrite($fp, (string)$this->header_);
    }
    if (!is_null($this->listUrl_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, strlen((string)$this->listUrl_));
      fwrite($fp, (string)$this->listUrl_);
    }
    if (!is_null($this->browseUrl_)) {
      fwrite($fp, "\x1a");
      Protobuf::write_varint($fp, strlen((string)$this->browseUrl_));
      fwrite($fp, (string)$this->browseUrl_);
    }
    if (!is_null($this->descriptionHtml_)) {
      fwrite($fp, "\"");
      Protobuf::write_varint($fp, strlen((string)$this->descriptionHtml_));
      fwrite($fp, (string)$this->descriptionHtml_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->header_)) {
      $l = strlen((string)$this->header_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->listUrl_)) {
      $l = strlen((string)$this->listUrl_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->browseUrl_)) {
      $l = strlen((string)$this->browseUrl_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->descriptionHtml_)) {
      $l = strlen((string)$this->descriptionHtml_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('header_', $this->header_)
         . Protobuf::toString('listUrl_', $this->listUrl_)
         . Protobuf::toString('browseUrl_', $this->browseUrl_)
         . Protobuf::toString('descriptionHtml_', $this->descriptionHtml_);
  }
  
  // optional string header = 1;

  protected $header_;
  public function resetHeader() { unset($this->header_); }
  public function clearHeader() { unset($this->header_); }
  public function hasHeader() { return isset($this->header_); }
  public function getHeader() { return $this->header_; }
  public function setHeader($value) { $this->header_ = (string)$value; }
  
  // optional string listUrl = 2;

  protected $listUrl_;
  public function resetListUrl() { unset($this->listUrl_); }
  public function clearListUrl() { unset($this->listUrl_); }
  public function hasListUrl() { return isset($this->listUrl_); }
  public function getListUrl() { return $this->listUrl_; }
  public function setListUrl($value) { $this->listUrl_ = (string)$value; }
  
  // optional string browseUrl = 3;

  protected $browseUrl_;
  public function resetBrowseUrl() { unset($this->browseUrl_); }
  public function clearBrowseUrl() { unset($this->browseUrl_); }
  public function hasBrowseUrl() { return isset($this->browseUrl_); }
  public function getBrowseUrl() { return $this->browseUrl_; }
  public function setBrowseUrl($value) { $this->browseUrl_ = (string)$value; }
  
  // optional string descriptionHtml = 4;

  protected $descriptionHtml_;
  public function resetDescriptionHtml() { unset($this->descriptionHtml_); }
  public function clearDescriptionHtml() { unset($this->descriptionHtml_); }
  public function hasDescriptionHtml() { return isset($this->descriptionHtml_); }
  public function getDescriptionHtml() { return $this->descriptionHtml_; }
  public function setDescriptionHtml($value) { $this->descriptionHtml_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:SectionMetadata)
}

// message SeriesAntenna
class SeriesAntenna {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("SeriesAntenna: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->seriesTitle_ = $tmp;
          $limit-=$len;
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->seriesSubtitle_ = $tmp;
          $limit-=$len;
          break;
        case 3:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->episodeTitle_ = $tmp;
          $limit-=$len;
          break;
        case 4:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->episodeSubtitle_ = $tmp;
          $limit-=$len;
          break;
        case 5:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->colorThemeArgb_ = $tmp;
          $limit-=$len;
          break;
        case 6:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->sectionTracks_ = new SectionMetadata($fp, $len);
          ASSERT('$len == 0');
          break;
        case 7:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->sectionAlbums_ = new SectionMetadata($fp, $len);
          ASSERT('$len == 0');
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->seriesTitle_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, strlen((string)$this->seriesTitle_));
      fwrite($fp, (string)$this->seriesTitle_);
    }
    if (!is_null($this->seriesSubtitle_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, strlen((string)$this->seriesSubtitle_));
      fwrite($fp, (string)$this->seriesSubtitle_);
    }
    if (!is_null($this->episodeTitle_)) {
      fwrite($fp, "\x1a");
      Protobuf::write_varint($fp, strlen((string)$this->episodeTitle_));
      fwrite($fp, (string)$this->episodeTitle_);
    }
    if (!is_null($this->episodeSubtitle_)) {
      fwrite($fp, "\"");
      Protobuf::write_varint($fp, strlen((string)$this->episodeSubtitle_));
      fwrite($fp, (string)$this->episodeSubtitle_);
    }
    if (!is_null($this->colorThemeArgb_)) {
      fwrite($fp, "*");
      Protobuf::write_varint($fp, strlen((string)$this->colorThemeArgb_));
      fwrite($fp, (string)$this->colorThemeArgb_);
    }
    if (!is_null($this->sectionTracks_)) {
      fwrite($fp, "2");
      Protobuf::write_varint($fp, $this->sectionTracks_->size()); // message
      $this->sectionTracks_->write($fp);
    }
    if (!is_null($this->sectionAlbums_)) {
      fwrite($fp, ":");
      Protobuf::write_varint($fp, $this->sectionAlbums_->size()); // message
      $this->sectionAlbums_->write($fp);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->seriesTitle_)) {
      $l = strlen((string)$this->seriesTitle_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->seriesSubtitle_)) {
      $l = strlen((string)$this->seriesSubtitle_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->episodeTitle_)) {
      $l = strlen((string)$this->episodeTitle_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->episodeSubtitle_)) {
      $l = strlen((string)$this->episodeSubtitle_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->colorThemeArgb_)) {
      $l = strlen((string)$this->colorThemeArgb_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->sectionTracks_)) {
      $l = $this->sectionTracks_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->sectionAlbums_)) {
      $l = $this->sectionAlbums_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('seriesTitle_', $this->seriesTitle_)
         . Protobuf::toString('seriesSubtitle_', $this->seriesSubtitle_)
         . Protobuf::toString('episodeTitle_', $this->episodeTitle_)
         . Protobuf::toString('episodeSubtitle_', $this->episodeSubtitle_)
         . Protobuf::toString('colorThemeArgb_', $this->colorThemeArgb_)
         . Protobuf::toString('sectionTracks_', $this->sectionTracks_)
         . Protobuf::toString('sectionAlbums_', $this->sectionAlbums_);
  }
  
  // optional string seriesTitle = 1;

  protected $seriesTitle_;
  public function resetSeriesTitle() { unset($this->seriesTitle_); }
  public function clearSeriesTitle() { unset($this->seriesTitle_); }
  public function hasSeriesTitle() { return isset($this->seriesTitle_); }
  public function getSeriesTitle() { return $this->seriesTitle_; }
  public function setSeriesTitle($value) { $this->seriesTitle_ = (string)$value; }
  
  // optional string seriesSubtitle = 2;

  protected $seriesSubtitle_;
  public function resetSeriesSubtitle() { unset($this->seriesSubtitle_); }
  public function clearSeriesSubtitle() { unset($this->seriesSubtitle_); }
  public function hasSeriesSubtitle() { return isset($this->seriesSubtitle_); }
  public function getSeriesSubtitle() { return $this->seriesSubtitle_; }
  public function setSeriesSubtitle($value) { $this->seriesSubtitle_ = (string)$value; }
  
  // optional string episodeTitle = 3;

  protected $episodeTitle_;
  public function resetEpisodeTitle() { unset($this->episodeTitle_); }
  public function clearEpisodeTitle() { unset($this->episodeTitle_); }
  public function hasEpisodeTitle() { return isset($this->episodeTitle_); }
  public function getEpisodeTitle() { return $this->episodeTitle_; }
  public function setEpisodeTitle($value) { $this->episodeTitle_ = (string)$value; }
  
  // optional string episodeSubtitle = 4;

  protected $episodeSubtitle_;
  public function resetEpisodeSubtitle() { unset($this->episodeSubtitle_); }
  public function clearEpisodeSubtitle() { unset($this->episodeSubtitle_); }
  public function hasEpisodeSubtitle() { return isset($this->episodeSubtitle_); }
  public function getEpisodeSubtitle() { return $this->episodeSubtitle_; }
  public function setEpisodeSubtitle($value) { $this->episodeSubtitle_ = (string)$value; }
  
  // optional string colorThemeArgb = 5;

  protected $colorThemeArgb_;
  public function resetColorThemeArgb() { unset($this->colorThemeArgb_); }
  public function clearColorThemeArgb() { unset($this->colorThemeArgb_); }
  public function hasColorThemeArgb() { return isset($this->colorThemeArgb_); }
  public function getColorThemeArgb() { return $this->colorThemeArgb_; }
  public function setColorThemeArgb($value) { $this->colorThemeArgb_ = (string)$value; }
  
  // optional .SectionMetadata sectionTracks = 6;

  protected $sectionTracks_;
  public function resetSectionTracks() { unset($this->sectionTracks_); }
  public function clearSectionTracks() { unset($this->sectionTracks_); }
  public function hasSectionTracks() { return isset($this->sectionTracks_); }
  public function getSectionTracks() { return $this->sectionTracks_; }
  public function setSectionTracks(SectionMetadata $value) { $this->sectionTracks_ = $value; }
  
  // optional .SectionMetadata sectionAlbums = 7;

  protected $sectionAlbums_;
  public function resetSectionAlbums() { unset($this->sectionAlbums_); }
  public function clearSectionAlbums() { unset($this->sectionAlbums_); }
  public function hasSectionAlbums() { return isset($this->sectionAlbums_); }
  public function getSectionAlbums() { return $this->sectionAlbums_; }
  public function setSectionAlbums(SectionMetadata $value) { $this->sectionAlbums_ = $value; }
  
  // @@protoc_insertion_point(class_scope:SeriesAntenna)
}

// message SuggestionReasons
class SuggestionReasons {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("SuggestionReasons: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->reason_[] = new Reason($fp, $len);
          ASSERT('$len == 0');
          break;
        case 4:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->neutralDismissal_ = new Dismissal($fp, $len);
          ASSERT('$len == 0');
          break;
        case 5:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->positiveDismissal_ = new Dismissal($fp, $len);
          ASSERT('$len == 0');
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->reason_))
      foreach($this->reason_ as $v) {
        fwrite($fp, "\x12");
        Protobuf::write_varint($fp, $v->size()); // message
        $v->write($fp);
      }
    if (!is_null($this->neutralDismissal_)) {
      fwrite($fp, "\"");
      Protobuf::write_varint($fp, $this->neutralDismissal_->size()); // message
      $this->neutralDismissal_->write($fp);
    }
    if (!is_null($this->positiveDismissal_)) {
      fwrite($fp, "*");
      Protobuf::write_varint($fp, $this->positiveDismissal_->size()); // message
      $this->positiveDismissal_->write($fp);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->reason_))
      foreach($this->reason_ as $v) {
        $l = $v->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
    if (!is_null($this->neutralDismissal_)) {
      $l = $this->neutralDismissal_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->positiveDismissal_)) {
      $l = $this->positiveDismissal_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('reason_', $this->reason_)
         . Protobuf::toString('neutralDismissal_', $this->neutralDismissal_)
         . Protobuf::toString('positiveDismissal_', $this->positiveDismissal_);
  }
  
  // repeated .Reason reason = 2;

  protected $reason_ = array();
  public function clearReason() { $this->reason_ = array(); }
  public function getReasonCount() { return count($this->reason_); }
  public function hasReason() { return (count($this->reason_) > 0); }
  public function indexOfReason($value) { return array_search($value,$this->reason_);}
  public function removeReason($index) { unset($this->reason_[$index]); }
  public function removeValReason($value) { $idx = array_search($value,$this->reason_); if($idx !== FALSE){unset($this->reason_[$idx]); }}
  public function removeValsReason($values) { foreach($values as $value){$idx = array_search($value,$this->reason_); if($idx !== FALSE){unset($this->reason_[$idx]); }}}
  public function pushReason($newvar) { return array_push($this->reason_,$newvar); }
  public function popReason() { return array_pop($this->reason_); }
  public function shiftReason() { return array_shift($this->reason_); }
  public function unshiftReason($newvar) { return array_unshift($this->reason_,$newvar); }
  public function getReason($index) { return $this->reason_[$index]; }
  public function getReasonArray() { return $this->reason_; }
  public function setReason($index, $value) {$this->reason_[$index] = $value;	}
  public function addReason($value) { $this->reason_[] = $value; }
  public function addAllReason(array $values) { foreach($values as $value) {$this->reason_[] = $value;} }
  
  // optional .Dismissal neutralDismissal = 4;

  protected $neutralDismissal_;
  public function resetNeutralDismissal() { unset($this->neutralDismissal_); }
  public function clearNeutralDismissal() { unset($this->neutralDismissal_); }
  public function hasNeutralDismissal() { return isset($this->neutralDismissal_); }
  public function getNeutralDismissal() { return $this->neutralDismissal_; }
  public function setNeutralDismissal(Dismissal $value) { $this->neutralDismissal_ = $value; }
  
  // optional .Dismissal positiveDismissal = 5;

  protected $positiveDismissal_;
  public function resetPositiveDismissal() { unset($this->positiveDismissal_); }
  public function clearPositiveDismissal() { unset($this->positiveDismissal_); }
  public function hasPositiveDismissal() { return isset($this->positiveDismissal_); }
  public function getPositiveDismissal() { return $this->positiveDismissal_; }
  public function setPositiveDismissal(Dismissal $value) { $this->positiveDismissal_ = $value; }
  
  // @@protoc_insertion_point(class_scope:SuggestionReasons)
}

// message Template
class Template {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("Template: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->seriesAntenna_ = new SeriesAntenna($fp, $len);
          ASSERT('$len == 0');
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->tileGraphic2X1_ = new TileTemplate($fp, $len);
          ASSERT('$len == 0');
          break;
        case 3:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->tileGraphic4X2_ = new TileTemplate($fp, $len);
          ASSERT('$len == 0');
          break;
        case 4:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->tileGraphicColoredTitle2X1_ = new TileTemplate($fp, $len);
          ASSERT('$len == 0');
          break;
        case 5:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->tileGraphicUpperLeftTitle2X1_ = new TileTemplate($fp, $len);
          ASSERT('$len == 0');
          break;
        case 6:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->tileDetailsReflectedGraphic2X2_ = new TileTemplate($fp, $len);
          ASSERT('$len == 0');
          break;
        case 7:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->tileFourBlock4X2_ = new TileTemplate($fp, $len);
          ASSERT('$len == 0');
          break;
        case 8:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->containerWithBanner_ = new ContainerWithBanner($fp, $len);
          ASSERT('$len == 0');
          break;
        case 9:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->dealOfTheDay_ = new DealOfTheDay($fp, $len);
          ASSERT('$len == 0');
          break;
        case 10:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->tileGraphicColoredTitle4X2_ = new TileTemplate($fp, $len);
          ASSERT('$len == 0');
          break;
        case 11:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->editorialSeriesContainer_ = new EditorialSeriesContainer($fp, $len);
          ASSERT('$len == 0');
          break;
        case 12:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->recommendationsContainer_ = new RecommendationsContainer($fp, $len);
          ASSERT('$len == 0');
          break;
        case 13:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->nextBanner_ = new NextBanner($fp, $len);
          ASSERT('$len == 0');
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->seriesAntenna_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, $this->seriesAntenna_->size()); // message
      $this->seriesAntenna_->write($fp);
    }
    if (!is_null($this->tileGraphic2X1_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, $this->tileGraphic2X1_->size()); // message
      $this->tileGraphic2X1_->write($fp);
    }
    if (!is_null($this->tileGraphic4X2_)) {
      fwrite($fp, "\x1a");
      Protobuf::write_varint($fp, $this->tileGraphic4X2_->size()); // message
      $this->tileGraphic4X2_->write($fp);
    }
    if (!is_null($this->tileGraphicColoredTitle2X1_)) {
      fwrite($fp, "\"");
      Protobuf::write_varint($fp, $this->tileGraphicColoredTitle2X1_->size()); // message
      $this->tileGraphicColoredTitle2X1_->write($fp);
    }
    if (!is_null($this->tileGraphicUpperLeftTitle2X1_)) {
      fwrite($fp, "*");
      Protobuf::write_varint($fp, $this->tileGraphicUpperLeftTitle2X1_->size()); // message
      $this->tileGraphicUpperLeftTitle2X1_->write($fp);
    }
    if (!is_null($this->tileDetailsReflectedGraphic2X2_)) {
      fwrite($fp, "2");
      Protobuf::write_varint($fp, $this->tileDetailsReflectedGraphic2X2_->size()); // message
      $this->tileDetailsReflectedGraphic2X2_->write($fp);
    }
    if (!is_null($this->tileFourBlock4X2_)) {
      fwrite($fp, ":");
      Protobuf::write_varint($fp, $this->tileFourBlock4X2_->size()); // message
      $this->tileFourBlock4X2_->write($fp);
    }
    if (!is_null($this->containerWithBanner_)) {
      fwrite($fp, "B");
      Protobuf::write_varint($fp, $this->containerWithBanner_->size()); // message
      $this->containerWithBanner_->write($fp);
    }
    if (!is_null($this->dealOfTheDay_)) {
      fwrite($fp, "J");
      Protobuf::write_varint($fp, $this->dealOfTheDay_->size()); // message
      $this->dealOfTheDay_->write($fp);
    }
    if (!is_null($this->tileGraphicColoredTitle4X2_)) {
      fwrite($fp, "R");
      Protobuf::write_varint($fp, $this->tileGraphicColoredTitle4X2_->size()); // message
      $this->tileGraphicColoredTitle4X2_->write($fp);
    }
    if (!is_null($this->editorialSeriesContainer_)) {
      fwrite($fp, "Z");
      Protobuf::write_varint($fp, $this->editorialSeriesContainer_->size()); // message
      $this->editorialSeriesContainer_->write($fp);
    }
    if (!is_null($this->recommendationsContainer_)) {
      fwrite($fp, "b");
      Protobuf::write_varint($fp, $this->recommendationsContainer_->size()); // message
      $this->recommendationsContainer_->write($fp);
    }
    if (!is_null($this->nextBanner_)) {
      fwrite($fp, "j");
      Protobuf::write_varint($fp, $this->nextBanner_->size()); // message
      $this->nextBanner_->write($fp);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->seriesAntenna_)) {
      $l = $this->seriesAntenna_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->tileGraphic2X1_)) {
      $l = $this->tileGraphic2X1_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->tileGraphic4X2_)) {
      $l = $this->tileGraphic4X2_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->tileGraphicColoredTitle2X1_)) {
      $l = $this->tileGraphicColoredTitle2X1_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->tileGraphicUpperLeftTitle2X1_)) {
      $l = $this->tileGraphicUpperLeftTitle2X1_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->tileDetailsReflectedGraphic2X2_)) {
      $l = $this->tileDetailsReflectedGraphic2X2_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->tileFourBlock4X2_)) {
      $l = $this->tileFourBlock4X2_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->containerWithBanner_)) {
      $l = $this->containerWithBanner_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->dealOfTheDay_)) {
      $l = $this->dealOfTheDay_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->tileGraphicColoredTitle4X2_)) {
      $l = $this->tileGraphicColoredTitle4X2_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->editorialSeriesContainer_)) {
      $l = $this->editorialSeriesContainer_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->recommendationsContainer_)) {
      $l = $this->recommendationsContainer_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->nextBanner_)) {
      $l = $this->nextBanner_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('seriesAntenna_', $this->seriesAntenna_)
         . Protobuf::toString('tileGraphic2X1_', $this->tileGraphic2X1_)
         . Protobuf::toString('tileGraphic4X2_', $this->tileGraphic4X2_)
         . Protobuf::toString('tileGraphicColoredTitle2X1_', $this->tileGraphicColoredTitle2X1_)
         . Protobuf::toString('tileGraphicUpperLeftTitle2X1_', $this->tileGraphicUpperLeftTitle2X1_)
         . Protobuf::toString('tileDetailsReflectedGraphic2X2_', $this->tileDetailsReflectedGraphic2X2_)
         . Protobuf::toString('tileFourBlock4X2_', $this->tileFourBlock4X2_)
         . Protobuf::toString('containerWithBanner_', $this->containerWithBanner_)
         . Protobuf::toString('dealOfTheDay_', $this->dealOfTheDay_)
         . Protobuf::toString('tileGraphicColoredTitle4X2_', $this->tileGraphicColoredTitle4X2_)
         . Protobuf::toString('editorialSeriesContainer_', $this->editorialSeriesContainer_)
         . Protobuf::toString('recommendationsContainer_', $this->recommendationsContainer_)
         . Protobuf::toString('nextBanner_', $this->nextBanner_);
  }
  
  // optional .SeriesAntenna seriesAntenna = 1;

  protected $seriesAntenna_;
  public function resetSeriesAntenna() { unset($this->seriesAntenna_); }
  public function clearSeriesAntenna() { unset($this->seriesAntenna_); }
  public function hasSeriesAntenna() { return isset($this->seriesAntenna_); }
  public function getSeriesAntenna() { return $this->seriesAntenna_; }
  public function setSeriesAntenna(SeriesAntenna $value) { $this->seriesAntenna_ = $value; }
  
  // optional .TileTemplate tileGraphic2X1 = 2;

  protected $tileGraphic2X1_;
  public function resetTileGraphic2X1() { unset($this->tileGraphic2X1_); }
  public function clearTileGraphic2X1() { unset($this->tileGraphic2X1_); }
  public function hasTileGraphic2X1() { return isset($this->tileGraphic2X1_); }
  public function getTileGraphic2X1() { return $this->tileGraphic2X1_; }
  public function setTileGraphic2X1(TileTemplate $value) { $this->tileGraphic2X1_ = $value; }
  
  // optional .TileTemplate tileGraphic4X2 = 3;

  protected $tileGraphic4X2_;
  public function resetTileGraphic4X2() { unset($this->tileGraphic4X2_); }
  public function clearTileGraphic4X2() { unset($this->tileGraphic4X2_); }
  public function hasTileGraphic4X2() { return isset($this->tileGraphic4X2_); }
  public function getTileGraphic4X2() { return $this->tileGraphic4X2_; }
  public function setTileGraphic4X2(TileTemplate $value) { $this->tileGraphic4X2_ = $value; }
  
  // optional .TileTemplate tileGraphicColoredTitle2X1 = 4;

  protected $tileGraphicColoredTitle2X1_;
  public function resetTileGraphicColoredTitle2X1() { unset($this->tileGraphicColoredTitle2X1_); }
  public function clearTileGraphicColoredTitle2X1() { unset($this->tileGraphicColoredTitle2X1_); }
  public function hasTileGraphicColoredTitle2X1() { return isset($this->tileGraphicColoredTitle2X1_); }
  public function getTileGraphicColoredTitle2X1() { return $this->tileGraphicColoredTitle2X1_; }
  public function setTileGraphicColoredTitle2X1(TileTemplate $value) { $this->tileGraphicColoredTitle2X1_ = $value; }
  
  // optional .TileTemplate tileGraphicUpperLeftTitle2X1 = 5;

  protected $tileGraphicUpperLeftTitle2X1_;
  public function resetTileGraphicUpperLeftTitle2X1() { unset($this->tileGraphicUpperLeftTitle2X1_); }
  public function clearTileGraphicUpperLeftTitle2X1() { unset($this->tileGraphicUpperLeftTitle2X1_); }
  public function hasTileGraphicUpperLeftTitle2X1() { return isset($this->tileGraphicUpperLeftTitle2X1_); }
  public function getTileGraphicUpperLeftTitle2X1() { return $this->tileGraphicUpperLeftTitle2X1_; }
  public function setTileGraphicUpperLeftTitle2X1(TileTemplate $value) { $this->tileGraphicUpperLeftTitle2X1_ = $value; }
  
  // optional .TileTemplate tileDetailsReflectedGraphic2X2 = 6;

  protected $tileDetailsReflectedGraphic2X2_;
  public function resetTileDetailsReflectedGraphic2X2() { unset($this->tileDetailsReflectedGraphic2X2_); }
  public function clearTileDetailsReflectedGraphic2X2() { unset($this->tileDetailsReflectedGraphic2X2_); }
  public function hasTileDetailsReflectedGraphic2X2() { return isset($this->tileDetailsReflectedGraphic2X2_); }
  public function getTileDetailsReflectedGraphic2X2() { return $this->tileDetailsReflectedGraphic2X2_; }
  public function setTileDetailsReflectedGraphic2X2(TileTemplate $value) { $this->tileDetailsReflectedGraphic2X2_ = $value; }
  
  // optional .TileTemplate tileFourBlock4X2 = 7;

  protected $tileFourBlock4X2_;
  public function resetTileFourBlock4X2() { unset($this->tileFourBlock4X2_); }
  public function clearTileFourBlock4X2() { unset($this->tileFourBlock4X2_); }
  public function hasTileFourBlock4X2() { return isset($this->tileFourBlock4X2_); }
  public function getTileFourBlock4X2() { return $this->tileFourBlock4X2_; }
  public function setTileFourBlock4X2(TileTemplate $value) { $this->tileFourBlock4X2_ = $value; }
  
  // optional .ContainerWithBanner containerWithBanner = 8;

  protected $containerWithBanner_;
  public function resetContainerWithBanner() { unset($this->containerWithBanner_); }
  public function clearContainerWithBanner() { unset($this->containerWithBanner_); }
  public function hasContainerWithBanner() { return isset($this->containerWithBanner_); }
  public function getContainerWithBanner() { return $this->containerWithBanner_; }
  public function setContainerWithBanner(ContainerWithBanner $value) { $this->containerWithBanner_ = $value; }
  
  // optional .DealOfTheDay dealOfTheDay = 9;

  protected $dealOfTheDay_;
  public function resetDealOfTheDay() { unset($this->dealOfTheDay_); }
  public function clearDealOfTheDay() { unset($this->dealOfTheDay_); }
  public function hasDealOfTheDay() { return isset($this->dealOfTheDay_); }
  public function getDealOfTheDay() { return $this->dealOfTheDay_; }
  public function setDealOfTheDay(DealOfTheDay $value) { $this->dealOfTheDay_ = $value; }
  
  // optional .TileTemplate tileGraphicColoredTitle4X2 = 10;

  protected $tileGraphicColoredTitle4X2_;
  public function resetTileGraphicColoredTitle4X2() { unset($this->tileGraphicColoredTitle4X2_); }
  public function clearTileGraphicColoredTitle4X2() { unset($this->tileGraphicColoredTitle4X2_); }
  public function hasTileGraphicColoredTitle4X2() { return isset($this->tileGraphicColoredTitle4X2_); }
  public function getTileGraphicColoredTitle4X2() { return $this->tileGraphicColoredTitle4X2_; }
  public function setTileGraphicColoredTitle4X2(TileTemplate $value) { $this->tileGraphicColoredTitle4X2_ = $value; }
  
  // optional .EditorialSeriesContainer editorialSeriesContainer = 11;

  protected $editorialSeriesContainer_;
  public function resetEditorialSeriesContainer() { unset($this->editorialSeriesContainer_); }
  public function clearEditorialSeriesContainer() { unset($this->editorialSeriesContainer_); }
  public function hasEditorialSeriesContainer() { return isset($this->editorialSeriesContainer_); }
  public function getEditorialSeriesContainer() { return $this->editorialSeriesContainer_; }
  public function setEditorialSeriesContainer(EditorialSeriesContainer $value) { $this->editorialSeriesContainer_ = $value; }
  
  // optional .RecommendationsContainer recommendationsContainer = 12;

  protected $recommendationsContainer_;
  public function resetRecommendationsContainer() { unset($this->recommendationsContainer_); }
  public function clearRecommendationsContainer() { unset($this->recommendationsContainer_); }
  public function hasRecommendationsContainer() { return isset($this->recommendationsContainer_); }
  public function getRecommendationsContainer() { return $this->recommendationsContainer_; }
  public function setRecommendationsContainer(RecommendationsContainer $value) { $this->recommendationsContainer_ = $value; }
  
  // optional .NextBanner nextBanner = 13;

  protected $nextBanner_;
  public function resetNextBanner() { unset($this->nextBanner_); }
  public function clearNextBanner() { unset($this->nextBanner_); }
  public function hasNextBanner() { return isset($this->nextBanner_); }
  public function getNextBanner() { return $this->nextBanner_; }
  public function setNextBanner(NextBanner $value) { $this->nextBanner_ = $value; }
  
  // @@protoc_insertion_point(class_scope:Template)
}

// message TileTemplate
class TileTemplate {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("TileTemplate: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->colorThemeArgb_ = $tmp;
          $limit-=$len;
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->colorTextArgb_ = $tmp;
          $limit-=$len;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->colorThemeArgb_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, strlen((string)$this->colorThemeArgb_));
      fwrite($fp, (string)$this->colorThemeArgb_);
    }
    if (!is_null($this->colorTextArgb_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, strlen((string)$this->colorTextArgb_));
      fwrite($fp, (string)$this->colorTextArgb_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->colorThemeArgb_)) {
      $l = strlen((string)$this->colorThemeArgb_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->colorTextArgb_)) {
      $l = strlen((string)$this->colorTextArgb_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('colorThemeArgb_', $this->colorThemeArgb_)
         . Protobuf::toString('colorTextArgb_', $this->colorTextArgb_);
  }
  
  // optional string colorThemeArgb = 1;

  protected $colorThemeArgb_;
  public function resetColorThemeArgb() { unset($this->colorThemeArgb_); }
  public function clearColorThemeArgb() { unset($this->colorThemeArgb_); }
  public function hasColorThemeArgb() { return isset($this->colorThemeArgb_); }
  public function getColorThemeArgb() { return $this->colorThemeArgb_; }
  public function setColorThemeArgb($value) { $this->colorThemeArgb_ = (string)$value; }
  
  // optional string colorTextArgb = 2;

  protected $colorTextArgb_;
  public function resetColorTextArgb() { unset($this->colorTextArgb_); }
  public function clearColorTextArgb() { unset($this->colorTextArgb_); }
  public function hasColorTextArgb() { return isset($this->colorTextArgb_); }
  public function getColorTextArgb() { return $this->colorTextArgb_; }
  public function setColorTextArgb($value) { $this->colorTextArgb_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:TileTemplate)
}

// message VideoSnippet
class VideoSnippet {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("VideoSnippet: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->image_[] = new Image($fp, $len);
          ASSERT('$len == 0');
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->title_ = $tmp;
          $limit-=$len;
          break;
        case 3:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->description_ = $tmp;
          $limit-=$len;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->image_))
      foreach($this->image_ as $v) {
        fwrite($fp, "\x0a");
        Protobuf::write_varint($fp, $v->size()); // message
        $v->write($fp);
      }
    if (!is_null($this->title_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, strlen((string)$this->title_));
      fwrite($fp, (string)$this->title_);
    }
    if (!is_null($this->description_)) {
      fwrite($fp, "\x1a");
      Protobuf::write_varint($fp, strlen((string)$this->description_));
      fwrite($fp, (string)$this->description_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->image_))
      foreach($this->image_ as $v) {
        $l = $v->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
    if (!is_null($this->title_)) {
      $l = strlen((string)$this->title_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->description_)) {
      $l = strlen((string)$this->description_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('image_', $this->image_)
         . Protobuf::toString('title_', $this->title_)
         . Protobuf::toString('description_', $this->description_);
  }
  
  // repeated .Image image = 1;

  protected $image_ = array();
  public function clearImage() { $this->image_ = array(); }
  public function getImageCount() { return count($this->image_); }
  public function hasImage() { return (count($this->image_) > 0); }
  public function indexOfImage($value) { return array_search($value,$this->image_);}
  public function removeImage($index) { unset($this->image_[$index]); }
  public function removeValImage($value) { $idx = array_search($value,$this->image_); if($idx !== FALSE){unset($this->image_[$idx]); }}
  public function removeValsImage($values) { foreach($values as $value){$idx = array_search($value,$this->image_); if($idx !== FALSE){unset($this->image_[$idx]); }}}
  public function pushImage($newvar) { return array_push($this->image_,$newvar); }
  public function popImage() { return array_pop($this->image_); }
  public function shiftImage() { return array_shift($this->image_); }
  public function unshiftImage($newvar) { return array_unshift($this->image_,$newvar); }
  public function getImage($index) { return $this->image_[$index]; }
  public function getImageArray() { return $this->image_; }
  public function setImage($index, $value) {$this->image_[$index] = $value;	}
  public function addImage($value) { $this->image_[] = $value; }
  public function addAllImage(array $values) { foreach($values as $value) {$this->image_[] = $value;} }
  
  // optional string title = 2;

  protected $title_;
  public function resetTitle() { unset($this->title_); }
  public function clearTitle() { unset($this->title_); }
  public function hasTitle() { return isset($this->title_); }
  public function getTitle() { return $this->title_; }
  public function setTitle($value) { $this->title_ = (string)$value; }
  
  // optional string description = 3;

  protected $description_;
  public function resetDescription() { unset($this->description_); }
  public function clearDescription() { unset($this->description_); }
  public function hasDescription() { return isset($this->description_); }
  public function getDescription() { return $this->description_; }
  public function setDescription($value) { $this->description_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:VideoSnippet)
}

// message Warning
class Warning {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("Warning: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->localizedMessage_ = $tmp;
          $limit-=$len;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->localizedMessage_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, strlen((string)$this->localizedMessage_));
      fwrite($fp, (string)$this->localizedMessage_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->localizedMessage_)) {
      $l = strlen((string)$this->localizedMessage_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('localizedMessage_', $this->localizedMessage_);
  }
  
  // optional string localizedMessage = 1;

  protected $localizedMessage_;
  public function resetLocalizedMessage() { unset($this->localizedMessage_); }
  public function clearLocalizedMessage() { unset($this->localizedMessage_); }
  public function hasLocalizedMessage() { return isset($this->localizedMessage_); }
  public function getLocalizedMessage() { return $this->localizedMessage_; }
  public function setLocalizedMessage($value) { $this->localizedMessage_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:Warning)
}

// message AlbumDetails
class AlbumDetails {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("AlbumDetails: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->name_ = $tmp;
          $limit-=$len;
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->details_ = new MusicDetails($fp, $len);
          ASSERT('$len == 0');
          break;
        case 3:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->displayArtist_ = new ArtistDetails($fp, $len);
          ASSERT('$len == 0');
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->name_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, strlen((string)$this->name_));
      fwrite($fp, (string)$this->name_);
    }
    if (!is_null($this->details_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, $this->details_->size()); // message
      $this->details_->write($fp);
    }
    if (!is_null($this->displayArtist_)) {
      fwrite($fp, "\x1a");
      Protobuf::write_varint($fp, $this->displayArtist_->size()); // message
      $this->displayArtist_->write($fp);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->name_)) {
      $l = strlen((string)$this->name_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->details_)) {
      $l = $this->details_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->displayArtist_)) {
      $l = $this->displayArtist_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('name_', $this->name_)
         . Protobuf::toString('details_', $this->details_)
         . Protobuf::toString('displayArtist_', $this->displayArtist_);
  }
  
  // optional string name = 1;

  protected $name_;
  public function resetName() { unset($this->name_); }
  public function clearName() { unset($this->name_); }
  public function hasName() { return isset($this->name_); }
  public function getName() { return $this->name_; }
  public function setName($value) { $this->name_ = (string)$value; }
  
  // optional .MusicDetails details = 2;

  protected $details_;
  public function resetDetails() { unset($this->details_); }
  public function clearDetails() { unset($this->details_); }
  public function hasDetails() { return isset($this->details_); }
  public function getDetails() { return $this->details_; }
  public function setDetails(MusicDetails $value) { $this->details_ = $value; }
  
  // optional .ArtistDetails displayArtist = 3;

  protected $displayArtist_;
  public function resetDisplayArtist() { unset($this->displayArtist_); }
  public function clearDisplayArtist() { unset($this->displayArtist_); }
  public function hasDisplayArtist() { return isset($this->displayArtist_); }
  public function getDisplayArtist() { return $this->displayArtist_; }
  public function setDisplayArtist(ArtistDetails $value) { $this->displayArtist_ = $value; }
  
  // @@protoc_insertion_point(class_scope:AlbumDetails)
}

// message AppDetails
class AppDetails {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("AppDetails: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->developerName_ = $tmp;
          $limit-=$len;
          break;
        case 2:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->majorVersionNumber_ = $tmp;
          
          break;
        case 3:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->versionCode_ = $tmp;
          
          break;
        case 4:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->versionString_ = $tmp;
          $limit-=$len;
          break;
        case 5:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->title_ = $tmp;
          $limit-=$len;
          break;
        case 7:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->appCategory_[] = $tmp;
          $limit-=$len;
          break;
        case 8:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->contentRating_ = $tmp;
          
          break;
        case 9:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->installationSize_ = $tmp;
          
          break;
        case 10:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->obsoletePermission_[] = $tmp;
          $limit-=$len;
          break;
        case 11:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->developerEmail_ = $tmp;
          $limit-=$len;
          break;
        case 12:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->developerWebsite_ = $tmp;
          $limit-=$len;
          break;
        case 13:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->numDownloads_ = $tmp;
          $limit-=$len;
          break;
        case 14:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->packageName_ = $tmp;
          $limit-=$len;
          break;
        case 15:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->recentChangesHtml_ = $tmp;
          $limit-=$len;
          break;
        case 16:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->uploadDate_ = $tmp;
          $limit-=$len;
          break;
        case 17:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->file_[] = new FileMetadata($fp, $len);
          ASSERT('$len == 0');
          break;
        case 18:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->appType_ = $tmp;
          $limit-=$len;
          break;
        case 19:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->certificateHash_[] = $tmp;
          $limit-=$len;
          break;
        case 20:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->permission_[] = new AppPermission($fp, $len);
          ASSERT('$len == 0');
          break;
        case 21:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->variesByAccount_ = $tmp > 0 ? true : false;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->developerName_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, strlen((string)$this->developerName_));
      fwrite($fp, (string)$this->developerName_);
    }
    if (!is_null($this->majorVersionNumber_)) {
      fwrite($fp, "\x10");
      Protobuf::write_varint($fp, (int)$this->majorVersionNumber_);
    }
    if (!is_null($this->versionCode_)) {
      fwrite($fp, "\x18");
      Protobuf::write_varint($fp, (int)$this->versionCode_);
    }
    if (!is_null($this->versionString_)) {
      fwrite($fp, "\"");
      Protobuf::write_varint($fp, strlen((string)$this->versionString_));
      fwrite($fp, (string)$this->versionString_);
    }
    if (!is_null($this->title_)) {
      fwrite($fp, "*");
      Protobuf::write_varint($fp, strlen((string)$this->title_));
      fwrite($fp, (string)$this->title_);
    }
    if (!is_null($this->appCategory_))
      foreach($this->appCategory_ as $v) {
        fwrite($fp, ":");
        Protobuf::write_varint($fp, strlen((string)$v));
        fwrite($fp, (string)$v);
      }
    if (!is_null($this->contentRating_)) {
      fwrite($fp, "@");
      Protobuf::write_varint($fp, (int)$this->contentRating_);
    }
    if (!is_null($this->installationSize_)) {
      fwrite($fp, "H");
      Protobuf::write_varint($fp, (int)$this->installationSize_);
    }
    if (!is_null($this->obsoletePermission_))
      foreach($this->obsoletePermission_ as $v) {
        fwrite($fp, "R");
        Protobuf::write_varint($fp, strlen((string)$v));
        fwrite($fp, (string)$v);
      }
    if (!is_null($this->developerEmail_)) {
      fwrite($fp, "Z");
      Protobuf::write_varint($fp, strlen((string)$this->developerEmail_));
      fwrite($fp, (string)$this->developerEmail_);
    }
    if (!is_null($this->developerWebsite_)) {
      fwrite($fp, "b");
      Protobuf::write_varint($fp, strlen((string)$this->developerWebsite_));
      fwrite($fp, (string)$this->developerWebsite_);
    }
    if (!is_null($this->numDownloads_)) {
      fwrite($fp, "j");
      Protobuf::write_varint($fp, strlen((string)$this->numDownloads_));
      fwrite($fp, (string)$this->numDownloads_);
    }
    if (!is_null($this->packageName_)) {
      fwrite($fp, "r");
      Protobuf::write_varint($fp, strlen((string)$this->packageName_));
      fwrite($fp, (string)$this->packageName_);
    }
    if (!is_null($this->recentChangesHtml_)) {
      fwrite($fp, "z");
      Protobuf::write_varint($fp, strlen((string)$this->recentChangesHtml_));
      fwrite($fp, (string)$this->recentChangesHtml_);
    }
    if (!is_null($this->uploadDate_)) {
      fwrite($fp, "\x82\x01");
      Protobuf::write_varint($fp, strlen((string)$this->uploadDate_));
      fwrite($fp, (string)$this->uploadDate_);
    }
    if (!is_null($this->file_))
      foreach($this->file_ as $v) {
        fwrite($fp, "\x8a\x01");
        Protobuf::write_varint($fp, $v->size()); // message
        $v->write($fp);
      }
    if (!is_null($this->appType_)) {
      fwrite($fp, "\x92\x01");
      Protobuf::write_varint($fp, strlen((string)$this->appType_));
      fwrite($fp, (string)$this->appType_);
    }
    if (!is_null($this->certificateHash_))
      foreach($this->certificateHash_ as $v) {
        fwrite($fp, "\x9a\x01");
        Protobuf::write_varint($fp, strlen((string)$v));
        fwrite($fp, (string)$v);
      }
    if (!is_null($this->permission_))
      foreach($this->permission_ as $v) {
        fwrite($fp, "\xa2\x01");
        Protobuf::write_varint($fp, $v->size()); // message
        $v->write($fp);
      }
    if (!is_null($this->variesByAccount_)) {
      fwrite($fp, "\xa8\x01");
      Protobuf::write_varint($fp, (int)$this->variesByAccount_ ? 1 : 0);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->developerName_)) {
      $l = strlen((string)$this->developerName_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->majorVersionNumber_)) {
      $size += 1 + Protobuf::size_varint($this->majorVersionNumber_);
    }
    if (!is_null($this->versionCode_)) {
      $size += 1 + Protobuf::size_varint($this->versionCode_);
    }
    if (!is_null($this->versionString_)) {
      $l = strlen((string)$this->versionString_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->title_)) {
      $l = strlen((string)$this->title_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->appCategory_))
      foreach($this->appCategory_ as $v) {
        $l = strlen((string)$v);
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
    if (!is_null($this->contentRating_)) {
      $size += 1 + Protobuf::size_varint($this->contentRating_);
    }
    if (!is_null($this->installationSize_)) {
      $size += 1 + Protobuf::size_varint($this->installationSize_);
    }
    if (!is_null($this->obsoletePermission_))
      foreach($this->obsoletePermission_ as $v) {
        $l = strlen((string)$v);
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
    if (!is_null($this->developerEmail_)) {
      $l = strlen((string)$this->developerEmail_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->developerWebsite_)) {
      $l = strlen((string)$this->developerWebsite_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->numDownloads_)) {
      $l = strlen((string)$this->numDownloads_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->packageName_)) {
      $l = strlen((string)$this->packageName_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->recentChangesHtml_)) {
      $l = strlen((string)$this->recentChangesHtml_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->uploadDate_)) {
      $l = strlen((string)$this->uploadDate_);
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->file_))
      foreach($this->file_ as $v) {
        $l = $v->size();
        $size += 2 + Protobuf::size_varint($l) + $l;
      }
    if (!is_null($this->appType_)) {
      $l = strlen((string)$this->appType_);
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->certificateHash_))
      foreach($this->certificateHash_ as $v) {
        $l = strlen((string)$v);
        $size += 2 + Protobuf::size_varint($l) + $l;
      }
    if (!is_null($this->permission_))
      foreach($this->permission_ as $v) {
        $l = $v->size();
        $size += 2 + Protobuf::size_varint($l) + $l;
      }
    if (!is_null($this->variesByAccount_)) {
      $size += 3;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('developerName_', $this->developerName_)
         . Protobuf::toString('majorVersionNumber_', $this->majorVersionNumber_)
         . Protobuf::toString('versionCode_', $this->versionCode_)
         . Protobuf::toString('versionString_', $this->versionString_)
         . Protobuf::toString('title_', $this->title_)
         . Protobuf::toString('appCategory_', $this->appCategory_)
         . Protobuf::toString('contentRating_', $this->contentRating_)
         . Protobuf::toString('installationSize_', $this->installationSize_)
         . Protobuf::toString('obsoletePermission_', $this->obsoletePermission_)
         . Protobuf::toString('developerEmail_', $this->developerEmail_)
         . Protobuf::toString('developerWebsite_', $this->developerWebsite_)
         . Protobuf::toString('numDownloads_', $this->numDownloads_)
         . Protobuf::toString('packageName_', $this->packageName_)
         . Protobuf::toString('recentChangesHtml_', $this->recentChangesHtml_)
         . Protobuf::toString('uploadDate_', $this->uploadDate_)
         . Protobuf::toString('file_', $this->file_)
         . Protobuf::toString('appType_', $this->appType_)
         . Protobuf::toString('certificateHash_', $this->certificateHash_)
         . Protobuf::toString('permission_', $this->permission_)
         . Protobuf::toString('variesByAccount_', $this->variesByAccount_);
  }
  
  // optional string developerName = 1;

  protected $developerName_;
  public function resetDeveloperName() { unset($this->developerName_); }
  public function clearDeveloperName() { unset($this->developerName_); }
  public function hasDeveloperName() { return isset($this->developerName_); }
  public function getDeveloperName() { return $this->developerName_; }
  public function setDeveloperName($value) { $this->developerName_ = (string)$value; }
  
  // optional int32 majorVersionNumber = 2;

  protected $majorVersionNumber_;
  public function resetMajorVersionNumber() { unset($this->majorVersionNumber_); }
  public function clearMajorVersionNumber() { unset($this->majorVersionNumber_); }
  public function hasMajorVersionNumber() { return isset($this->majorVersionNumber_); }
  public function getMajorVersionNumber() { return $this->majorVersionNumber_; }
  public function setMajorVersionNumber($value) { $this->majorVersionNumber_ = (string)$value; }
  
  // optional int32 versionCode = 3;

  protected $versionCode_;
  public function resetVersionCode() { unset($this->versionCode_); }
  public function clearVersionCode() { unset($this->versionCode_); }
  public function hasVersionCode() { return isset($this->versionCode_); }
  public function getVersionCode() { return $this->versionCode_; }
  public function setVersionCode($value) { $this->versionCode_ = (string)$value; }
  
  // optional string versionString = 4;

  protected $versionString_;
  public function resetVersionString() { unset($this->versionString_); }
  public function clearVersionString() { unset($this->versionString_); }
  public function hasVersionString() { return isset($this->versionString_); }
  public function getVersionString() { return $this->versionString_; }
  public function setVersionString($value) { $this->versionString_ = (string)$value; }
  
  // optional string title = 5;

  protected $title_;
  public function resetTitle() { unset($this->title_); }
  public function clearTitle() { unset($this->title_); }
  public function hasTitle() { return isset($this->title_); }
  public function getTitle() { return $this->title_; }
  public function setTitle($value) { $this->title_ = (string)$value; }
  
  // repeated string appCategory = 7;

  protected $appCategory_ = array();
  public function clearAppCategory() { $this->appCategory_ = array(); }
  public function getAppCategoryCount() { return count($this->appCategory_); }
  public function hasAppCategory() { return (count($this->appCategory_) > 0); }
  public function indexOfAppCategory($value) { return array_search($value,$this->appCategory_);}
  public function removeAppCategory($index) { unset($this->appCategory_[$index]); }
  public function removeValAppCategory($value) { $idx = array_search($value,$this->appCategory_); if($idx !== FALSE){unset($this->appCategory_[$idx]); }}
  public function removeValsAppCategory($values) { foreach($values as $value){$idx = array_search($value,$this->appCategory_); if($idx !== FALSE){unset($this->appCategory_[$idx]); }}}
  public function pushAppCategory($newvar) { return array_push($this->appCategory_,(string)$newvar); }
  public function popAppCategory() { return array_pop($this->appCategory_); }
  public function shiftAppCategory() { return array_shift($this->appCategory_); }
  public function unshiftAppCategory($newvar) { return array_unshift($this->appCategory_,(string)$newvar); }
  public function getAppCategory($index) { return $this->appCategory_[$index]; }
  public function getAppCategoryArray() { return $this->appCategory_; }
  public function setAppCategory($index, $value) {$this->appCategory_[$index] = (string)$value;	}
  public function addAppCategory($value) { $this->appCategory_[] = (string)$value; }
  public function addAllAppCategory(array $values) { foreach($values as $value) {$this->appCategory_[] = (string)$value;} }
  
  // optional int32 contentRating = 8;

  protected $contentRating_;
  public function resetContentRating() { unset($this->contentRating_); }
  public function clearContentRating() { unset($this->contentRating_); }
  public function hasContentRating() { return isset($this->contentRating_); }
  public function getContentRating() { return $this->contentRating_; }
  public function setContentRating($value) { $this->contentRating_ = (string)$value; }
  
  // optional int64 installationSize = 9;

  protected $installationSize_;
  public function resetInstallationSize() { unset($this->installationSize_); }
  public function clearInstallationSize() { unset($this->installationSize_); }
  public function hasInstallationSize() { return isset($this->installationSize_); }
  public function getInstallationSize() { return $this->installationSize_; }
  public function setInstallationSize($value) { $this->installationSize_ = (string)$value; }
  
  // repeated string obsoletePermission = 10;

  protected $obsoletePermission_ = array();
  public function clearObsoletePermission() { $this->obsoletePermission_ = array(); }
  public function getObsoletePermissionCount() { return count($this->obsoletePermission_); }
  public function hasObsoletePermission() { return (count($this->obsoletePermission_) > 0); }
  public function indexOfObsoletePermission($value) { return array_search($value,$this->obsoletePermission_);}
  public function removeObsoletePermission($index) { unset($this->obsoletePermission_[$index]); }
  public function removeValObsoletePermission($value) { $idx = array_search($value,$this->obsoletePermission_); if($idx !== FALSE){unset($this->obsoletePermission_[$idx]); }}
  public function removeValsObsoletePermission($values) { foreach($values as $value){$idx = array_search($value,$this->obsoletePermission_); if($idx !== FALSE){unset($this->obsoletePermission_[$idx]); }}}
  public function pushObsoletePermission($newvar) { return array_push($this->obsoletePermission_,(string)$newvar); }
  public function popObsoletePermission() { return array_pop($this->obsoletePermission_); }
  public function shiftObsoletePermission() { return array_shift($this->obsoletePermission_); }
  public function unshiftObsoletePermission($newvar) { return array_unshift($this->obsoletePermission_,(string)$newvar); }
  public function getObsoletePermission($index) { return $this->obsoletePermission_[$index]; }
  public function getObsoletePermissionArray() { return $this->obsoletePermission_; }
  public function setObsoletePermission($index, $value) {$this->obsoletePermission_[$index] = (string)$value;	}
  public function addObsoletePermission($value) { $this->obsoletePermission_[] = (string)$value; }
  public function addAllObsoletePermission(array $values) { foreach($values as $value) {$this->obsoletePermission_[] = (string)$value;} }
  
  // optional string developerEmail = 11;

  protected $developerEmail_;
  public function resetDeveloperEmail() { unset($this->developerEmail_); }
  public function clearDeveloperEmail() { unset($this->developerEmail_); }
  public function hasDeveloperEmail() { return isset($this->developerEmail_); }
  public function getDeveloperEmail() { return $this->developerEmail_; }
  public function setDeveloperEmail($value) { $this->developerEmail_ = (string)$value; }
  
  // optional string developerWebsite = 12;

  protected $developerWebsite_;
  public function resetDeveloperWebsite() { unset($this->developerWebsite_); }
  public function clearDeveloperWebsite() { unset($this->developerWebsite_); }
  public function hasDeveloperWebsite() { return isset($this->developerWebsite_); }
  public function getDeveloperWebsite() { return $this->developerWebsite_; }
  public function setDeveloperWebsite($value) { $this->developerWebsite_ = (string)$value; }
  
  // optional string numDownloads = 13;

  protected $numDownloads_;
  public function resetNumDownloads() { unset($this->numDownloads_); }
  public function clearNumDownloads() { unset($this->numDownloads_); }
  public function hasNumDownloads() { return isset($this->numDownloads_); }
  public function getNumDownloads() { return $this->numDownloads_; }
  public function setNumDownloads($value) { $this->numDownloads_ = (string)$value; }
  
  // optional string packageName = 14;

  protected $packageName_;
  public function resetPackageName() { unset($this->packageName_); }
  public function clearPackageName() { unset($this->packageName_); }
  public function hasPackageName() { return isset($this->packageName_); }
  public function getPackageName() { return $this->packageName_; }
  public function setPackageName($value) { $this->packageName_ = (string)$value; }
  
  // optional string recentChangesHtml = 15;

  protected $recentChangesHtml_;
  public function resetRecentChangesHtml() { unset($this->recentChangesHtml_); }
  public function clearRecentChangesHtml() { unset($this->recentChangesHtml_); }
  public function hasRecentChangesHtml() { return isset($this->recentChangesHtml_); }
  public function getRecentChangesHtml() { return $this->recentChangesHtml_; }
  public function setRecentChangesHtml($value) { $this->recentChangesHtml_ = (string)$value; }
  
  // optional string uploadDate = 16;

  protected $uploadDate_;
  public function resetUploadDate() { unset($this->uploadDate_); }
  public function clearUploadDate() { unset($this->uploadDate_); }
  public function hasUploadDate() { return isset($this->uploadDate_); }
  public function getUploadDate() { return $this->uploadDate_; }
  public function setUploadDate($value) { $this->uploadDate_ = (string)$value; }
  
  // repeated .FileMetadata file = 17;

  protected $file_ = array();
  public function clearFile() { $this->file_ = array(); }
  public function getFileCount() { return count($this->file_); }
  public function hasFile() { return (count($this->file_) > 0); }
  public function indexOfFile($value) { return array_search($value,$this->file_);}
  public function removeFile($index) { unset($this->file_[$index]); }
  public function removeValFile($value) { $idx = array_search($value,$this->file_); if($idx !== FALSE){unset($this->file_[$idx]); }}
  public function removeValsFile($values) { foreach($values as $value){$idx = array_search($value,$this->file_); if($idx !== FALSE){unset($this->file_[$idx]); }}}
  public function pushFile($newvar) { return array_push($this->file_,$newvar); }
  public function popFile() { return array_pop($this->file_); }
  public function shiftFile() { return array_shift($this->file_); }
  public function unshiftFile($newvar) { return array_unshift($this->file_,$newvar); }
  public function getFile($index) { return $this->file_[$index]; }
  public function getFileArray() { return $this->file_; }
  public function setFile($index, $value) {$this->file_[$index] = $value;	}
  public function addFile($value) { $this->file_[] = $value; }
  public function addAllFile(array $values) { foreach($values as $value) {$this->file_[] = $value;} }
  
  // optional string appType = 18;

  protected $appType_;
  public function resetAppType() { unset($this->appType_); }
  public function clearAppType() { unset($this->appType_); }
  public function hasAppType() { return isset($this->appType_); }
  public function getAppType() { return $this->appType_; }
  public function setAppType($value) { $this->appType_ = (string)$value; }
  
  // repeated string certificateHash = 19;

  protected $certificateHash_ = array();
  public function clearCertificateHash() { $this->certificateHash_ = array(); }
  public function getCertificateHashCount() { return count($this->certificateHash_); }
  public function hasCertificateHash() { return (count($this->certificateHash_) > 0); }
  public function indexOfCertificateHash($value) { return array_search($value,$this->certificateHash_);}
  public function removeCertificateHash($index) { unset($this->certificateHash_[$index]); }
  public function removeValCertificateHash($value) { $idx = array_search($value,$this->certificateHash_); if($idx !== FALSE){unset($this->certificateHash_[$idx]); }}
  public function removeValsCertificateHash($values) { foreach($values as $value){$idx = array_search($value,$this->certificateHash_); if($idx !== FALSE){unset($this->certificateHash_[$idx]); }}}
  public function pushCertificateHash($newvar) { return array_push($this->certificateHash_,(string)$newvar); }
  public function popCertificateHash() { return array_pop($this->certificateHash_); }
  public function shiftCertificateHash() { return array_shift($this->certificateHash_); }
  public function unshiftCertificateHash($newvar) { return array_unshift($this->certificateHash_,(string)$newvar); }
  public function getCertificateHash($index) { return $this->certificateHash_[$index]; }
  public function getCertificateHashArray() { return $this->certificateHash_; }
  public function setCertificateHash($index, $value) {$this->certificateHash_[$index] = (string)$value;	}
  public function addCertificateHash($value) { $this->certificateHash_[] = (string)$value; }
  public function addAllCertificateHash(array $values) { foreach($values as $value) {$this->certificateHash_[] = (string)$value;} }
  
  // repeated .AppPermission permission = 20;

  protected $permission_ = array();
  public function clearPermission() { $this->permission_ = array(); }
  public function getPermissionCount() { return count($this->permission_); }
  public function hasPermission() { return (count($this->permission_) > 0); }
  public function indexOfPermission($value) { return array_search($value,$this->permission_);}
  public function removePermission($index) { unset($this->permission_[$index]); }
  public function removeValPermission($value) { $idx = array_search($value,$this->permission_); if($idx !== FALSE){unset($this->permission_[$idx]); }}
  public function removeValsPermission($values) { foreach($values as $value){$idx = array_search($value,$this->permission_); if($idx !== FALSE){unset($this->permission_[$idx]); }}}
  public function pushPermission($newvar) { return array_push($this->permission_,$newvar); }
  public function popPermission() { return array_pop($this->permission_); }
  public function shiftPermission() { return array_shift($this->permission_); }
  public function unshiftPermission($newvar) { return array_unshift($this->permission_,$newvar); }
  public function getPermission($index) { return $this->permission_[$index]; }
  public function getPermissionArray() { return $this->permission_; }
  public function setPermission($index, $value) {$this->permission_[$index] = $value;	}
  public function addPermission($value) { $this->permission_[] = $value; }
  public function addAllPermission(array $values) { foreach($values as $value) {$this->permission_[] = $value;} }
  
  // optional bool variesByAccount = 21;

  protected $variesByAccount_;
  public function resetVariesByAccount() { unset($this->variesByAccount_); }
  public function clearVariesByAccount() { unset($this->variesByAccount_); }
  public function hasVariesByAccount() { return isset($this->variesByAccount_); }
  public function getVariesByAccount() { return $this->variesByAccount_; }
  public function setVariesByAccount($value) { $this->variesByAccount_ = (bool)$value; }
  
  // @@protoc_insertion_point(class_scope:AppDetails)
}

// message AppPermission
class AppPermission {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("AppPermission: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->key_ = $tmp;
          $limit-=$len;
          break;
        case 2:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->permissionRequired_ = $tmp > 0 ? true : false;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->key_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, strlen((string)$this->key_));
      fwrite($fp, (string)$this->key_);
    }
    if (!is_null($this->permissionRequired_)) {
      fwrite($fp, "\x10");
      Protobuf::write_varint($fp, (int)$this->permissionRequired_ ? 1 : 0);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->key_)) {
      $l = strlen((string)$this->key_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->permissionRequired_)) {
      $size += 2;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('key_', $this->key_)
         . Protobuf::toString('permissionRequired_', $this->permissionRequired_);
  }
  
  // optional string key = 1;

  protected $key_;
  public function resetKey() { unset($this->key_); }
  public function clearKey() { unset($this->key_); }
  public function hasKey() { return isset($this->key_); }
  public function getKey() { return $this->key_; }
  public function setKey($value) { $this->key_ = (string)$value; }
  
  // optional bool permissionRequired = 2;

  protected $permissionRequired_;
  public function resetPermissionRequired() { unset($this->permissionRequired_); }
  public function clearPermissionRequired() { unset($this->permissionRequired_); }
  public function hasPermissionRequired() { return isset($this->permissionRequired_); }
  public function getPermissionRequired() { return $this->permissionRequired_; }
  public function setPermissionRequired($value) { $this->permissionRequired_ = (bool)$value; }
  
  // @@protoc_insertion_point(class_scope:AppPermission)
}

// message ArtistDetails
class ArtistDetails {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("ArtistDetails: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->detailsUrl_ = $tmp;
          $limit-=$len;
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->name_ = $tmp;
          $limit-=$len;
          break;
        case 3:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->externalLinks_ = new ArtistExternalLinks($fp, $len);
          ASSERT('$len == 0');
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->detailsUrl_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, strlen((string)$this->detailsUrl_));
      fwrite($fp, (string)$this->detailsUrl_);
    }
    if (!is_null($this->name_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, strlen((string)$this->name_));
      fwrite($fp, (string)$this->name_);
    }
    if (!is_null($this->externalLinks_)) {
      fwrite($fp, "\x1a");
      Protobuf::write_varint($fp, $this->externalLinks_->size()); // message
      $this->externalLinks_->write($fp);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->detailsUrl_)) {
      $l = strlen((string)$this->detailsUrl_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->name_)) {
      $l = strlen((string)$this->name_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->externalLinks_)) {
      $l = $this->externalLinks_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('detailsUrl_', $this->detailsUrl_)
         . Protobuf::toString('name_', $this->name_)
         . Protobuf::toString('externalLinks_', $this->externalLinks_);
  }
  
  // optional string detailsUrl = 1;

  protected $detailsUrl_;
  public function resetDetailsUrl() { unset($this->detailsUrl_); }
  public function clearDetailsUrl() { unset($this->detailsUrl_); }
  public function hasDetailsUrl() { return isset($this->detailsUrl_); }
  public function getDetailsUrl() { return $this->detailsUrl_; }
  public function setDetailsUrl($value) { $this->detailsUrl_ = (string)$value; }
  
  // optional string name = 2;

  protected $name_;
  public function resetName() { unset($this->name_); }
  public function clearName() { unset($this->name_); }
  public function hasName() { return isset($this->name_); }
  public function getName() { return $this->name_; }
  public function setName($value) { $this->name_ = (string)$value; }
  
  // optional .ArtistExternalLinks externalLinks = 3;

  protected $externalLinks_;
  public function resetExternalLinks() { unset($this->externalLinks_); }
  public function clearExternalLinks() { unset($this->externalLinks_); }
  public function hasExternalLinks() { return isset($this->externalLinks_); }
  public function getExternalLinks() { return $this->externalLinks_; }
  public function setExternalLinks(ArtistExternalLinks $value) { $this->externalLinks_ = $value; }
  
  // @@protoc_insertion_point(class_scope:ArtistDetails)
}

// message ArtistExternalLinks
class ArtistExternalLinks {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("ArtistExternalLinks: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->websiteUrl_[] = $tmp;
          $limit-=$len;
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->googlePlusProfileUrl_ = $tmp;
          $limit-=$len;
          break;
        case 3:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->youtubeChannelUrl_ = $tmp;
          $limit-=$len;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->websiteUrl_))
      foreach($this->websiteUrl_ as $v) {
        fwrite($fp, "\x0a");
        Protobuf::write_varint($fp, strlen((string)$v));
        fwrite($fp, (string)$v);
      }
    if (!is_null($this->googlePlusProfileUrl_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, strlen((string)$this->googlePlusProfileUrl_));
      fwrite($fp, (string)$this->googlePlusProfileUrl_);
    }
    if (!is_null($this->youtubeChannelUrl_)) {
      fwrite($fp, "\x1a");
      Protobuf::write_varint($fp, strlen((string)$this->youtubeChannelUrl_));
      fwrite($fp, (string)$this->youtubeChannelUrl_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->websiteUrl_))
      foreach($this->websiteUrl_ as $v) {
        $l = strlen((string)$v);
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
    if (!is_null($this->googlePlusProfileUrl_)) {
      $l = strlen((string)$this->googlePlusProfileUrl_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->youtubeChannelUrl_)) {
      $l = strlen((string)$this->youtubeChannelUrl_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('websiteUrl_', $this->websiteUrl_)
         . Protobuf::toString('googlePlusProfileUrl_', $this->googlePlusProfileUrl_)
         . Protobuf::toString('youtubeChannelUrl_', $this->youtubeChannelUrl_);
  }
  
  // repeated string websiteUrl = 1;

  protected $websiteUrl_ = array();
  public function clearWebsiteUrl() { $this->websiteUrl_ = array(); }
  public function getWebsiteUrlCount() { return count($this->websiteUrl_); }
  public function hasWebsiteUrl() { return (count($this->websiteUrl_) > 0); }
  public function indexOfWebsiteUrl($value) { return array_search($value,$this->websiteUrl_);}
  public function removeWebsiteUrl($index) { unset($this->websiteUrl_[$index]); }
  public function removeValWebsiteUrl($value) { $idx = array_search($value,$this->websiteUrl_); if($idx !== FALSE){unset($this->websiteUrl_[$idx]); }}
  public function removeValsWebsiteUrl($values) { foreach($values as $value){$idx = array_search($value,$this->websiteUrl_); if($idx !== FALSE){unset($this->websiteUrl_[$idx]); }}}
  public function pushWebsiteUrl($newvar) { return array_push($this->websiteUrl_,(string)$newvar); }
  public function popWebsiteUrl() { return array_pop($this->websiteUrl_); }
  public function shiftWebsiteUrl() { return array_shift($this->websiteUrl_); }
  public function unshiftWebsiteUrl($newvar) { return array_unshift($this->websiteUrl_,(string)$newvar); }
  public function getWebsiteUrl($index) { return $this->websiteUrl_[$index]; }
  public function getWebsiteUrlArray() { return $this->websiteUrl_; }
  public function setWebsiteUrl($index, $value) {$this->websiteUrl_[$index] = (string)$value;	}
  public function addWebsiteUrl($value) { $this->websiteUrl_[] = (string)$value; }
  public function addAllWebsiteUrl(array $values) { foreach($values as $value) {$this->websiteUrl_[] = (string)$value;} }
  
  // optional string googlePlusProfileUrl = 2;

  protected $googlePlusProfileUrl_;
  public function resetGooglePlusProfileUrl() { unset($this->googlePlusProfileUrl_); }
  public function clearGooglePlusProfileUrl() { unset($this->googlePlusProfileUrl_); }
  public function hasGooglePlusProfileUrl() { return isset($this->googlePlusProfileUrl_); }
  public function getGooglePlusProfileUrl() { return $this->googlePlusProfileUrl_; }
  public function setGooglePlusProfileUrl($value) { $this->googlePlusProfileUrl_ = (string)$value; }
  
  // optional string youtubeChannelUrl = 3;

  protected $youtubeChannelUrl_;
  public function resetYoutubeChannelUrl() { unset($this->youtubeChannelUrl_); }
  public function clearYoutubeChannelUrl() { unset($this->youtubeChannelUrl_); }
  public function hasYoutubeChannelUrl() { return isset($this->youtubeChannelUrl_); }
  public function getYoutubeChannelUrl() { return $this->youtubeChannelUrl_; }
  public function setYoutubeChannelUrl($value) { $this->youtubeChannelUrl_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:ArtistExternalLinks)
}

// message BookDetails
class BookDetails {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("BookDetails: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 4:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->publisher_ = $tmp;
          $limit-=$len;
          break;
        case 5:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->publicationDate_ = $tmp;
          $limit-=$len;
          break;
        case 6:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->isbn_ = $tmp;
          $limit-=$len;
          break;
        case 7:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->numberOfPages_ = $tmp;
          
          break;
        case 17:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->aboutTheAuthor_ = $tmp;
          $limit-=$len;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->publisher_)) {
      fwrite($fp, "\"");
      Protobuf::write_varint($fp, strlen((string)$this->publisher_));
      fwrite($fp, (string)$this->publisher_);
    }
    if (!is_null($this->publicationDate_)) {
      fwrite($fp, "*");
      Protobuf::write_varint($fp, strlen((string)$this->publicationDate_));
      fwrite($fp, (string)$this->publicationDate_);
    }
    if (!is_null($this->isbn_)) {
      fwrite($fp, "2");
      Protobuf::write_varint($fp, strlen((string)$this->isbn_));
      fwrite($fp, (string)$this->isbn_);
    }
    if (!is_null($this->numberOfPages_)) {
      fwrite($fp, "8");
      Protobuf::write_varint($fp, (int)$this->numberOfPages_);
    }
    if (!is_null($this->aboutTheAuthor_)) {
      fwrite($fp, "\x8a\x01");
      Protobuf::write_varint($fp, strlen((string)$this->aboutTheAuthor_));
      fwrite($fp, (string)$this->aboutTheAuthor_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->publisher_)) {
      $l = strlen((string)$this->publisher_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->publicationDate_)) {
      $l = strlen((string)$this->publicationDate_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->isbn_)) {
      $l = strlen((string)$this->isbn_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->numberOfPages_)) {
      $size += 1 + Protobuf::size_varint($this->numberOfPages_);
    }
    if (!is_null($this->aboutTheAuthor_)) {
      $l = strlen((string)$this->aboutTheAuthor_);
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('publisher_', $this->publisher_)
         . Protobuf::toString('publicationDate_', $this->publicationDate_)
         . Protobuf::toString('isbn_', $this->isbn_)
         . Protobuf::toString('numberOfPages_', $this->numberOfPages_)
         . Protobuf::toString('aboutTheAuthor_', $this->aboutTheAuthor_);
  }
  
  // optional string publisher = 4;

  protected $publisher_;
  public function resetPublisher() { unset($this->publisher_); }
  public function clearPublisher() { unset($this->publisher_); }
  public function hasPublisher() { return isset($this->publisher_); }
  public function getPublisher() { return $this->publisher_; }
  public function setPublisher($value) { $this->publisher_ = (string)$value; }
  
  // optional string publicationDate = 5;

  protected $publicationDate_;
  public function resetPublicationDate() { unset($this->publicationDate_); }
  public function clearPublicationDate() { unset($this->publicationDate_); }
  public function hasPublicationDate() { return isset($this->publicationDate_); }
  public function getPublicationDate() { return $this->publicationDate_; }
  public function setPublicationDate($value) { $this->publicationDate_ = (string)$value; }
  
  // optional string isbn = 6;

  protected $isbn_;
  public function resetIsbn() { unset($this->isbn_); }
  public function clearIsbn() { unset($this->isbn_); }
  public function hasIsbn() { return isset($this->isbn_); }
  public function getIsbn() { return $this->isbn_; }
  public function setIsbn($value) { $this->isbn_ = (string)$value; }
  
  // optional int32 numberOfPages = 7;

  protected $numberOfPages_;
  public function resetNumberOfPages() { unset($this->numberOfPages_); }
  public function clearNumberOfPages() { unset($this->numberOfPages_); }
  public function hasNumberOfPages() { return isset($this->numberOfPages_); }
  public function getNumberOfPages() { return $this->numberOfPages_; }
  public function setNumberOfPages($value) { $this->numberOfPages_ = (string)$value; }
  
  // optional string aboutTheAuthor = 17;

  protected $aboutTheAuthor_;
  public function resetAboutTheAuthor() { unset($this->aboutTheAuthor_); }
  public function clearAboutTheAuthor() { unset($this->aboutTheAuthor_); }
  public function hasAboutTheAuthor() { return isset($this->aboutTheAuthor_); }
  public function getAboutTheAuthor() { return $this->aboutTheAuthor_; }
  public function setAboutTheAuthor($value) { $this->aboutTheAuthor_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:BookDetails)
}

// message DocumentDetails
class DocumentDetails {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("DocumentDetails: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->appDetails_ = new AppDetails($fp, $len);
          ASSERT('$len == 0');
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->albumDetails_ = new AlbumDetails($fp, $len);
          ASSERT('$len == 0');
          break;
        case 3:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->artistDetails_ = new ArtistDetails($fp, $len);
          ASSERT('$len == 0');
          break;
        case 4:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->songDetails_ = new SongDetails($fp, $len);
          ASSERT('$len == 0');
          break;
        case 5:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->bookDetails_ = new BookDetails($fp, $len);
          ASSERT('$len == 0');
          break;
        case 6:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->videoDetails_ = new VideoDetails($fp, $len);
          ASSERT('$len == 0');
          break;
        case 7:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->subscriptionDetails_ = new SubscriptionDetails($fp, $len);
          ASSERT('$len == 0');
          break;
        case 8:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->magazineDetails_ = new MagazineDetails($fp, $len);
          ASSERT('$len == 0');
          break;
        case 9:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->tvShowDetails_ = new TvShowDetails($fp, $len);
          ASSERT('$len == 0');
          break;
        case 10:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->tvSeasonDetails_ = new TvSeasonDetails($fp, $len);
          ASSERT('$len == 0');
          break;
        case 11:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->tvEpisodeDetails_ = new TvEpisodeDetails($fp, $len);
          ASSERT('$len == 0');
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->appDetails_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, $this->appDetails_->size()); // message
      $this->appDetails_->write($fp);
    }
    if (!is_null($this->albumDetails_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, $this->albumDetails_->size()); // message
      $this->albumDetails_->write($fp);
    }
    if (!is_null($this->artistDetails_)) {
      fwrite($fp, "\x1a");
      Protobuf::write_varint($fp, $this->artistDetails_->size()); // message
      $this->artistDetails_->write($fp);
    }
    if (!is_null($this->songDetails_)) {
      fwrite($fp, "\"");
      Protobuf::write_varint($fp, $this->songDetails_->size()); // message
      $this->songDetails_->write($fp);
    }
    if (!is_null($this->bookDetails_)) {
      fwrite($fp, "*");
      Protobuf::write_varint($fp, $this->bookDetails_->size()); // message
      $this->bookDetails_->write($fp);
    }
    if (!is_null($this->videoDetails_)) {
      fwrite($fp, "2");
      Protobuf::write_varint($fp, $this->videoDetails_->size()); // message
      $this->videoDetails_->write($fp);
    }
    if (!is_null($this->subscriptionDetails_)) {
      fwrite($fp, ":");
      Protobuf::write_varint($fp, $this->subscriptionDetails_->size()); // message
      $this->subscriptionDetails_->write($fp);
    }
    if (!is_null($this->magazineDetails_)) {
      fwrite($fp, "B");
      Protobuf::write_varint($fp, $this->magazineDetails_->size()); // message
      $this->magazineDetails_->write($fp);
    }
    if (!is_null($this->tvShowDetails_)) {
      fwrite($fp, "J");
      Protobuf::write_varint($fp, $this->tvShowDetails_->size()); // message
      $this->tvShowDetails_->write($fp);
    }
    if (!is_null($this->tvSeasonDetails_)) {
      fwrite($fp, "R");
      Protobuf::write_varint($fp, $this->tvSeasonDetails_->size()); // message
      $this->tvSeasonDetails_->write($fp);
    }
    if (!is_null($this->tvEpisodeDetails_)) {
      fwrite($fp, "Z");
      Protobuf::write_varint($fp, $this->tvEpisodeDetails_->size()); // message
      $this->tvEpisodeDetails_->write($fp);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->appDetails_)) {
      $l = $this->appDetails_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->albumDetails_)) {
      $l = $this->albumDetails_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->artistDetails_)) {
      $l = $this->artistDetails_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->songDetails_)) {
      $l = $this->songDetails_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->bookDetails_)) {
      $l = $this->bookDetails_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->videoDetails_)) {
      $l = $this->videoDetails_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->subscriptionDetails_)) {
      $l = $this->subscriptionDetails_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->magazineDetails_)) {
      $l = $this->magazineDetails_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->tvShowDetails_)) {
      $l = $this->tvShowDetails_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->tvSeasonDetails_)) {
      $l = $this->tvSeasonDetails_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->tvEpisodeDetails_)) {
      $l = $this->tvEpisodeDetails_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('appDetails_', $this->appDetails_)
         . Protobuf::toString('albumDetails_', $this->albumDetails_)
         . Protobuf::toString('artistDetails_', $this->artistDetails_)
         . Protobuf::toString('songDetails_', $this->songDetails_)
         . Protobuf::toString('bookDetails_', $this->bookDetails_)
         . Protobuf::toString('videoDetails_', $this->videoDetails_)
         . Protobuf::toString('subscriptionDetails_', $this->subscriptionDetails_)
         . Protobuf::toString('magazineDetails_', $this->magazineDetails_)
         . Protobuf::toString('tvShowDetails_', $this->tvShowDetails_)
         . Protobuf::toString('tvSeasonDetails_', $this->tvSeasonDetails_)
         . Protobuf::toString('tvEpisodeDetails_', $this->tvEpisodeDetails_);
  }
  
  // optional .AppDetails appDetails = 1;

  protected $appDetails_;
  public function resetAppDetails() { unset($this->appDetails_); }
  public function clearAppDetails() { unset($this->appDetails_); }
  public function hasAppDetails() { return isset($this->appDetails_); }
  public function getAppDetails() { return $this->appDetails_; }
  public function setAppDetails(AppDetails $value) { $this->appDetails_ = $value; }
  
  // optional .AlbumDetails albumDetails = 2;

  protected $albumDetails_;
  public function resetAlbumDetails() { unset($this->albumDetails_); }
  public function clearAlbumDetails() { unset($this->albumDetails_); }
  public function hasAlbumDetails() { return isset($this->albumDetails_); }
  public function getAlbumDetails() { return $this->albumDetails_; }
  public function setAlbumDetails(AlbumDetails $value) { $this->albumDetails_ = $value; }
  
  // optional .ArtistDetails artistDetails = 3;

  protected $artistDetails_;
  public function resetArtistDetails() { unset($this->artistDetails_); }
  public function clearArtistDetails() { unset($this->artistDetails_); }
  public function hasArtistDetails() { return isset($this->artistDetails_); }
  public function getArtistDetails() { return $this->artistDetails_; }
  public function setArtistDetails(ArtistDetails $value) { $this->artistDetails_ = $value; }
  
  // optional .SongDetails songDetails = 4;

  protected $songDetails_;
  public function resetSongDetails() { unset($this->songDetails_); }
  public function clearSongDetails() { unset($this->songDetails_); }
  public function hasSongDetails() { return isset($this->songDetails_); }
  public function getSongDetails() { return $this->songDetails_; }
  public function setSongDetails(SongDetails $value) { $this->songDetails_ = $value; }
  
  // optional .BookDetails bookDetails = 5;

  protected $bookDetails_;
  public function resetBookDetails() { unset($this->bookDetails_); }
  public function clearBookDetails() { unset($this->bookDetails_); }
  public function hasBookDetails() { return isset($this->bookDetails_); }
  public function getBookDetails() { return $this->bookDetails_; }
  public function setBookDetails(BookDetails $value) { $this->bookDetails_ = $value; }
  
  // optional .VideoDetails videoDetails = 6;

  protected $videoDetails_;
  public function resetVideoDetails() { unset($this->videoDetails_); }
  public function clearVideoDetails() { unset($this->videoDetails_); }
  public function hasVideoDetails() { return isset($this->videoDetails_); }
  public function getVideoDetails() { return $this->videoDetails_; }
  public function setVideoDetails(VideoDetails $value) { $this->videoDetails_ = $value; }
  
  // optional .SubscriptionDetails subscriptionDetails = 7;

  protected $subscriptionDetails_;
  public function resetSubscriptionDetails() { unset($this->subscriptionDetails_); }
  public function clearSubscriptionDetails() { unset($this->subscriptionDetails_); }
  public function hasSubscriptionDetails() { return isset($this->subscriptionDetails_); }
  public function getSubscriptionDetails() { return $this->subscriptionDetails_; }
  public function setSubscriptionDetails(SubscriptionDetails $value) { $this->subscriptionDetails_ = $value; }
  
  // optional .MagazineDetails magazineDetails = 8;

  protected $magazineDetails_;
  public function resetMagazineDetails() { unset($this->magazineDetails_); }
  public function clearMagazineDetails() { unset($this->magazineDetails_); }
  public function hasMagazineDetails() { return isset($this->magazineDetails_); }
  public function getMagazineDetails() { return $this->magazineDetails_; }
  public function setMagazineDetails(MagazineDetails $value) { $this->magazineDetails_ = $value; }
  
  // optional .TvShowDetails tvShowDetails = 9;

  protected $tvShowDetails_;
  public function resetTvShowDetails() { unset($this->tvShowDetails_); }
  public function clearTvShowDetails() { unset($this->tvShowDetails_); }
  public function hasTvShowDetails() { return isset($this->tvShowDetails_); }
  public function getTvShowDetails() { return $this->tvShowDetails_; }
  public function setTvShowDetails(TvShowDetails $value) { $this->tvShowDetails_ = $value; }
  
  // optional .TvSeasonDetails tvSeasonDetails = 10;

  protected $tvSeasonDetails_;
  public function resetTvSeasonDetails() { unset($this->tvSeasonDetails_); }
  public function clearTvSeasonDetails() { unset($this->tvSeasonDetails_); }
  public function hasTvSeasonDetails() { return isset($this->tvSeasonDetails_); }
  public function getTvSeasonDetails() { return $this->tvSeasonDetails_; }
  public function setTvSeasonDetails(TvSeasonDetails $value) { $this->tvSeasonDetails_ = $value; }
  
  // optional .TvEpisodeDetails tvEpisodeDetails = 11;

  protected $tvEpisodeDetails_;
  public function resetTvEpisodeDetails() { unset($this->tvEpisodeDetails_); }
  public function clearTvEpisodeDetails() { unset($this->tvEpisodeDetails_); }
  public function hasTvEpisodeDetails() { return isset($this->tvEpisodeDetails_); }
  public function getTvEpisodeDetails() { return $this->tvEpisodeDetails_; }
  public function setTvEpisodeDetails(TvEpisodeDetails $value) { $this->tvEpisodeDetails_ = $value; }
  
  // @@protoc_insertion_point(class_scope:DocumentDetails)
}

// message FileMetadata
class FileMetadata {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("FileMetadata: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->fileType_ = $tmp;
          
          break;
        case 2:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->versionCode_ = $tmp;
          
          break;
        case 3:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->size_ = $tmp;
          
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->fileType_)) {
      fwrite($fp, "\x08");
      Protobuf::write_varint($fp, (int)$this->fileType_);
    }
    if (!is_null($this->versionCode_)) {
      fwrite($fp, "\x10");
      Protobuf::write_varint($fp, (int)$this->versionCode_);
    }
    if (!is_null($this->size_)) {
      fwrite($fp, "\x18");
      Protobuf::write_varint($fp, (int)$this->size_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->fileType_)) {
      $size += 1 + Protobuf::size_varint($this->fileType_);
    }
    if (!is_null($this->versionCode_)) {
      $size += 1 + Protobuf::size_varint($this->versionCode_);
    }
    if (!is_null($this->size_)) {
      $size += 1 + Protobuf::size_varint($this->size_);
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('fileType_', $this->fileType_)
         . Protobuf::toString('versionCode_', $this->versionCode_)
         . Protobuf::toString('size_', $this->size_);
  }
  
  // optional int32 fileType = 1;

  protected $fileType_;
  public function resetFileType() { unset($this->fileType_); }
  public function clearFileType() { unset($this->fileType_); }
  public function hasFileType() { return isset($this->fileType_); }
  public function getFileType() { return $this->fileType_; }
  public function setFileType($value) { $this->fileType_ = (string)$value; }
  
  // optional int32 versionCode = 2;

  protected $versionCode_;
  public function resetVersionCode() { unset($this->versionCode_); }
  public function clearVersionCode() { unset($this->versionCode_); }
  public function hasVersionCode() { return isset($this->versionCode_); }
  public function getVersionCode() { return $this->versionCode_; }
  public function setVersionCode($value) { $this->versionCode_ = (string)$value; }
  
  // optional int64 size = 3;

  protected $size_;
  public function resetSize() { unset($this->size_); }
  public function clearSize() { unset($this->size_); }
  public function hasSize() { return isset($this->size_); }
  public function getSize() { return $this->size_; }
  public function setSize($value) { $this->size_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:FileMetadata)
}

// message MagazineDetails
class MagazineDetails {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("MagazineDetails: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->parentDetailsUrl_ = $tmp;
          $limit-=$len;
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->deviceAvailabilityDescriptionHtml_ = $tmp;
          $limit-=$len;
          break;
        case 3:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->psvDescription_ = $tmp;
          $limit-=$len;
          break;
        case 4:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->deliveryFrequencyDescription_ = $tmp;
          $limit-=$len;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->parentDetailsUrl_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, strlen((string)$this->parentDetailsUrl_));
      fwrite($fp, (string)$this->parentDetailsUrl_);
    }
    if (!is_null($this->deviceAvailabilityDescriptionHtml_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, strlen((string)$this->deviceAvailabilityDescriptionHtml_));
      fwrite($fp, (string)$this->deviceAvailabilityDescriptionHtml_);
    }
    if (!is_null($this->psvDescription_)) {
      fwrite($fp, "\x1a");
      Protobuf::write_varint($fp, strlen((string)$this->psvDescription_));
      fwrite($fp, (string)$this->psvDescription_);
    }
    if (!is_null($this->deliveryFrequencyDescription_)) {
      fwrite($fp, "\"");
      Protobuf::write_varint($fp, strlen((string)$this->deliveryFrequencyDescription_));
      fwrite($fp, (string)$this->deliveryFrequencyDescription_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->parentDetailsUrl_)) {
      $l = strlen((string)$this->parentDetailsUrl_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->deviceAvailabilityDescriptionHtml_)) {
      $l = strlen((string)$this->deviceAvailabilityDescriptionHtml_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->psvDescription_)) {
      $l = strlen((string)$this->psvDescription_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->deliveryFrequencyDescription_)) {
      $l = strlen((string)$this->deliveryFrequencyDescription_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('parentDetailsUrl_', $this->parentDetailsUrl_)
         . Protobuf::toString('deviceAvailabilityDescriptionHtml_', $this->deviceAvailabilityDescriptionHtml_)
         . Protobuf::toString('psvDescription_', $this->psvDescription_)
         . Protobuf::toString('deliveryFrequencyDescription_', $this->deliveryFrequencyDescription_);
  }
  
  // optional string parentDetailsUrl = 1;

  protected $parentDetailsUrl_;
  public function resetParentDetailsUrl() { unset($this->parentDetailsUrl_); }
  public function clearParentDetailsUrl() { unset($this->parentDetailsUrl_); }
  public function hasParentDetailsUrl() { return isset($this->parentDetailsUrl_); }
  public function getParentDetailsUrl() { return $this->parentDetailsUrl_; }
  public function setParentDetailsUrl($value) { $this->parentDetailsUrl_ = (string)$value; }
  
  // optional string deviceAvailabilityDescriptionHtml = 2;

  protected $deviceAvailabilityDescriptionHtml_;
  public function resetDeviceAvailabilityDescriptionHtml() { unset($this->deviceAvailabilityDescriptionHtml_); }
  public function clearDeviceAvailabilityDescriptionHtml() { unset($this->deviceAvailabilityDescriptionHtml_); }
  public function hasDeviceAvailabilityDescriptionHtml() { return isset($this->deviceAvailabilityDescriptionHtml_); }
  public function getDeviceAvailabilityDescriptionHtml() { return $this->deviceAvailabilityDescriptionHtml_; }
  public function setDeviceAvailabilityDescriptionHtml($value) { $this->deviceAvailabilityDescriptionHtml_ = (string)$value; }
  
  // optional string psvDescription = 3;

  protected $psvDescription_;
  public function resetPsvDescription() { unset($this->psvDescription_); }
  public function clearPsvDescription() { unset($this->psvDescription_); }
  public function hasPsvDescription() { return isset($this->psvDescription_); }
  public function getPsvDescription() { return $this->psvDescription_; }
  public function setPsvDescription($value) { $this->psvDescription_ = (string)$value; }
  
  // optional string deliveryFrequencyDescription = 4;

  protected $deliveryFrequencyDescription_;
  public function resetDeliveryFrequencyDescription() { unset($this->deliveryFrequencyDescription_); }
  public function clearDeliveryFrequencyDescription() { unset($this->deliveryFrequencyDescription_); }
  public function hasDeliveryFrequencyDescription() { return isset($this->deliveryFrequencyDescription_); }
  public function getDeliveryFrequencyDescription() { return $this->deliveryFrequencyDescription_; }
  public function setDeliveryFrequencyDescription($value) { $this->deliveryFrequencyDescription_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:MagazineDetails)
}

// message MusicDetails
class MusicDetails {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("MusicDetails: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->censoring_ = $tmp;
          
          break;
        case 2:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->durationSec_ = $tmp;
          
          break;
        case 3:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->originalReleaseDate_ = $tmp;
          $limit-=$len;
          break;
        case 4:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->label_ = $tmp;
          $limit-=$len;
          break;
        case 5:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->artist_[] = new ArtistDetails($fp, $len);
          ASSERT('$len == 0');
          break;
        case 6:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->genre_[] = $tmp;
          $limit-=$len;
          break;
        case 7:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->releaseDate_ = $tmp;
          $limit-=$len;
          break;
        case 8:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->releaseType_[] = $tmp;
          
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->censoring_)) {
      fwrite($fp, "\x08");
      Protobuf::write_varint($fp, (int)$this->censoring_);
    }
    if (!is_null($this->durationSec_)) {
      fwrite($fp, "\x10");
      Protobuf::write_varint($fp, (int)$this->durationSec_);
    }
    if (!is_null($this->originalReleaseDate_)) {
      fwrite($fp, "\x1a");
      Protobuf::write_varint($fp, strlen((string)$this->originalReleaseDate_));
      fwrite($fp, (string)$this->originalReleaseDate_);
    }
    if (!is_null($this->label_)) {
      fwrite($fp, "\"");
      Protobuf::write_varint($fp, strlen((string)$this->label_));
      fwrite($fp, (string)$this->label_);
    }
    if (!is_null($this->artist_))
      foreach($this->artist_ as $v) {
        fwrite($fp, "*");
        Protobuf::write_varint($fp, $v->size()); // message
        $v->write($fp);
      }
    if (!is_null($this->genre_))
      foreach($this->genre_ as $v) {
        fwrite($fp, "2");
        Protobuf::write_varint($fp, strlen((string)$v));
        fwrite($fp, (string)$v);
      }
    if (!is_null($this->releaseDate_)) {
      fwrite($fp, ":");
      Protobuf::write_varint($fp, strlen((string)$this->releaseDate_));
      fwrite($fp, (string)$this->releaseDate_);
    }
    if (!is_null($this->releaseType_))
      foreach($this->releaseType_ as $v) {
        fwrite($fp, "@");
        Protobuf::write_varint($fp, (int)$v);
      }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->censoring_)) {
      $size += 1 + Protobuf::size_varint($this->censoring_);
    }
    if (!is_null($this->durationSec_)) {
      $size += 1 + Protobuf::size_varint($this->durationSec_);
    }
    if (!is_null($this->originalReleaseDate_)) {
      $l = strlen((string)$this->originalReleaseDate_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->label_)) {
      $l = strlen((string)$this->label_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->artist_))
      foreach($this->artist_ as $v) {
        $l = $v->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
    if (!is_null($this->genre_))
      foreach($this->genre_ as $v) {
        $l = strlen((string)$v);
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
    if (!is_null($this->releaseDate_)) {
      $l = strlen((string)$this->releaseDate_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->releaseType_))
      foreach($this->releaseType_ as $v) {
        $size += 1 + Protobuf::size_varint($v);
      }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('censoring_', $this->censoring_)
         . Protobuf::toString('durationSec_', $this->durationSec_)
         . Protobuf::toString('originalReleaseDate_', $this->originalReleaseDate_)
         . Protobuf::toString('label_', $this->label_)
         . Protobuf::toString('artist_', $this->artist_)
         . Protobuf::toString('genre_', $this->genre_)
         . Protobuf::toString('releaseDate_', $this->releaseDate_)
         . Protobuf::toString('releaseType_', $this->releaseType_);
  }
  
  // optional int32 censoring = 1;

  protected $censoring_;
  public function resetCensoring() { unset($this->censoring_); }
  public function clearCensoring() { unset($this->censoring_); }
  public function hasCensoring() { return isset($this->censoring_); }
  public function getCensoring() { return $this->censoring_; }
  public function setCensoring($value) { $this->censoring_ = (string)$value; }
  
  // optional int32 durationSec = 2;

  protected $durationSec_;
  public function resetDurationSec() { unset($this->durationSec_); }
  public function clearDurationSec() { unset($this->durationSec_); }
  public function hasDurationSec() { return isset($this->durationSec_); }
  public function getDurationSec() { return $this->durationSec_; }
  public function setDurationSec($value) { $this->durationSec_ = (string)$value; }
  
  // optional string originalReleaseDate = 3;

  protected $originalReleaseDate_;
  public function resetOriginalReleaseDate() { unset($this->originalReleaseDate_); }
  public function clearOriginalReleaseDate() { unset($this->originalReleaseDate_); }
  public function hasOriginalReleaseDate() { return isset($this->originalReleaseDate_); }
  public function getOriginalReleaseDate() { return $this->originalReleaseDate_; }
  public function setOriginalReleaseDate($value) { $this->originalReleaseDate_ = (string)$value; }
  
  // optional string label = 4;

  protected $label_;
  public function resetLabel() { unset($this->label_); }
  public function clearLabel() { unset($this->label_); }
  public function hasLabel() { return isset($this->label_); }
  public function getLabel() { return $this->label_; }
  public function setLabel($value) { $this->label_ = (string)$value; }
  
  // repeated .ArtistDetails artist = 5;

  protected $artist_ = array();
  public function clearArtist() { $this->artist_ = array(); }
  public function getArtistCount() { return count($this->artist_); }
  public function hasArtist() { return (count($this->artist_) > 0); }
  public function indexOfArtist($value) { return array_search($value,$this->artist_);}
  public function removeArtist($index) { unset($this->artist_[$index]); }
  public function removeValArtist($value) { $idx = array_search($value,$this->artist_); if($idx !== FALSE){unset($this->artist_[$idx]); }}
  public function removeValsArtist($values) { foreach($values as $value){$idx = array_search($value,$this->artist_); if($idx !== FALSE){unset($this->artist_[$idx]); }}}
  public function pushArtist($newvar) { return array_push($this->artist_,$newvar); }
  public function popArtist() { return array_pop($this->artist_); }
  public function shiftArtist() { return array_shift($this->artist_); }
  public function unshiftArtist($newvar) { return array_unshift($this->artist_,$newvar); }
  public function getArtist($index) { return $this->artist_[$index]; }
  public function getArtistArray() { return $this->artist_; }
  public function setArtist($index, $value) {$this->artist_[$index] = $value;	}
  public function addArtist($value) { $this->artist_[] = $value; }
  public function addAllArtist(array $values) { foreach($values as $value) {$this->artist_[] = $value;} }
  
  // repeated string genre = 6;

  protected $genre_ = array();
  public function clearGenre() { $this->genre_ = array(); }
  public function getGenreCount() { return count($this->genre_); }
  public function hasGenre() { return (count($this->genre_) > 0); }
  public function indexOfGenre($value) { return array_search($value,$this->genre_);}
  public function removeGenre($index) { unset($this->genre_[$index]); }
  public function removeValGenre($value) { $idx = array_search($value,$this->genre_); if($idx !== FALSE){unset($this->genre_[$idx]); }}
  public function removeValsGenre($values) { foreach($values as $value){$idx = array_search($value,$this->genre_); if($idx !== FALSE){unset($this->genre_[$idx]); }}}
  public function pushGenre($newvar) { return array_push($this->genre_,(string)$newvar); }
  public function popGenre() { return array_pop($this->genre_); }
  public function shiftGenre() { return array_shift($this->genre_); }
  public function unshiftGenre($newvar) { return array_unshift($this->genre_,(string)$newvar); }
  public function getGenre($index) { return $this->genre_[$index]; }
  public function getGenreArray() { return $this->genre_; }
  public function setGenre($index, $value) {$this->genre_[$index] = (string)$value;	}
  public function addGenre($value) { $this->genre_[] = (string)$value; }
  public function addAllGenre(array $values) { foreach($values as $value) {$this->genre_[] = (string)$value;} }
  
  // optional string releaseDate = 7;

  protected $releaseDate_;
  public function resetReleaseDate() { unset($this->releaseDate_); }
  public function clearReleaseDate() { unset($this->releaseDate_); }
  public function hasReleaseDate() { return isset($this->releaseDate_); }
  public function getReleaseDate() { return $this->releaseDate_; }
  public function setReleaseDate($value) { $this->releaseDate_ = (string)$value; }
  
  // repeated int32 releaseType = 8;

  protected $releaseType_ = array();
  public function clearReleaseType() { $this->releaseType_ = array(); }
  public function getReleaseTypeCount() { return count($this->releaseType_); }
  public function hasReleaseType() { return (count($this->releaseType_) > 0); }
  public function indexOfReleaseType($value) { return array_search($value,$this->releaseType_);}
  public function removeReleaseType($index) { unset($this->releaseType_[$index]); }
  public function removeValReleaseType($value) { $idx = array_search($value,$this->releaseType_); if($idx !== FALSE){unset($this->releaseType_[$idx]); }}
  public function removeValsReleaseType($values) { foreach($values as $value){$idx = array_search($value,$this->releaseType_); if($idx !== FALSE){unset($this->releaseType_[$idx]); }}}
  public function pushReleaseType($newvar) { return array_push($this->releaseType_,(string)$newvar); }
  public function popReleaseType() { return array_pop($this->releaseType_); }
  public function shiftReleaseType() { return array_shift($this->releaseType_); }
  public function unshiftReleaseType($newvar) { return array_unshift($this->releaseType_,(string)$newvar); }
  public function getReleaseType($index) { return $this->releaseType_[$index]; }
  public function getReleaseTypeArray() { return $this->releaseType_; }
  public function setReleaseType($index, $value) {$this->releaseType_[$index] = (string)$value;	}
  public function addReleaseType($value) { $this->releaseType_[] = (string)$value; }
  public function addAllReleaseType(array $values) { foreach($values as $value) {$this->releaseType_[] = (string)$value;} }
  
  // @@protoc_insertion_point(class_scope:MusicDetails)
}

// message ProductDetails
class ProductDetails {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("ProductDetails: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->title_ = $tmp;
          $limit-=$len;
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->section_[] = new ProductDetailsSection($fp, $len);
          ASSERT('$len == 0');
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->title_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, strlen((string)$this->title_));
      fwrite($fp, (string)$this->title_);
    }
    if (!is_null($this->section_))
      foreach($this->section_ as $v) {
        fwrite($fp, "\x12");
        Protobuf::write_varint($fp, $v->size()); // message
        $v->write($fp);
      }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->title_)) {
      $l = strlen((string)$this->title_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->section_))
      foreach($this->section_ as $v) {
        $l = $v->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('title_', $this->title_)
         . Protobuf::toString('section_', $this->section_);
  }
  
  // optional string title = 1;

  protected $title_;
  public function resetTitle() { unset($this->title_); }
  public function clearTitle() { unset($this->title_); }
  public function hasTitle() { return isset($this->title_); }
  public function getTitle() { return $this->title_; }
  public function setTitle($value) { $this->title_ = (string)$value; }
  
  // repeated .ProductDetailsSection section = 2;

  protected $section_ = array();
  public function clearSection() { $this->section_ = array(); }
  public function getSectionCount() { return count($this->section_); }
  public function hasSection() { return (count($this->section_) > 0); }
  public function indexOfSection($value) { return array_search($value,$this->section_);}
  public function removeSection($index) { unset($this->section_[$index]); }
  public function removeValSection($value) { $idx = array_search($value,$this->section_); if($idx !== FALSE){unset($this->section_[$idx]); }}
  public function removeValsSection($values) { foreach($values as $value){$idx = array_search($value,$this->section_); if($idx !== FALSE){unset($this->section_[$idx]); }}}
  public function pushSection($newvar) { return array_push($this->section_,$newvar); }
  public function popSection() { return array_pop($this->section_); }
  public function shiftSection() { return array_shift($this->section_); }
  public function unshiftSection($newvar) { return array_unshift($this->section_,$newvar); }
  public function getSection($index) { return $this->section_[$index]; }
  public function getSectionArray() { return $this->section_; }
  public function setSection($index, $value) {$this->section_[$index] = $value;	}
  public function addSection($value) { $this->section_[] = $value; }
  public function addAllSection(array $values) { foreach($values as $value) {$this->section_[] = $value;} }
  
  // @@protoc_insertion_point(class_scope:ProductDetails)
}

// message ProductDetailsDescription
class ProductDetailsDescription {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("ProductDetailsDescription: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->image_ = new Image($fp, $len);
          ASSERT('$len == 0');
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->description_ = $tmp;
          $limit-=$len;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->image_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, $this->image_->size()); // message
      $this->image_->write($fp);
    }
    if (!is_null($this->description_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, strlen((string)$this->description_));
      fwrite($fp, (string)$this->description_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->image_)) {
      $l = $this->image_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->description_)) {
      $l = strlen((string)$this->description_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('image_', $this->image_)
         . Protobuf::toString('description_', $this->description_);
  }
  
  // optional .Image image = 1;

  protected $image_;
  public function resetImage() { unset($this->image_); }
  public function clearImage() { unset($this->image_); }
  public function hasImage() { return isset($this->image_); }
  public function getImage() { return $this->image_; }
  public function setImage(Image $value) { $this->image_ = $value; }
  
  // optional string description = 2;

  protected $description_;
  public function resetDescription() { unset($this->description_); }
  public function clearDescription() { unset($this->description_); }
  public function hasDescription() { return isset($this->description_); }
  public function getDescription() { return $this->description_; }
  public function setDescription($value) { $this->description_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:ProductDetailsDescription)
}

// message ProductDetailsSection
class ProductDetailsSection {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("ProductDetailsSection: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->title_ = $tmp;
          $limit-=$len;
          break;
        case 3:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->description_[] = new ProductDetailsDescription($fp, $len);
          ASSERT('$len == 0');
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->title_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, strlen((string)$this->title_));
      fwrite($fp, (string)$this->title_);
    }
    if (!is_null($this->description_))
      foreach($this->description_ as $v) {
        fwrite($fp, "\x1a");
        Protobuf::write_varint($fp, $v->size()); // message
        $v->write($fp);
      }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->title_)) {
      $l = strlen((string)$this->title_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->description_))
      foreach($this->description_ as $v) {
        $l = $v->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('title_', $this->title_)
         . Protobuf::toString('description_', $this->description_);
  }
  
  // optional string title = 1;

  protected $title_;
  public function resetTitle() { unset($this->title_); }
  public function clearTitle() { unset($this->title_); }
  public function hasTitle() { return isset($this->title_); }
  public function getTitle() { return $this->title_; }
  public function setTitle($value) { $this->title_ = (string)$value; }
  
  // repeated .ProductDetailsDescription description = 3;

  protected $description_ = array();
  public function clearDescription() { $this->description_ = array(); }
  public function getDescriptionCount() { return count($this->description_); }
  public function hasDescription() { return (count($this->description_) > 0); }
  public function indexOfDescription($value) { return array_search($value,$this->description_);}
  public function removeDescription($index) { unset($this->description_[$index]); }
  public function removeValDescription($value) { $idx = array_search($value,$this->description_); if($idx !== FALSE){unset($this->description_[$idx]); }}
  public function removeValsDescription($values) { foreach($values as $value){$idx = array_search($value,$this->description_); if($idx !== FALSE){unset($this->description_[$idx]); }}}
  public function pushDescription($newvar) { return array_push($this->description_,$newvar); }
  public function popDescription() { return array_pop($this->description_); }
  public function shiftDescription() { return array_shift($this->description_); }
  public function unshiftDescription($newvar) { return array_unshift($this->description_,$newvar); }
  public function getDescription($index) { return $this->description_[$index]; }
  public function getDescriptionArray() { return $this->description_; }
  public function setDescription($index, $value) {$this->description_[$index] = $value;	}
  public function addDescription($value) { $this->description_[] = $value; }
  public function addAllDescription(array $values) { foreach($values as $value) {$this->description_[] = $value;} }
  
  // @@protoc_insertion_point(class_scope:ProductDetailsSection)
}

// message SongDetails
class SongDetails {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("SongDetails: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->name_ = $tmp;
          $limit-=$len;
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->details_ = new MusicDetails($fp, $len);
          ASSERT('$len == 0');
          break;
        case 3:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->albumName_ = $tmp;
          $limit-=$len;
          break;
        case 4:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->trackNumber_ = $tmp;
          
          break;
        case 5:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->previewUrl_ = $tmp;
          $limit-=$len;
          break;
        case 6:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->displayArtist_ = new ArtistDetails($fp, $len);
          ASSERT('$len == 0');
          break;
        case 7:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->badge_ = new Badge($fp, $len);
          ASSERT('$len == 0');
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->name_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, strlen((string)$this->name_));
      fwrite($fp, (string)$this->name_);
    }
    if (!is_null($this->details_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, $this->details_->size()); // message
      $this->details_->write($fp);
    }
    if (!is_null($this->albumName_)) {
      fwrite($fp, "\x1a");
      Protobuf::write_varint($fp, strlen((string)$this->albumName_));
      fwrite($fp, (string)$this->albumName_);
    }
    if (!is_null($this->trackNumber_)) {
      fwrite($fp, " ");
      Protobuf::write_varint($fp, (int)$this->trackNumber_);
    }
    if (!is_null($this->previewUrl_)) {
      fwrite($fp, "*");
      Protobuf::write_varint($fp, strlen((string)$this->previewUrl_));
      fwrite($fp, (string)$this->previewUrl_);
    }
    if (!is_null($this->displayArtist_)) {
      fwrite($fp, "2");
      Protobuf::write_varint($fp, $this->displayArtist_->size()); // message
      $this->displayArtist_->write($fp);
    }
    if (!is_null($this->badge_)) {
      fwrite($fp, ":");
      Protobuf::write_varint($fp, $this->badge_->size()); // message
      $this->badge_->write($fp);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->name_)) {
      $l = strlen((string)$this->name_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->details_)) {
      $l = $this->details_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->albumName_)) {
      $l = strlen((string)$this->albumName_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->trackNumber_)) {
      $size += 1 + Protobuf::size_varint($this->trackNumber_);
    }
    if (!is_null($this->previewUrl_)) {
      $l = strlen((string)$this->previewUrl_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->displayArtist_)) {
      $l = $this->displayArtist_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->badge_)) {
      $l = $this->badge_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('name_', $this->name_)
         . Protobuf::toString('details_', $this->details_)
         . Protobuf::toString('albumName_', $this->albumName_)
         . Protobuf::toString('trackNumber_', $this->trackNumber_)
         . Protobuf::toString('previewUrl_', $this->previewUrl_)
         . Protobuf::toString('displayArtist_', $this->displayArtist_)
         . Protobuf::toString('badge_', $this->badge_);
  }
  
  // optional string name = 1;

  protected $name_;
  public function resetName() { unset($this->name_); }
  public function clearName() { unset($this->name_); }
  public function hasName() { return isset($this->name_); }
  public function getName() { return $this->name_; }
  public function setName($value) { $this->name_ = (string)$value; }
  
  // optional .MusicDetails details = 2;

  protected $details_;
  public function resetDetails() { unset($this->details_); }
  public function clearDetails() { unset($this->details_); }
  public function hasDetails() { return isset($this->details_); }
  public function getDetails() { return $this->details_; }
  public function setDetails(MusicDetails $value) { $this->details_ = $value; }
  
  // optional string albumName = 3;

  protected $albumName_;
  public function resetAlbumName() { unset($this->albumName_); }
  public function clearAlbumName() { unset($this->albumName_); }
  public function hasAlbumName() { return isset($this->albumName_); }
  public function getAlbumName() { return $this->albumName_; }
  public function setAlbumName($value) { $this->albumName_ = (string)$value; }
  
  // optional int32 trackNumber = 4;

  protected $trackNumber_;
  public function resetTrackNumber() { unset($this->trackNumber_); }
  public function clearTrackNumber() { unset($this->trackNumber_); }
  public function hasTrackNumber() { return isset($this->trackNumber_); }
  public function getTrackNumber() { return $this->trackNumber_; }
  public function setTrackNumber($value) { $this->trackNumber_ = (string)$value; }
  
  // optional string previewUrl = 5;

  protected $previewUrl_;
  public function resetPreviewUrl() { unset($this->previewUrl_); }
  public function clearPreviewUrl() { unset($this->previewUrl_); }
  public function hasPreviewUrl() { return isset($this->previewUrl_); }
  public function getPreviewUrl() { return $this->previewUrl_; }
  public function setPreviewUrl($value) { $this->previewUrl_ = (string)$value; }
  
  // optional .ArtistDetails displayArtist = 6;

  protected $displayArtist_;
  public function resetDisplayArtist() { unset($this->displayArtist_); }
  public function clearDisplayArtist() { unset($this->displayArtist_); }
  public function hasDisplayArtist() { return isset($this->displayArtist_); }
  public function getDisplayArtist() { return $this->displayArtist_; }
  public function setDisplayArtist(ArtistDetails $value) { $this->displayArtist_ = $value; }
  
  // optional .Badge badge = 7;

  protected $badge_;
  public function resetBadge() { unset($this->badge_); }
  public function clearBadge() { unset($this->badge_); }
  public function hasBadge() { return isset($this->badge_); }
  public function getBadge() { return $this->badge_; }
  public function setBadge(Badge $value) { $this->badge_ = $value; }
  
  // @@protoc_insertion_point(class_scope:SongDetails)
}

// message SubscriptionDetails
class SubscriptionDetails {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("SubscriptionDetails: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->subscriptionPeriod_ = $tmp;
          
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->subscriptionPeriod_)) {
      fwrite($fp, "\x08");
      Protobuf::write_varint($fp, (int)$this->subscriptionPeriod_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->subscriptionPeriod_)) {
      $size += 1 + Protobuf::size_varint($this->subscriptionPeriod_);
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('subscriptionPeriod_', $this->subscriptionPeriod_);
  }
  
  // optional int32 subscriptionPeriod = 1;

  protected $subscriptionPeriod_;
  public function resetSubscriptionPeriod() { unset($this->subscriptionPeriod_); }
  public function clearSubscriptionPeriod() { unset($this->subscriptionPeriod_); }
  public function hasSubscriptionPeriod() { return isset($this->subscriptionPeriod_); }
  public function getSubscriptionPeriod() { return $this->subscriptionPeriod_; }
  public function setSubscriptionPeriod($value) { $this->subscriptionPeriod_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:SubscriptionDetails)
}

// message Trailer
class Trailer {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("Trailer: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->trailerId_ = $tmp;
          $limit-=$len;
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->title_ = $tmp;
          $limit-=$len;
          break;
        case 3:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->thumbnailUrl_ = $tmp;
          $limit-=$len;
          break;
        case 4:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->watchUrl_ = $tmp;
          $limit-=$len;
          break;
        case 5:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->duration_ = $tmp;
          $limit-=$len;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->trailerId_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, strlen((string)$this->trailerId_));
      fwrite($fp, (string)$this->trailerId_);
    }
    if (!is_null($this->title_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, strlen((string)$this->title_));
      fwrite($fp, (string)$this->title_);
    }
    if (!is_null($this->thumbnailUrl_)) {
      fwrite($fp, "\x1a");
      Protobuf::write_varint($fp, strlen((string)$this->thumbnailUrl_));
      fwrite($fp, (string)$this->thumbnailUrl_);
    }
    if (!is_null($this->watchUrl_)) {
      fwrite($fp, "\"");
      Protobuf::write_varint($fp, strlen((string)$this->watchUrl_));
      fwrite($fp, (string)$this->watchUrl_);
    }
    if (!is_null($this->duration_)) {
      fwrite($fp, "*");
      Protobuf::write_varint($fp, strlen((string)$this->duration_));
      fwrite($fp, (string)$this->duration_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->trailerId_)) {
      $l = strlen((string)$this->trailerId_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->title_)) {
      $l = strlen((string)$this->title_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->thumbnailUrl_)) {
      $l = strlen((string)$this->thumbnailUrl_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->watchUrl_)) {
      $l = strlen((string)$this->watchUrl_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->duration_)) {
      $l = strlen((string)$this->duration_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('trailerId_', $this->trailerId_)
         . Protobuf::toString('title_', $this->title_)
         . Protobuf::toString('thumbnailUrl_', $this->thumbnailUrl_)
         . Protobuf::toString('watchUrl_', $this->watchUrl_)
         . Protobuf::toString('duration_', $this->duration_);
  }
  
  // optional string trailerId = 1;

  protected $trailerId_;
  public function resetTrailerId() { unset($this->trailerId_); }
  public function clearTrailerId() { unset($this->trailerId_); }
  public function hasTrailerId() { return isset($this->trailerId_); }
  public function getTrailerId() { return $this->trailerId_; }
  public function setTrailerId($value) { $this->trailerId_ = (string)$value; }
  
  // optional string title = 2;

  protected $title_;
  public function resetTitle() { unset($this->title_); }
  public function clearTitle() { unset($this->title_); }
  public function hasTitle() { return isset($this->title_); }
  public function getTitle() { return $this->title_; }
  public function setTitle($value) { $this->title_ = (string)$value; }
  
  // optional string thumbnailUrl = 3;

  protected $thumbnailUrl_;
  public function resetThumbnailUrl() { unset($this->thumbnailUrl_); }
  public function clearThumbnailUrl() { unset($this->thumbnailUrl_); }
  public function hasThumbnailUrl() { return isset($this->thumbnailUrl_); }
  public function getThumbnailUrl() { return $this->thumbnailUrl_; }
  public function setThumbnailUrl($value) { $this->thumbnailUrl_ = (string)$value; }
  
  // optional string watchUrl = 4;

  protected $watchUrl_;
  public function resetWatchUrl() { unset($this->watchUrl_); }
  public function clearWatchUrl() { unset($this->watchUrl_); }
  public function hasWatchUrl() { return isset($this->watchUrl_); }
  public function getWatchUrl() { return $this->watchUrl_; }
  public function setWatchUrl($value) { $this->watchUrl_ = (string)$value; }
  
  // optional string duration = 5;

  protected $duration_;
  public function resetDuration() { unset($this->duration_); }
  public function clearDuration() { unset($this->duration_); }
  public function hasDuration() { return isset($this->duration_); }
  public function getDuration() { return $this->duration_; }
  public function setDuration($value) { $this->duration_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:Trailer)
}

// message TvEpisodeDetails
class TvEpisodeDetails {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("TvEpisodeDetails: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->parentDetailsUrl_ = $tmp;
          $limit-=$len;
          break;
        case 2:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->episodeIndex_ = $tmp;
          
          break;
        case 3:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->releaseDate_ = $tmp;
          $limit-=$len;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->parentDetailsUrl_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, strlen((string)$this->parentDetailsUrl_));
      fwrite($fp, (string)$this->parentDetailsUrl_);
    }
    if (!is_null($this->episodeIndex_)) {
      fwrite($fp, "\x10");
      Protobuf::write_varint($fp, (int)$this->episodeIndex_);
    }
    if (!is_null($this->releaseDate_)) {
      fwrite($fp, "\x1a");
      Protobuf::write_varint($fp, strlen((string)$this->releaseDate_));
      fwrite($fp, (string)$this->releaseDate_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->parentDetailsUrl_)) {
      $l = strlen((string)$this->parentDetailsUrl_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->episodeIndex_)) {
      $size += 1 + Protobuf::size_varint($this->episodeIndex_);
    }
    if (!is_null($this->releaseDate_)) {
      $l = strlen((string)$this->releaseDate_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('parentDetailsUrl_', $this->parentDetailsUrl_)
         . Protobuf::toString('episodeIndex_', $this->episodeIndex_)
         . Protobuf::toString('releaseDate_', $this->releaseDate_);
  }
  
  // optional string parentDetailsUrl = 1;

  protected $parentDetailsUrl_;
  public function resetParentDetailsUrl() { unset($this->parentDetailsUrl_); }
  public function clearParentDetailsUrl() { unset($this->parentDetailsUrl_); }
  public function hasParentDetailsUrl() { return isset($this->parentDetailsUrl_); }
  public function getParentDetailsUrl() { return $this->parentDetailsUrl_; }
  public function setParentDetailsUrl($value) { $this->parentDetailsUrl_ = (string)$value; }
  
  // optional int32 episodeIndex = 2;

  protected $episodeIndex_;
  public function resetEpisodeIndex() { unset($this->episodeIndex_); }
  public function clearEpisodeIndex() { unset($this->episodeIndex_); }
  public function hasEpisodeIndex() { return isset($this->episodeIndex_); }
  public function getEpisodeIndex() { return $this->episodeIndex_; }
  public function setEpisodeIndex($value) { $this->episodeIndex_ = (string)$value; }
  
  // optional string releaseDate = 3;

  protected $releaseDate_;
  public function resetReleaseDate() { unset($this->releaseDate_); }
  public function clearReleaseDate() { unset($this->releaseDate_); }
  public function hasReleaseDate() { return isset($this->releaseDate_); }
  public function getReleaseDate() { return $this->releaseDate_; }
  public function setReleaseDate($value) { $this->releaseDate_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:TvEpisodeDetails)
}

// message TvSeasonDetails
class TvSeasonDetails {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("TvSeasonDetails: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->parentDetailsUrl_ = $tmp;
          $limit-=$len;
          break;
        case 2:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->seasonIndex_ = $tmp;
          
          break;
        case 3:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->releaseDate_ = $tmp;
          $limit-=$len;
          break;
        case 4:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->broadcaster_ = $tmp;
          $limit-=$len;
          break;
        case 5:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->episodeCount_ = $tmp;
          
          break;
        case 6:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->expectedEpisodeCount_ = $tmp;
          
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->parentDetailsUrl_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, strlen((string)$this->parentDetailsUrl_));
      fwrite($fp, (string)$this->parentDetailsUrl_);
    }
    if (!is_null($this->seasonIndex_)) {
      fwrite($fp, "\x10");
      Protobuf::write_varint($fp, (int)$this->seasonIndex_);
    }
    if (!is_null($this->releaseDate_)) {
      fwrite($fp, "\x1a");
      Protobuf::write_varint($fp, strlen((string)$this->releaseDate_));
      fwrite($fp, (string)$this->releaseDate_);
    }
    if (!is_null($this->broadcaster_)) {
      fwrite($fp, "\"");
      Protobuf::write_varint($fp, strlen((string)$this->broadcaster_));
      fwrite($fp, (string)$this->broadcaster_);
    }
    if (!is_null($this->episodeCount_)) {
      fwrite($fp, "(");
      Protobuf::write_varint($fp, (int)$this->episodeCount_);
    }
    if (!is_null($this->expectedEpisodeCount_)) {
      fwrite($fp, "0");
      Protobuf::write_varint($fp, (int)$this->expectedEpisodeCount_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->parentDetailsUrl_)) {
      $l = strlen((string)$this->parentDetailsUrl_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->seasonIndex_)) {
      $size += 1 + Protobuf::size_varint($this->seasonIndex_);
    }
    if (!is_null($this->releaseDate_)) {
      $l = strlen((string)$this->releaseDate_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->broadcaster_)) {
      $l = strlen((string)$this->broadcaster_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->episodeCount_)) {
      $size += 1 + Protobuf::size_varint($this->episodeCount_);
    }
    if (!is_null($this->expectedEpisodeCount_)) {
      $size += 1 + Protobuf::size_varint($this->expectedEpisodeCount_);
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('parentDetailsUrl_', $this->parentDetailsUrl_)
         . Protobuf::toString('seasonIndex_', $this->seasonIndex_)
         . Protobuf::toString('releaseDate_', $this->releaseDate_)
         . Protobuf::toString('broadcaster_', $this->broadcaster_)
         . Protobuf::toString('episodeCount_', $this->episodeCount_)
         . Protobuf::toString('expectedEpisodeCount_', $this->expectedEpisodeCount_);
  }
  
  // optional string parentDetailsUrl = 1;

  protected $parentDetailsUrl_;
  public function resetParentDetailsUrl() { unset($this->parentDetailsUrl_); }
  public function clearParentDetailsUrl() { unset($this->parentDetailsUrl_); }
  public function hasParentDetailsUrl() { return isset($this->parentDetailsUrl_); }
  public function getParentDetailsUrl() { return $this->parentDetailsUrl_; }
  public function setParentDetailsUrl($value) { $this->parentDetailsUrl_ = (string)$value; }
  
  // optional int32 seasonIndex = 2;

  protected $seasonIndex_;
  public function resetSeasonIndex() { unset($this->seasonIndex_); }
  public function clearSeasonIndex() { unset($this->seasonIndex_); }
  public function hasSeasonIndex() { return isset($this->seasonIndex_); }
  public function getSeasonIndex() { return $this->seasonIndex_; }
  public function setSeasonIndex($value) { $this->seasonIndex_ = (string)$value; }
  
  // optional string releaseDate = 3;

  protected $releaseDate_;
  public function resetReleaseDate() { unset($this->releaseDate_); }
  public function clearReleaseDate() { unset($this->releaseDate_); }
  public function hasReleaseDate() { return isset($this->releaseDate_); }
  public function getReleaseDate() { return $this->releaseDate_; }
  public function setReleaseDate($value) { $this->releaseDate_ = (string)$value; }
  
  // optional string broadcaster = 4;

  protected $broadcaster_;
  public function resetBroadcaster() { unset($this->broadcaster_); }
  public function clearBroadcaster() { unset($this->broadcaster_); }
  public function hasBroadcaster() { return isset($this->broadcaster_); }
  public function getBroadcaster() { return $this->broadcaster_; }
  public function setBroadcaster($value) { $this->broadcaster_ = (string)$value; }
  
  // optional int32 episodeCount = 5;

  protected $episodeCount_;
  public function resetEpisodeCount() { unset($this->episodeCount_); }
  public function clearEpisodeCount() { unset($this->episodeCount_); }
  public function hasEpisodeCount() { return isset($this->episodeCount_); }
  public function getEpisodeCount() { return $this->episodeCount_; }
  public function setEpisodeCount($value) { $this->episodeCount_ = (string)$value; }
  
  // optional int32 expectedEpisodeCount = 6;

  protected $expectedEpisodeCount_;
  public function resetExpectedEpisodeCount() { unset($this->expectedEpisodeCount_); }
  public function clearExpectedEpisodeCount() { unset($this->expectedEpisodeCount_); }
  public function hasExpectedEpisodeCount() { return isset($this->expectedEpisodeCount_); }
  public function getExpectedEpisodeCount() { return $this->expectedEpisodeCount_; }
  public function setExpectedEpisodeCount($value) { $this->expectedEpisodeCount_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:TvSeasonDetails)
}

// message TvShowDetails
class TvShowDetails {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("TvShowDetails: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->seasonCount_ = $tmp;
          
          break;
        case 2:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->startYear_ = $tmp;
          
          break;
        case 3:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->endYear_ = $tmp;
          
          break;
        case 4:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->broadcaster_ = $tmp;
          $limit-=$len;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->seasonCount_)) {
      fwrite($fp, "\x08");
      Protobuf::write_varint($fp, (int)$this->seasonCount_);
    }
    if (!is_null($this->startYear_)) {
      fwrite($fp, "\x10");
      Protobuf::write_varint($fp, (int)$this->startYear_);
    }
    if (!is_null($this->endYear_)) {
      fwrite($fp, "\x18");
      Protobuf::write_varint($fp, (int)$this->endYear_);
    }
    if (!is_null($this->broadcaster_)) {
      fwrite($fp, "\"");
      Protobuf::write_varint($fp, strlen((string)$this->broadcaster_));
      fwrite($fp, (string)$this->broadcaster_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->seasonCount_)) {
      $size += 1 + Protobuf::size_varint($this->seasonCount_);
    }
    if (!is_null($this->startYear_)) {
      $size += 1 + Protobuf::size_varint($this->startYear_);
    }
    if (!is_null($this->endYear_)) {
      $size += 1 + Protobuf::size_varint($this->endYear_);
    }
    if (!is_null($this->broadcaster_)) {
      $l = strlen((string)$this->broadcaster_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('seasonCount_', $this->seasonCount_)
         . Protobuf::toString('startYear_', $this->startYear_)
         . Protobuf::toString('endYear_', $this->endYear_)
         . Protobuf::toString('broadcaster_', $this->broadcaster_);
  }
  
  // optional int32 seasonCount = 1;

  protected $seasonCount_;
  public function resetSeasonCount() { unset($this->seasonCount_); }
  public function clearSeasonCount() { unset($this->seasonCount_); }
  public function hasSeasonCount() { return isset($this->seasonCount_); }
  public function getSeasonCount() { return $this->seasonCount_; }
  public function setSeasonCount($value) { $this->seasonCount_ = (string)$value; }
  
  // optional int32 startYear = 2;

  protected $startYear_;
  public function resetStartYear() { unset($this->startYear_); }
  public function clearStartYear() { unset($this->startYear_); }
  public function hasStartYear() { return isset($this->startYear_); }
  public function getStartYear() { return $this->startYear_; }
  public function setStartYear($value) { $this->startYear_ = (string)$value; }
  
  // optional int32 endYear = 3;

  protected $endYear_;
  public function resetEndYear() { unset($this->endYear_); }
  public function clearEndYear() { unset($this->endYear_); }
  public function hasEndYear() { return isset($this->endYear_); }
  public function getEndYear() { return $this->endYear_; }
  public function setEndYear($value) { $this->endYear_ = (string)$value; }
  
  // optional string broadcaster = 4;

  protected $broadcaster_;
  public function resetBroadcaster() { unset($this->broadcaster_); }
  public function clearBroadcaster() { unset($this->broadcaster_); }
  public function hasBroadcaster() { return isset($this->broadcaster_); }
  public function getBroadcaster() { return $this->broadcaster_; }
  public function setBroadcaster($value) { $this->broadcaster_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:TvShowDetails)
}

// message VideoCredit
class VideoCredit {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("VideoCredit: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->creditType_ = $tmp;
          
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->credit_ = $tmp;
          $limit-=$len;
          break;
        case 3:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->name_[] = $tmp;
          $limit-=$len;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->creditType_)) {
      fwrite($fp, "\x08");
      Protobuf::write_varint($fp, (int)$this->creditType_);
    }
    if (!is_null($this->credit_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, strlen((string)$this->credit_));
      fwrite($fp, (string)$this->credit_);
    }
    if (!is_null($this->name_))
      foreach($this->name_ as $v) {
        fwrite($fp, "\x1a");
        Protobuf::write_varint($fp, strlen((string)$v));
        fwrite($fp, (string)$v);
      }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->creditType_)) {
      $size += 1 + Protobuf::size_varint($this->creditType_);
    }
    if (!is_null($this->credit_)) {
      $l = strlen((string)$this->credit_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->name_))
      foreach($this->name_ as $v) {
        $l = strlen((string)$v);
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('creditType_', $this->creditType_)
         . Protobuf::toString('credit_', $this->credit_)
         . Protobuf::toString('name_', $this->name_);
  }
  
  // optional int32 creditType = 1;

  protected $creditType_;
  public function resetCreditType() { unset($this->creditType_); }
  public function clearCreditType() { unset($this->creditType_); }
  public function hasCreditType() { return isset($this->creditType_); }
  public function getCreditType() { return $this->creditType_; }
  public function setCreditType($value) { $this->creditType_ = (string)$value; }
  
  // optional string credit = 2;

  protected $credit_;
  public function resetCredit() { unset($this->credit_); }
  public function clearCredit() { unset($this->credit_); }
  public function hasCredit() { return isset($this->credit_); }
  public function getCredit() { return $this->credit_; }
  public function setCredit($value) { $this->credit_ = (string)$value; }
  
  // repeated string name = 3;

  protected $name_ = array();
  public function clearName() { $this->name_ = array(); }
  public function getNameCount() { return count($this->name_); }
  public function hasName() { return (count($this->name_) > 0); }
  public function indexOfName($value) { return array_search($value,$this->name_);}
  public function removeName($index) { unset($this->name_[$index]); }
  public function removeValName($value) { $idx = array_search($value,$this->name_); if($idx !== FALSE){unset($this->name_[$idx]); }}
  public function removeValsName($values) { foreach($values as $value){$idx = array_search($value,$this->name_); if($idx !== FALSE){unset($this->name_[$idx]); }}}
  public function pushName($newvar) { return array_push($this->name_,(string)$newvar); }
  public function popName() { return array_pop($this->name_); }
  public function shiftName() { return array_shift($this->name_); }
  public function unshiftName($newvar) { return array_unshift($this->name_,(string)$newvar); }
  public function getName($index) { return $this->name_[$index]; }
  public function getNameArray() { return $this->name_; }
  public function setName($index, $value) {$this->name_[$index] = (string)$value;	}
  public function addName($value) { $this->name_[] = (string)$value; }
  public function addAllName(array $values) { foreach($values as $value) {$this->name_[] = (string)$value;} }
  
  // @@protoc_insertion_point(class_scope:VideoCredit)
}

// message VideoDetails
class VideoDetails {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("VideoDetails: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->credit_[] = new VideoCredit($fp, $len);
          ASSERT('$len == 0');
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->duration_ = $tmp;
          $limit-=$len;
          break;
        case 3:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->releaseDate_ = $tmp;
          $limit-=$len;
          break;
        case 4:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->contentRating_ = $tmp;
          $limit-=$len;
          break;
        case 5:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->likes_ = $tmp;
          
          break;
        case 6:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->dislikes_ = $tmp;
          
          break;
        case 7:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->genre_[] = $tmp;
          $limit-=$len;
          break;
        case 8:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->trailer_[] = new Trailer($fp, $len);
          ASSERT('$len == 0');
          break;
        case 9:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->rentalTerm_[] = new VideoRentalTerm($fp, $len);
          ASSERT('$len == 0');
          break;
        case 10:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->audioLanguage_[] = $tmp;
          $limit-=$len;
          break;
        case 11:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->captionLanguage_[] = $tmp;
          $limit-=$len;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->credit_))
      foreach($this->credit_ as $v) {
        fwrite($fp, "\x0a");
        Protobuf::write_varint($fp, $v->size()); // message
        $v->write($fp);
      }
    if (!is_null($this->duration_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, strlen((string)$this->duration_));
      fwrite($fp, (string)$this->duration_);
    }
    if (!is_null($this->releaseDate_)) {
      fwrite($fp, "\x1a");
      Protobuf::write_varint($fp, strlen((string)$this->releaseDate_));
      fwrite($fp, (string)$this->releaseDate_);
    }
    if (!is_null($this->contentRating_)) {
      fwrite($fp, "\"");
      Protobuf::write_varint($fp, strlen((string)$this->contentRating_));
      fwrite($fp, (string)$this->contentRating_);
    }
    if (!is_null($this->likes_)) {
      fwrite($fp, "(");
      Protobuf::write_varint($fp, (int)$this->likes_);
    }
    if (!is_null($this->dislikes_)) {
      fwrite($fp, "0");
      Protobuf::write_varint($fp, (int)$this->dislikes_);
    }
    if (!is_null($this->genre_))
      foreach($this->genre_ as $v) {
        fwrite($fp, ":");
        Protobuf::write_varint($fp, strlen((string)$v));
        fwrite($fp, (string)$v);
      }
    if (!is_null($this->trailer_))
      foreach($this->trailer_ as $v) {
        fwrite($fp, "B");
        Protobuf::write_varint($fp, $v->size()); // message
        $v->write($fp);
      }
    if (!is_null($this->rentalTerm_))
      foreach($this->rentalTerm_ as $v) {
        fwrite($fp, "J");
        Protobuf::write_varint($fp, $v->size()); // message
        $v->write($fp);
      }
    if (!is_null($this->audioLanguage_))
      foreach($this->audioLanguage_ as $v) {
        fwrite($fp, "R");
        Protobuf::write_varint($fp, strlen((string)$v));
        fwrite($fp, (string)$v);
      }
    if (!is_null($this->captionLanguage_))
      foreach($this->captionLanguage_ as $v) {
        fwrite($fp, "Z");
        Protobuf::write_varint($fp, strlen((string)$v));
        fwrite($fp, (string)$v);
      }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->credit_))
      foreach($this->credit_ as $v) {
        $l = $v->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
    if (!is_null($this->duration_)) {
      $l = strlen((string)$this->duration_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->releaseDate_)) {
      $l = strlen((string)$this->releaseDate_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->contentRating_)) {
      $l = strlen((string)$this->contentRating_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->likes_)) {
      $size += 1 + Protobuf::size_varint($this->likes_);
    }
    if (!is_null($this->dislikes_)) {
      $size += 1 + Protobuf::size_varint($this->dislikes_);
    }
    if (!is_null($this->genre_))
      foreach($this->genre_ as $v) {
        $l = strlen((string)$v);
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
    if (!is_null($this->trailer_))
      foreach($this->trailer_ as $v) {
        $l = $v->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
    if (!is_null($this->rentalTerm_))
      foreach($this->rentalTerm_ as $v) {
        $l = $v->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
    if (!is_null($this->audioLanguage_))
      foreach($this->audioLanguage_ as $v) {
        $l = strlen((string)$v);
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
    if (!is_null($this->captionLanguage_))
      foreach($this->captionLanguage_ as $v) {
        $l = strlen((string)$v);
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('credit_', $this->credit_)
         . Protobuf::toString('duration_', $this->duration_)
         . Protobuf::toString('releaseDate_', $this->releaseDate_)
         . Protobuf::toString('contentRating_', $this->contentRating_)
         . Protobuf::toString('likes_', $this->likes_)
         . Protobuf::toString('dislikes_', $this->dislikes_)
         . Protobuf::toString('genre_', $this->genre_)
         . Protobuf::toString('trailer_', $this->trailer_)
         . Protobuf::toString('rentalTerm_', $this->rentalTerm_)
         . Protobuf::toString('audioLanguage_', $this->audioLanguage_)
         . Protobuf::toString('captionLanguage_', $this->captionLanguage_);
  }
  
  // repeated .VideoCredit credit = 1;

  protected $credit_ = array();
  public function clearCredit() { $this->credit_ = array(); }
  public function getCreditCount() { return count($this->credit_); }
  public function hasCredit() { return (count($this->credit_) > 0); }
  public function indexOfCredit($value) { return array_search($value,$this->credit_);}
  public function removeCredit($index) { unset($this->credit_[$index]); }
  public function removeValCredit($value) { $idx = array_search($value,$this->credit_); if($idx !== FALSE){unset($this->credit_[$idx]); }}
  public function removeValsCredit($values) { foreach($values as $value){$idx = array_search($value,$this->credit_); if($idx !== FALSE){unset($this->credit_[$idx]); }}}
  public function pushCredit($newvar) { return array_push($this->credit_,$newvar); }
  public function popCredit() { return array_pop($this->credit_); }
  public function shiftCredit() { return array_shift($this->credit_); }
  public function unshiftCredit($newvar) { return array_unshift($this->credit_,$newvar); }
  public function getCredit($index) { return $this->credit_[$index]; }
  public function getCreditArray() { return $this->credit_; }
  public function setCredit($index, $value) {$this->credit_[$index] = $value;	}
  public function addCredit($value) { $this->credit_[] = $value; }
  public function addAllCredit(array $values) { foreach($values as $value) {$this->credit_[] = $value;} }
  
  // optional string duration = 2;

  protected $duration_;
  public function resetDuration() { unset($this->duration_); }
  public function clearDuration() { unset($this->duration_); }
  public function hasDuration() { return isset($this->duration_); }
  public function getDuration() { return $this->duration_; }
  public function setDuration($value) { $this->duration_ = (string)$value; }
  
  // optional string releaseDate = 3;

  protected $releaseDate_;
  public function resetReleaseDate() { unset($this->releaseDate_); }
  public function clearReleaseDate() { unset($this->releaseDate_); }
  public function hasReleaseDate() { return isset($this->releaseDate_); }
  public function getReleaseDate() { return $this->releaseDate_; }
  public function setReleaseDate($value) { $this->releaseDate_ = (string)$value; }
  
  // optional string contentRating = 4;

  protected $contentRating_;
  public function resetContentRating() { unset($this->contentRating_); }
  public function clearContentRating() { unset($this->contentRating_); }
  public function hasContentRating() { return isset($this->contentRating_); }
  public function getContentRating() { return $this->contentRating_; }
  public function setContentRating($value) { $this->contentRating_ = (string)$value; }
  
  // optional int64 likes = 5;

  protected $likes_;
  public function resetLikes() { unset($this->likes_); }
  public function clearLikes() { unset($this->likes_); }
  public function hasLikes() { return isset($this->likes_); }
  public function getLikes() { return $this->likes_; }
  public function setLikes($value) { $this->likes_ = (string)$value; }
  
  // optional int64 dislikes = 6;

  protected $dislikes_;
  public function resetDislikes() { unset($this->dislikes_); }
  public function clearDislikes() { unset($this->dislikes_); }
  public function hasDislikes() { return isset($this->dislikes_); }
  public function getDislikes() { return $this->dislikes_; }
  public function setDislikes($value) { $this->dislikes_ = (string)$value; }
  
  // repeated string genre = 7;

  protected $genre_ = array();
  public function clearGenre() { $this->genre_ = array(); }
  public function getGenreCount() { return count($this->genre_); }
  public function hasGenre() { return (count($this->genre_) > 0); }
  public function indexOfGenre($value) { return array_search($value,$this->genre_);}
  public function removeGenre($index) { unset($this->genre_[$index]); }
  public function removeValGenre($value) { $idx = array_search($value,$this->genre_); if($idx !== FALSE){unset($this->genre_[$idx]); }}
  public function removeValsGenre($values) { foreach($values as $value){$idx = array_search($value,$this->genre_); if($idx !== FALSE){unset($this->genre_[$idx]); }}}
  public function pushGenre($newvar) { return array_push($this->genre_,(string)$newvar); }
  public function popGenre() { return array_pop($this->genre_); }
  public function shiftGenre() { return array_shift($this->genre_); }
  public function unshiftGenre($newvar) { return array_unshift($this->genre_,(string)$newvar); }
  public function getGenre($index) { return $this->genre_[$index]; }
  public function getGenreArray() { return $this->genre_; }
  public function setGenre($index, $value) {$this->genre_[$index] = (string)$value;	}
  public function addGenre($value) { $this->genre_[] = (string)$value; }
  public function addAllGenre(array $values) { foreach($values as $value) {$this->genre_[] = (string)$value;} }
  
  // repeated .Trailer trailer = 8;

  protected $trailer_ = array();
  public function clearTrailer() { $this->trailer_ = array(); }
  public function getTrailerCount() { return count($this->trailer_); }
  public function hasTrailer() { return (count($this->trailer_) > 0); }
  public function indexOfTrailer($value) { return array_search($value,$this->trailer_);}
  public function removeTrailer($index) { unset($this->trailer_[$index]); }
  public function removeValTrailer($value) { $idx = array_search($value,$this->trailer_); if($idx !== FALSE){unset($this->trailer_[$idx]); }}
  public function removeValsTrailer($values) { foreach($values as $value){$idx = array_search($value,$this->trailer_); if($idx !== FALSE){unset($this->trailer_[$idx]); }}}
  public function pushTrailer($newvar) { return array_push($this->trailer_,$newvar); }
  public function popTrailer() { return array_pop($this->trailer_); }
  public function shiftTrailer() { return array_shift($this->trailer_); }
  public function unshiftTrailer($newvar) { return array_unshift($this->trailer_,$newvar); }
  public function getTrailer($index) { return $this->trailer_[$index]; }
  public function getTrailerArray() { return $this->trailer_; }
  public function setTrailer($index, $value) {$this->trailer_[$index] = $value;	}
  public function addTrailer($value) { $this->trailer_[] = $value; }
  public function addAllTrailer(array $values) { foreach($values as $value) {$this->trailer_[] = $value;} }
  
  // repeated .VideoRentalTerm rentalTerm = 9;

  protected $rentalTerm_ = array();
  public function clearRentalTerm() { $this->rentalTerm_ = array(); }
  public function getRentalTermCount() { return count($this->rentalTerm_); }
  public function hasRentalTerm() { return (count($this->rentalTerm_) > 0); }
  public function indexOfRentalTerm($value) { return array_search($value,$this->rentalTerm_);}
  public function removeRentalTerm($index) { unset($this->rentalTerm_[$index]); }
  public function removeValRentalTerm($value) { $idx = array_search($value,$this->rentalTerm_); if($idx !== FALSE){unset($this->rentalTerm_[$idx]); }}
  public function removeValsRentalTerm($values) { foreach($values as $value){$idx = array_search($value,$this->rentalTerm_); if($idx !== FALSE){unset($this->rentalTerm_[$idx]); }}}
  public function pushRentalTerm($newvar) { return array_push($this->rentalTerm_,$newvar); }
  public function popRentalTerm() { return array_pop($this->rentalTerm_); }
  public function shiftRentalTerm() { return array_shift($this->rentalTerm_); }
  public function unshiftRentalTerm($newvar) { return array_unshift($this->rentalTerm_,$newvar); }
  public function getRentalTerm($index) { return $this->rentalTerm_[$index]; }
  public function getRentalTermArray() { return $this->rentalTerm_; }
  public function setRentalTerm($index, $value) {$this->rentalTerm_[$index] = $value;	}
  public function addRentalTerm($value) { $this->rentalTerm_[] = $value; }
  public function addAllRentalTerm(array $values) { foreach($values as $value) {$this->rentalTerm_[] = $value;} }
  
  // repeated string audioLanguage = 10;

  protected $audioLanguage_ = array();
  public function clearAudioLanguage() { $this->audioLanguage_ = array(); }
  public function getAudioLanguageCount() { return count($this->audioLanguage_); }
  public function hasAudioLanguage() { return (count($this->audioLanguage_) > 0); }
  public function indexOfAudioLanguage($value) { return array_search($value,$this->audioLanguage_);}
  public function removeAudioLanguage($index) { unset($this->audioLanguage_[$index]); }
  public function removeValAudioLanguage($value) { $idx = array_search($value,$this->audioLanguage_); if($idx !== FALSE){unset($this->audioLanguage_[$idx]); }}
  public function removeValsAudioLanguage($values) { foreach($values as $value){$idx = array_search($value,$this->audioLanguage_); if($idx !== FALSE){unset($this->audioLanguage_[$idx]); }}}
  public function pushAudioLanguage($newvar) { return array_push($this->audioLanguage_,(string)$newvar); }
  public function popAudioLanguage() { return array_pop($this->audioLanguage_); }
  public function shiftAudioLanguage() { return array_shift($this->audioLanguage_); }
  public function unshiftAudioLanguage($newvar) { return array_unshift($this->audioLanguage_,(string)$newvar); }
  public function getAudioLanguage($index) { return $this->audioLanguage_[$index]; }
  public function getAudioLanguageArray() { return $this->audioLanguage_; }
  public function setAudioLanguage($index, $value) {$this->audioLanguage_[$index] = (string)$value;	}
  public function addAudioLanguage($value) { $this->audioLanguage_[] = (string)$value; }
  public function addAllAudioLanguage(array $values) { foreach($values as $value) {$this->audioLanguage_[] = (string)$value;} }
  
  // repeated string captionLanguage = 11;

  protected $captionLanguage_ = array();
  public function clearCaptionLanguage() { $this->captionLanguage_ = array(); }
  public function getCaptionLanguageCount() { return count($this->captionLanguage_); }
  public function hasCaptionLanguage() { return (count($this->captionLanguage_) > 0); }
  public function indexOfCaptionLanguage($value) { return array_search($value,$this->captionLanguage_);}
  public function removeCaptionLanguage($index) { unset($this->captionLanguage_[$index]); }
  public function removeValCaptionLanguage($value) { $idx = array_search($value,$this->captionLanguage_); if($idx !== FALSE){unset($this->captionLanguage_[$idx]); }}
  public function removeValsCaptionLanguage($values) { foreach($values as $value){$idx = array_search($value,$this->captionLanguage_); if($idx !== FALSE){unset($this->captionLanguage_[$idx]); }}}
  public function pushCaptionLanguage($newvar) { return array_push($this->captionLanguage_,(string)$newvar); }
  public function popCaptionLanguage() { return array_pop($this->captionLanguage_); }
  public function shiftCaptionLanguage() { return array_shift($this->captionLanguage_); }
  public function unshiftCaptionLanguage($newvar) { return array_unshift($this->captionLanguage_,(string)$newvar); }
  public function getCaptionLanguage($index) { return $this->captionLanguage_[$index]; }
  public function getCaptionLanguageArray() { return $this->captionLanguage_; }
  public function setCaptionLanguage($index, $value) {$this->captionLanguage_[$index] = (string)$value;	}
  public function addCaptionLanguage($value) { $this->captionLanguage_[] = (string)$value; }
  public function addAllCaptionLanguage(array $values) { foreach($values as $value) {$this->captionLanguage_[] = (string)$value;} }
  
  // @@protoc_insertion_point(class_scope:VideoDetails)
}


// group VideoRentalTerm.Term
class VideoRentalTerm_Term {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("VideoRentalTerm_Term: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 4:
          ASSERT('$wire == 4');
          break 2;
        case 5:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->header_ = $tmp;
          $limit-=$len;
          break;
        case 6:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->body_ = $tmp;
          $limit-=$len;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->header_)) {
      fwrite($fp, "*");
      Protobuf::write_varint($fp, strlen((string)$this->header_));
      fwrite($fp, (string)$this->header_);
    }
    if (!is_null($this->body_)) {
      fwrite($fp, "2");
      Protobuf::write_varint($fp, strlen((string)$this->body_));
      fwrite($fp, (string)$this->body_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->header_)) {
      $l = strlen((string)$this->header_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->body_)) {
      $l = strlen((string)$this->body_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('header_', $this->header_)
         . Protobuf::toString('body_', $this->body_);
  }
  
  // optional string header = 5;

  protected $header_;
  public function resetHeader() { unset($this->header_); }
  public function clearHeader() { unset($this->header_); }
  public function hasHeader() { return isset($this->header_); }
  public function getHeader() { return $this->header_; }
  public function setHeader($value) { $this->header_ = (string)$value; }
  
  // optional string body = 6;

  protected $body_;
  public function resetBody() { unset($this->body_); }
  public function clearBody() { unset($this->body_); }
  public function hasBody() { return isset($this->body_); }
  public function getBody() { return $this->body_; }
  public function setBody($value) { $this->body_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:VideoRentalTerm.Term)
}

// message VideoRentalTerm
class VideoRentalTerm {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("VideoRentalTerm: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->offerType_ = $tmp;
          
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->offerAbbreviation_ = $tmp;
          $limit-=$len;
          break;
        case 3:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->rentalHeader_ = $tmp;
          $limit-=$len;
          break;
        case 4:
          ASSERT('$wire == 3');
          $this->term_[] = new VideoRentalTerm_Term($fp, $limit);
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->offerType_)) {
      fwrite($fp, "\x08");
      Protobuf::write_varint($fp, (int)$this->offerType_);
    }
    if (!is_null($this->offerAbbreviation_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, strlen((string)$this->offerAbbreviation_));
      fwrite($fp, (string)$this->offerAbbreviation_);
    }
    if (!is_null($this->rentalHeader_)) {
      fwrite($fp, "\x1a");
      Protobuf::write_varint($fp, strlen((string)$this->rentalHeader_));
      fwrite($fp, (string)$this->rentalHeader_);
    }
    if (!is_null($this->term_))
      foreach($this->term_ as $v) {
        fwrite($fp, "#");
        $v->write($fp); // group
        fwrite($fp, "$");
      }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->offerType_)) {
      $size += 1 + Protobuf::size_varint($this->offerType_);
    }
    if (!is_null($this->offerAbbreviation_)) {
      $l = strlen((string)$this->offerAbbreviation_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->rentalHeader_)) {
      $l = strlen((string)$this->rentalHeader_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->term_))
      foreach($this->term_ as $v) {
        $size += 2 + $v->size();
      }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('offerType_', $this->offerType_)
         . Protobuf::toString('offerAbbreviation_', $this->offerAbbreviation_)
         . Protobuf::toString('rentalHeader_', $this->rentalHeader_)
         . Protobuf::toString('term_', $this->term_);
  }
  
  // optional int32 offerType = 1;

  protected $offerType_;
  public function resetOfferType() { unset($this->offerType_); }
  public function clearOfferType() { unset($this->offerType_); }
  public function hasOfferType() { return isset($this->offerType_); }
  public function getOfferType() { return $this->offerType_; }
  public function setOfferType($value) { $this->offerType_ = (string)$value; }
  
  // optional string offerAbbreviation = 2;

  protected $offerAbbreviation_;
  public function resetOfferAbbreviation() { unset($this->offerAbbreviation_); }
  public function clearOfferAbbreviation() { unset($this->offerAbbreviation_); }
  public function hasOfferAbbreviation() { return isset($this->offerAbbreviation_); }
  public function getOfferAbbreviation() { return $this->offerAbbreviation_; }
  public function setOfferAbbreviation($value) { $this->offerAbbreviation_ = (string)$value; }
  
  // optional string rentalHeader = 3;

  protected $rentalHeader_;
  public function resetRentalHeader() { unset($this->rentalHeader_); }
  public function clearRentalHeader() { unset($this->rentalHeader_); }
  public function hasRentalHeader() { return isset($this->rentalHeader_); }
  public function getRentalHeader() { return $this->rentalHeader_; }
  public function setRentalHeader($value) { $this->rentalHeader_ = (string)$value; }
  
  // repeated group Term = 4
  protected $term_ = array();
  public function clearTerm() { $this->term_ = array(); }
  public function getTermCount() { return count($this->term_); }
  public function hasTerm() { return (count($this->term_) > 0); }
  public function indexOfTerm($value) { return array_search($value,$this->term_);}
  public function removeTerm($index) { unset($this->term_[$index]); }
  public function removeValTerm($value) { $idx = array_search($value,$this->term_); if($idx !== FALSE){unset($this->term_[$idx]); }}
  public function removeValsTerm($values) { foreach($values as $value){$idx = array_search($value,$this->term_); if($idx !== FALSE){unset($this->term_[$idx]); }}}
  public function pushTerm($newvar) { return array_push($this->term_,$newvar); }
  public function popTerm() { return array_pop($this->term_); }
  public function shiftTerm() { return array_shift($this->term_); }
  public function unshiftTerm($newvar) { return array_unshift($this->term_,$newvar); }
  public function getTerm($index) { return $this->term_[$index]; }
  public function getTermArray() { return $this->term_; }
  public function setTerm($index, $value) {$this->term_[$index] = $value;	}
  public function addTerm($value) { $this->term_[] = $value; }
  public function addAllTerm(array $values) { foreach($values as $value) {$this->term_[] = $value;} }
  
  // @@protoc_insertion_point(class_scope:VideoRentalTerm)
}

// message Bucket
class Bucket {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("Bucket: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->document_[] = new DocV1($fp, $len);
          ASSERT('$len == 0');
          break;
        case 2:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->multiCorpus_ = $tmp > 0 ? true : false;
          break;
        case 3:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->title_ = $tmp;
          $limit-=$len;
          break;
        case 4:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->iconUrl_ = $tmp;
          $limit-=$len;
          break;
        case 5:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->fullContentsUrl_ = $tmp;
          $limit-=$len;
          break;
        case 6:
          ASSERT('$wire == 1');
          $tmp = Protobuf::read_double($fp);
          if ($tmp === false)
            throw new Exception('Protobuf::read_double returned false');
          $this->relevance_ = $tmp;
          $limit-=8;
          break;
        case 7:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->estimatedResults_ = $tmp;
          
          break;
        case 8:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->analyticsCookie_ = $tmp;
          $limit-=$len;
          break;
        case 9:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->fullContentsListUrl_ = $tmp;
          $limit-=$len;
          break;
        case 10:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->nextPageUrl_ = $tmp;
          $limit-=$len;
          break;
        case 11:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->ordered_ = $tmp > 0 ? true : false;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->document_))
      foreach($this->document_ as $v) {
        fwrite($fp, "\x0a");
        Protobuf::write_varint($fp, $v->size()); // message
        $v->write($fp);
      }
    if (!is_null($this->multiCorpus_)) {
      fwrite($fp, "\x10");
      Protobuf::write_varint($fp, (int)$this->multiCorpus_ ? 1 : 0);
    }
    if (!is_null($this->title_)) {
      fwrite($fp, "\x1a");
      Protobuf::write_varint($fp, strlen((string)$this->title_));
      fwrite($fp, (string)$this->title_);
    }
    if (!is_null($this->iconUrl_)) {
      fwrite($fp, "\"");
      Protobuf::write_varint($fp, strlen((string)$this->iconUrl_));
      fwrite($fp, (string)$this->iconUrl_);
    }
    if (!is_null($this->fullContentsUrl_)) {
      fwrite($fp, "*");
      Protobuf::write_varint($fp, strlen((string)$this->fullContentsUrl_));
      fwrite($fp, (string)$this->fullContentsUrl_);
    }
    if (!is_null($this->relevance_)) {
      fwrite($fp, "1");
      Protobuf::write_double($fp, (double)$this->relevance_);
    }
    if (!is_null($this->estimatedResults_)) {
      fwrite($fp, "8");
      Protobuf::write_varint($fp, (int)$this->estimatedResults_);
    }
    if (!is_null($this->analyticsCookie_)) {
      fwrite($fp, "B");
      Protobuf::write_varint($fp, strlen((string)$this->analyticsCookie_));
      fwrite($fp, (string)$this->analyticsCookie_);
    }
    if (!is_null($this->fullContentsListUrl_)) {
      fwrite($fp, "J");
      Protobuf::write_varint($fp, strlen((string)$this->fullContentsListUrl_));
      fwrite($fp, (string)$this->fullContentsListUrl_);
    }
    if (!is_null($this->nextPageUrl_)) {
      fwrite($fp, "R");
      Protobuf::write_varint($fp, strlen((string)$this->nextPageUrl_));
      fwrite($fp, (string)$this->nextPageUrl_);
    }
    if (!is_null($this->ordered_)) {
      fwrite($fp, "X");
      Protobuf::write_varint($fp, (int)$this->ordered_ ? 1 : 0);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->document_))
      foreach($this->document_ as $v) {
        $l = $v->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
    if (!is_null($this->multiCorpus_)) {
      $size += 2;
    }
    if (!is_null($this->title_)) {
      $l = strlen((string)$this->title_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->iconUrl_)) {
      $l = strlen((string)$this->iconUrl_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->fullContentsUrl_)) {
      $l = strlen((string)$this->fullContentsUrl_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->relevance_)) {
      $size += 9;
    }
    if (!is_null($this->estimatedResults_)) {
      $size += 1 + Protobuf::size_varint($this->estimatedResults_);
    }
    if (!is_null($this->analyticsCookie_)) {
      $l = strlen((string)$this->analyticsCookie_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->fullContentsListUrl_)) {
      $l = strlen((string)$this->fullContentsListUrl_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->nextPageUrl_)) {
      $l = strlen((string)$this->nextPageUrl_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->ordered_)) {
      $size += 2;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('document_', $this->document_)
         . Protobuf::toString('multiCorpus_', $this->multiCorpus_)
         . Protobuf::toString('title_', $this->title_)
         . Protobuf::toString('iconUrl_', $this->iconUrl_)
         . Protobuf::toString('fullContentsUrl_', $this->fullContentsUrl_)
         . Protobuf::toString('relevance_', $this->relevance_)
         . Protobuf::toString('estimatedResults_', $this->estimatedResults_)
         . Protobuf::toString('analyticsCookie_', $this->analyticsCookie_)
         . Protobuf::toString('fullContentsListUrl_', $this->fullContentsListUrl_)
         . Protobuf::toString('nextPageUrl_', $this->nextPageUrl_)
         . Protobuf::toString('ordered_', $this->ordered_);
  }
  
  // repeated .DocV1 document = 1;

  protected $document_ = array();
  public function clearDocument() { $this->document_ = array(); }
  public function getDocumentCount() { return count($this->document_); }
  public function hasDocument() { return (count($this->document_) > 0); }
  public function indexOfDocument($value) { return array_search($value,$this->document_);}
  public function removeDocument($index) { unset($this->document_[$index]); }
  public function removeValDocument($value) { $idx = array_search($value,$this->document_); if($idx !== FALSE){unset($this->document_[$idx]); }}
  public function removeValsDocument($values) { foreach($values as $value){$idx = array_search($value,$this->document_); if($idx !== FALSE){unset($this->document_[$idx]); }}}
  public function pushDocument($newvar) { return array_push($this->document_,$newvar); }
  public function popDocument() { return array_pop($this->document_); }
  public function shiftDocument() { return array_shift($this->document_); }
  public function unshiftDocument($newvar) { return array_unshift($this->document_,$newvar); }
  public function getDocument($index) { return $this->document_[$index]; }
  public function getDocumentArray() { return $this->document_; }
  public function setDocument($index, $value) {$this->document_[$index] = $value;	}
  public function addDocument($value) { $this->document_[] = $value; }
  public function addAllDocument(array $values) { foreach($values as $value) {$this->document_[] = $value;} }
  
  // optional bool multiCorpus = 2;

  protected $multiCorpus_;
  public function resetMultiCorpus() { unset($this->multiCorpus_); }
  public function clearMultiCorpus() { unset($this->multiCorpus_); }
  public function hasMultiCorpus() { return isset($this->multiCorpus_); }
  public function getMultiCorpus() { return $this->multiCorpus_; }
  public function setMultiCorpus($value) { $this->multiCorpus_ = (bool)$value; }
  
  // optional string title = 3;

  protected $title_;
  public function resetTitle() { unset($this->title_); }
  public function clearTitle() { unset($this->title_); }
  public function hasTitle() { return isset($this->title_); }
  public function getTitle() { return $this->title_; }
  public function setTitle($value) { $this->title_ = (string)$value; }
  
  // optional string iconUrl = 4;

  protected $iconUrl_;
  public function resetIconUrl() { unset($this->iconUrl_); }
  public function clearIconUrl() { unset($this->iconUrl_); }
  public function hasIconUrl() { return isset($this->iconUrl_); }
  public function getIconUrl() { return $this->iconUrl_; }
  public function setIconUrl($value) { $this->iconUrl_ = (string)$value; }
  
  // optional string fullContentsUrl = 5;

  protected $fullContentsUrl_;
  public function resetFullContentsUrl() { unset($this->fullContentsUrl_); }
  public function clearFullContentsUrl() { unset($this->fullContentsUrl_); }
  public function hasFullContentsUrl() { return isset($this->fullContentsUrl_); }
  public function getFullContentsUrl() { return $this->fullContentsUrl_; }
  public function setFullContentsUrl($value) { $this->fullContentsUrl_ = (string)$value; }
  
  // optional double relevance = 6;

  protected $relevance_;
  public function resetRelevance() { unset($this->relevance_); }
  public function clearRelevance() { unset($this->relevance_); }
  public function hasRelevance() { return isset($this->relevance_); }
  public function getRelevance() { return $this->relevance_; }
  public function setRelevance($value) { $this->relevance_ = (float)$value; }
  
  // optional int64 estimatedResults = 7;

  protected $estimatedResults_;
  public function resetEstimatedResults() { unset($this->estimatedResults_); }
  public function clearEstimatedResults() { unset($this->estimatedResults_); }
  public function hasEstimatedResults() { return isset($this->estimatedResults_); }
  public function getEstimatedResults() { return $this->estimatedResults_; }
  public function setEstimatedResults($value) { $this->estimatedResults_ = (string)$value; }
  
  // optional string analyticsCookie = 8;

  protected $analyticsCookie_;
  public function resetAnalyticsCookie() { unset($this->analyticsCookie_); }
  public function clearAnalyticsCookie() { unset($this->analyticsCookie_); }
  public function hasAnalyticsCookie() { return isset($this->analyticsCookie_); }
  public function getAnalyticsCookie() { return $this->analyticsCookie_; }
  public function setAnalyticsCookie($value) { $this->analyticsCookie_ = (string)$value; }
  
  // optional string fullContentsListUrl = 9;

  protected $fullContentsListUrl_;
  public function resetFullContentsListUrl() { unset($this->fullContentsListUrl_); }
  public function clearFullContentsListUrl() { unset($this->fullContentsListUrl_); }
  public function hasFullContentsListUrl() { return isset($this->fullContentsListUrl_); }
  public function getFullContentsListUrl() { return $this->fullContentsListUrl_; }
  public function setFullContentsListUrl($value) { $this->fullContentsListUrl_ = (string)$value; }
  
  // optional string nextPageUrl = 10;

  protected $nextPageUrl_;
  public function resetNextPageUrl() { unset($this->nextPageUrl_); }
  public function clearNextPageUrl() { unset($this->nextPageUrl_); }
  public function hasNextPageUrl() { return isset($this->nextPageUrl_); }
  public function getNextPageUrl() { return $this->nextPageUrl_; }
  public function setNextPageUrl($value) { $this->nextPageUrl_ = (string)$value; }
  
  // optional bool ordered = 11;

  protected $ordered_;
  public function resetOrdered() { unset($this->ordered_); }
  public function clearOrdered() { unset($this->ordered_); }
  public function hasOrdered() { return isset($this->ordered_); }
  public function getOrdered() { return $this->ordered_; }
  public function setOrdered($value) { $this->ordered_ = (bool)$value; }
  
  // @@protoc_insertion_point(class_scope:Bucket)
}

// message ListResponse
class ListResponse {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("ListResponse: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->bucket_[] = new Bucket($fp, $len);
          ASSERT('$len == 0');
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->doc_[] = new DocV2($fp, $len);
          ASSERT('$len == 0');
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->bucket_))
      foreach($this->bucket_ as $v) {
        fwrite($fp, "\x0a");
        Protobuf::write_varint($fp, $v->size()); // message
        $v->write($fp);
      }
    if (!is_null($this->doc_))
      foreach($this->doc_ as $v) {
        fwrite($fp, "\x12");
        Protobuf::write_varint($fp, $v->size()); // message
        $v->write($fp);
      }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->bucket_))
      foreach($this->bucket_ as $v) {
        $l = $v->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
    if (!is_null($this->doc_))
      foreach($this->doc_ as $v) {
        $l = $v->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('bucket_', $this->bucket_)
         . Protobuf::toString('doc_', $this->doc_);
  }
  
  // repeated .Bucket bucket = 1;

  protected $bucket_ = array();
  public function clearBucket() { $this->bucket_ = array(); }
  public function getBucketCount() { return count($this->bucket_); }
  public function hasBucket() { return (count($this->bucket_) > 0); }
  public function indexOfBucket($value) { return array_search($value,$this->bucket_);}
  public function removeBucket($index) { unset($this->bucket_[$index]); }
  public function removeValBucket($value) { $idx = array_search($value,$this->bucket_); if($idx !== FALSE){unset($this->bucket_[$idx]); }}
  public function removeValsBucket($values) { foreach($values as $value){$idx = array_search($value,$this->bucket_); if($idx !== FALSE){unset($this->bucket_[$idx]); }}}
  public function pushBucket($newvar) { return array_push($this->bucket_,$newvar); }
  public function popBucket() { return array_pop($this->bucket_); }
  public function shiftBucket() { return array_shift($this->bucket_); }
  public function unshiftBucket($newvar) { return array_unshift($this->bucket_,$newvar); }
  public function getBucket($index) { return $this->bucket_[$index]; }
  public function getBucketArray() { return $this->bucket_; }
  public function setBucket($index, $value) {$this->bucket_[$index] = $value;	}
  public function addBucket($value) { $this->bucket_[] = $value; }
  public function addAllBucket(array $values) { foreach($values as $value) {$this->bucket_[] = $value;} }
  
  // repeated .DocV2 doc = 2;

  protected $doc_ = array();
  public function clearDoc() { $this->doc_ = array(); }
  public function getDocCount() { return count($this->doc_); }
  public function hasDoc() { return (count($this->doc_) > 0); }
  public function indexOfDoc($value) { return array_search($value,$this->doc_);}
  public function removeDoc($index) { unset($this->doc_[$index]); }
  public function removeValDoc($value) { $idx = array_search($value,$this->doc_); if($idx !== FALSE){unset($this->doc_[$idx]); }}
  public function removeValsDoc($values) { foreach($values as $value){$idx = array_search($value,$this->doc_); if($idx !== FALSE){unset($this->doc_[$idx]); }}}
  public function pushDoc($newvar) { return array_push($this->doc_,$newvar); }
  public function popDoc() { return array_pop($this->doc_); }
  public function shiftDoc() { return array_shift($this->doc_); }
  public function unshiftDoc($newvar) { return array_unshift($this->doc_,$newvar); }
  public function getDoc($index) { return $this->doc_[$index]; }
  public function getDocArray() { return $this->doc_; }
  public function setDoc($index, $value) {$this->doc_[$index] = $value;	}
  public function addDoc($value) { $this->doc_[] = $value; }
  public function addAllDoc(array $values) { foreach($values as $value) {$this->doc_[] = $value;} }
  
  // @@protoc_insertion_point(class_scope:ListResponse)
}

// message DocV1
class DocV1 {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("DocV1: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->finskyDoc_ = new Document($fp, $len);
          ASSERT('$len == 0');
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->docid_ = $tmp;
          $limit-=$len;
          break;
        case 3:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->detailsUrl_ = $tmp;
          $limit-=$len;
          break;
        case 4:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->reviewsUrl_ = $tmp;
          $limit-=$len;
          break;
        case 5:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->relatedListUrl_ = $tmp;
          $limit-=$len;
          break;
        case 6:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->moreByListUrl_ = $tmp;
          $limit-=$len;
          break;
        case 7:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->shareUrl_ = $tmp;
          $limit-=$len;
          break;
        case 8:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->creator_ = $tmp;
          $limit-=$len;
          break;
        case 9:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->details_ = new DocumentDetails($fp, $len);
          ASSERT('$len == 0');
          break;
        case 10:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->descriptionHtml_ = $tmp;
          $limit-=$len;
          break;
        case 11:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->relatedBrowseUrl_ = $tmp;
          $limit-=$len;
          break;
        case 12:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->moreByBrowseUrl_ = $tmp;
          $limit-=$len;
          break;
        case 13:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->relatedHeader_ = $tmp;
          $limit-=$len;
          break;
        case 14:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->moreByHeader_ = $tmp;
          $limit-=$len;
          break;
        case 15:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->title_ = $tmp;
          $limit-=$len;
          break;
        case 16:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->plusOneData_ = new PlusOneData($fp, $len);
          ASSERT('$len == 0');
          break;
        case 17:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->warningMessage_ = $tmp;
          $limit-=$len;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->finskyDoc_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, $this->finskyDoc_->size()); // message
      $this->finskyDoc_->write($fp);
    }
    if (!is_null($this->docid_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, strlen((string)$this->docid_));
      fwrite($fp, (string)$this->docid_);
    }
    if (!is_null($this->detailsUrl_)) {
      fwrite($fp, "\x1a");
      Protobuf::write_varint($fp, strlen((string)$this->detailsUrl_));
      fwrite($fp, (string)$this->detailsUrl_);
    }
    if (!is_null($this->reviewsUrl_)) {
      fwrite($fp, "\"");
      Protobuf::write_varint($fp, strlen((string)$this->reviewsUrl_));
      fwrite($fp, (string)$this->reviewsUrl_);
    }
    if (!is_null($this->relatedListUrl_)) {
      fwrite($fp, "*");
      Protobuf::write_varint($fp, strlen((string)$this->relatedListUrl_));
      fwrite($fp, (string)$this->relatedListUrl_);
    }
    if (!is_null($this->moreByListUrl_)) {
      fwrite($fp, "2");
      Protobuf::write_varint($fp, strlen((string)$this->moreByListUrl_));
      fwrite($fp, (string)$this->moreByListUrl_);
    }
    if (!is_null($this->shareUrl_)) {
      fwrite($fp, ":");
      Protobuf::write_varint($fp, strlen((string)$this->shareUrl_));
      fwrite($fp, (string)$this->shareUrl_);
    }
    if (!is_null($this->creator_)) {
      fwrite($fp, "B");
      Protobuf::write_varint($fp, strlen((string)$this->creator_));
      fwrite($fp, (string)$this->creator_);
    }
    if (!is_null($this->details_)) {
      fwrite($fp, "J");
      Protobuf::write_varint($fp, $this->details_->size()); // message
      $this->details_->write($fp);
    }
    if (!is_null($this->descriptionHtml_)) {
      fwrite($fp, "R");
      Protobuf::write_varint($fp, strlen((string)$this->descriptionHtml_));
      fwrite($fp, (string)$this->descriptionHtml_);
    }
    if (!is_null($this->relatedBrowseUrl_)) {
      fwrite($fp, "Z");
      Protobuf::write_varint($fp, strlen((string)$this->relatedBrowseUrl_));
      fwrite($fp, (string)$this->relatedBrowseUrl_);
    }
    if (!is_null($this->moreByBrowseUrl_)) {
      fwrite($fp, "b");
      Protobuf::write_varint($fp, strlen((string)$this->moreByBrowseUrl_));
      fwrite($fp, (string)$this->moreByBrowseUrl_);
    }
    if (!is_null($this->relatedHeader_)) {
      fwrite($fp, "j");
      Protobuf::write_varint($fp, strlen((string)$this->relatedHeader_));
      fwrite($fp, (string)$this->relatedHeader_);
    }
    if (!is_null($this->moreByHeader_)) {
      fwrite($fp, "r");
      Protobuf::write_varint($fp, strlen((string)$this->moreByHeader_));
      fwrite($fp, (string)$this->moreByHeader_);
    }
    if (!is_null($this->title_)) {
      fwrite($fp, "z");
      Protobuf::write_varint($fp, strlen((string)$this->title_));
      fwrite($fp, (string)$this->title_);
    }
    if (!is_null($this->plusOneData_)) {
      fwrite($fp, "\x82\x01");
      Protobuf::write_varint($fp, $this->plusOneData_->size()); // message
      $this->plusOneData_->write($fp);
    }
    if (!is_null($this->warningMessage_)) {
      fwrite($fp, "\x8a\x01");
      Protobuf::write_varint($fp, strlen((string)$this->warningMessage_));
      fwrite($fp, (string)$this->warningMessage_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->finskyDoc_)) {
      $l = $this->finskyDoc_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->docid_)) {
      $l = strlen((string)$this->docid_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->detailsUrl_)) {
      $l = strlen((string)$this->detailsUrl_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->reviewsUrl_)) {
      $l = strlen((string)$this->reviewsUrl_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->relatedListUrl_)) {
      $l = strlen((string)$this->relatedListUrl_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->moreByListUrl_)) {
      $l = strlen((string)$this->moreByListUrl_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->shareUrl_)) {
      $l = strlen((string)$this->shareUrl_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->creator_)) {
      $l = strlen((string)$this->creator_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->details_)) {
      $l = $this->details_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->descriptionHtml_)) {
      $l = strlen((string)$this->descriptionHtml_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->relatedBrowseUrl_)) {
      $l = strlen((string)$this->relatedBrowseUrl_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->moreByBrowseUrl_)) {
      $l = strlen((string)$this->moreByBrowseUrl_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->relatedHeader_)) {
      $l = strlen((string)$this->relatedHeader_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->moreByHeader_)) {
      $l = strlen((string)$this->moreByHeader_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->title_)) {
      $l = strlen((string)$this->title_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->plusOneData_)) {
      $l = $this->plusOneData_->size();
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->warningMessage_)) {
      $l = strlen((string)$this->warningMessage_);
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('finskyDoc_', $this->finskyDoc_)
         . Protobuf::toString('docid_', $this->docid_)
         . Protobuf::toString('detailsUrl_', $this->detailsUrl_)
         . Protobuf::toString('reviewsUrl_', $this->reviewsUrl_)
         . Protobuf::toString('relatedListUrl_', $this->relatedListUrl_)
         . Protobuf::toString('moreByListUrl_', $this->moreByListUrl_)
         . Protobuf::toString('shareUrl_', $this->shareUrl_)
         . Protobuf::toString('creator_', $this->creator_)
         . Protobuf::toString('details_', $this->details_)
         . Protobuf::toString('descriptionHtml_', $this->descriptionHtml_)
         . Protobuf::toString('relatedBrowseUrl_', $this->relatedBrowseUrl_)
         . Protobuf::toString('moreByBrowseUrl_', $this->moreByBrowseUrl_)
         . Protobuf::toString('relatedHeader_', $this->relatedHeader_)
         . Protobuf::toString('moreByHeader_', $this->moreByHeader_)
         . Protobuf::toString('title_', $this->title_)
         . Protobuf::toString('plusOneData_', $this->plusOneData_)
         . Protobuf::toString('warningMessage_', $this->warningMessage_);
  }
  
  // optional .Document finskyDoc = 1;

  protected $finskyDoc_;
  public function resetFinskyDoc() { unset($this->finskyDoc_); }
  public function clearFinskyDoc() { unset($this->finskyDoc_); }
  public function hasFinskyDoc() { return isset($this->finskyDoc_); }
  public function getFinskyDoc() { return $this->finskyDoc_; }
  public function setFinskyDoc(Document $value) { $this->finskyDoc_ = $value; }
  
  // optional string docid = 2;

  protected $docid_;
  public function resetDocid() { unset($this->docid_); }
  public function clearDocid() { unset($this->docid_); }
  public function hasDocid() { return isset($this->docid_); }
  public function getDocid() { return $this->docid_; }
  public function setDocid($value) { $this->docid_ = (string)$value; }
  
  // optional string detailsUrl = 3;

  protected $detailsUrl_;
  public function resetDetailsUrl() { unset($this->detailsUrl_); }
  public function clearDetailsUrl() { unset($this->detailsUrl_); }
  public function hasDetailsUrl() { return isset($this->detailsUrl_); }
  public function getDetailsUrl() { return $this->detailsUrl_; }
  public function setDetailsUrl($value) { $this->detailsUrl_ = (string)$value; }
  
  // optional string reviewsUrl = 4;

  protected $reviewsUrl_;
  public function resetReviewsUrl() { unset($this->reviewsUrl_); }
  public function clearReviewsUrl() { unset($this->reviewsUrl_); }
  public function hasReviewsUrl() { return isset($this->reviewsUrl_); }
  public function getReviewsUrl() { return $this->reviewsUrl_; }
  public function setReviewsUrl($value) { $this->reviewsUrl_ = (string)$value; }
  
  // optional string relatedListUrl = 5;

  protected $relatedListUrl_;
  public function resetRelatedListUrl() { unset($this->relatedListUrl_); }
  public function clearRelatedListUrl() { unset($this->relatedListUrl_); }
  public function hasRelatedListUrl() { return isset($this->relatedListUrl_); }
  public function getRelatedListUrl() { return $this->relatedListUrl_; }
  public function setRelatedListUrl($value) { $this->relatedListUrl_ = (string)$value; }
  
  // optional string moreByListUrl = 6;

  protected $moreByListUrl_;
  public function resetMoreByListUrl() { unset($this->moreByListUrl_); }
  public function clearMoreByListUrl() { unset($this->moreByListUrl_); }
  public function hasMoreByListUrl() { return isset($this->moreByListUrl_); }
  public function getMoreByListUrl() { return $this->moreByListUrl_; }
  public function setMoreByListUrl($value) { $this->moreByListUrl_ = (string)$value; }
  
  // optional string shareUrl = 7;

  protected $shareUrl_;
  public function resetShareUrl() { unset($this->shareUrl_); }
  public function clearShareUrl() { unset($this->shareUrl_); }
  public function hasShareUrl() { return isset($this->shareUrl_); }
  public function getShareUrl() { return $this->shareUrl_; }
  public function setShareUrl($value) { $this->shareUrl_ = (string)$value; }
  
  // optional string creator = 8;

  protected $creator_;
  public function resetCreator() { unset($this->creator_); }
  public function clearCreator() { unset($this->creator_); }
  public function hasCreator() { return isset($this->creator_); }
  public function getCreator() { return $this->creator_; }
  public function setCreator($value) { $this->creator_ = (string)$value; }
  
  // optional .DocumentDetails details = 9;

  protected $details_;
  public function resetDetails() { unset($this->details_); }
  public function clearDetails() { unset($this->details_); }
  public function hasDetails() { return isset($this->details_); }
  public function getDetails() { return $this->details_; }
  public function setDetails(DocumentDetails $value) { $this->details_ = $value; }
  
  // optional string descriptionHtml = 10;

  protected $descriptionHtml_;
  public function resetDescriptionHtml() { unset($this->descriptionHtml_); }
  public function clearDescriptionHtml() { unset($this->descriptionHtml_); }
  public function hasDescriptionHtml() { return isset($this->descriptionHtml_); }
  public function getDescriptionHtml() { return $this->descriptionHtml_; }
  public function setDescriptionHtml($value) { $this->descriptionHtml_ = (string)$value; }
  
  // optional string relatedBrowseUrl = 11;

  protected $relatedBrowseUrl_;
  public function resetRelatedBrowseUrl() { unset($this->relatedBrowseUrl_); }
  public function clearRelatedBrowseUrl() { unset($this->relatedBrowseUrl_); }
  public function hasRelatedBrowseUrl() { return isset($this->relatedBrowseUrl_); }
  public function getRelatedBrowseUrl() { return $this->relatedBrowseUrl_; }
  public function setRelatedBrowseUrl($value) { $this->relatedBrowseUrl_ = (string)$value; }
  
  // optional string moreByBrowseUrl = 12;

  protected $moreByBrowseUrl_;
  public function resetMoreByBrowseUrl() { unset($this->moreByBrowseUrl_); }
  public function clearMoreByBrowseUrl() { unset($this->moreByBrowseUrl_); }
  public function hasMoreByBrowseUrl() { return isset($this->moreByBrowseUrl_); }
  public function getMoreByBrowseUrl() { return $this->moreByBrowseUrl_; }
  public function setMoreByBrowseUrl($value) { $this->moreByBrowseUrl_ = (string)$value; }
  
  // optional string relatedHeader = 13;

  protected $relatedHeader_;
  public function resetRelatedHeader() { unset($this->relatedHeader_); }
  public function clearRelatedHeader() { unset($this->relatedHeader_); }
  public function hasRelatedHeader() { return isset($this->relatedHeader_); }
  public function getRelatedHeader() { return $this->relatedHeader_; }
  public function setRelatedHeader($value) { $this->relatedHeader_ = (string)$value; }
  
  // optional string moreByHeader = 14;

  protected $moreByHeader_;
  public function resetMoreByHeader() { unset($this->moreByHeader_); }
  public function clearMoreByHeader() { unset($this->moreByHeader_); }
  public function hasMoreByHeader() { return isset($this->moreByHeader_); }
  public function getMoreByHeader() { return $this->moreByHeader_; }
  public function setMoreByHeader($value) { $this->moreByHeader_ = (string)$value; }
  
  // optional string title = 15;

  protected $title_;
  public function resetTitle() { unset($this->title_); }
  public function clearTitle() { unset($this->title_); }
  public function hasTitle() { return isset($this->title_); }
  public function getTitle() { return $this->title_; }
  public function setTitle($value) { $this->title_ = (string)$value; }
  
  // optional .PlusOneData plusOneData = 16;

  protected $plusOneData_;
  public function resetPlusOneData() { unset($this->plusOneData_); }
  public function clearPlusOneData() { unset($this->plusOneData_); }
  public function hasPlusOneData() { return isset($this->plusOneData_); }
  public function getPlusOneData() { return $this->plusOneData_; }
  public function setPlusOneData(PlusOneData $value) { $this->plusOneData_ = $value; }
  
  // optional string warningMessage = 17;

  protected $warningMessage_;
  public function resetWarningMessage() { unset($this->warningMessage_); }
  public function clearWarningMessage() { unset($this->warningMessage_); }
  public function hasWarningMessage() { return isset($this->warningMessage_); }
  public function getWarningMessage() { return $this->warningMessage_; }
  public function setWarningMessage($value) { $this->warningMessage_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:DocV1)
}

// message Annotations
class Annotations {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("Annotations: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->sectionRelated_ = new SectionMetadata($fp, $len);
          ASSERT('$len == 0');
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->sectionMoreBy_ = new SectionMetadata($fp, $len);
          ASSERT('$len == 0');
          break;
        case 3:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->plusOneData_ = new PlusOneData($fp, $len);
          ASSERT('$len == 0');
          break;
        case 4:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->warning_[] = new Warning($fp, $len);
          ASSERT('$len == 0');
          break;
        case 5:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->sectionBodyOfWork_ = new SectionMetadata($fp, $len);
          ASSERT('$len == 0');
          break;
        case 6:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->sectionCoreContent_ = new SectionMetadata($fp, $len);
          ASSERT('$len == 0');
          break;
        case 7:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->template_ = new Template($fp, $len);
          ASSERT('$len == 0');
          break;
        case 8:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->badgeForCreator_[] = new Badge($fp, $len);
          ASSERT('$len == 0');
          break;
        case 9:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->badgeForDoc_[] = new Badge($fp, $len);
          ASSERT('$len == 0');
          break;
        case 10:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->link_ = new Link($fp, $len);
          ASSERT('$len == 0');
          break;
        case 11:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->sectionCrossSell_ = new SectionMetadata($fp, $len);
          ASSERT('$len == 0');
          break;
        case 12:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->sectionRelatedDocType_ = new SectionMetadata($fp, $len);
          ASSERT('$len == 0');
          break;
        case 13:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->promotedDoc_[] = new PromotedDoc($fp, $len);
          ASSERT('$len == 0');
          break;
        case 14:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->offerNote_ = $tmp;
          $limit-=$len;
          break;
        case 16:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->subscription_[] = new DocV2($fp, $len);
          ASSERT('$len == 0');
          break;
        case 17:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->obsoleteReason_ = new ObsoleteReason($fp, $len);
          ASSERT('$len == 0');
          break;
        case 18:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->privacyPolicyUrl_ = $tmp;
          $limit-=$len;
          break;
        case 19:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->suggestionReasons_ = new SuggestionReasons($fp, $len);
          ASSERT('$len == 0');
          break;
        case 20:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->optimalDeviceClassWarning_ = new Warning($fp, $len);
          ASSERT('$len == 0');
          break;
        case 21:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->docBadgeContainer_[] = new BadgeContainer($fp, $len);
          ASSERT('$len == 0');
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->sectionRelated_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, $this->sectionRelated_->size()); // message
      $this->sectionRelated_->write($fp);
    }
    if (!is_null($this->sectionMoreBy_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, $this->sectionMoreBy_->size()); // message
      $this->sectionMoreBy_->write($fp);
    }
    if (!is_null($this->plusOneData_)) {
      fwrite($fp, "\x1a");
      Protobuf::write_varint($fp, $this->plusOneData_->size()); // message
      $this->plusOneData_->write($fp);
    }
    if (!is_null($this->warning_))
      foreach($this->warning_ as $v) {
        fwrite($fp, "\"");
        Protobuf::write_varint($fp, $v->size()); // message
        $v->write($fp);
      }
    if (!is_null($this->sectionBodyOfWork_)) {
      fwrite($fp, "*");
      Protobuf::write_varint($fp, $this->sectionBodyOfWork_->size()); // message
      $this->sectionBodyOfWork_->write($fp);
    }
    if (!is_null($this->sectionCoreContent_)) {
      fwrite($fp, "2");
      Protobuf::write_varint($fp, $this->sectionCoreContent_->size()); // message
      $this->sectionCoreContent_->write($fp);
    }
    if (!is_null($this->template_)) {
      fwrite($fp, ":");
      Protobuf::write_varint($fp, $this->template_->size()); // message
      $this->template_->write($fp);
    }
    if (!is_null($this->badgeForCreator_))
      foreach($this->badgeForCreator_ as $v) {
        fwrite($fp, "B");
        Protobuf::write_varint($fp, $v->size()); // message
        $v->write($fp);
      }
    if (!is_null($this->badgeForDoc_))
      foreach($this->badgeForDoc_ as $v) {
        fwrite($fp, "J");
        Protobuf::write_varint($fp, $v->size()); // message
        $v->write($fp);
      }
    if (!is_null($this->link_)) {
      fwrite($fp, "R");
      Protobuf::write_varint($fp, $this->link_->size()); // message
      $this->link_->write($fp);
    }
    if (!is_null($this->sectionCrossSell_)) {
      fwrite($fp, "Z");
      Protobuf::write_varint($fp, $this->sectionCrossSell_->size()); // message
      $this->sectionCrossSell_->write($fp);
    }
    if (!is_null($this->sectionRelatedDocType_)) {
      fwrite($fp, "b");
      Protobuf::write_varint($fp, $this->sectionRelatedDocType_->size()); // message
      $this->sectionRelatedDocType_->write($fp);
    }
    if (!is_null($this->promotedDoc_))
      foreach($this->promotedDoc_ as $v) {
        fwrite($fp, "j");
        Protobuf::write_varint($fp, $v->size()); // message
        $v->write($fp);
      }
    if (!is_null($this->offerNote_)) {
      fwrite($fp, "r");
      Protobuf::write_varint($fp, strlen((string)$this->offerNote_));
      fwrite($fp, (string)$this->offerNote_);
    }
    if (!is_null($this->subscription_))
      foreach($this->subscription_ as $v) {
        fwrite($fp, "\x82\x01");
        Protobuf::write_varint($fp, $v->size()); // message
        $v->write($fp);
      }
    if (!is_null($this->obsoleteReason_)) {
      fwrite($fp, "\x8a\x01");
      Protobuf::write_varint($fp, $this->obsoleteReason_->size()); // message
      $this->obsoleteReason_->write($fp);
    }
    if (!is_null($this->privacyPolicyUrl_)) {
      fwrite($fp, "\x92\x01");
      Protobuf::write_varint($fp, strlen((string)$this->privacyPolicyUrl_));
      fwrite($fp, (string)$this->privacyPolicyUrl_);
    }
    if (!is_null($this->suggestionReasons_)) {
      fwrite($fp, "\x9a\x01");
      Protobuf::write_varint($fp, $this->suggestionReasons_->size()); // message
      $this->suggestionReasons_->write($fp);
    }
    if (!is_null($this->optimalDeviceClassWarning_)) {
      fwrite($fp, "\xa2\x01");
      Protobuf::write_varint($fp, $this->optimalDeviceClassWarning_->size()); // message
      $this->optimalDeviceClassWarning_->write($fp);
    }
    if (!is_null($this->docBadgeContainer_))
      foreach($this->docBadgeContainer_ as $v) {
        fwrite($fp, "\xaa\x01");
        Protobuf::write_varint($fp, $v->size()); // message
        $v->write($fp);
      }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->sectionRelated_)) {
      $l = $this->sectionRelated_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->sectionMoreBy_)) {
      $l = $this->sectionMoreBy_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->plusOneData_)) {
      $l = $this->plusOneData_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->warning_))
      foreach($this->warning_ as $v) {
        $l = $v->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
    if (!is_null($this->sectionBodyOfWork_)) {
      $l = $this->sectionBodyOfWork_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->sectionCoreContent_)) {
      $l = $this->sectionCoreContent_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->template_)) {
      $l = $this->template_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->badgeForCreator_))
      foreach($this->badgeForCreator_ as $v) {
        $l = $v->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
    if (!is_null($this->badgeForDoc_))
      foreach($this->badgeForDoc_ as $v) {
        $l = $v->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
    if (!is_null($this->link_)) {
      $l = $this->link_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->sectionCrossSell_)) {
      $l = $this->sectionCrossSell_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->sectionRelatedDocType_)) {
      $l = $this->sectionRelatedDocType_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->promotedDoc_))
      foreach($this->promotedDoc_ as $v) {
        $l = $v->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
    if (!is_null($this->offerNote_)) {
      $l = strlen((string)$this->offerNote_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->subscription_))
      foreach($this->subscription_ as $v) {
        $l = $v->size();
        $size += 2 + Protobuf::size_varint($l) + $l;
      }
    if (!is_null($this->obsoleteReason_)) {
      $l = $this->obsoleteReason_->size();
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->privacyPolicyUrl_)) {
      $l = strlen((string)$this->privacyPolicyUrl_);
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->suggestionReasons_)) {
      $l = $this->suggestionReasons_->size();
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->optimalDeviceClassWarning_)) {
      $l = $this->optimalDeviceClassWarning_->size();
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->docBadgeContainer_))
      foreach($this->docBadgeContainer_ as $v) {
        $l = $v->size();
        $size += 2 + Protobuf::size_varint($l) + $l;
      }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('sectionRelated_', $this->sectionRelated_)
         . Protobuf::toString('sectionMoreBy_', $this->sectionMoreBy_)
         . Protobuf::toString('plusOneData_', $this->plusOneData_)
         . Protobuf::toString('warning_', $this->warning_)
         . Protobuf::toString('sectionBodyOfWork_', $this->sectionBodyOfWork_)
         . Protobuf::toString('sectionCoreContent_', $this->sectionCoreContent_)
         . Protobuf::toString('template_', $this->template_)
         . Protobuf::toString('badgeForCreator_', $this->badgeForCreator_)
         . Protobuf::toString('badgeForDoc_', $this->badgeForDoc_)
         . Protobuf::toString('link_', $this->link_)
         . Protobuf::toString('sectionCrossSell_', $this->sectionCrossSell_)
         . Protobuf::toString('sectionRelatedDocType_', $this->sectionRelatedDocType_)
         . Protobuf::toString('promotedDoc_', $this->promotedDoc_)
         . Protobuf::toString('offerNote_', $this->offerNote_)
         . Protobuf::toString('subscription_', $this->subscription_)
         . Protobuf::toString('obsoleteReason_', $this->obsoleteReason_)
         . Protobuf::toString('privacyPolicyUrl_', $this->privacyPolicyUrl_)
         . Protobuf::toString('suggestionReasons_', $this->suggestionReasons_)
         . Protobuf::toString('optimalDeviceClassWarning_', $this->optimalDeviceClassWarning_)
         . Protobuf::toString('docBadgeContainer_', $this->docBadgeContainer_);
  }
  
  // optional .SectionMetadata sectionRelated = 1;

  protected $sectionRelated_;
  public function resetSectionRelated() { unset($this->sectionRelated_); }
  public function clearSectionRelated() { unset($this->sectionRelated_); }
  public function hasSectionRelated() { return isset($this->sectionRelated_); }
  public function getSectionRelated() { return $this->sectionRelated_; }
  public function setSectionRelated(SectionMetadata $value) { $this->sectionRelated_ = $value; }
  
  // optional .SectionMetadata sectionMoreBy = 2;

  protected $sectionMoreBy_;
  public function resetSectionMoreBy() { unset($this->sectionMoreBy_); }
  public function clearSectionMoreBy() { unset($this->sectionMoreBy_); }
  public function hasSectionMoreBy() { return isset($this->sectionMoreBy_); }
  public function getSectionMoreBy() { return $this->sectionMoreBy_; }
  public function setSectionMoreBy(SectionMetadata $value) { $this->sectionMoreBy_ = $value; }
  
  // optional .PlusOneData plusOneData = 3;

  protected $plusOneData_;
  public function resetPlusOneData() { unset($this->plusOneData_); }
  public function clearPlusOneData() { unset($this->plusOneData_); }
  public function hasPlusOneData() { return isset($this->plusOneData_); }
  public function getPlusOneData() { return $this->plusOneData_; }
  public function setPlusOneData(PlusOneData $value) { $this->plusOneData_ = $value; }
  
  // repeated .Warning warning = 4;

  protected $warning_ = array();
  public function clearWarning() { $this->warning_ = array(); }
  public function getWarningCount() { return count($this->warning_); }
  public function hasWarning() { return (count($this->warning_) > 0); }
  public function indexOfWarning($value) { return array_search($value,$this->warning_);}
  public function removeWarning($index) { unset($this->warning_[$index]); }
  public function removeValWarning($value) { $idx = array_search($value,$this->warning_); if($idx !== FALSE){unset($this->warning_[$idx]); }}
  public function removeValsWarning($values) { foreach($values as $value){$idx = array_search($value,$this->warning_); if($idx !== FALSE){unset($this->warning_[$idx]); }}}
  public function pushWarning($newvar) { return array_push($this->warning_,$newvar); }
  public function popWarning() { return array_pop($this->warning_); }
  public function shiftWarning() { return array_shift($this->warning_); }
  public function unshiftWarning($newvar) { return array_unshift($this->warning_,$newvar); }
  public function getWarning($index) { return $this->warning_[$index]; }
  public function getWarningArray() { return $this->warning_; }
  public function setWarning($index, $value) {$this->warning_[$index] = $value;	}
  public function addWarning($value) { $this->warning_[] = $value; }
  public function addAllWarning(array $values) { foreach($values as $value) {$this->warning_[] = $value;} }
  
  // optional .SectionMetadata sectionBodyOfWork = 5;

  protected $sectionBodyOfWork_;
  public function resetSectionBodyOfWork() { unset($this->sectionBodyOfWork_); }
  public function clearSectionBodyOfWork() { unset($this->sectionBodyOfWork_); }
  public function hasSectionBodyOfWork() { return isset($this->sectionBodyOfWork_); }
  public function getSectionBodyOfWork() { return $this->sectionBodyOfWork_; }
  public function setSectionBodyOfWork(SectionMetadata $value) { $this->sectionBodyOfWork_ = $value; }
  
  // optional .SectionMetadata sectionCoreContent = 6;

  protected $sectionCoreContent_;
  public function resetSectionCoreContent() { unset($this->sectionCoreContent_); }
  public function clearSectionCoreContent() { unset($this->sectionCoreContent_); }
  public function hasSectionCoreContent() { return isset($this->sectionCoreContent_); }
  public function getSectionCoreContent() { return $this->sectionCoreContent_; }
  public function setSectionCoreContent(SectionMetadata $value) { $this->sectionCoreContent_ = $value; }
  
  // optional .Template template = 7;

  protected $template_;
  public function resetTemplate() { unset($this->template_); }
  public function clearTemplate() { unset($this->template_); }
  public function hasTemplate() { return isset($this->template_); }
  public function getTemplate() { return $this->template_; }
  public function setTemplate(Template $value) { $this->template_ = $value; }
  
  // repeated .Badge badgeForCreator = 8;

  protected $badgeForCreator_ = array();
  public function clearBadgeForCreator() { $this->badgeForCreator_ = array(); }
  public function getBadgeForCreatorCount() { return count($this->badgeForCreator_); }
  public function hasBadgeForCreator() { return (count($this->badgeForCreator_) > 0); }
  public function indexOfBadgeForCreator($value) { return array_search($value,$this->badgeForCreator_);}
  public function removeBadgeForCreator($index) { unset($this->badgeForCreator_[$index]); }
  public function removeValBadgeForCreator($value) { $idx = array_search($value,$this->badgeForCreator_); if($idx !== FALSE){unset($this->badgeForCreator_[$idx]); }}
  public function removeValsBadgeForCreator($values) { foreach($values as $value){$idx = array_search($value,$this->badgeForCreator_); if($idx !== FALSE){unset($this->badgeForCreator_[$idx]); }}}
  public function pushBadgeForCreator($newvar) { return array_push($this->badgeForCreator_,$newvar); }
  public function popBadgeForCreator() { return array_pop($this->badgeForCreator_); }
  public function shiftBadgeForCreator() { return array_shift($this->badgeForCreator_); }
  public function unshiftBadgeForCreator($newvar) { return array_unshift($this->badgeForCreator_,$newvar); }
  public function getBadgeForCreator($index) { return $this->badgeForCreator_[$index]; }
  public function getBadgeForCreatorArray() { return $this->badgeForCreator_; }
  public function setBadgeForCreator($index, $value) {$this->badgeForCreator_[$index] = $value;	}
  public function addBadgeForCreator($value) { $this->badgeForCreator_[] = $value; }
  public function addAllBadgeForCreator(array $values) { foreach($values as $value) {$this->badgeForCreator_[] = $value;} }
  
  // repeated .Badge badgeForDoc = 9;

  protected $badgeForDoc_ = array();
  public function clearBadgeForDoc() { $this->badgeForDoc_ = array(); }
  public function getBadgeForDocCount() { return count($this->badgeForDoc_); }
  public function hasBadgeForDoc() { return (count($this->badgeForDoc_) > 0); }
  public function indexOfBadgeForDoc($value) { return array_search($value,$this->badgeForDoc_);}
  public function removeBadgeForDoc($index) { unset($this->badgeForDoc_[$index]); }
  public function removeValBadgeForDoc($value) { $idx = array_search($value,$this->badgeForDoc_); if($idx !== FALSE){unset($this->badgeForDoc_[$idx]); }}
  public function removeValsBadgeForDoc($values) { foreach($values as $value){$idx = array_search($value,$this->badgeForDoc_); if($idx !== FALSE){unset($this->badgeForDoc_[$idx]); }}}
  public function pushBadgeForDoc($newvar) { return array_push($this->badgeForDoc_,$newvar); }
  public function popBadgeForDoc() { return array_pop($this->badgeForDoc_); }
  public function shiftBadgeForDoc() { return array_shift($this->badgeForDoc_); }
  public function unshiftBadgeForDoc($newvar) { return array_unshift($this->badgeForDoc_,$newvar); }
  public function getBadgeForDoc($index) { return $this->badgeForDoc_[$index]; }
  public function getBadgeForDocArray() { return $this->badgeForDoc_; }
  public function setBadgeForDoc($index, $value) {$this->badgeForDoc_[$index] = $value;	}
  public function addBadgeForDoc($value) { $this->badgeForDoc_[] = $value; }
  public function addAllBadgeForDoc(array $values) { foreach($values as $value) {$this->badgeForDoc_[] = $value;} }
  
  // optional .Link link = 10;

  protected $link_;
  public function resetLink() { unset($this->link_); }
  public function clearLink() { unset($this->link_); }
  public function hasLink() { return isset($this->link_); }
  public function getLink() { return $this->link_; }
  public function setLink(Link $value) { $this->link_ = $value; }
  
  // optional .SectionMetadata sectionCrossSell = 11;

  protected $sectionCrossSell_;
  public function resetSectionCrossSell() { unset($this->sectionCrossSell_); }
  public function clearSectionCrossSell() { unset($this->sectionCrossSell_); }
  public function hasSectionCrossSell() { return isset($this->sectionCrossSell_); }
  public function getSectionCrossSell() { return $this->sectionCrossSell_; }
  public function setSectionCrossSell(SectionMetadata $value) { $this->sectionCrossSell_ = $value; }
  
  // optional .SectionMetadata sectionRelatedDocType = 12;

  protected $sectionRelatedDocType_;
  public function resetSectionRelatedDocType() { unset($this->sectionRelatedDocType_); }
  public function clearSectionRelatedDocType() { unset($this->sectionRelatedDocType_); }
  public function hasSectionRelatedDocType() { return isset($this->sectionRelatedDocType_); }
  public function getSectionRelatedDocType() { return $this->sectionRelatedDocType_; }
  public function setSectionRelatedDocType(SectionMetadata $value) { $this->sectionRelatedDocType_ = $value; }
  
  // repeated .PromotedDoc promotedDoc = 13;

  protected $promotedDoc_ = array();
  public function clearPromotedDoc() { $this->promotedDoc_ = array(); }
  public function getPromotedDocCount() { return count($this->promotedDoc_); }
  public function hasPromotedDoc() { return (count($this->promotedDoc_) > 0); }
  public function indexOfPromotedDoc($value) { return array_search($value,$this->promotedDoc_);}
  public function removePromotedDoc($index) { unset($this->promotedDoc_[$index]); }
  public function removeValPromotedDoc($value) { $idx = array_search($value,$this->promotedDoc_); if($idx !== FALSE){unset($this->promotedDoc_[$idx]); }}
  public function removeValsPromotedDoc($values) { foreach($values as $value){$idx = array_search($value,$this->promotedDoc_); if($idx !== FALSE){unset($this->promotedDoc_[$idx]); }}}
  public function pushPromotedDoc($newvar) { return array_push($this->promotedDoc_,$newvar); }
  public function popPromotedDoc() { return array_pop($this->promotedDoc_); }
  public function shiftPromotedDoc() { return array_shift($this->promotedDoc_); }
  public function unshiftPromotedDoc($newvar) { return array_unshift($this->promotedDoc_,$newvar); }
  public function getPromotedDoc($index) { return $this->promotedDoc_[$index]; }
  public function getPromotedDocArray() { return $this->promotedDoc_; }
  public function setPromotedDoc($index, $value) {$this->promotedDoc_[$index] = $value;	}
  public function addPromotedDoc($value) { $this->promotedDoc_[] = $value; }
  public function addAllPromotedDoc(array $values) { foreach($values as $value) {$this->promotedDoc_[] = $value;} }
  
  // optional string offerNote = 14;

  protected $offerNote_;
  public function resetOfferNote() { unset($this->offerNote_); }
  public function clearOfferNote() { unset($this->offerNote_); }
  public function hasOfferNote() { return isset($this->offerNote_); }
  public function getOfferNote() { return $this->offerNote_; }
  public function setOfferNote($value) { $this->offerNote_ = (string)$value; }
  
  // repeated .DocV2 subscription = 16;

  protected $subscription_ = array();
  public function clearSubscription() { $this->subscription_ = array(); }
  public function getSubscriptionCount() { return count($this->subscription_); }
  public function hasSubscription() { return (count($this->subscription_) > 0); }
  public function indexOfSubscription($value) { return array_search($value,$this->subscription_);}
  public function removeSubscription($index) { unset($this->subscription_[$index]); }
  public function removeValSubscription($value) { $idx = array_search($value,$this->subscription_); if($idx !== FALSE){unset($this->subscription_[$idx]); }}
  public function removeValsSubscription($values) { foreach($values as $value){$idx = array_search($value,$this->subscription_); if($idx !== FALSE){unset($this->subscription_[$idx]); }}}
  public function pushSubscription($newvar) { return array_push($this->subscription_,$newvar); }
  public function popSubscription() { return array_pop($this->subscription_); }
  public function shiftSubscription() { return array_shift($this->subscription_); }
  public function unshiftSubscription($newvar) { return array_unshift($this->subscription_,$newvar); }
  public function getSubscription($index) { return $this->subscription_[$index]; }
  public function getSubscriptionArray() { return $this->subscription_; }
  public function setSubscription($index, $value) {$this->subscription_[$index] = $value;	}
  public function addSubscription($value) { $this->subscription_[] = $value; }
  public function addAllSubscription(array $values) { foreach($values as $value) {$this->subscription_[] = $value;} }
  
  // optional .ObsoleteReason obsoleteReason = 17;

  protected $obsoleteReason_;
  public function resetObsoleteReason() { unset($this->obsoleteReason_); }
  public function clearObsoleteReason() { unset($this->obsoleteReason_); }
  public function hasObsoleteReason() { return isset($this->obsoleteReason_); }
  public function getObsoleteReason() { return $this->obsoleteReason_; }
  public function setObsoleteReason(ObsoleteReason $value) { $this->obsoleteReason_ = $value; }
  
  // optional string privacyPolicyUrl = 18;

  protected $privacyPolicyUrl_;
  public function resetPrivacyPolicyUrl() { unset($this->privacyPolicyUrl_); }
  public function clearPrivacyPolicyUrl() { unset($this->privacyPolicyUrl_); }
  public function hasPrivacyPolicyUrl() { return isset($this->privacyPolicyUrl_); }
  public function getPrivacyPolicyUrl() { return $this->privacyPolicyUrl_; }
  public function setPrivacyPolicyUrl($value) { $this->privacyPolicyUrl_ = (string)$value; }
  
  // optional .SuggestionReasons suggestionReasons = 19;

  protected $suggestionReasons_;
  public function resetSuggestionReasons() { unset($this->suggestionReasons_); }
  public function clearSuggestionReasons() { unset($this->suggestionReasons_); }
  public function hasSuggestionReasons() { return isset($this->suggestionReasons_); }
  public function getSuggestionReasons() { return $this->suggestionReasons_; }
  public function setSuggestionReasons(SuggestionReasons $value) { $this->suggestionReasons_ = $value; }
  
  // optional .Warning optimalDeviceClassWarning = 20;

  protected $optimalDeviceClassWarning_;
  public function resetOptimalDeviceClassWarning() { unset($this->optimalDeviceClassWarning_); }
  public function clearOptimalDeviceClassWarning() { unset($this->optimalDeviceClassWarning_); }
  public function hasOptimalDeviceClassWarning() { return isset($this->optimalDeviceClassWarning_); }
  public function getOptimalDeviceClassWarning() { return $this->optimalDeviceClassWarning_; }
  public function setOptimalDeviceClassWarning(Warning $value) { $this->optimalDeviceClassWarning_ = $value; }
  
  // repeated .BadgeContainer docBadgeContainer = 21;

  protected $docBadgeContainer_ = array();
  public function clearDocBadgeContainer() { $this->docBadgeContainer_ = array(); }
  public function getDocBadgeContainerCount() { return count($this->docBadgeContainer_); }
  public function hasDocBadgeContainer() { return (count($this->docBadgeContainer_) > 0); }
  public function indexOfDocBadgeContainer($value) { return array_search($value,$this->docBadgeContainer_);}
  public function removeDocBadgeContainer($index) { unset($this->docBadgeContainer_[$index]); }
  public function removeValDocBadgeContainer($value) { $idx = array_search($value,$this->docBadgeContainer_); if($idx !== FALSE){unset($this->docBadgeContainer_[$idx]); }}
  public function removeValsDocBadgeContainer($values) { foreach($values as $value){$idx = array_search($value,$this->docBadgeContainer_); if($idx !== FALSE){unset($this->docBadgeContainer_[$idx]); }}}
  public function pushDocBadgeContainer($newvar) { return array_push($this->docBadgeContainer_,$newvar); }
  public function popDocBadgeContainer() { return array_pop($this->docBadgeContainer_); }
  public function shiftDocBadgeContainer() { return array_shift($this->docBadgeContainer_); }
  public function unshiftDocBadgeContainer($newvar) { return array_unshift($this->docBadgeContainer_,$newvar); }
  public function getDocBadgeContainer($index) { return $this->docBadgeContainer_[$index]; }
  public function getDocBadgeContainerArray() { return $this->docBadgeContainer_; }
  public function setDocBadgeContainer($index, $value) {$this->docBadgeContainer_[$index] = $value;	}
  public function addDocBadgeContainer($value) { $this->docBadgeContainer_[] = $value; }
  public function addAllDocBadgeContainer(array $values) { foreach($values as $value) {$this->docBadgeContainer_[] = $value;} }
  
  // @@protoc_insertion_point(class_scope:Annotations)
}

// message DocV2
class DocV2 {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("DocV2: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->docid_ = $tmp;
          $limit-=$len;
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->backendDocid_ = $tmp;
          $limit-=$len;
          break;
        case 3:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->docType_ = $tmp;
          
          break;
        case 4:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->backendId_ = $tmp;
          
          break;
        case 5:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->title_ = $tmp;
          $limit-=$len;
          break;
        case 6:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->creator_ = $tmp;
          $limit-=$len;
          break;
        case 7:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->descriptionHtml_ = $tmp;
          $limit-=$len;
          break;
        case 8:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->offer_[] = new Offer($fp, $len);
          ASSERT('$len == 0');
          break;
        case 9:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->availability_ = new Availability($fp, $len);
          ASSERT('$len == 0');
          break;
        case 10:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->image_[] = new Image($fp, $len);
          ASSERT('$len == 0');
          break;
        case 11:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->child_[] = new DocV2($fp, $len);
          ASSERT('$len == 0');
          break;
        case 12:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->containerMetadata_ = new ContainerMetadata($fp, $len);
          ASSERT('$len == 0');
          break;
        case 13:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->details_ = new DocumentDetails($fp, $len);
          ASSERT('$len == 0');
          break;
        case 14:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->aggregateRating_ = new AggregateRating($fp, $len);
          ASSERT('$len == 0');
          break;
        case 15:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->annotations_ = new Annotations($fp, $len);
          ASSERT('$len == 0');
          break;
        case 16:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->detailsUrl_ = $tmp;
          $limit-=$len;
          break;
        case 17:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->shareUrl_ = $tmp;
          $limit-=$len;
          break;
        case 18:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->reviewsUrl_ = $tmp;
          $limit-=$len;
          break;
        case 19:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->backendUrl_ = $tmp;
          $limit-=$len;
          break;
        case 20:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->purchaseDetailsUrl_ = $tmp;
          $limit-=$len;
          break;
        case 21:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->detailsReusable_ = $tmp > 0 ? true : false;
          break;
        case 22:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->subtitle_ = $tmp;
          $limit-=$len;
          break;
        case 23:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->translatedDescriptionHtml_ = $tmp;
          $limit-=$len;
          break;
        case 24:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->serverLogsCookie_ = $tmp;
          $limit-=$len;
          break;
        case 25:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->productDetails_ = new ProductDetails($fp, $len);
          ASSERT('$len == 0');
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->docid_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, strlen((string)$this->docid_));
      fwrite($fp, (string)$this->docid_);
    }
    if (!is_null($this->backendDocid_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, strlen((string)$this->backendDocid_));
      fwrite($fp, (string)$this->backendDocid_);
    }
    if (!is_null($this->docType_)) {
      fwrite($fp, "\x18");
      Protobuf::write_varint($fp, (int)$this->docType_);
    }
    if (!is_null($this->backendId_)) {
      fwrite($fp, " ");
      Protobuf::write_varint($fp, (int)$this->backendId_);
    }
    if (!is_null($this->title_)) {
      fwrite($fp, "*");
      Protobuf::write_varint($fp, strlen((string)$this->title_));
      fwrite($fp, (string)$this->title_);
    }
    if (!is_null($this->creator_)) {
      fwrite($fp, "2");
      Protobuf::write_varint($fp, strlen((string)$this->creator_));
      fwrite($fp, (string)$this->creator_);
    }
    if (!is_null($this->descriptionHtml_)) {
      fwrite($fp, ":");
      Protobuf::write_varint($fp, strlen((string)$this->descriptionHtml_));
      fwrite($fp, (string)$this->descriptionHtml_);
    }
    if (!is_null($this->offer_))
      foreach($this->offer_ as $v) {
        fwrite($fp, "B");
        Protobuf::write_varint($fp, $v->size()); // message
        $v->write($fp);
      }
    if (!is_null($this->availability_)) {
      fwrite($fp, "J");
      Protobuf::write_varint($fp, $this->availability_->size()); // message
      $this->availability_->write($fp);
    }
    if (!is_null($this->image_))
      foreach($this->image_ as $v) {
        fwrite($fp, "R");
        Protobuf::write_varint($fp, $v->size()); // message
        $v->write($fp);
      }
    if (!is_null($this->child_))
      foreach($this->child_ as $v) {
        fwrite($fp, "Z");
        Protobuf::write_varint($fp, $v->size()); // message
        $v->write($fp);
      }
    if (!is_null($this->containerMetadata_)) {
      fwrite($fp, "b");
      Protobuf::write_varint($fp, $this->containerMetadata_->size()); // message
      $this->containerMetadata_->write($fp);
    }
    if (!is_null($this->details_)) {
      fwrite($fp, "j");
      Protobuf::write_varint($fp, $this->details_->size()); // message
      $this->details_->write($fp);
    }
    if (!is_null($this->aggregateRating_)) {
      fwrite($fp, "r");
      Protobuf::write_varint($fp, $this->aggregateRating_->size()); // message
      $this->aggregateRating_->write($fp);
    }
    if (!is_null($this->annotations_)) {
      fwrite($fp, "z");
      Protobuf::write_varint($fp, $this->annotations_->size()); // message
      $this->annotations_->write($fp);
    }
    if (!is_null($this->detailsUrl_)) {
      fwrite($fp, "\x82\x01");
      Protobuf::write_varint($fp, strlen((string)$this->detailsUrl_));
      fwrite($fp, (string)$this->detailsUrl_);
    }
    if (!is_null($this->shareUrl_)) {
      fwrite($fp, "\x8a\x01");
      Protobuf::write_varint($fp, strlen((string)$this->shareUrl_));
      fwrite($fp, (string)$this->shareUrl_);
    }
    if (!is_null($this->reviewsUrl_)) {
      fwrite($fp, "\x92\x01");
      Protobuf::write_varint($fp, strlen((string)$this->reviewsUrl_));
      fwrite($fp, (string)$this->reviewsUrl_);
    }
    if (!is_null($this->backendUrl_)) {
      fwrite($fp, "\x9a\x01");
      Protobuf::write_varint($fp, strlen((string)$this->backendUrl_));
      fwrite($fp, (string)$this->backendUrl_);
    }
    if (!is_null($this->purchaseDetailsUrl_)) {
      fwrite($fp, "\xa2\x01");
      Protobuf::write_varint($fp, strlen((string)$this->purchaseDetailsUrl_));
      fwrite($fp, (string)$this->purchaseDetailsUrl_);
    }
    if (!is_null($this->detailsReusable_)) {
      fwrite($fp, "\xa8\x01");
      Protobuf::write_varint($fp, (int)$this->detailsReusable_ ? 1 : 0);
    }
    if (!is_null($this->subtitle_)) {
      fwrite($fp, "\xb2\x01");
      Protobuf::write_varint($fp, strlen((string)$this->subtitle_));
      fwrite($fp, (string)$this->subtitle_);
    }
    if (!is_null($this->translatedDescriptionHtml_)) {
      fwrite($fp, "\xba\x01");
      Protobuf::write_varint($fp, strlen((string)$this->translatedDescriptionHtml_));
      fwrite($fp, (string)$this->translatedDescriptionHtml_);
    }
    if (!is_null($this->serverLogsCookie_)) {
      fwrite($fp, "\xc2\x01");
      Protobuf::write_varint($fp, strlen((string)$this->serverLogsCookie_));
      fwrite($fp, (string)$this->serverLogsCookie_);
    }
    if (!is_null($this->productDetails_)) {
      fwrite($fp, "\xca\x01");
      Protobuf::write_varint($fp, $this->productDetails_->size()); // message
      $this->productDetails_->write($fp);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->docid_)) {
      $l = strlen((string)$this->docid_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->backendDocid_)) {
      $l = strlen((string)$this->backendDocid_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->docType_)) {
      $size += 1 + Protobuf::size_varint($this->docType_);
    }
    if (!is_null($this->backendId_)) {
      $size += 1 + Protobuf::size_varint($this->backendId_);
    }
    if (!is_null($this->title_)) {
      $l = strlen((string)$this->title_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->creator_)) {
      $l = strlen((string)$this->creator_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->descriptionHtml_)) {
      $l = strlen((string)$this->descriptionHtml_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->offer_))
      foreach($this->offer_ as $v) {
        $l = $v->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
    if (!is_null($this->availability_)) {
      $l = $this->availability_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->image_))
      foreach($this->image_ as $v) {
        $l = $v->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
    if (!is_null($this->child_))
      foreach($this->child_ as $v) {
        $l = $v->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
    if (!is_null($this->containerMetadata_)) {
      $l = $this->containerMetadata_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->details_)) {
      $l = $this->details_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->aggregateRating_)) {
      $l = $this->aggregateRating_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->annotations_)) {
      $l = $this->annotations_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->detailsUrl_)) {
      $l = strlen((string)$this->detailsUrl_);
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->shareUrl_)) {
      $l = strlen((string)$this->shareUrl_);
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->reviewsUrl_)) {
      $l = strlen((string)$this->reviewsUrl_);
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->backendUrl_)) {
      $l = strlen((string)$this->backendUrl_);
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->purchaseDetailsUrl_)) {
      $l = strlen((string)$this->purchaseDetailsUrl_);
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->detailsReusable_)) {
      $size += 3;
    }
    if (!is_null($this->subtitle_)) {
      $l = strlen((string)$this->subtitle_);
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->translatedDescriptionHtml_)) {
      $l = strlen((string)$this->translatedDescriptionHtml_);
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->serverLogsCookie_)) {
      $l = strlen((string)$this->serverLogsCookie_);
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->productDetails_)) {
      $l = $this->productDetails_->size();
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('docid_', $this->docid_)
         . Protobuf::toString('backendDocid_', $this->backendDocid_)
         . Protobuf::toString('docType_', $this->docType_)
         . Protobuf::toString('backendId_', $this->backendId_)
         . Protobuf::toString('title_', $this->title_)
         . Protobuf::toString('creator_', $this->creator_)
         . Protobuf::toString('descriptionHtml_', $this->descriptionHtml_)
         . Protobuf::toString('offer_', $this->offer_)
         . Protobuf::toString('availability_', $this->availability_)
         . Protobuf::toString('image_', $this->image_)
         . Protobuf::toString('child_', $this->child_)
         . Protobuf::toString('containerMetadata_', $this->containerMetadata_)
         . Protobuf::toString('details_', $this->details_)
         . Protobuf::toString('aggregateRating_', $this->aggregateRating_)
         . Protobuf::toString('annotations_', $this->annotations_)
         . Protobuf::toString('detailsUrl_', $this->detailsUrl_)
         . Protobuf::toString('shareUrl_', $this->shareUrl_)
         . Protobuf::toString('reviewsUrl_', $this->reviewsUrl_)
         . Protobuf::toString('backendUrl_', $this->backendUrl_)
         . Protobuf::toString('purchaseDetailsUrl_', $this->purchaseDetailsUrl_)
         . Protobuf::toString('detailsReusable_', $this->detailsReusable_)
         . Protobuf::toString('subtitle_', $this->subtitle_)
         . Protobuf::toString('translatedDescriptionHtml_', $this->translatedDescriptionHtml_)
         . Protobuf::toString('serverLogsCookie_', $this->serverLogsCookie_)
         . Protobuf::toString('productDetails_', $this->productDetails_);
  }
  
  // optional string docid = 1;

  protected $docid_;
  public function resetDocid() { unset($this->docid_); }
  public function clearDocid() { unset($this->docid_); }
  public function hasDocid() { return isset($this->docid_); }
  public function getDocid() { return $this->docid_; }
  public function setDocid($value) { $this->docid_ = (string)$value; }
  
  // optional string backendDocid = 2;

  protected $backendDocid_;
  public function resetBackendDocid() { unset($this->backendDocid_); }
  public function clearBackendDocid() { unset($this->backendDocid_); }
  public function hasBackendDocid() { return isset($this->backendDocid_); }
  public function getBackendDocid() { return $this->backendDocid_; }
  public function setBackendDocid($value) { $this->backendDocid_ = (string)$value; }
  
  // optional int32 docType = 3;

  protected $docType_;
  public function resetDocType() { unset($this->docType_); }
  public function clearDocType() { unset($this->docType_); }
  public function hasDocType() { return isset($this->docType_); }
  public function getDocType() { return $this->docType_; }
  public function setDocType($value) { $this->docType_ = (string)$value; }
  
  // optional int32 backendId = 4;

  protected $backendId_;
  public function resetBackendId() { unset($this->backendId_); }
  public function clearBackendId() { unset($this->backendId_); }
  public function hasBackendId() { return isset($this->backendId_); }
  public function getBackendId() { return $this->backendId_; }
  public function setBackendId($value) { $this->backendId_ = (string)$value; }
  
  // optional string title = 5;

  protected $title_;
  public function resetTitle() { unset($this->title_); }
  public function clearTitle() { unset($this->title_); }
  public function hasTitle() { return isset($this->title_); }
  public function getTitle() { return $this->title_; }
  public function setTitle($value) { $this->title_ = (string)$value; }
  
  // optional string creator = 6;

  protected $creator_;
  public function resetCreator() { unset($this->creator_); }
  public function clearCreator() { unset($this->creator_); }
  public function hasCreator() { return isset($this->creator_); }
  public function getCreator() { return $this->creator_; }
  public function setCreator($value) { $this->creator_ = (string)$value; }
  
  // optional string descriptionHtml = 7;

  protected $descriptionHtml_;
  public function resetDescriptionHtml() { unset($this->descriptionHtml_); }
  public function clearDescriptionHtml() { unset($this->descriptionHtml_); }
  public function hasDescriptionHtml() { return isset($this->descriptionHtml_); }
  public function getDescriptionHtml() { return $this->descriptionHtml_; }
  public function setDescriptionHtml($value) { $this->descriptionHtml_ = (string)$value; }
  
  // repeated .Offer offer = 8;

  protected $offer_ = array();
  public function clearOffer() { $this->offer_ = array(); }
  public function getOfferCount() { return count($this->offer_); }
  public function hasOffer() { return (count($this->offer_) > 0); }
  public function indexOfOffer($value) { return array_search($value,$this->offer_);}
  public function removeOffer($index) { unset($this->offer_[$index]); }
  public function removeValOffer($value) { $idx = array_search($value,$this->offer_); if($idx !== FALSE){unset($this->offer_[$idx]); }}
  public function removeValsOffer($values) { foreach($values as $value){$idx = array_search($value,$this->offer_); if($idx !== FALSE){unset($this->offer_[$idx]); }}}
  public function pushOffer($newvar) { return array_push($this->offer_,$newvar); }
  public function popOffer() { return array_pop($this->offer_); }
  public function shiftOffer() { return array_shift($this->offer_); }
  public function unshiftOffer($newvar) { return array_unshift($this->offer_,$newvar); }
  public function getOffer($index) { return $this->offer_[$index]; }
  public function getOfferArray() { return $this->offer_; }
  public function setOffer($index, $value) {$this->offer_[$index] = $value;	}
  public function addOffer($value) { $this->offer_[] = $value; }
  public function addAllOffer(array $values) { foreach($values as $value) {$this->offer_[] = $value;} }
  
  // optional .Availability availability = 9;

  protected $availability_;
  public function resetAvailability() { unset($this->availability_); }
  public function clearAvailability() { unset($this->availability_); }
  public function hasAvailability() { return isset($this->availability_); }
  public function getAvailability() { return $this->availability_; }
  public function setAvailability(Availability $value) { $this->availability_ = $value; }
  
  // repeated .Image image = 10;

  protected $image_ = array();
  public function clearImage() { $this->image_ = array(); }
  public function getImageCount() { return count($this->image_); }
  public function hasImage() { return (count($this->image_) > 0); }
  public function indexOfImage($value) { return array_search($value,$this->image_);}
  public function removeImage($index) { unset($this->image_[$index]); }
  public function removeValImage($value) { $idx = array_search($value,$this->image_); if($idx !== FALSE){unset($this->image_[$idx]); }}
  public function removeValsImage($values) { foreach($values as $value){$idx = array_search($value,$this->image_); if($idx !== FALSE){unset($this->image_[$idx]); }}}
  public function pushImage($newvar) { return array_push($this->image_,$newvar); }
  public function popImage() { return array_pop($this->image_); }
  public function shiftImage() { return array_shift($this->image_); }
  public function unshiftImage($newvar) { return array_unshift($this->image_,$newvar); }
  public function getImage($index) { return $this->image_[$index]; }
  public function getImageArray() { return $this->image_; }
  public function setImage($index, $value) {$this->image_[$index] = $value;	}
  public function addImage($value) { $this->image_[] = $value; }
  public function addAllImage(array $values) { foreach($values as $value) {$this->image_[] = $value;} }
  
  // repeated .DocV2 child = 11;

  protected $child_ = array();
  public function clearChild() { $this->child_ = array(); }
  public function getChildCount() { return count($this->child_); }
  public function hasChild() { return (count($this->child_) > 0); }
  public function indexOfChild($value) { return array_search($value,$this->child_);}
  public function removeChild($index) { unset($this->child_[$index]); }
  public function removeValChild($value) { $idx = array_search($value,$this->child_); if($idx !== FALSE){unset($this->child_[$idx]); }}
  public function removeValsChild($values) { foreach($values as $value){$idx = array_search($value,$this->child_); if($idx !== FALSE){unset($this->child_[$idx]); }}}
  public function pushChild($newvar) { return array_push($this->child_,$newvar); }
  public function popChild() { return array_pop($this->child_); }
  public function shiftChild() { return array_shift($this->child_); }
  public function unshiftChild($newvar) { return array_unshift($this->child_,$newvar); }
  public function getChild($index) { return $this->child_[$index]; }
  public function getChildArray() { return $this->child_; }
  public function setChild($index, $value) {$this->child_[$index] = $value;	}
  public function addChild($value) { $this->child_[] = $value; }
  public function addAllChild(array $values) { foreach($values as $value) {$this->child_[] = $value;} }
  
  // optional .ContainerMetadata containerMetadata = 12;

  protected $containerMetadata_;
  public function resetContainerMetadata() { unset($this->containerMetadata_); }
  public function clearContainerMetadata() { unset($this->containerMetadata_); }
  public function hasContainerMetadata() { return isset($this->containerMetadata_); }
  public function getContainerMetadata() { return $this->containerMetadata_; }
  public function setContainerMetadata(ContainerMetadata $value) { $this->containerMetadata_ = $value; }
  
  // optional .DocumentDetails details = 13;

  protected $details_;
  public function resetDetails() { unset($this->details_); }
  public function clearDetails() { unset($this->details_); }
  public function hasDetails() { return isset($this->details_); }
  public function getDetails() { return $this->details_; }
  public function setDetails(DocumentDetails $value) { $this->details_ = $value; }
  
  // optional .AggregateRating aggregateRating = 14;

  protected $aggregateRating_;
  public function resetAggregateRating() { unset($this->aggregateRating_); }
  public function clearAggregateRating() { unset($this->aggregateRating_); }
  public function hasAggregateRating() { return isset($this->aggregateRating_); }
  public function getAggregateRating() { return $this->aggregateRating_; }
  public function setAggregateRating(AggregateRating $value) { $this->aggregateRating_ = $value; }
  
  // optional .Annotations annotations = 15;

  protected $annotations_;
  public function resetAnnotations() { unset($this->annotations_); }
  public function clearAnnotations() { unset($this->annotations_); }
  public function hasAnnotations() { return isset($this->annotations_); }
  public function getAnnotations() { return $this->annotations_; }
  public function setAnnotations(Annotations $value) { $this->annotations_ = $value; }
  
  // optional string detailsUrl = 16;

  protected $detailsUrl_;
  public function resetDetailsUrl() { unset($this->detailsUrl_); }
  public function clearDetailsUrl() { unset($this->detailsUrl_); }
  public function hasDetailsUrl() { return isset($this->detailsUrl_); }
  public function getDetailsUrl() { return $this->detailsUrl_; }
  public function setDetailsUrl($value) { $this->detailsUrl_ = (string)$value; }
  
  // optional string shareUrl = 17;

  protected $shareUrl_;
  public function resetShareUrl() { unset($this->shareUrl_); }
  public function clearShareUrl() { unset($this->shareUrl_); }
  public function hasShareUrl() { return isset($this->shareUrl_); }
  public function getShareUrl() { return $this->shareUrl_; }
  public function setShareUrl($value) { $this->shareUrl_ = (string)$value; }
  
  // optional string reviewsUrl = 18;

  protected $reviewsUrl_;
  public function resetReviewsUrl() { unset($this->reviewsUrl_); }
  public function clearReviewsUrl() { unset($this->reviewsUrl_); }
  public function hasReviewsUrl() { return isset($this->reviewsUrl_); }
  public function getReviewsUrl() { return $this->reviewsUrl_; }
  public function setReviewsUrl($value) { $this->reviewsUrl_ = (string)$value; }
  
  // optional string backendUrl = 19;

  protected $backendUrl_;
  public function resetBackendUrl() { unset($this->backendUrl_); }
  public function clearBackendUrl() { unset($this->backendUrl_); }
  public function hasBackendUrl() { return isset($this->backendUrl_); }
  public function getBackendUrl() { return $this->backendUrl_; }
  public function setBackendUrl($value) { $this->backendUrl_ = (string)$value; }
  
  // optional string purchaseDetailsUrl = 20;

  protected $purchaseDetailsUrl_;
  public function resetPurchaseDetailsUrl() { unset($this->purchaseDetailsUrl_); }
  public function clearPurchaseDetailsUrl() { unset($this->purchaseDetailsUrl_); }
  public function hasPurchaseDetailsUrl() { return isset($this->purchaseDetailsUrl_); }
  public function getPurchaseDetailsUrl() { return $this->purchaseDetailsUrl_; }
  public function setPurchaseDetailsUrl($value) { $this->purchaseDetailsUrl_ = (string)$value; }
  
  // optional bool detailsReusable = 21;

  protected $detailsReusable_;
  public function resetDetailsReusable() { unset($this->detailsReusable_); }
  public function clearDetailsReusable() { unset($this->detailsReusable_); }
  public function hasDetailsReusable() { return isset($this->detailsReusable_); }
  public function getDetailsReusable() { return $this->detailsReusable_; }
  public function setDetailsReusable($value) { $this->detailsReusable_ = (bool)$value; }
  
  // optional string subtitle = 22;

  protected $subtitle_;
  public function resetSubtitle() { unset($this->subtitle_); }
  public function clearSubtitle() { unset($this->subtitle_); }
  public function hasSubtitle() { return isset($this->subtitle_); }
  public function getSubtitle() { return $this->subtitle_; }
  public function setSubtitle($value) { $this->subtitle_ = (string)$value; }
  
  // optional string translatedDescriptionHtml = 23;

  protected $translatedDescriptionHtml_;
  public function resetTranslatedDescriptionHtml() { unset($this->translatedDescriptionHtml_); }
  public function clearTranslatedDescriptionHtml() { unset($this->translatedDescriptionHtml_); }
  public function hasTranslatedDescriptionHtml() { return isset($this->translatedDescriptionHtml_); }
  public function getTranslatedDescriptionHtml() { return $this->translatedDescriptionHtml_; }
  public function setTranslatedDescriptionHtml($value) { $this->translatedDescriptionHtml_ = (string)$value; }
  
  // optional bytes serverLogsCookie = 24;

  protected $serverLogsCookie_;
  public function resetServerLogsCookie() { unset($this->serverLogsCookie_); }
  public function clearServerLogsCookie() { unset($this->serverLogsCookie_); }
  public function hasServerLogsCookie() { return isset($this->serverLogsCookie_); }
  public function getServerLogsCookie() { return $this->serverLogsCookie_; }
  public function setServerLogsCookie($value) { $this->serverLogsCookie_ = (string)$value; }
  
  // optional .ProductDetails productDetails = 25;

  protected $productDetails_;
  public function resetProductDetails() { unset($this->productDetails_); }
  public function clearProductDetails() { unset($this->productDetails_); }
  public function hasProductDetails() { return isset($this->productDetails_); }
  public function getProductDetails() { return $this->productDetails_; }
  public function setProductDetails(ProductDetails $value) { $this->productDetails_ = $value; }
  
  // @@protoc_insertion_point(class_scope:DocV2)
}

// message EncryptedSubscriberInfo
class EncryptedSubscriberInfo {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("EncryptedSubscriberInfo: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->data_ = $tmp;
          $limit-=$len;
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->encryptedKey_ = $tmp;
          $limit-=$len;
          break;
        case 3:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->signature_ = $tmp;
          $limit-=$len;
          break;
        case 4:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->initVector_ = $tmp;
          $limit-=$len;
          break;
        case 5:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->googleKeyVersion_ = $tmp;
          
          break;
        case 6:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->carrierKeyVersion_ = $tmp;
          
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->data_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, strlen((string)$this->data_));
      fwrite($fp, (string)$this->data_);
    }
    if (!is_null($this->encryptedKey_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, strlen((string)$this->encryptedKey_));
      fwrite($fp, (string)$this->encryptedKey_);
    }
    if (!is_null($this->signature_)) {
      fwrite($fp, "\x1a");
      Protobuf::write_varint($fp, strlen((string)$this->signature_));
      fwrite($fp, (string)$this->signature_);
    }
    if (!is_null($this->initVector_)) {
      fwrite($fp, "\"");
      Protobuf::write_varint($fp, strlen((string)$this->initVector_));
      fwrite($fp, (string)$this->initVector_);
    }
    if (!is_null($this->googleKeyVersion_)) {
      fwrite($fp, "(");
      Protobuf::write_varint($fp, (int)$this->googleKeyVersion_);
    }
    if (!is_null($this->carrierKeyVersion_)) {
      fwrite($fp, "0");
      Protobuf::write_varint($fp, (int)$this->carrierKeyVersion_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->data_)) {
      $l = strlen((string)$this->data_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->encryptedKey_)) {
      $l = strlen((string)$this->encryptedKey_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->signature_)) {
      $l = strlen((string)$this->signature_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->initVector_)) {
      $l = strlen((string)$this->initVector_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->googleKeyVersion_)) {
      $size += 1 + Protobuf::size_varint($this->googleKeyVersion_);
    }
    if (!is_null($this->carrierKeyVersion_)) {
      $size += 1 + Protobuf::size_varint($this->carrierKeyVersion_);
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('data_', $this->data_)
         . Protobuf::toString('encryptedKey_', $this->encryptedKey_)
         . Protobuf::toString('signature_', $this->signature_)
         . Protobuf::toString('initVector_', $this->initVector_)
         . Protobuf::toString('googleKeyVersion_', $this->googleKeyVersion_)
         . Protobuf::toString('carrierKeyVersion_', $this->carrierKeyVersion_);
  }
  
  // optional string data = 1;

  protected $data_;
  public function resetData() { unset($this->data_); }
  public function clearData() { unset($this->data_); }
  public function hasData() { return isset($this->data_); }
  public function getData() { return $this->data_; }
  public function setData($value) { $this->data_ = (string)$value; }
  
  // optional string encryptedKey = 2;

  protected $encryptedKey_;
  public function resetEncryptedKey() { unset($this->encryptedKey_); }
  public function clearEncryptedKey() { unset($this->encryptedKey_); }
  public function hasEncryptedKey() { return isset($this->encryptedKey_); }
  public function getEncryptedKey() { return $this->encryptedKey_; }
  public function setEncryptedKey($value) { $this->encryptedKey_ = (string)$value; }
  
  // optional string signature = 3;

  protected $signature_;
  public function resetSignature() { unset($this->signature_); }
  public function clearSignature() { unset($this->signature_); }
  public function hasSignature() { return isset($this->signature_); }
  public function getSignature() { return $this->signature_; }
  public function setSignature($value) { $this->signature_ = (string)$value; }
  
  // optional string initVector = 4;

  protected $initVector_;
  public function resetInitVector() { unset($this->initVector_); }
  public function clearInitVector() { unset($this->initVector_); }
  public function hasInitVector() { return isset($this->initVector_); }
  public function getInitVector() { return $this->initVector_; }
  public function setInitVector($value) { $this->initVector_ = (string)$value; }
  
  // optional int32 googleKeyVersion = 5;

  protected $googleKeyVersion_;
  public function resetGoogleKeyVersion() { unset($this->googleKeyVersion_); }
  public function clearGoogleKeyVersion() { unset($this->googleKeyVersion_); }
  public function hasGoogleKeyVersion() { return isset($this->googleKeyVersion_); }
  public function getGoogleKeyVersion() { return $this->googleKeyVersion_; }
  public function setGoogleKeyVersion($value) { $this->googleKeyVersion_ = (string)$value; }
  
  // optional int32 carrierKeyVersion = 6;

  protected $carrierKeyVersion_;
  public function resetCarrierKeyVersion() { unset($this->carrierKeyVersion_); }
  public function clearCarrierKeyVersion() { unset($this->carrierKeyVersion_); }
  public function hasCarrierKeyVersion() { return isset($this->carrierKeyVersion_); }
  public function getCarrierKeyVersion() { return $this->carrierKeyVersion_; }
  public function setCarrierKeyVersion($value) { $this->carrierKeyVersion_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:EncryptedSubscriberInfo)
}


// group Availability.PerDeviceAvailabilityRestriction
class Availability_PerDeviceAvailabilityRestriction {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("Availability_PerDeviceAvailabilityRestriction: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 9:
          ASSERT('$wire == 4');
          break 2;
        case 10:
          ASSERT('$wire == 1');
          $tmp = Protobuf::read_uint64($fp);
          //$tmp = Protobuf::read_varint($fp);
          if ($tmp === false)
            throw new Exception('Protobuf::read_unint64 returned false');
          $this->androidId_ = $tmp;
          $limit-=8;
          break;
        case 11:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->deviceRestriction_ = $tmp;
          
          break;
        case 12:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->channelId_ = $tmp;
          
          break;
        case 15:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->filterInfo_ = new FilterEvaluationInfo($fp, $len);
          ASSERT('$len == 0');
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->androidId_)) {
      fwrite($fp, "Q");
      Protobuf::write_uint64($fp, (int)$this->androidId_);
    }
    if (!is_null($this->deviceRestriction_)) {
      fwrite($fp, "X");
      Protobuf::write_varint($fp, (int)$this->deviceRestriction_);
    }
    if (!is_null($this->channelId_)) {
      fwrite($fp, "`");
      Protobuf::write_varint($fp, (int)$this->channelId_);
    }
    if (!is_null($this->filterInfo_)) {
      fwrite($fp, "z");
      Protobuf::write_varint($fp, $this->filterInfo_->size()); // message
      $this->filterInfo_->write($fp);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->androidId_)) {
      $size += 9;
    }
    if (!is_null($this->deviceRestriction_)) {
      $size += 1 + Protobuf::size_varint($this->deviceRestriction_);
    }
    if (!is_null($this->channelId_)) {
      $size += 1 + Protobuf::size_varint($this->channelId_);
    }
    if (!is_null($this->filterInfo_)) {
      $l = $this->filterInfo_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('androidId_', $this->androidId_)
         . Protobuf::toString('deviceRestriction_', $this->deviceRestriction_)
         . Protobuf::toString('channelId_', $this->channelId_)
         . Protobuf::toString('filterInfo_', $this->filterInfo_);
  }
  
  // optional fixed64 androidId = 10;

  protected $androidId_;
  public function resetAndroidId() { unset($this->androidId_); }
  public function clearAndroidId() { unset($this->androidId_); }
  public function hasAndroidId() { return isset($this->androidId_); }
  public function getAndroidId() { return $this->androidId_; }
  public function setAndroidId($value) { $this->androidId_ = (int)$value; }
  
  // optional int32 deviceRestriction = 11;

  protected $deviceRestriction_;
  public function resetDeviceRestriction() { unset($this->deviceRestriction_); }
  public function clearDeviceRestriction() { unset($this->deviceRestriction_); }
  public function hasDeviceRestriction() { return isset($this->deviceRestriction_); }
  public function getDeviceRestriction() { return $this->deviceRestriction_; }
  public function setDeviceRestriction($value) { $this->deviceRestriction_ = (string)$value; }
  
  // optional int64 channelId = 12;

  protected $channelId_;
  public function resetChannelId() { unset($this->channelId_); }
  public function clearChannelId() { unset($this->channelId_); }
  public function hasChannelId() { return isset($this->channelId_); }
  public function getChannelId() { return $this->channelId_; }
  public function setChannelId($value) { $this->channelId_ = (string)$value; }
  
  // optional .FilterEvaluationInfo filterInfo = 15;

  protected $filterInfo_;
  public function resetFilterInfo() { unset($this->filterInfo_); }
  public function clearFilterInfo() { unset($this->filterInfo_); }
  public function hasFilterInfo() { return isset($this->filterInfo_); }
  public function getFilterInfo() { return $this->filterInfo_; }
  public function setFilterInfo(FilterEvaluationInfo $value) { $this->filterInfo_ = $value; }
  
  // @@protoc_insertion_point(class_scope:Availability.PerDeviceAvailabilityRestriction)
}

// message Availability
class Availability {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("Availability: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 5:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->restriction_ = $tmp;
          
          break;
        case 6:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->offerType_ = $tmp;
          
          break;
        case 7:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->rule_ = new Rule($fp, $len);
          ASSERT('$len == 0');
          break;
        case 9:
          ASSERT('$wire == 3');
          $this->perdeviceavailabilityrestriction_[] = new Availability_PerDeviceAvailabilityRestriction($fp, $limit);
          break;
        case 13:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->availableIfOwned_ = $tmp > 0 ? true : false;
          break;
        case 14:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->install_[] = new Install($fp, $len);
          ASSERT('$len == 0');
          break;
        case 16:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->filterInfo_ = new FilterEvaluationInfo($fp, $len);
          ASSERT('$len == 0');
          break;
        case 17:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->ownershipInfo_ = new OwnershipInfo($fp, $len);
          ASSERT('$len == 0');
          break;
        case 18:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->availabilityProblem_[] = new AvailabilityProblem($fp, $len);
          ASSERT('$len == 0');
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->restriction_)) {
      fwrite($fp, "(");
      Protobuf::write_varint($fp, (int)$this->restriction_);
    }
    if (!is_null($this->offerType_)) {
      fwrite($fp, "0");
      Protobuf::write_varint($fp, (int)$this->offerType_);
    }
    if (!is_null($this->rule_)) {
      fwrite($fp, ":");
      Protobuf::write_varint($fp, $this->rule_->size()); // message
      $this->rule_->write($fp);
    }
    if (!is_null($this->perdeviceavailabilityrestriction_))
      foreach($this->perdeviceavailabilityrestriction_ as $v) {
        fwrite($fp, "K");
        $v->write($fp); // group
        fwrite($fp, "L");
      }
    if (!is_null($this->availableIfOwned_)) {
      fwrite($fp, "h");
      Protobuf::write_varint($fp, (int)$this->availableIfOwned_ ? 1 : 0);
    }
    if (!is_null($this->install_))
      foreach($this->install_ as $v) {
        fwrite($fp, "r");
        Protobuf::write_varint($fp, $v->size()); // message
        $v->write($fp);
      }
    if (!is_null($this->filterInfo_)) {
      fwrite($fp, "\x82\x01");
      Protobuf::write_varint($fp, $this->filterInfo_->size()); // message
      $this->filterInfo_->write($fp);
    }
    if (!is_null($this->ownershipInfo_)) {
      fwrite($fp, "\x8a\x01");
      Protobuf::write_varint($fp, $this->ownershipInfo_->size()); // message
      $this->ownershipInfo_->write($fp);
    }
    if (!is_null($this->availabilityProblem_))
      foreach($this->availabilityProblem_ as $v) {
        fwrite($fp, "\x92\x01");
        Protobuf::write_varint($fp, $v->size()); // message
        $v->write($fp);
      }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->restriction_)) {
      $size += 1 + Protobuf::size_varint($this->restriction_);
    }
    if (!is_null($this->offerType_)) {
      $size += 1 + Protobuf::size_varint($this->offerType_);
    }
    if (!is_null($this->rule_)) {
      $l = $this->rule_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->perdeviceavailabilityrestriction_))
      foreach($this->perdeviceavailabilityrestriction_ as $v) {
        $size += 2 + $v->size();
      }
    if (!is_null($this->availableIfOwned_)) {
      $size += 2;
    }
    if (!is_null($this->install_))
      foreach($this->install_ as $v) {
        $l = $v->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
    if (!is_null($this->filterInfo_)) {
      $l = $this->filterInfo_->size();
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->ownershipInfo_)) {
      $l = $this->ownershipInfo_->size();
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->availabilityProblem_))
      foreach($this->availabilityProblem_ as $v) {
        $l = $v->size();
        $size += 2 + Protobuf::size_varint($l) + $l;
      }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('restriction_', $this->restriction_)
         . Protobuf::toString('offerType_', $this->offerType_)
         . Protobuf::toString('rule_', $this->rule_)
         . Protobuf::toString('perdeviceavailabilityrestriction_', $this->perdeviceavailabilityrestriction_)
         . Protobuf::toString('availableIfOwned_', $this->availableIfOwned_)
         . Protobuf::toString('install_', $this->install_)
         . Protobuf::toString('filterInfo_', $this->filterInfo_)
         . Protobuf::toString('ownershipInfo_', $this->ownershipInfo_)
         . Protobuf::toString('availabilityProblem_', $this->availabilityProblem_);
  }
  
  // optional int32 restriction = 5;

  protected $restriction_;
  public function resetRestriction() { unset($this->restriction_); }
  public function clearRestriction() { unset($this->restriction_); }
  public function hasRestriction() { return isset($this->restriction_); }
  public function getRestriction() { return $this->restriction_; }
  public function setRestriction($value) { $this->restriction_ = (string)$value; }
  
  // optional int32 offerType = 6;

  protected $offerType_;
  public function resetOfferType() { unset($this->offerType_); }
  public function clearOfferType() { unset($this->offerType_); }
  public function hasOfferType() { return isset($this->offerType_); }
  public function getOfferType() { return $this->offerType_; }
  public function setOfferType($value) { $this->offerType_ = (string)$value; }
  
  // optional .Rule rule = 7;

  protected $rule_;
  public function resetRule() { unset($this->rule_); }
  public function clearRule() { unset($this->rule_); }
  public function hasRule() { return isset($this->rule_); }
  public function getRule() { return $this->rule_; }
  public function setRule(Rule $value) { $this->rule_ = $value; }
  
  // repeated group PerDeviceAvailabilityRestriction = 9
  protected $perdeviceavailabilityrestriction_ = array();
  public function clearPerdeviceavailabilityrestriction() { $this->perdeviceavailabilityrestriction_ = array(); }
  public function getPerdeviceavailabilityrestrictionCount() { return count($this->perdeviceavailabilityrestriction_); }
  public function hasPerdeviceavailabilityrestriction() { return (count($this->perdeviceavailabilityrestriction_) > 0); }
  public function indexOfPerdeviceavailabilityrestriction($value) { return array_search($value,$this->perdeviceavailabilityrestriction_);}
  public function removePerdeviceavailabilityrestriction($index) { unset($this->perdeviceavailabilityrestriction_[$index]); }
  public function removeValPerdeviceavailabilityrestriction($value) { $idx = array_search($value,$this->perdeviceavailabilityrestriction_); if($idx !== FALSE){unset($this->perdeviceavailabilityrestriction_[$idx]); }}
  public function removeValsPerdeviceavailabilityrestriction($values) { foreach($values as $value){$idx = array_search($value,$this->perdeviceavailabilityrestriction_); if($idx !== FALSE){unset($this->perdeviceavailabilityrestriction_[$idx]); }}}
  public function pushPerdeviceavailabilityrestriction($newvar) { return array_push($this->perdeviceavailabilityrestriction_,$newvar); }
  public function popPerdeviceavailabilityrestriction() { return array_pop($this->perdeviceavailabilityrestriction_); }
  public function shiftPerdeviceavailabilityrestriction() { return array_shift($this->perdeviceavailabilityrestriction_); }
  public function unshiftPerdeviceavailabilityrestriction($newvar) { return array_unshift($this->perdeviceavailabilityrestriction_,$newvar); }
  public function getPerdeviceavailabilityrestriction($index) { return $this->perdeviceavailabilityrestriction_[$index]; }
  public function getPerdeviceavailabilityrestrictionArray() { return $this->perdeviceavailabilityrestriction_; }
  public function setPerdeviceavailabilityrestriction($index, $value) {$this->perdeviceavailabilityrestriction_[$index] = $value;	}
  public function addPerdeviceavailabilityrestriction($value) { $this->perdeviceavailabilityrestriction_[] = $value; }
  public function addAllPerdeviceavailabilityrestriction(array $values) { foreach($values as $value) {$this->perdeviceavailabilityrestriction_[] = $value;} }
  
  // optional bool availableIfOwned = 13;

  protected $availableIfOwned_;
  public function resetAvailableIfOwned() { unset($this->availableIfOwned_); }
  public function clearAvailableIfOwned() { unset($this->availableIfOwned_); }
  public function hasAvailableIfOwned() { return isset($this->availableIfOwned_); }
  public function getAvailableIfOwned() { return $this->availableIfOwned_; }
  public function setAvailableIfOwned($value) { $this->availableIfOwned_ = (bool)$value; }
  
  // repeated .Install install = 14;

  protected $install_ = array();
  public function clearInstall() { $this->install_ = array(); }
  public function getInstallCount() { return count($this->install_); }
  public function hasInstall() { return (count($this->install_) > 0); }
  public function indexOfInstall($value) { return array_search($value,$this->install_);}
  public function removeInstall($index) { unset($this->install_[$index]); }
  public function removeValInstall($value) { $idx = array_search($value,$this->install_); if($idx !== FALSE){unset($this->install_[$idx]); }}
  public function removeValsInstall($values) { foreach($values as $value){$idx = array_search($value,$this->install_); if($idx !== FALSE){unset($this->install_[$idx]); }}}
  public function pushInstall($newvar) { return array_push($this->install_,$newvar); }
  public function popInstall() { return array_pop($this->install_); }
  public function shiftInstall() { return array_shift($this->install_); }
  public function unshiftInstall($newvar) { return array_unshift($this->install_,$newvar); }
  public function getInstall($index) { return $this->install_[$index]; }
  public function getInstallArray() { return $this->install_; }
  public function setInstall($index, $value) {$this->install_[$index] = $value;	}
  public function addInstall($value) { $this->install_[] = $value; }
  public function addAllInstall(array $values) { foreach($values as $value) {$this->install_[] = $value;} }
  
  // optional .FilterEvaluationInfo filterInfo = 16;

  protected $filterInfo_;
  public function resetFilterInfo() { unset($this->filterInfo_); }
  public function clearFilterInfo() { unset($this->filterInfo_); }
  public function hasFilterInfo() { return isset($this->filterInfo_); }
  public function getFilterInfo() { return $this->filterInfo_; }
  public function setFilterInfo(FilterEvaluationInfo $value) { $this->filterInfo_ = $value; }
  
  // optional .OwnershipInfo ownershipInfo = 17;

  protected $ownershipInfo_;
  public function resetOwnershipInfo() { unset($this->ownershipInfo_); }
  public function clearOwnershipInfo() { unset($this->ownershipInfo_); }
  public function hasOwnershipInfo() { return isset($this->ownershipInfo_); }
  public function getOwnershipInfo() { return $this->ownershipInfo_; }
  public function setOwnershipInfo(OwnershipInfo $value) { $this->ownershipInfo_ = $value; }
  
  // repeated .AvailabilityProblem availabilityProblem = 18;

  protected $availabilityProblem_ = array();
  public function clearAvailabilityProblem() { $this->availabilityProblem_ = array(); }
  public function getAvailabilityProblemCount() { return count($this->availabilityProblem_); }
  public function hasAvailabilityProblem() { return (count($this->availabilityProblem_) > 0); }
  public function indexOfAvailabilityProblem($value) { return array_search($value,$this->availabilityProblem_);}
  public function removeAvailabilityProblem($index) { unset($this->availabilityProblem_[$index]); }
  public function removeValAvailabilityProblem($value) { $idx = array_search($value,$this->availabilityProblem_); if($idx !== FALSE){unset($this->availabilityProblem_[$idx]); }}
  public function removeValsAvailabilityProblem($values) { foreach($values as $value){$idx = array_search($value,$this->availabilityProblem_); if($idx !== FALSE){unset($this->availabilityProblem_[$idx]); }}}
  public function pushAvailabilityProblem($newvar) { return array_push($this->availabilityProblem_,$newvar); }
  public function popAvailabilityProblem() { return array_pop($this->availabilityProblem_); }
  public function shiftAvailabilityProblem() { return array_shift($this->availabilityProblem_); }
  public function unshiftAvailabilityProblem($newvar) { return array_unshift($this->availabilityProblem_,$newvar); }
  public function getAvailabilityProblem($index) { return $this->availabilityProblem_[$index]; }
  public function getAvailabilityProblemArray() { return $this->availabilityProblem_; }
  public function setAvailabilityProblem($index, $value) {$this->availabilityProblem_[$index] = $value;	}
  public function addAvailabilityProblem($value) { $this->availabilityProblem_[] = $value; }
  public function addAllAvailabilityProblem(array $values) { foreach($values as $value) {$this->availabilityProblem_[] = $value;} }
  
  // @@protoc_insertion_point(class_scope:Availability)
}

// message AvailabilityProblem
class AvailabilityProblem {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("AvailabilityProblem: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->problemType_ = $tmp;
          
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->missingValue_[] = $tmp;
          $limit-=$len;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->problemType_)) {
      fwrite($fp, "\x08");
      Protobuf::write_varint($fp, (int)$this->problemType_);
    }
    if (!is_null($this->missingValue_))
      foreach($this->missingValue_ as $v) {
        fwrite($fp, "\x12");
        Protobuf::write_varint($fp, strlen((string)$v));
        fwrite($fp, (string)$v);
      }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->problemType_)) {
      $size += 1 + Protobuf::size_varint($this->problemType_);
    }
    if (!is_null($this->missingValue_))
      foreach($this->missingValue_ as $v) {
        $l = strlen((string)$v);
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('problemType_', $this->problemType_)
         . Protobuf::toString('missingValue_', $this->missingValue_);
  }
  
  // optional int32 problemType = 1;

  protected $problemType_;
  public function resetProblemType() { unset($this->problemType_); }
  public function clearProblemType() { unset($this->problemType_); }
  public function hasProblemType() { return isset($this->problemType_); }
  public function getProblemType() { return $this->problemType_; }
  public function setProblemType($value) { $this->problemType_ = (string)$value; }
  
  // repeated string missingValue = 2;

  protected $missingValue_ = array();
  public function clearMissingValue() { $this->missingValue_ = array(); }
  public function getMissingValueCount() { return count($this->missingValue_); }
  public function hasMissingValue() { return (count($this->missingValue_) > 0); }
  public function indexOfMissingValue($value) { return array_search($value,$this->missingValue_);}
  public function removeMissingValue($index) { unset($this->missingValue_[$index]); }
  public function removeValMissingValue($value) { $idx = array_search($value,$this->missingValue_); if($idx !== FALSE){unset($this->missingValue_[$idx]); }}
  public function removeValsMissingValue($values) { foreach($values as $value){$idx = array_search($value,$this->missingValue_); if($idx !== FALSE){unset($this->missingValue_[$idx]); }}}
  public function pushMissingValue($newvar) { return array_push($this->missingValue_,(string)$newvar); }
  public function popMissingValue() { return array_pop($this->missingValue_); }
  public function shiftMissingValue() { return array_shift($this->missingValue_); }
  public function unshiftMissingValue($newvar) { return array_unshift($this->missingValue_,(string)$newvar); }
  public function getMissingValue($index) { return $this->missingValue_[$index]; }
  public function getMissingValueArray() { return $this->missingValue_; }
  public function setMissingValue($index, $value) {$this->missingValue_[$index] = (string)$value;	}
  public function addMissingValue($value) { $this->missingValue_[] = (string)$value; }
  public function addAllMissingValue(array $values) { foreach($values as $value) {$this->missingValue_[] = (string)$value;} }
  
  // @@protoc_insertion_point(class_scope:AvailabilityProblem)
}

// message FilterEvaluationInfo
class FilterEvaluationInfo {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("FilterEvaluationInfo: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->ruleEvaluation_[] = new RuleEvaluation($fp, $len);
          ASSERT('$len == 0');
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->ruleEvaluation_))
      foreach($this->ruleEvaluation_ as $v) {
        fwrite($fp, "\x0a");
        Protobuf::write_varint($fp, $v->size()); // message
        $v->write($fp);
      }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->ruleEvaluation_))
      foreach($this->ruleEvaluation_ as $v) {
        $l = $v->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('ruleEvaluation_', $this->ruleEvaluation_);
  }
  
  // repeated .RuleEvaluation ruleEvaluation = 1;

  protected $ruleEvaluation_ = array();
  public function clearRuleEvaluation() { $this->ruleEvaluation_ = array(); }
  public function getRuleEvaluationCount() { return count($this->ruleEvaluation_); }
  public function hasRuleEvaluation() { return (count($this->ruleEvaluation_) > 0); }
  public function indexOfRuleEvaluation($value) { return array_search($value,$this->ruleEvaluation_);}
  public function removeRuleEvaluation($index) { unset($this->ruleEvaluation_[$index]); }
  public function removeValRuleEvaluation($value) { $idx = array_search($value,$this->ruleEvaluation_); if($idx !== FALSE){unset($this->ruleEvaluation_[$idx]); }}
  public function removeValsRuleEvaluation($values) { foreach($values as $value){$idx = array_search($value,$this->ruleEvaluation_); if($idx !== FALSE){unset($this->ruleEvaluation_[$idx]); }}}
  public function pushRuleEvaluation($newvar) { return array_push($this->ruleEvaluation_,$newvar); }
  public function popRuleEvaluation() { return array_pop($this->ruleEvaluation_); }
  public function shiftRuleEvaluation() { return array_shift($this->ruleEvaluation_); }
  public function unshiftRuleEvaluation($newvar) { return array_unshift($this->ruleEvaluation_,$newvar); }
  public function getRuleEvaluation($index) { return $this->ruleEvaluation_[$index]; }
  public function getRuleEvaluationArray() { return $this->ruleEvaluation_; }
  public function setRuleEvaluation($index, $value) {$this->ruleEvaluation_[$index] = $value;	}
  public function addRuleEvaluation($value) { $this->ruleEvaluation_[] = $value; }
  public function addAllRuleEvaluation(array $values) { foreach($values as $value) {$this->ruleEvaluation_[] = $value;} }
  
  // @@protoc_insertion_point(class_scope:FilterEvaluationInfo)
}

// message Rule
class Rule {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("Rule: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->negate_ = $tmp > 0 ? true : false;
          break;
        case 2:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->operator_ = $tmp;
          
          break;
        case 3:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->key_ = $tmp;
          
          break;
        case 4:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->stringArg_[] = $tmp;
          $limit-=$len;
          break;
        case 5:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->longArg_[] = $tmp;
          
          break;
        case 6:
          ASSERT('$wire == 1');
          $tmp = Protobuf::read_double($fp);
          if ($tmp === false)
            throw new Exception('Protobuf::read_double returned false');
          $this->doubleArg_[] = $tmp;
          $limit-=8;
          break;
        case 7:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->subrule_[] = new Rule($fp, $len);
          ASSERT('$len == 0');
          break;
        case 8:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->responseCode_ = $tmp;
          
          break;
        case 9:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->comment_ = $tmp;
          $limit-=$len;
          break;
        case 10:
          ASSERT('$wire == 1');
          $tmp = Protobuf::read_uint64($fp);
          if ($tmp === false)
            throw new Exception('Protobuf::read_unint64 returned false');
          $this->stringArgHash_[] = $tmp;
          $limit-=8;
          break;
        case 11:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->constArg_[] = $tmp;
          
          break;
        case 12:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->availabilityProblemType_ = $tmp;
          
          break;
        case 13:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->includeMissingValues_ = $tmp > 0 ? true : false;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->negate_)) {
      fwrite($fp, "\x08");
      Protobuf::write_varint($fp, (int)$this->negate_ ? 1 : 0);
    }
    if (!is_null($this->operator_)) {
      fwrite($fp, "\x10");
      Protobuf::write_varint($fp, (int)$this->operator_);
    }
    if (!is_null($this->key_)) {
      fwrite($fp, "\x18");
      Protobuf::write_varint($fp, (int)$this->key_);
    }
    if (!is_null($this->stringArg_))
      foreach($this->stringArg_ as $v) {
        fwrite($fp, "\"");
        Protobuf::write_varint($fp, strlen((string)$v));
        fwrite($fp, (string)$v);
      }
    if (!is_null($this->longArg_))
      foreach($this->longArg_ as $v) {
        fwrite($fp, "(");
        Protobuf::write_varint($fp, (int)$v);
      }
    if (!is_null($this->doubleArg_))
      foreach($this->doubleArg_ as $v) {
        fwrite($fp, "1");
        Protobuf::write_double($fp, (double)$v);
      }
    if (!is_null($this->subrule_))
      foreach($this->subrule_ as $v) {
        fwrite($fp, ":");
        Protobuf::write_varint($fp, $v->size()); // message
        $v->write($fp);
      }
    if (!is_null($this->responseCode_)) {
      fwrite($fp, "@");
      Protobuf::write_varint($fp, (int)$this->responseCode_);
    }
    if (!is_null($this->comment_)) {
      fwrite($fp, "J");
      Protobuf::write_varint($fp, strlen((string)$this->comment_));
      fwrite($fp, (string)$this->comment_);
    }
    if (!is_null($this->stringArgHash_))
      foreach($this->stringArgHash_ as $v) {
        fwrite($fp, "Q");
        Protobuf::write_uint64($fp, (int)$v);
      }
    if (!is_null($this->constArg_))
      foreach($this->constArg_ as $v) {
        fwrite($fp, "X");
        Protobuf::write_varint($fp, (int)$v);
      }
    if (!is_null($this->availabilityProblemType_)) {
      fwrite($fp, "`");
      Protobuf::write_varint($fp, (int)$this->availabilityProblemType_);
    }
    if (!is_null($this->includeMissingValues_)) {
      fwrite($fp, "h");
      Protobuf::write_varint($fp, (int)$this->includeMissingValues_ ? 1 : 0);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->negate_)) {
      $size += 2;
    }
    if (!is_null($this->operator_)) {
      $size += 1 + Protobuf::size_varint($this->operator_);
    }
    if (!is_null($this->key_)) {
      $size += 1 + Protobuf::size_varint($this->key_);
    }
    if (!is_null($this->stringArg_))
      foreach($this->stringArg_ as $v) {
        $l = strlen((string)$v);
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
    if (!is_null($this->longArg_))
      foreach($this->longArg_ as $v) {
        $size += 1 + Protobuf::size_varint($v);
      }
    if (!is_null($this->doubleArg_))
      foreach($this->doubleArg_ as $v) {
        $size += 9;
      }
    if (!is_null($this->subrule_))
      foreach($this->subrule_ as $v) {
        $l = $v->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
    if (!is_null($this->responseCode_)) {
      $size += 1 + Protobuf::size_varint($this->responseCode_);
    }
    if (!is_null($this->comment_)) {
      $l = strlen((string)$this->comment_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->stringArgHash_))
      foreach($this->stringArgHash_ as $v) {
        $size += 9;
      }
    if (!is_null($this->constArg_))
      foreach($this->constArg_ as $v) {
        $size += 1 + Protobuf::size_varint($v);
      }
    if (!is_null($this->availabilityProblemType_)) {
      $size += 1 + Protobuf::size_varint($this->availabilityProblemType_);
    }
    if (!is_null($this->includeMissingValues_)) {
      $size += 2;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('negate_', $this->negate_)
         . Protobuf::toString('operator_', $this->operator_)
         . Protobuf::toString('key_', $this->key_)
         . Protobuf::toString('stringArg_', $this->stringArg_)
         . Protobuf::toString('longArg_', $this->longArg_)
         . Protobuf::toString('doubleArg_', $this->doubleArg_)
         . Protobuf::toString('subrule_', $this->subrule_)
         . Protobuf::toString('responseCode_', $this->responseCode_)
         . Protobuf::toString('comment_', $this->comment_)
         . Protobuf::toString('stringArgHash_', $this->stringArgHash_)
         . Protobuf::toString('constArg_', $this->constArg_)
         . Protobuf::toString('availabilityProblemType_', $this->availabilityProblemType_)
         . Protobuf::toString('includeMissingValues_', $this->includeMissingValues_);
  }
  
  // optional bool negate = 1;

  protected $negate_;
  public function resetNegate() { unset($this->negate_); }
  public function clearNegate() { unset($this->negate_); }
  public function hasNegate() { return isset($this->negate_); }
  public function getNegate() { return $this->negate_; }
  public function setNegate($value) { $this->negate_ = (bool)$value; }
  
  // optional int32 operator = 2;

  protected $operator_;
  public function resetOperator() { unset($this->operator_); }
  public function clearOperator() { unset($this->operator_); }
  public function hasOperator() { return isset($this->operator_); }
  public function getOperator() { return $this->operator_; }
  public function setOperator($value) { $this->operator_ = (string)$value; }
  
  // optional int32 key = 3;

  protected $key_;
  public function resetKey() { unset($this->key_); }
  public function clearKey() { unset($this->key_); }
  public function hasKey() { return isset($this->key_); }
  public function getKey() { return $this->key_; }
  public function setKey($value) { $this->key_ = (string)$value; }
  
  // repeated string stringArg = 4;

  protected $stringArg_ = array();
  public function clearStringArg() { $this->stringArg_ = array(); }
  public function getStringArgCount() { return count($this->stringArg_); }
  public function hasStringArg() { return (count($this->stringArg_) > 0); }
  public function indexOfStringArg($value) { return array_search($value,$this->stringArg_);}
  public function removeStringArg($index) { unset($this->stringArg_[$index]); }
  public function removeValStringArg($value) { $idx = array_search($value,$this->stringArg_); if($idx !== FALSE){unset($this->stringArg_[$idx]); }}
  public function removeValsStringArg($values) { foreach($values as $value){$idx = array_search($value,$this->stringArg_); if($idx !== FALSE){unset($this->stringArg_[$idx]); }}}
  public function pushStringArg($newvar) { return array_push($this->stringArg_,(string)$newvar); }
  public function popStringArg() { return array_pop($this->stringArg_); }
  public function shiftStringArg() { return array_shift($this->stringArg_); }
  public function unshiftStringArg($newvar) { return array_unshift($this->stringArg_,(string)$newvar); }
  public function getStringArg($index) { return $this->stringArg_[$index]; }
  public function getStringArgArray() { return $this->stringArg_; }
  public function setStringArg($index, $value) {$this->stringArg_[$index] = (string)$value;	}
  public function addStringArg($value) { $this->stringArg_[] = (string)$value; }
  public function addAllStringArg(array $values) { foreach($values as $value) {$this->stringArg_[] = (string)$value;} }
  
  // repeated int64 longArg = 5;

  protected $longArg_ = array();
  public function clearLongArg() { $this->longArg_ = array(); }
  public function getLongArgCount() { return count($this->longArg_); }
  public function hasLongArg() { return (count($this->longArg_) > 0); }
  public function indexOfLongArg($value) { return array_search($value,$this->longArg_);}
  public function removeLongArg($index) { unset($this->longArg_[$index]); }
  public function removeValLongArg($value) { $idx = array_search($value,$this->longArg_); if($idx !== FALSE){unset($this->longArg_[$idx]); }}
  public function removeValsLongArg($values) { foreach($values as $value){$idx = array_search($value,$this->longArg_); if($idx !== FALSE){unset($this->longArg_[$idx]); }}}
  public function pushLongArg($newvar) { return array_push($this->longArg_,(string)$newvar); }
  public function popLongArg() { return array_pop($this->longArg_); }
  public function shiftLongArg() { return array_shift($this->longArg_); }
  public function unshiftLongArg($newvar) { return array_unshift($this->longArg_,(string)$newvar); }
  public function getLongArg($index) { return $this->longArg_[$index]; }
  public function getLongArgArray() { return $this->longArg_; }
  public function setLongArg($index, $value) {$this->longArg_[$index] = (string)$value;	}
  public function addLongArg($value) { $this->longArg_[] = (string)$value; }
  public function addAllLongArg(array $values) { foreach($values as $value) {$this->longArg_[] = (string)$value;} }
  
  // repeated double doubleArg = 6;

  protected $doubleArg_ = array();
  public function clearDoubleArg() { $this->doubleArg_ = array(); }
  public function getDoubleArgCount() { return count($this->doubleArg_); }
  public function hasDoubleArg() { return (count($this->doubleArg_) > 0); }
  public function indexOfDoubleArg($value) { return array_search($value,$this->doubleArg_);}
  public function removeDoubleArg($index) { unset($this->doubleArg_[$index]); }
  public function removeValDoubleArg($value) { $idx = array_search($value,$this->doubleArg_); if($idx !== FALSE){unset($this->doubleArg_[$idx]); }}
  public function removeValsDoubleArg($values) { foreach($values as $value){$idx = array_search($value,$this->doubleArg_); if($idx !== FALSE){unset($this->doubleArg_[$idx]); }}}
  public function pushDoubleArg($newvar) { return array_push($this->doubleArg_,(float)$newvar); }
  public function popDoubleArg() { return array_pop($this->doubleArg_); }
  public function shiftDoubleArg() { return array_shift($this->doubleArg_); }
  public function unshiftDoubleArg($newvar) { return array_unshift($this->doubleArg_,(float)$newvar); }
  public function getDoubleArg($index) { return $this->doubleArg_[$index]; }
  public function getDoubleArgArray() { return $this->doubleArg_; }
  public function setDoubleArg($index, $value) {$this->doubleArg_[$index] = (float)$value;	}
  public function addDoubleArg($value) { $this->doubleArg_[] = (float)$value; }
  public function addAllDoubleArg(array $values) { foreach($values as $value) {$this->doubleArg_[] = (float)$value;} }
  
  // repeated .Rule subrule = 7;

  protected $subrule_ = array();
  public function clearSubrule() { $this->subrule_ = array(); }
  public function getSubruleCount() { return count($this->subrule_); }
  public function hasSubrule() { return (count($this->subrule_) > 0); }
  public function indexOfSubrule($value) { return array_search($value,$this->subrule_);}
  public function removeSubrule($index) { unset($this->subrule_[$index]); }
  public function removeValSubrule($value) { $idx = array_search($value,$this->subrule_); if($idx !== FALSE){unset($this->subrule_[$idx]); }}
  public function removeValsSubrule($values) { foreach($values as $value){$idx = array_search($value,$this->subrule_); if($idx !== FALSE){unset($this->subrule_[$idx]); }}}
  public function pushSubrule($newvar) { return array_push($this->subrule_,$newvar); }
  public function popSubrule() { return array_pop($this->subrule_); }
  public function shiftSubrule() { return array_shift($this->subrule_); }
  public function unshiftSubrule($newvar) { return array_unshift($this->subrule_,$newvar); }
  public function getSubrule($index) { return $this->subrule_[$index]; }
  public function getSubruleArray() { return $this->subrule_; }
  public function setSubrule($index, $value) {$this->subrule_[$index] = $value;	}
  public function addSubrule($value) { $this->subrule_[] = $value; }
  public function addAllSubrule(array $values) { foreach($values as $value) {$this->subrule_[] = $value;} }
  
  // optional int32 responseCode = 8;

  protected $responseCode_;
  public function resetResponseCode() { unset($this->responseCode_); }
  public function clearResponseCode() { unset($this->responseCode_); }
  public function hasResponseCode() { return isset($this->responseCode_); }
  public function getResponseCode() { return $this->responseCode_; }
  public function setResponseCode($value) { $this->responseCode_ = (string)$value; }
  
  // optional string comment = 9;

  protected $comment_;
  public function resetComment() { unset($this->comment_); }
  public function clearComment() { unset($this->comment_); }
  public function hasComment() { return isset($this->comment_); }
  public function getComment() { return $this->comment_; }
  public function setComment($value) { $this->comment_ = (string)$value; }
  
  // repeated fixed64 stringArgHash = 10;

  protected $stringArgHash_ = array();
  public function clearStringArgHash() { $this->stringArgHash_ = array(); }
  public function getStringArgHashCount() { return count($this->stringArgHash_); }
  public function hasStringArgHash() { return (count($this->stringArgHash_) > 0); }
  public function indexOfStringArgHash($value) { return array_search($value,$this->stringArgHash_);}
  public function removeStringArgHash($index) { unset($this->stringArgHash_[$index]); }
  public function removeValStringArgHash($value) { $idx = array_search($value,$this->stringArgHash_); if($idx !== FALSE){unset($this->stringArgHash_[$idx]); }}
  public function removeValsStringArgHash($values) { foreach($values as $value){$idx = array_search($value,$this->stringArgHash_); if($idx !== FALSE){unset($this->stringArgHash_[$idx]); }}}
  public function pushStringArgHash($newvar) { return array_push($this->stringArgHash_,(int)$newvar); }
  public function popStringArgHash() { return array_pop($this->stringArgHash_); }
  public function shiftStringArgHash() { return array_shift($this->stringArgHash_); }
  public function unshiftStringArgHash($newvar) { return array_unshift($this->stringArgHash_,(int)$newvar); }
  public function getStringArgHash($index) { return $this->stringArgHash_[$index]; }
  public function getStringArgHashArray() { return $this->stringArgHash_; }
  public function setStringArgHash($index, $value) {$this->stringArgHash_[$index] = (int)$value;	}
  public function addStringArgHash($value) { $this->stringArgHash_[] = (int)$value; }
  public function addAllStringArgHash(array $values) { foreach($values as $value) {$this->stringArgHash_[] = (int)$value;} }
  
  // repeated int32 constArg = 11;

  protected $constArg_ = array();
  public function clearConstArg() { $this->constArg_ = array(); }
  public function getConstArgCount() { return count($this->constArg_); }
  public function hasConstArg() { return (count($this->constArg_) > 0); }
  public function indexOfConstArg($value) { return array_search($value,$this->constArg_);}
  public function removeConstArg($index) { unset($this->constArg_[$index]); }
  public function removeValConstArg($value) { $idx = array_search($value,$this->constArg_); if($idx !== FALSE){unset($this->constArg_[$idx]); }}
  public function removeValsConstArg($values) { foreach($values as $value){$idx = array_search($value,$this->constArg_); if($idx !== FALSE){unset($this->constArg_[$idx]); }}}
  public function pushConstArg($newvar) { return array_push($this->constArg_,(string)$newvar); }
  public function popConstArg() { return array_pop($this->constArg_); }
  public function shiftConstArg() { return array_shift($this->constArg_); }
  public function unshiftConstArg($newvar) { return array_unshift($this->constArg_,(string)$newvar); }
  public function getConstArg($index) { return $this->constArg_[$index]; }
  public function getConstArgArray() { return $this->constArg_; }
  public function setConstArg($index, $value) {$this->constArg_[$index] = (string)$value;	}
  public function addConstArg($value) { $this->constArg_[] = (string)$value; }
  public function addAllConstArg(array $values) { foreach($values as $value) {$this->constArg_[] = (string)$value;} }
  
  // optional int32 availabilityProblemType = 12;

  protected $availabilityProblemType_;
  public function resetAvailabilityProblemType() { unset($this->availabilityProblemType_); }
  public function clearAvailabilityProblemType() { unset($this->availabilityProblemType_); }
  public function hasAvailabilityProblemType() { return isset($this->availabilityProblemType_); }
  public function getAvailabilityProblemType() { return $this->availabilityProblemType_; }
  public function setAvailabilityProblemType($value) { $this->availabilityProblemType_ = (string)$value; }
  
  // optional bool includeMissingValues = 13;

  protected $includeMissingValues_;
  public function resetIncludeMissingValues() { unset($this->includeMissingValues_); }
  public function clearIncludeMissingValues() { unset($this->includeMissingValues_); }
  public function hasIncludeMissingValues() { return isset($this->includeMissingValues_); }
  public function getIncludeMissingValues() { return $this->includeMissingValues_; }
  public function setIncludeMissingValues($value) { $this->includeMissingValues_ = (bool)$value; }
  
  // @@protoc_insertion_point(class_scope:Rule)
}

// message RuleEvaluation
class RuleEvaluation {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("RuleEvaluation: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->rule_ = new Rule($fp, $len);
          ASSERT('$len == 0');
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->actualStringValue_[] = $tmp;
          $limit-=$len;
          break;
        case 3:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->actualLongValue_[] = $tmp;
          
          break;
        case 4:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->actualBoolValue_[] = $tmp > 0 ? true : false;
          break;
        case 5:
          ASSERT('$wire == 1');
          $tmp = Protobuf::read_double($fp);
          if ($tmp === false)
            throw new Exception('Protobuf::read_double returned false');
          $this->actualDoubleValue_[] = $tmp;
          $limit-=8;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->rule_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, $this->rule_->size()); // message
      $this->rule_->write($fp);
    }
    if (!is_null($this->actualStringValue_))
      foreach($this->actualStringValue_ as $v) {
        fwrite($fp, "\x12");
        Protobuf::write_varint($fp, strlen((string)$v));
        fwrite($fp, (string)$v);
      }
    if (!is_null($this->actualLongValue_))
      foreach($this->actualLongValue_ as $v) {
        fwrite($fp, "\x18");
        Protobuf::write_varint($fp, (int)$v);
      }
    if (!is_null($this->actualBoolValue_))
      foreach($this->actualBoolValue_ as $v) {
        fwrite($fp, " ");
        Protobuf::write_varint($fp, (int)$v ? 1 : 0);
      }
    if (!is_null($this->actualDoubleValue_))
      foreach($this->actualDoubleValue_ as $v) {
        fwrite($fp, ")");
        Protobuf::write_double($fp, (double)$v);
      }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->rule_)) {
      $l = $this->rule_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->actualStringValue_))
      foreach($this->actualStringValue_ as $v) {
        $l = strlen((string)$v);
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
    if (!is_null($this->actualLongValue_))
      foreach($this->actualLongValue_ as $v) {
        $size += 1 + Protobuf::size_varint($v);
      }
    if (!is_null($this->actualBoolValue_))
      foreach($this->actualBoolValue_ as $v) {
        $size += 2;
      }
    if (!is_null($this->actualDoubleValue_))
      foreach($this->actualDoubleValue_ as $v) {
        $size += 9;
      }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('rule_', $this->rule_)
         . Protobuf::toString('actualStringValue_', $this->actualStringValue_)
         . Protobuf::toString('actualLongValue_', $this->actualLongValue_)
         . Protobuf::toString('actualBoolValue_', $this->actualBoolValue_)
         . Protobuf::toString('actualDoubleValue_', $this->actualDoubleValue_);
  }
  
  // optional .Rule rule = 1;

  protected $rule_;
  public function resetRule() { unset($this->rule_); }
  public function clearRule() { unset($this->rule_); }
  public function hasRule() { return isset($this->rule_); }
  public function getRule() { return $this->rule_; }
  public function setRule(Rule $value) { $this->rule_ = $value; }
  
  // repeated string actualStringValue = 2;

  protected $actualStringValue_ = array();
  public function clearActualStringValue() { $this->actualStringValue_ = array(); }
  public function getActualStringValueCount() { return count($this->actualStringValue_); }
  public function hasActualStringValue() { return (count($this->actualStringValue_) > 0); }
  public function indexOfActualStringValue($value) { return array_search($value,$this->actualStringValue_);}
  public function removeActualStringValue($index) { unset($this->actualStringValue_[$index]); }
  public function removeValActualStringValue($value) { $idx = array_search($value,$this->actualStringValue_); if($idx !== FALSE){unset($this->actualStringValue_[$idx]); }}
  public function removeValsActualStringValue($values) { foreach($values as $value){$idx = array_search($value,$this->actualStringValue_); if($idx !== FALSE){unset($this->actualStringValue_[$idx]); }}}
  public function pushActualStringValue($newvar) { return array_push($this->actualStringValue_,(string)$newvar); }
  public function popActualStringValue() { return array_pop($this->actualStringValue_); }
  public function shiftActualStringValue() { return array_shift($this->actualStringValue_); }
  public function unshiftActualStringValue($newvar) { return array_unshift($this->actualStringValue_,(string)$newvar); }
  public function getActualStringValue($index) { return $this->actualStringValue_[$index]; }
  public function getActualStringValueArray() { return $this->actualStringValue_; }
  public function setActualStringValue($index, $value) {$this->actualStringValue_[$index] = (string)$value;	}
  public function addActualStringValue($value) { $this->actualStringValue_[] = (string)$value; }
  public function addAllActualStringValue(array $values) { foreach($values as $value) {$this->actualStringValue_[] = (string)$value;} }
  
  // repeated int64 actualLongValue = 3;

  protected $actualLongValue_ = array();
  public function clearActualLongValue() { $this->actualLongValue_ = array(); }
  public function getActualLongValueCount() { return count($this->actualLongValue_); }
  public function hasActualLongValue() { return (count($this->actualLongValue_) > 0); }
  public function indexOfActualLongValue($value) { return array_search($value,$this->actualLongValue_);}
  public function removeActualLongValue($index) { unset($this->actualLongValue_[$index]); }
  public function removeValActualLongValue($value) { $idx = array_search($value,$this->actualLongValue_); if($idx !== FALSE){unset($this->actualLongValue_[$idx]); }}
  public function removeValsActualLongValue($values) { foreach($values as $value){$idx = array_search($value,$this->actualLongValue_); if($idx !== FALSE){unset($this->actualLongValue_[$idx]); }}}
  public function pushActualLongValue($newvar) { return array_push($this->actualLongValue_,(string)$newvar); }
  public function popActualLongValue() { return array_pop($this->actualLongValue_); }
  public function shiftActualLongValue() { return array_shift($this->actualLongValue_); }
  public function unshiftActualLongValue($newvar) { return array_unshift($this->actualLongValue_,(string)$newvar); }
  public function getActualLongValue($index) { return $this->actualLongValue_[$index]; }
  public function getActualLongValueArray() { return $this->actualLongValue_; }
  public function setActualLongValue($index, $value) {$this->actualLongValue_[$index] = (string)$value;	}
  public function addActualLongValue($value) { $this->actualLongValue_[] = (string)$value; }
  public function addAllActualLongValue(array $values) { foreach($values as $value) {$this->actualLongValue_[] = (string)$value;} }
  
  // repeated bool actualBoolValue = 4;

  protected $actualBoolValue_ = array();
  public function clearActualBoolValue() { $this->actualBoolValue_ = array(); }
  public function getActualBoolValueCount() { return count($this->actualBoolValue_); }
  public function hasActualBoolValue() { return (count($this->actualBoolValue_) > 0); }
  public function indexOfActualBoolValue($value) { return array_search($value,$this->actualBoolValue_);}
  public function removeActualBoolValue($index) { unset($this->actualBoolValue_[$index]); }
  public function removeValActualBoolValue($value) { $idx = array_search($value,$this->actualBoolValue_); if($idx !== FALSE){unset($this->actualBoolValue_[$idx]); }}
  public function removeValsActualBoolValue($values) { foreach($values as $value){$idx = array_search($value,$this->actualBoolValue_); if($idx !== FALSE){unset($this->actualBoolValue_[$idx]); }}}
  public function pushActualBoolValue($newvar) { return array_push($this->actualBoolValue_,(bool)$newvar); }
  public function popActualBoolValue() { return array_pop($this->actualBoolValue_); }
  public function shiftActualBoolValue() { return array_shift($this->actualBoolValue_); }
  public function unshiftActualBoolValue($newvar) { return array_unshift($this->actualBoolValue_,(bool)$newvar); }
  public function getActualBoolValue($index) { return $this->actualBoolValue_[$index]; }
  public function getActualBoolValueArray() { return $this->actualBoolValue_; }
  public function setActualBoolValue($index, $value) {$this->actualBoolValue_[$index] = (bool)$value;	}
  public function addActualBoolValue($value) { $this->actualBoolValue_[] = (bool)$value; }
  public function addAllActualBoolValue(array $values) { foreach($values as $value) {$this->actualBoolValue_[] = (bool)$value;} }
  
  // repeated double actualDoubleValue = 5;

  protected $actualDoubleValue_ = array();
  public function clearActualDoubleValue() { $this->actualDoubleValue_ = array(); }
  public function getActualDoubleValueCount() { return count($this->actualDoubleValue_); }
  public function hasActualDoubleValue() { return (count($this->actualDoubleValue_) > 0); }
  public function indexOfActualDoubleValue($value) { return array_search($value,$this->actualDoubleValue_);}
  public function removeActualDoubleValue($index) { unset($this->actualDoubleValue_[$index]); }
  public function removeValActualDoubleValue($value) { $idx = array_search($value,$this->actualDoubleValue_); if($idx !== FALSE){unset($this->actualDoubleValue_[$idx]); }}
  public function removeValsActualDoubleValue($values) { foreach($values as $value){$idx = array_search($value,$this->actualDoubleValue_); if($idx !== FALSE){unset($this->actualDoubleValue_[$idx]); }}}
  public function pushActualDoubleValue($newvar) { return array_push($this->actualDoubleValue_,(float)$newvar); }
  public function popActualDoubleValue() { return array_pop($this->actualDoubleValue_); }
  public function shiftActualDoubleValue() { return array_shift($this->actualDoubleValue_); }
  public function unshiftActualDoubleValue($newvar) { return array_unshift($this->actualDoubleValue_,(float)$newvar); }
  public function getActualDoubleValue($index) { return $this->actualDoubleValue_[$index]; }
  public function getActualDoubleValueArray() { return $this->actualDoubleValue_; }
  public function setActualDoubleValue($index, $value) {$this->actualDoubleValue_[$index] = (float)$value;	}
  public function addActualDoubleValue($value) { $this->actualDoubleValue_[] = (float)$value; }
  public function addAllActualDoubleValue(array $values) { foreach($values as $value) {$this->actualDoubleValue_[] = (float)$value;} }
  
  // @@protoc_insertion_point(class_scope:RuleEvaluation)
}

// message GroupLicenseInfo
class GroupLicenseInfo {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("GroupLicenseInfo: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->licensedOfferType_ = $tmp;
          
          break;
        case 2:
          ASSERT('$wire == 1');
          $tmp = Protobuf::read_uint64($fp);
          if ($tmp === false)
            throw new Exception('Protobuf::read_unint64 returned false');
          $this->gaiaGroupId_ = $tmp;
          $limit-=8;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->licensedOfferType_)) {
      fwrite($fp, "\x08");
      Protobuf::write_varint($fp, (int)$this->licensedOfferType_);
    }
    if (!is_null($this->gaiaGroupId_)) {
      fwrite($fp, "\x11");
      Protobuf::write_uint64($fp, (int)$this->gaiaGroupId_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->licensedOfferType_)) {
      $size += 1 + Protobuf::size_varint($this->licensedOfferType_);
    }
    if (!is_null($this->gaiaGroupId_)) {
      $size += 9;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('licensedOfferType_', $this->licensedOfferType_)
         . Protobuf::toString('gaiaGroupId_', $this->gaiaGroupId_);
  }
  
  // optional int32 licensedOfferType = 1;

  protected $licensedOfferType_;
  public function resetLicensedOfferType() { unset($this->licensedOfferType_); }
  public function clearLicensedOfferType() { unset($this->licensedOfferType_); }
  public function hasLicensedOfferType() { return isset($this->licensedOfferType_); }
  public function getLicensedOfferType() { return $this->licensedOfferType_; }
  public function setLicensedOfferType($value) { $this->licensedOfferType_ = (string)$value; }
  
  // optional fixed64 gaiaGroupId = 2;

  protected $gaiaGroupId_;
  public function resetGaiaGroupId() { unset($this->gaiaGroupId_); }
  public function clearGaiaGroupId() { unset($this->gaiaGroupId_); }
  public function hasGaiaGroupId() { return isset($this->gaiaGroupId_); }
  public function getGaiaGroupId() { return $this->gaiaGroupId_; }
  public function setGaiaGroupId($value) { $this->gaiaGroupId_ = (int)$value; }
  
  // @@protoc_insertion_point(class_scope:GroupLicenseInfo)
}

// message LicensedDocumentInfo
class LicensedDocumentInfo {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("LicensedDocumentInfo: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 1');
          $tmp = Protobuf::read_uint64($fp);
          if ($tmp === false)
            throw new Exception('Protobuf::read_unint64 returned false');
          $this->gaiaGroupId_[] = $tmp;
          $limit-=8;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->gaiaGroupId_))
      foreach($this->gaiaGroupId_ as $v) {
        fwrite($fp, "\x09");
        Protobuf::write_uint64($fp, (int)$v);
      }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->gaiaGroupId_))
      foreach($this->gaiaGroupId_ as $v) {
        $size += 9;
      }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('gaiaGroupId_', $this->gaiaGroupId_);
  }
  
  // repeated fixed64 gaiaGroupId = 1;

  protected $gaiaGroupId_ = array();
  public function clearGaiaGroupId() { $this->gaiaGroupId_ = array(); }
  public function getGaiaGroupIdCount() { return count($this->gaiaGroupId_); }
  public function hasGaiaGroupId() { return (count($this->gaiaGroupId_) > 0); }
  public function indexOfGaiaGroupId($value) { return array_search($value,$this->gaiaGroupId_);}
  public function removeGaiaGroupId($index) { unset($this->gaiaGroupId_[$index]); }
  public function removeValGaiaGroupId($value) { $idx = array_search($value,$this->gaiaGroupId_); if($idx !== FALSE){unset($this->gaiaGroupId_[$idx]); }}
  public function removeValsGaiaGroupId($values) { foreach($values as $value){$idx = array_search($value,$this->gaiaGroupId_); if($idx !== FALSE){unset($this->gaiaGroupId_[$idx]); }}}
  public function pushGaiaGroupId($newvar) { return array_push($this->gaiaGroupId_,(int)$newvar); }
  public function popGaiaGroupId() { return array_pop($this->gaiaGroupId_); }
  public function shiftGaiaGroupId() { return array_shift($this->gaiaGroupId_); }
  public function unshiftGaiaGroupId($newvar) { return array_unshift($this->gaiaGroupId_,(int)$newvar); }
  public function getGaiaGroupId($index) { return $this->gaiaGroupId_[$index]; }
  public function getGaiaGroupIdArray() { return $this->gaiaGroupId_; }
  public function setGaiaGroupId($index, $value) {$this->gaiaGroupId_[$index] = (int)$value;	}
  public function addGaiaGroupId($value) { $this->gaiaGroupId_[] = (int)$value; }
  public function addAllGaiaGroupId(array $values) { foreach($values as $value) {$this->gaiaGroupId_[] = (int)$value;} }
  
  // @@protoc_insertion_point(class_scope:LicensedDocumentInfo)
}

// message LibraryAppDetails
class LibraryAppDetails {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("LibraryAppDetails: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->certificateHash_ = $tmp;
          $limit-=$len;
          break;
        case 3:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->refundTimeoutTimestampMsec_ = $tmp;
          
          break;
        case 4:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->postDeliveryRefundWindowMsec_ = $tmp;
          
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->certificateHash_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, strlen((string)$this->certificateHash_));
      fwrite($fp, (string)$this->certificateHash_);
    }
    if (!is_null($this->refundTimeoutTimestampMsec_)) {
      fwrite($fp, "\x18");
      Protobuf::write_varint($fp, (int)$this->refundTimeoutTimestampMsec_);
    }
    if (!is_null($this->postDeliveryRefundWindowMsec_)) {
      fwrite($fp, " ");
      Protobuf::write_varint($fp, (int)$this->postDeliveryRefundWindowMsec_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->certificateHash_)) {
      $l = strlen((string)$this->certificateHash_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->refundTimeoutTimestampMsec_)) {
      $size += 1 + Protobuf::size_varint($this->refundTimeoutTimestampMsec_);
    }
    if (!is_null($this->postDeliveryRefundWindowMsec_)) {
      $size += 1 + Protobuf::size_varint($this->postDeliveryRefundWindowMsec_);
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('certificateHash_', $this->certificateHash_)
         . Protobuf::toString('refundTimeoutTimestampMsec_', $this->refundTimeoutTimestampMsec_)
         . Protobuf::toString('postDeliveryRefundWindowMsec_', $this->postDeliveryRefundWindowMsec_);
  }
  
  // optional string certificateHash = 2;

  protected $certificateHash_;
  public function resetCertificateHash() { unset($this->certificateHash_); }
  public function clearCertificateHash() { unset($this->certificateHash_); }
  public function hasCertificateHash() { return isset($this->certificateHash_); }
  public function getCertificateHash() { return $this->certificateHash_; }
  public function setCertificateHash($value) { $this->certificateHash_ = (string)$value; }
  
  // optional int64 refundTimeoutTimestampMsec = 3;

  protected $refundTimeoutTimestampMsec_;
  public function resetRefundTimeoutTimestampMsec() { unset($this->refundTimeoutTimestampMsec_); }
  public function clearRefundTimeoutTimestampMsec() { unset($this->refundTimeoutTimestampMsec_); }
  public function hasRefundTimeoutTimestampMsec() { return isset($this->refundTimeoutTimestampMsec_); }
  public function getRefundTimeoutTimestampMsec() { return $this->refundTimeoutTimestampMsec_; }
  public function setRefundTimeoutTimestampMsec($value) { $this->refundTimeoutTimestampMsec_ = (string)$value; }
  
  // optional int64 postDeliveryRefundWindowMsec = 4;

  protected $postDeliveryRefundWindowMsec_;
  public function resetPostDeliveryRefundWindowMsec() { unset($this->postDeliveryRefundWindowMsec_); }
  public function clearPostDeliveryRefundWindowMsec() { unset($this->postDeliveryRefundWindowMsec_); }
  public function hasPostDeliveryRefundWindowMsec() { return isset($this->postDeliveryRefundWindowMsec_); }
  public function getPostDeliveryRefundWindowMsec() { return $this->postDeliveryRefundWindowMsec_; }
  public function setPostDeliveryRefundWindowMsec($value) { $this->postDeliveryRefundWindowMsec_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:LibraryAppDetails)
}

// message LibraryInAppDetails
class LibraryInAppDetails {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("LibraryInAppDetails: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->signedPurchaseData_ = $tmp;
          $limit-=$len;
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->signature_ = $tmp;
          $limit-=$len;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->signedPurchaseData_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, strlen((string)$this->signedPurchaseData_));
      fwrite($fp, (string)$this->signedPurchaseData_);
    }
    if (!is_null($this->signature_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, strlen((string)$this->signature_));
      fwrite($fp, (string)$this->signature_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->signedPurchaseData_)) {
      $l = strlen((string)$this->signedPurchaseData_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->signature_)) {
      $l = strlen((string)$this->signature_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('signedPurchaseData_', $this->signedPurchaseData_)
         . Protobuf::toString('signature_', $this->signature_);
  }
  
  // optional string signedPurchaseData = 1;

  protected $signedPurchaseData_;
  public function resetSignedPurchaseData() { unset($this->signedPurchaseData_); }
  public function clearSignedPurchaseData() { unset($this->signedPurchaseData_); }
  public function hasSignedPurchaseData() { return isset($this->signedPurchaseData_); }
  public function getSignedPurchaseData() { return $this->signedPurchaseData_; }
  public function setSignedPurchaseData($value) { $this->signedPurchaseData_ = (string)$value; }
  
  // optional string signature = 2;

  protected $signature_;
  public function resetSignature() { unset($this->signature_); }
  public function clearSignature() { unset($this->signature_); }
  public function hasSignature() { return isset($this->signature_); }
  public function getSignature() { return $this->signature_; }
  public function setSignature($value) { $this->signature_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:LibraryInAppDetails)
}

// message LibraryMutation
class LibraryMutation {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("LibraryMutation: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->docid_ = new Docid($fp, $len);
          ASSERT('$len == 0');
          break;
        case 2:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->offerType_ = $tmp;
          
          break;
        case 3:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->documentHash_ = $tmp;
          
          break;
        case 4:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->deleted_ = $tmp > 0 ? true : false;
          break;
        case 5:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->appDetails_ = new LibraryAppDetails($fp, $len);
          ASSERT('$len == 0');
          break;
        case 6:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->subscriptionDetails_ = new LibrarySubscriptionDetails($fp, $len);
          ASSERT('$len == 0');
          break;
        case 7:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->inAppDetails_ = new LibraryInAppDetails($fp, $len);
          ASSERT('$len == 0');
          break;
        case 8:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->validUntilTimestampMsec_ = $tmp;
          
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->docid_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, $this->docid_->size()); // message
      $this->docid_->write($fp);
    }
    if (!is_null($this->offerType_)) {
      fwrite($fp, "\x10");
      Protobuf::write_varint($fp, (int)$this->offerType_);
    }
    if (!is_null($this->documentHash_)) {
      fwrite($fp, "\x18");
      Protobuf::write_varint($fp, (int)$this->documentHash_);
    }
    if (!is_null($this->deleted_)) {
      fwrite($fp, " ");
      Protobuf::write_varint($fp, (int)$this->deleted_ ? 1 : 0);
    }
    if (!is_null($this->appDetails_)) {
      fwrite($fp, "*");
      Protobuf::write_varint($fp, $this->appDetails_->size()); // message
      $this->appDetails_->write($fp);
    }
    if (!is_null($this->subscriptionDetails_)) {
      fwrite($fp, "2");
      Protobuf::write_varint($fp, $this->subscriptionDetails_->size()); // message
      $this->subscriptionDetails_->write($fp);
    }
    if (!is_null($this->inAppDetails_)) {
      fwrite($fp, ":");
      Protobuf::write_varint($fp, $this->inAppDetails_->size()); // message
      $this->inAppDetails_->write($fp);
    }
    if (!is_null($this->validUntilTimestampMsec_)) {
      fwrite($fp, "@");
      Protobuf::write_varint($fp, (int)$this->validUntilTimestampMsec_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->docid_)) {
      $l = $this->docid_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->offerType_)) {
      $size += 1 + Protobuf::size_varint($this->offerType_);
    }
    if (!is_null($this->documentHash_)) {
      $size += 1 + Protobuf::size_varint($this->documentHash_);
    }
    if (!is_null($this->deleted_)) {
      $size += 2;
    }
    if (!is_null($this->appDetails_)) {
      $l = $this->appDetails_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->subscriptionDetails_)) {
      $l = $this->subscriptionDetails_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->inAppDetails_)) {
      $l = $this->inAppDetails_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->validUntilTimestampMsec_)) {
      $size += 1 + Protobuf::size_varint($this->validUntilTimestampMsec_);
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('docid_', $this->docid_)
         . Protobuf::toString('offerType_', $this->offerType_)
         . Protobuf::toString('documentHash_', $this->documentHash_)
         . Protobuf::toString('deleted_', $this->deleted_)
         . Protobuf::toString('appDetails_', $this->appDetails_)
         . Protobuf::toString('subscriptionDetails_', $this->subscriptionDetails_)
         . Protobuf::toString('inAppDetails_', $this->inAppDetails_)
         . Protobuf::toString('validUntilTimestampMsec_', $this->validUntilTimestampMsec_);
  }
  
  // optional .Docid docid = 1;

  protected $docid_;
  public function resetDocid() { unset($this->docid_); }
  public function clearDocid() { unset($this->docid_); }
  public function hasDocid() { return isset($this->docid_); }
  public function getDocid() { return $this->docid_; }
  public function setDocid(Docid $value) { $this->docid_ = $value; }
  
  // optional int32 offerType = 2;

  protected $offerType_;
  public function resetOfferType() { unset($this->offerType_); }
  public function clearOfferType() { unset($this->offerType_); }
  public function hasOfferType() { return isset($this->offerType_); }
  public function getOfferType() { return $this->offerType_; }
  public function setOfferType($value) { $this->offerType_ = (string)$value; }
  
  // optional int64 documentHash = 3;

  protected $documentHash_;
  public function resetDocumentHash() { unset($this->documentHash_); }
  public function clearDocumentHash() { unset($this->documentHash_); }
  public function hasDocumentHash() { return isset($this->documentHash_); }
  public function getDocumentHash() { return $this->documentHash_; }
  public function setDocumentHash($value) { $this->documentHash_ = (string)$value; }
  
  // optional bool deleted = 4;

  protected $deleted_;
  public function resetDeleted() { unset($this->deleted_); }
  public function clearDeleted() { unset($this->deleted_); }
  public function hasDeleted() { return isset($this->deleted_); }
  public function getDeleted() { return $this->deleted_; }
  public function setDeleted($value) { $this->deleted_ = (bool)$value; }
  
  // optional .LibraryAppDetails appDetails = 5;

  protected $appDetails_;
  public function resetAppDetails() { unset($this->appDetails_); }
  public function clearAppDetails() { unset($this->appDetails_); }
  public function hasAppDetails() { return isset($this->appDetails_); }
  public function getAppDetails() { return $this->appDetails_; }
  public function setAppDetails(LibraryAppDetails $value) { $this->appDetails_ = $value; }
  
  // optional .LibrarySubscriptionDetails subscriptionDetails = 6;

  protected $subscriptionDetails_;
  public function resetSubscriptionDetails() { unset($this->subscriptionDetails_); }
  public function clearSubscriptionDetails() { unset($this->subscriptionDetails_); }
  public function hasSubscriptionDetails() { return isset($this->subscriptionDetails_); }
  public function getSubscriptionDetails() { return $this->subscriptionDetails_; }
  public function setSubscriptionDetails(LibrarySubscriptionDetails $value) { $this->subscriptionDetails_ = $value; }
  
  // optional .LibraryInAppDetails inAppDetails = 7;

  protected $inAppDetails_;
  public function resetInAppDetails() { unset($this->inAppDetails_); }
  public function clearInAppDetails() { unset($this->inAppDetails_); }
  public function hasInAppDetails() { return isset($this->inAppDetails_); }
  public function getInAppDetails() { return $this->inAppDetails_; }
  public function setInAppDetails(LibraryInAppDetails $value) { $this->inAppDetails_ = $value; }
  
  // optional int64 validUntilTimestampMsec = 8;

  protected $validUntilTimestampMsec_;
  public function resetValidUntilTimestampMsec() { unset($this->validUntilTimestampMsec_); }
  public function clearValidUntilTimestampMsec() { unset($this->validUntilTimestampMsec_); }
  public function hasValidUntilTimestampMsec() { return isset($this->validUntilTimestampMsec_); }
  public function getValidUntilTimestampMsec() { return $this->validUntilTimestampMsec_; }
  public function setValidUntilTimestampMsec($value) { $this->validUntilTimestampMsec_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:LibraryMutation)
}

// message LibrarySubscriptionDetails
class LibrarySubscriptionDetails {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("LibrarySubscriptionDetails: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->initiationTimestampMsec_ = $tmp;
          
          break;
        case 2:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->deprecatedValidUntilTimestampMsec_ = $tmp;
          
          break;
        case 3:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->autoRenewing_ = $tmp > 0 ? true : false;
          break;
        case 4:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->trialUntilTimestampMsec_ = $tmp;
          
          break;
        case 5:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->signedPurchaseData_ = $tmp;
          $limit-=$len;
          break;
        case 6:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->signature_ = $tmp;
          $limit-=$len;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->initiationTimestampMsec_)) {
      fwrite($fp, "\x08");
      Protobuf::write_varint($fp, (int)$this->initiationTimestampMsec_);
    }
    if (!is_null($this->deprecatedValidUntilTimestampMsec_)) {
      fwrite($fp, "\x10");
      Protobuf::write_varint($fp, (int)$this->deprecatedValidUntilTimestampMsec_);
    }
    if (!is_null($this->autoRenewing_)) {
      fwrite($fp, "\x18");
      Protobuf::write_varint($fp, (int)$this->autoRenewing_ ? 1 : 0);
    }
    if (!is_null($this->trialUntilTimestampMsec_)) {
      fwrite($fp, " ");
      Protobuf::write_varint($fp, (int)$this->trialUntilTimestampMsec_);
    }
    if (!is_null($this->signedPurchaseData_)) {
      fwrite($fp, "*");
      Protobuf::write_varint($fp, strlen((string)$this->signedPurchaseData_));
      fwrite($fp, (string)$this->signedPurchaseData_);
    }
    if (!is_null($this->signature_)) {
      fwrite($fp, "2");
      Protobuf::write_varint($fp, strlen((string)$this->signature_));
      fwrite($fp, (string)$this->signature_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->initiationTimestampMsec_)) {
      $size += 1 + Protobuf::size_varint($this->initiationTimestampMsec_);
    }
    if (!is_null($this->deprecatedValidUntilTimestampMsec_)) {
      $size += 1 + Protobuf::size_varint($this->deprecatedValidUntilTimestampMsec_);
    }
    if (!is_null($this->autoRenewing_)) {
      $size += 2;
    }
    if (!is_null($this->trialUntilTimestampMsec_)) {
      $size += 1 + Protobuf::size_varint($this->trialUntilTimestampMsec_);
    }
    if (!is_null($this->signedPurchaseData_)) {
      $l = strlen((string)$this->signedPurchaseData_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->signature_)) {
      $l = strlen((string)$this->signature_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('initiationTimestampMsec_', $this->initiationTimestampMsec_)
         . Protobuf::toString('deprecatedValidUntilTimestampMsec_', $this->deprecatedValidUntilTimestampMsec_)
         . Protobuf::toString('autoRenewing_', $this->autoRenewing_)
         . Protobuf::toString('trialUntilTimestampMsec_', $this->trialUntilTimestampMsec_)
         . Protobuf::toString('signedPurchaseData_', $this->signedPurchaseData_)
         . Protobuf::toString('signature_', $this->signature_);
  }
  
  // optional int64 initiationTimestampMsec = 1;

  protected $initiationTimestampMsec_;
  public function resetInitiationTimestampMsec() { unset($this->initiationTimestampMsec_); }
  public function clearInitiationTimestampMsec() { unset($this->initiationTimestampMsec_); }
  public function hasInitiationTimestampMsec() { return isset($this->initiationTimestampMsec_); }
  public function getInitiationTimestampMsec() { return $this->initiationTimestampMsec_; }
  public function setInitiationTimestampMsec($value) { $this->initiationTimestampMsec_ = (string)$value; }
  
  // optional int64 deprecatedValidUntilTimestampMsec = 2;

  protected $deprecatedValidUntilTimestampMsec_;
  public function resetDeprecatedValidUntilTimestampMsec() { unset($this->deprecatedValidUntilTimestampMsec_); }
  public function clearDeprecatedValidUntilTimestampMsec() { unset($this->deprecatedValidUntilTimestampMsec_); }
  public function hasDeprecatedValidUntilTimestampMsec() { return isset($this->deprecatedValidUntilTimestampMsec_); }
  public function getDeprecatedValidUntilTimestampMsec() { return $this->deprecatedValidUntilTimestampMsec_; }
  public function setDeprecatedValidUntilTimestampMsec($value) { $this->deprecatedValidUntilTimestampMsec_ = (string)$value; }
  
  // optional bool autoRenewing = 3;

  protected $autoRenewing_;
  public function resetAutoRenewing() { unset($this->autoRenewing_); }
  public function clearAutoRenewing() { unset($this->autoRenewing_); }
  public function hasAutoRenewing() { return isset($this->autoRenewing_); }
  public function getAutoRenewing() { return $this->autoRenewing_; }
  public function setAutoRenewing($value) { $this->autoRenewing_ = (bool)$value; }
  
  // optional int64 trialUntilTimestampMsec = 4;

  protected $trialUntilTimestampMsec_;
  public function resetTrialUntilTimestampMsec() { unset($this->trialUntilTimestampMsec_); }
  public function clearTrialUntilTimestampMsec() { unset($this->trialUntilTimestampMsec_); }
  public function hasTrialUntilTimestampMsec() { return isset($this->trialUntilTimestampMsec_); }
  public function getTrialUntilTimestampMsec() { return $this->trialUntilTimestampMsec_; }
  public function setTrialUntilTimestampMsec($value) { $this->trialUntilTimestampMsec_ = (string)$value; }
  
  // optional string signedPurchaseData = 5;

  protected $signedPurchaseData_;
  public function resetSignedPurchaseData() { unset($this->signedPurchaseData_); }
  public function clearSignedPurchaseData() { unset($this->signedPurchaseData_); }
  public function hasSignedPurchaseData() { return isset($this->signedPurchaseData_); }
  public function getSignedPurchaseData() { return $this->signedPurchaseData_; }
  public function setSignedPurchaseData($value) { $this->signedPurchaseData_ = (string)$value; }
  
  // optional string signature = 6;

  protected $signature_;
  public function resetSignature() { unset($this->signature_); }
  public function clearSignature() { unset($this->signature_); }
  public function hasSignature() { return isset($this->signature_); }
  public function getSignature() { return $this->signature_; }
  public function setSignature($value) { $this->signature_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:LibrarySubscriptionDetails)
}

// message LibraryUpdate
class LibraryUpdate {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("LibraryUpdate: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->status_ = $tmp;
          
          break;
        case 2:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->corpus_ = $tmp;
          
          break;
        case 3:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->serverToken_ = $tmp;
          $limit-=$len;
          break;
        case 4:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->mutation_[] = new LibraryMutation($fp, $len);
          ASSERT('$len == 0');
          break;
        case 5:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->hasMore_ = $tmp > 0 ? true : false;
          break;
        case 6:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->libraryId_ = $tmp;
          $limit-=$len;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->status_)) {
      fwrite($fp, "\x08");
      Protobuf::write_varint($fp, (int)$this->status_);
    }
    if (!is_null($this->corpus_)) {
      fwrite($fp, "\x10");
      Protobuf::write_varint($fp, (int)$this->corpus_);
    }
    if (!is_null($this->serverToken_)) {
      fwrite($fp, "\x1a");
      Protobuf::write_varint($fp, strlen((string)$this->serverToken_));
      fwrite($fp, (string)$this->serverToken_);
    }
    if (!is_null($this->mutation_))
      foreach($this->mutation_ as $v) {
        fwrite($fp, "\"");
        Protobuf::write_varint($fp, $v->size()); // message
        $v->write($fp);
      }
    if (!is_null($this->hasMore_)) {
      fwrite($fp, "(");
      Protobuf::write_varint($fp, (int)$this->hasMore_ ? 1 : 0);
    }
    if (!is_null($this->libraryId_)) {
      fwrite($fp, "2");
      Protobuf::write_varint($fp, strlen((string)$this->libraryId_));
      fwrite($fp, (string)$this->libraryId_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->status_)) {
      $size += 1 + Protobuf::size_varint($this->status_);
    }
    if (!is_null($this->corpus_)) {
      $size += 1 + Protobuf::size_varint($this->corpus_);
    }
    if (!is_null($this->serverToken_)) {
      $l = strlen((string)$this->serverToken_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->mutation_))
      foreach($this->mutation_ as $v) {
        $l = $v->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
    if (!is_null($this->hasMore_)) {
      $size += 2;
    }
    if (!is_null($this->libraryId_)) {
      $l = strlen((string)$this->libraryId_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('status_', $this->status_)
         . Protobuf::toString('corpus_', $this->corpus_)
         . Protobuf::toString('serverToken_', $this->serverToken_)
         . Protobuf::toString('mutation_', $this->mutation_)
         . Protobuf::toString('hasMore_', $this->hasMore_)
         . Protobuf::toString('libraryId_', $this->libraryId_);
  }
  
  // optional int32 status = 1;

  protected $status_;
  public function resetStatus() { unset($this->status_); }
  public function clearStatus() { unset($this->status_); }
  public function hasStatus() { return isset($this->status_); }
  public function getStatus() { return $this->status_; }
  public function setStatus($value) { $this->status_ = (string)$value; }
  
  // optional int32 corpus = 2;

  protected $corpus_;
  public function resetCorpus() { unset($this->corpus_); }
  public function clearCorpus() { unset($this->corpus_); }
  public function hasCorpus() { return isset($this->corpus_); }
  public function getCorpus() { return $this->corpus_; }
  public function setCorpus($value) { $this->corpus_ = (string)$value; }
  
  // optional bytes serverToken = 3;

  protected $serverToken_;
  public function resetServerToken() { unset($this->serverToken_); }
  public function clearServerToken() { unset($this->serverToken_); }
  public function hasServerToken() { return isset($this->serverToken_); }
  public function getServerToken() { return $this->serverToken_; }
  public function setServerToken($value) { $this->serverToken_ = (string)$value; }
  
  // repeated .LibraryMutation mutation = 4;

  protected $mutation_ = array();
  public function clearMutation() { $this->mutation_ = array(); }
  public function getMutationCount() { return count($this->mutation_); }
  public function hasMutation() { return (count($this->mutation_) > 0); }
  public function indexOfMutation($value) { return array_search($value,$this->mutation_);}
  public function removeMutation($index) { unset($this->mutation_[$index]); }
  public function removeValMutation($value) { $idx = array_search($value,$this->mutation_); if($idx !== FALSE){unset($this->mutation_[$idx]); }}
  public function removeValsMutation($values) { foreach($values as $value){$idx = array_search($value,$this->mutation_); if($idx !== FALSE){unset($this->mutation_[$idx]); }}}
  public function pushMutation($newvar) { return array_push($this->mutation_,$newvar); }
  public function popMutation() { return array_pop($this->mutation_); }
  public function shiftMutation() { return array_shift($this->mutation_); }
  public function unshiftMutation($newvar) { return array_unshift($this->mutation_,$newvar); }
  public function getMutation($index) { return $this->mutation_[$index]; }
  public function getMutationArray() { return $this->mutation_; }
  public function setMutation($index, $value) {$this->mutation_[$index] = $value;	}
  public function addMutation($value) { $this->mutation_[] = $value; }
  public function addAllMutation(array $values) { foreach($values as $value) {$this->mutation_[] = $value;} }
  
  // optional bool hasMore = 5;

  protected $hasMore_;
  public function resetHasMore() { unset($this->hasMore_); }
  public function clearHasMore() { unset($this->hasMore_); }
  public function hasHasMore() { return isset($this->hasMore_); }
  public function getHasMore() { return $this->hasMore_; }
  public function setHasMore($value) { $this->hasMore_ = (bool)$value; }
  
  // optional string libraryId = 6;

  protected $libraryId_;
  public function resetLibraryId() { unset($this->libraryId_); }
  public function clearLibraryId() { unset($this->libraryId_); }
  public function hasLibraryId() { return isset($this->libraryId_); }
  public function getLibraryId() { return $this->libraryId_; }
  public function setLibraryId($value) { $this->libraryId_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:LibraryUpdate)
}

// message ClientLibraryState
class ClientLibraryState {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("ClientLibraryState: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->corpus_ = $tmp;
          
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->serverToken_ = $tmp;
          $limit-=$len;
          break;
        case 3:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->hashCodeSum_ = $tmp;
          
          break;
        case 4:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->librarySize_ = $tmp;
          
          break;
        case 5:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->libraryId_ = $tmp;
          $limit-=$len;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->corpus_)) {
      fwrite($fp, "\x08");
      Protobuf::write_varint($fp, (int)$this->corpus_);
    }
    if (!is_null($this->serverToken_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, strlen((string)$this->serverToken_));
      fwrite($fp, (string)$this->serverToken_);
    }
    if (!is_null($this->hashCodeSum_)) {
      fwrite($fp, "\x18");
      Protobuf::write_varint($fp, (int)$this->hashCodeSum_);
    }
    if (!is_null($this->librarySize_)) {
      fwrite($fp, " ");
      Protobuf::write_varint($fp, (int)$this->librarySize_);
    }
    if (!is_null($this->libraryId_)) {
      fwrite($fp, "*");
      Protobuf::write_varint($fp, strlen((string)$this->libraryId_));
      fwrite($fp, (string)$this->libraryId_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->corpus_)) {
      $size += 1 + Protobuf::size_varint($this->corpus_);
    }
    if (!is_null($this->serverToken_)) {
      $l = strlen((string)$this->serverToken_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->hashCodeSum_)) {
      $size += 1 + Protobuf::size_varint($this->hashCodeSum_);
    }
    if (!is_null($this->librarySize_)) {
      $size += 1 + Protobuf::size_varint($this->librarySize_);
    }
    if (!is_null($this->libraryId_)) {
      $l = strlen((string)$this->libraryId_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('corpus_', $this->corpus_)
         . Protobuf::toString('serverToken_', $this->serverToken_)
         . Protobuf::toString('hashCodeSum_', $this->hashCodeSum_)
         . Protobuf::toString('librarySize_', $this->librarySize_)
         . Protobuf::toString('libraryId_', $this->libraryId_);
  }
  
  // optional int32 corpus = 1;

  protected $corpus_;
  public function resetCorpus() { unset($this->corpus_); }
  public function clearCorpus() { unset($this->corpus_); }
  public function hasCorpus() { return isset($this->corpus_); }
  public function getCorpus() { return $this->corpus_; }
  public function setCorpus($value) { $this->corpus_ = (string)$value; }
  
  // optional bytes serverToken = 2;

  protected $serverToken_;
  public function resetServerToken() { unset($this->serverToken_); }
  public function clearServerToken() { unset($this->serverToken_); }
  public function hasServerToken() { return isset($this->serverToken_); }
  public function getServerToken() { return $this->serverToken_; }
  public function setServerToken($value) { $this->serverToken_ = (string)$value; }
  
  // optional int64 hashCodeSum = 3;

  protected $hashCodeSum_;
  public function resetHashCodeSum() { unset($this->hashCodeSum_); }
  public function clearHashCodeSum() { unset($this->hashCodeSum_); }
  public function hasHashCodeSum() { return isset($this->hashCodeSum_); }
  public function getHashCodeSum() { return $this->hashCodeSum_; }
  public function setHashCodeSum($value) { $this->hashCodeSum_ = (string)$value; }
  
  // optional int32 librarySize = 4;

  protected $librarySize_;
  public function resetLibrarySize() { unset($this->librarySize_); }
  public function clearLibrarySize() { unset($this->librarySize_); }
  public function hasLibrarySize() { return isset($this->librarySize_); }
  public function getLibrarySize() { return $this->librarySize_; }
  public function setLibrarySize($value) { $this->librarySize_ = (string)$value; }
  
  // optional string libraryId = 5;

  protected $libraryId_;
  public function resetLibraryId() { unset($this->libraryId_); }
  public function clearLibraryId() { unset($this->libraryId_); }
  public function hasLibraryId() { return isset($this->libraryId_); }
  public function getLibraryId() { return $this->libraryId_; }
  public function setLibraryId($value) { $this->libraryId_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:ClientLibraryState)
}

// message LibraryReplicationRequest
class LibraryReplicationRequest {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("LibraryReplicationRequest: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->libraryState_[] = new ClientLibraryState($fp, $len);
          ASSERT('$len == 0');
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->libraryState_))
      foreach($this->libraryState_ as $v) {
        fwrite($fp, "\x0a");
        Protobuf::write_varint($fp, $v->size()); // message
        $v->write($fp);
      }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->libraryState_))
      foreach($this->libraryState_ as $v) {
        $l = $v->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('libraryState_', $this->libraryState_);
  }
  
  // repeated .ClientLibraryState libraryState = 1;

  protected $libraryState_ = array();
  public function clearLibraryState() { $this->libraryState_ = array(); }
  public function getLibraryStateCount() { return count($this->libraryState_); }
  public function hasLibraryState() { return (count($this->libraryState_) > 0); }
  public function indexOfLibraryState($value) { return array_search($value,$this->libraryState_);}
  public function removeLibraryState($index) { unset($this->libraryState_[$index]); }
  public function removeValLibraryState($value) { $idx = array_search($value,$this->libraryState_); if($idx !== FALSE){unset($this->libraryState_[$idx]); }}
  public function removeValsLibraryState($values) { foreach($values as $value){$idx = array_search($value,$this->libraryState_); if($idx !== FALSE){unset($this->libraryState_[$idx]); }}}
  public function pushLibraryState($newvar) { return array_push($this->libraryState_,$newvar); }
  public function popLibraryState() { return array_pop($this->libraryState_); }
  public function shiftLibraryState() { return array_shift($this->libraryState_); }
  public function unshiftLibraryState($newvar) { return array_unshift($this->libraryState_,$newvar); }
  public function getLibraryState($index) { return $this->libraryState_[$index]; }
  public function getLibraryStateArray() { return $this->libraryState_; }
  public function setLibraryState($index, $value) {$this->libraryState_[$index] = $value;	}
  public function addLibraryState($value) { $this->libraryState_[] = $value; }
  public function addAllLibraryState(array $values) { foreach($values as $value) {$this->libraryState_[] = $value;} }
  
  // @@protoc_insertion_point(class_scope:LibraryReplicationRequest)
}

// message LibraryReplicationResponse
class LibraryReplicationResponse {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("LibraryReplicationResponse: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->update_[] = new LibraryUpdate($fp, $len);
          ASSERT('$len == 0');
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->update_))
      foreach($this->update_ as $v) {
        fwrite($fp, "\x0a");
        Protobuf::write_varint($fp, $v->size()); // message
        $v->write($fp);
      }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->update_))
      foreach($this->update_ as $v) {
        $l = $v->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('update_', $this->update_);
  }
  
  // repeated .LibraryUpdate update = 1;

  protected $update_ = array();
  public function clearUpdate() { $this->update_ = array(); }
  public function getUpdateCount() { return count($this->update_); }
  public function hasUpdate() { return (count($this->update_) > 0); }
  public function indexOfUpdate($value) { return array_search($value,$this->update_);}
  public function removeUpdate($index) { unset($this->update_[$index]); }
  public function removeValUpdate($value) { $idx = array_search($value,$this->update_); if($idx !== FALSE){unset($this->update_[$idx]); }}
  public function removeValsUpdate($values) { foreach($values as $value){$idx = array_search($value,$this->update_); if($idx !== FALSE){unset($this->update_[$idx]); }}}
  public function pushUpdate($newvar) { return array_push($this->update_,$newvar); }
  public function popUpdate() { return array_pop($this->update_); }
  public function shiftUpdate() { return array_shift($this->update_); }
  public function unshiftUpdate($newvar) { return array_unshift($this->update_,$newvar); }
  public function getUpdate($index) { return $this->update_[$index]; }
  public function getUpdateArray() { return $this->update_; }
  public function setUpdate($index, $value) {$this->update_[$index] = $value;	}
  public function addUpdate($value) { $this->update_[] = $value; }
  public function addAllUpdate(array $values) { foreach($values as $value) {$this->update_[] = $value;} }
  
  // @@protoc_insertion_point(class_scope:LibraryReplicationResponse)
}

// message ClickLogEvent
class ClickLogEvent {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("ClickLogEvent: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->eventTime_ = $tmp;
          
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->url_ = $tmp;
          $limit-=$len;
          break;
        case 3:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->listId_ = $tmp;
          $limit-=$len;
          break;
        case 4:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->referrerUrl_ = $tmp;
          $limit-=$len;
          break;
        case 5:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->referrerListId_ = $tmp;
          $limit-=$len;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->eventTime_)) {
      fwrite($fp, "\x08");
      Protobuf::write_varint($fp, (int)$this->eventTime_);
    }
    if (!is_null($this->url_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, strlen((string)$this->url_));
      fwrite($fp, (string)$this->url_);
    }
    if (!is_null($this->listId_)) {
      fwrite($fp, "\x1a");
      Protobuf::write_varint($fp, strlen((string)$this->listId_));
      fwrite($fp, (string)$this->listId_);
    }
    if (!is_null($this->referrerUrl_)) {
      fwrite($fp, "\"");
      Protobuf::write_varint($fp, strlen((string)$this->referrerUrl_));
      fwrite($fp, (string)$this->referrerUrl_);
    }
    if (!is_null($this->referrerListId_)) {
      fwrite($fp, "*");
      Protobuf::write_varint($fp, strlen((string)$this->referrerListId_));
      fwrite($fp, (string)$this->referrerListId_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->eventTime_)) {
      $size += 1 + Protobuf::size_varint($this->eventTime_);
    }
    if (!is_null($this->url_)) {
      $l = strlen((string)$this->url_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->listId_)) {
      $l = strlen((string)$this->listId_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->referrerUrl_)) {
      $l = strlen((string)$this->referrerUrl_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->referrerListId_)) {
      $l = strlen((string)$this->referrerListId_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('eventTime_', $this->eventTime_)
         . Protobuf::toString('url_', $this->url_)
         . Protobuf::toString('listId_', $this->listId_)
         . Protobuf::toString('referrerUrl_', $this->referrerUrl_)
         . Protobuf::toString('referrerListId_', $this->referrerListId_);
  }
  
  // optional int64 eventTime = 1;

  protected $eventTime_;
  public function resetEventTime() { unset($this->eventTime_); }
  public function clearEventTime() { unset($this->eventTime_); }
  public function hasEventTime() { return isset($this->eventTime_); }
  public function getEventTime() { return $this->eventTime_; }
  public function setEventTime($value) { $this->eventTime_ = (string)$value; }
  
  // optional string url = 2;

  protected $url_;
  public function resetUrl() { unset($this->url_); }
  public function clearUrl() { unset($this->url_); }
  public function hasUrl() { return isset($this->url_); }
  public function getUrl() { return $this->url_; }
  public function setUrl($value) { $this->url_ = (string)$value; }
  
  // optional string listId = 3;

  protected $listId_;
  public function resetListId() { unset($this->listId_); }
  public function clearListId() { unset($this->listId_); }
  public function hasListId() { return isset($this->listId_); }
  public function getListId() { return $this->listId_; }
  public function setListId($value) { $this->listId_ = (string)$value; }
  
  // optional string referrerUrl = 4;

  protected $referrerUrl_;
  public function resetReferrerUrl() { unset($this->referrerUrl_); }
  public function clearReferrerUrl() { unset($this->referrerUrl_); }
  public function hasReferrerUrl() { return isset($this->referrerUrl_); }
  public function getReferrerUrl() { return $this->referrerUrl_; }
  public function setReferrerUrl($value) { $this->referrerUrl_ = (string)$value; }
  
  // optional string referrerListId = 5;

  protected $referrerListId_;
  public function resetReferrerListId() { unset($this->referrerListId_); }
  public function clearReferrerListId() { unset($this->referrerListId_); }
  public function hasReferrerListId() { return isset($this->referrerListId_); }
  public function getReferrerListId() { return $this->referrerListId_; }
  public function setReferrerListId($value) { $this->referrerListId_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:ClickLogEvent)
}

// message LogRequest
class LogRequest {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("LogRequest: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->clickEvent_[] = new ClickLogEvent($fp, $len);
          ASSERT('$len == 0');
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->clickEvent_))
      foreach($this->clickEvent_ as $v) {
        fwrite($fp, "\x0a");
        Protobuf::write_varint($fp, $v->size()); // message
        $v->write($fp);
      }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->clickEvent_))
      foreach($this->clickEvent_ as $v) {
        $l = $v->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('clickEvent_', $this->clickEvent_);
  }
  
  // repeated .ClickLogEvent clickEvent = 1;

  protected $clickEvent_ = array();
  public function clearClickEvent() { $this->clickEvent_ = array(); }
  public function getClickEventCount() { return count($this->clickEvent_); }
  public function hasClickEvent() { return (count($this->clickEvent_) > 0); }
  public function indexOfClickEvent($value) { return array_search($value,$this->clickEvent_);}
  public function removeClickEvent($index) { unset($this->clickEvent_[$index]); }
  public function removeValClickEvent($value) { $idx = array_search($value,$this->clickEvent_); if($idx !== FALSE){unset($this->clickEvent_[$idx]); }}
  public function removeValsClickEvent($values) { foreach($values as $value){$idx = array_search($value,$this->clickEvent_); if($idx !== FALSE){unset($this->clickEvent_[$idx]); }}}
  public function pushClickEvent($newvar) { return array_push($this->clickEvent_,$newvar); }
  public function popClickEvent() { return array_pop($this->clickEvent_); }
  public function shiftClickEvent() { return array_shift($this->clickEvent_); }
  public function unshiftClickEvent($newvar) { return array_unshift($this->clickEvent_,$newvar); }
  public function getClickEvent($index) { return $this->clickEvent_[$index]; }
  public function getClickEventArray() { return $this->clickEvent_; }
  public function setClickEvent($index, $value) {$this->clickEvent_[$index] = $value;	}
  public function addClickEvent($value) { $this->clickEvent_[] = $value; }
  public function addAllClickEvent(array $values) { foreach($values as $value) {$this->clickEvent_[] = $value;} }
  
  // @@protoc_insertion_point(class_scope:LogRequest)
}

// message LogResponse
class LogResponse {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("LogResponse: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  public function size() {
    $size = 0;
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown);
  }
  
  // @@protoc_insertion_point(class_scope:LogResponse)
}

// message ModifyLibraryRequest
class ModifyLibraryRequest {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("ModifyLibraryRequest: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->libraryId_ = $tmp;
          $limit-=$len;
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->forAddDocid_[] = $tmp;
          $limit-=$len;
          break;
        case 3:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->forRemovalDocid_[] = $tmp;
          $limit-=$len;
          break;
        case 4:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->forArchiveDocid_[] = $tmp;
          $limit-=$len;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->libraryId_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, strlen((string)$this->libraryId_));
      fwrite($fp, (string)$this->libraryId_);
    }
    if (!is_null($this->forAddDocid_))
      foreach($this->forAddDocid_ as $v) {
        fwrite($fp, "\x12");
        Protobuf::write_varint($fp, strlen((string)$v));
        fwrite($fp, (string)$v);
      }
    if (!is_null($this->forRemovalDocid_))
      foreach($this->forRemovalDocid_ as $v) {
        fwrite($fp, "\x1a");
        Protobuf::write_varint($fp, strlen((string)$v));
        fwrite($fp, (string)$v);
      }
    if (!is_null($this->forArchiveDocid_))
      foreach($this->forArchiveDocid_ as $v) {
        fwrite($fp, "\"");
        Protobuf::write_varint($fp, strlen((string)$v));
        fwrite($fp, (string)$v);
      }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->libraryId_)) {
      $l = strlen((string)$this->libraryId_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->forAddDocid_))
      foreach($this->forAddDocid_ as $v) {
        $l = strlen((string)$v);
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
    if (!is_null($this->forRemovalDocid_))
      foreach($this->forRemovalDocid_ as $v) {
        $l = strlen((string)$v);
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
    if (!is_null($this->forArchiveDocid_))
      foreach($this->forArchiveDocid_ as $v) {
        $l = strlen((string)$v);
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('libraryId_', $this->libraryId_)
         . Protobuf::toString('forAddDocid_', $this->forAddDocid_)
         . Protobuf::toString('forRemovalDocid_', $this->forRemovalDocid_)
         . Protobuf::toString('forArchiveDocid_', $this->forArchiveDocid_);
  }
  
  // optional string libraryId = 1;

  protected $libraryId_;
  public function resetLibraryId() { unset($this->libraryId_); }
  public function clearLibraryId() { unset($this->libraryId_); }
  public function hasLibraryId() { return isset($this->libraryId_); }
  public function getLibraryId() { return $this->libraryId_; }
  public function setLibraryId($value) { $this->libraryId_ = (string)$value; }
  
  // repeated string forAddDocid = 2;

  protected $forAddDocid_ = array();
  public function clearForAddDocid() { $this->forAddDocid_ = array(); }
  public function getForAddDocidCount() { return count($this->forAddDocid_); }
  public function hasForAddDocid() { return (count($this->forAddDocid_) > 0); }
  public function indexOfForAddDocid($value) { return array_search($value,$this->forAddDocid_);}
  public function removeForAddDocid($index) { unset($this->forAddDocid_[$index]); }
  public function removeValForAddDocid($value) { $idx = array_search($value,$this->forAddDocid_); if($idx !== FALSE){unset($this->forAddDocid_[$idx]); }}
  public function removeValsForAddDocid($values) { foreach($values as $value){$idx = array_search($value,$this->forAddDocid_); if($idx !== FALSE){unset($this->forAddDocid_[$idx]); }}}
  public function pushForAddDocid($newvar) { return array_push($this->forAddDocid_,(string)$newvar); }
  public function popForAddDocid() { return array_pop($this->forAddDocid_); }
  public function shiftForAddDocid() { return array_shift($this->forAddDocid_); }
  public function unshiftForAddDocid($newvar) { return array_unshift($this->forAddDocid_,(string)$newvar); }
  public function getForAddDocid($index) { return $this->forAddDocid_[$index]; }
  public function getForAddDocidArray() { return $this->forAddDocid_; }
  public function setForAddDocid($index, $value) {$this->forAddDocid_[$index] = (string)$value;	}
  public function addForAddDocid($value) { $this->forAddDocid_[] = (string)$value; }
  public function addAllForAddDocid(array $values) { foreach($values as $value) {$this->forAddDocid_[] = (string)$value;} }
  
  // repeated string forRemovalDocid = 3;

  protected $forRemovalDocid_ = array();
  public function clearForRemovalDocid() { $this->forRemovalDocid_ = array(); }
  public function getForRemovalDocidCount() { return count($this->forRemovalDocid_); }
  public function hasForRemovalDocid() { return (count($this->forRemovalDocid_) > 0); }
  public function indexOfForRemovalDocid($value) { return array_search($value,$this->forRemovalDocid_);}
  public function removeForRemovalDocid($index) { unset($this->forRemovalDocid_[$index]); }
  public function removeValForRemovalDocid($value) { $idx = array_search($value,$this->forRemovalDocid_); if($idx !== FALSE){unset($this->forRemovalDocid_[$idx]); }}
  public function removeValsForRemovalDocid($values) { foreach($values as $value){$idx = array_search($value,$this->forRemovalDocid_); if($idx !== FALSE){unset($this->forRemovalDocid_[$idx]); }}}
  public function pushForRemovalDocid($newvar) { return array_push($this->forRemovalDocid_,(string)$newvar); }
  public function popForRemovalDocid() { return array_pop($this->forRemovalDocid_); }
  public function shiftForRemovalDocid() { return array_shift($this->forRemovalDocid_); }
  public function unshiftForRemovalDocid($newvar) { return array_unshift($this->forRemovalDocid_,(string)$newvar); }
  public function getForRemovalDocid($index) { return $this->forRemovalDocid_[$index]; }
  public function getForRemovalDocidArray() { return $this->forRemovalDocid_; }
  public function setForRemovalDocid($index, $value) {$this->forRemovalDocid_[$index] = (string)$value;	}
  public function addForRemovalDocid($value) { $this->forRemovalDocid_[] = (string)$value; }
  public function addAllForRemovalDocid(array $values) { foreach($values as $value) {$this->forRemovalDocid_[] = (string)$value;} }
  
  // repeated string forArchiveDocid = 4;

  protected $forArchiveDocid_ = array();
  public function clearForArchiveDocid() { $this->forArchiveDocid_ = array(); }
  public function getForArchiveDocidCount() { return count($this->forArchiveDocid_); }
  public function hasForArchiveDocid() { return (count($this->forArchiveDocid_) > 0); }
  public function indexOfForArchiveDocid($value) { return array_search($value,$this->forArchiveDocid_);}
  public function removeForArchiveDocid($index) { unset($this->forArchiveDocid_[$index]); }
  public function removeValForArchiveDocid($value) { $idx = array_search($value,$this->forArchiveDocid_); if($idx !== FALSE){unset($this->forArchiveDocid_[$idx]); }}
  public function removeValsForArchiveDocid($values) { foreach($values as $value){$idx = array_search($value,$this->forArchiveDocid_); if($idx !== FALSE){unset($this->forArchiveDocid_[$idx]); }}}
  public function pushForArchiveDocid($newvar) { return array_push($this->forArchiveDocid_,(string)$newvar); }
  public function popForArchiveDocid() { return array_pop($this->forArchiveDocid_); }
  public function shiftForArchiveDocid() { return array_shift($this->forArchiveDocid_); }
  public function unshiftForArchiveDocid($newvar) { return array_unshift($this->forArchiveDocid_,(string)$newvar); }
  public function getForArchiveDocid($index) { return $this->forArchiveDocid_[$index]; }
  public function getForArchiveDocidArray() { return $this->forArchiveDocid_; }
  public function setForArchiveDocid($index, $value) {$this->forArchiveDocid_[$index] = (string)$value;	}
  public function addForArchiveDocid($value) { $this->forArchiveDocid_[] = (string)$value; }
  public function addAllForArchiveDocid(array $values) { foreach($values as $value) {$this->forArchiveDocid_[] = (string)$value;} }
  
  // @@protoc_insertion_point(class_scope:ModifyLibraryRequest)
}

// message ModifyLibraryResponse
class ModifyLibraryResponse {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("ModifyLibraryResponse: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->libraryUpdate_ = new LibraryUpdate($fp, $len);
          ASSERT('$len == 0');
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->libraryUpdate_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, $this->libraryUpdate_->size()); // message
      $this->libraryUpdate_->write($fp);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->libraryUpdate_)) {
      $l = $this->libraryUpdate_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('libraryUpdate_', $this->libraryUpdate_);
  }
  
  // optional .LibraryUpdate libraryUpdate = 1;

  protected $libraryUpdate_;
  public function resetLibraryUpdate() { unset($this->libraryUpdate_); }
  public function clearLibraryUpdate() { unset($this->libraryUpdate_); }
  public function hasLibraryUpdate() { return isset($this->libraryUpdate_); }
  public function getLibraryUpdate() { return $this->libraryUpdate_; }
  public function setLibraryUpdate(LibraryUpdate $value) { $this->libraryUpdate_ = $value; }
  
  // @@protoc_insertion_point(class_scope:ModifyLibraryResponse)
}

// message AndroidAppNotificationData
class AndroidAppNotificationData {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("AndroidAppNotificationData: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->versionCode_ = $tmp;
          
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->assetId_ = $tmp;
          $limit-=$len;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->versionCode_)) {
      fwrite($fp, "\x08");
      Protobuf::write_varint($fp, (int)$this->versionCode_);
    }
    if (!is_null($this->assetId_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, strlen((string)$this->assetId_));
      fwrite($fp, (string)$this->assetId_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->versionCode_)) {
      $size += 1 + Protobuf::size_varint($this->versionCode_);
    }
    if (!is_null($this->assetId_)) {
      $l = strlen((string)$this->assetId_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('versionCode_', $this->versionCode_)
         . Protobuf::toString('assetId_', $this->assetId_);
  }
  
  // optional int32 versionCode = 1;

  protected $versionCode_;
  public function resetVersionCode() { unset($this->versionCode_); }
  public function clearVersionCode() { unset($this->versionCode_); }
  public function hasVersionCode() { return isset($this->versionCode_); }
  public function getVersionCode() { return $this->versionCode_; }
  public function setVersionCode($value) { $this->versionCode_ = (string)$value; }
  
  // optional string assetId = 2;

  protected $assetId_;
  public function resetAssetId() { unset($this->assetId_); }
  public function clearAssetId() { unset($this->assetId_); }
  public function hasAssetId() { return isset($this->assetId_); }
  public function getAssetId() { return $this->assetId_; }
  public function setAssetId($value) { $this->assetId_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:AndroidAppNotificationData)
}

// message InAppNotificationData
class InAppNotificationData {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("InAppNotificationData: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->checkoutOrderId_ = $tmp;
          $limit-=$len;
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->inAppNotificationId_ = $tmp;
          $limit-=$len;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->checkoutOrderId_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, strlen((string)$this->checkoutOrderId_));
      fwrite($fp, (string)$this->checkoutOrderId_);
    }
    if (!is_null($this->inAppNotificationId_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, strlen((string)$this->inAppNotificationId_));
      fwrite($fp, (string)$this->inAppNotificationId_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->checkoutOrderId_)) {
      $l = strlen((string)$this->checkoutOrderId_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->inAppNotificationId_)) {
      $l = strlen((string)$this->inAppNotificationId_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('checkoutOrderId_', $this->checkoutOrderId_)
         . Protobuf::toString('inAppNotificationId_', $this->inAppNotificationId_);
  }
  
  // optional string checkoutOrderId = 1;

  protected $checkoutOrderId_;
  public function resetCheckoutOrderId() { unset($this->checkoutOrderId_); }
  public function clearCheckoutOrderId() { unset($this->checkoutOrderId_); }
  public function hasCheckoutOrderId() { return isset($this->checkoutOrderId_); }
  public function getCheckoutOrderId() { return $this->checkoutOrderId_; }
  public function setCheckoutOrderId($value) { $this->checkoutOrderId_ = (string)$value; }
  
  // optional string inAppNotificationId = 2;

  protected $inAppNotificationId_;
  public function resetInAppNotificationId() { unset($this->inAppNotificationId_); }
  public function clearInAppNotificationId() { unset($this->inAppNotificationId_); }
  public function hasInAppNotificationId() { return isset($this->inAppNotificationId_); }
  public function getInAppNotificationId() { return $this->inAppNotificationId_; }
  public function setInAppNotificationId($value) { $this->inAppNotificationId_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:InAppNotificationData)
}

// message LibraryDirtyData
class LibraryDirtyData {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("LibraryDirtyData: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->backend_ = $tmp;
          
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->libraryId_ = $tmp;
          $limit-=$len;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->backend_)) {
      fwrite($fp, "\x08");
      Protobuf::write_varint($fp, (int)$this->backend_);
    }
    if (!is_null($this->libraryId_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, strlen((string)$this->libraryId_));
      fwrite($fp, (string)$this->libraryId_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->backend_)) {
      $size += 1 + Protobuf::size_varint($this->backend_);
    }
    if (!is_null($this->libraryId_)) {
      $l = strlen((string)$this->libraryId_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('backend_', $this->backend_)
         . Protobuf::toString('libraryId_', $this->libraryId_);
  }
  
  // optional int32 backend = 1;

  protected $backend_;
  public function resetBackend() { unset($this->backend_); }
  public function clearBackend() { unset($this->backend_); }
  public function hasBackend() { return isset($this->backend_); }
  public function getBackend() { return $this->backend_; }
  public function setBackend($value) { $this->backend_ = (string)$value; }
  
  // optional string libraryId = 2;

  protected $libraryId_;
  public function resetLibraryId() { unset($this->libraryId_); }
  public function clearLibraryId() { unset($this->libraryId_); }
  public function hasLibraryId() { return isset($this->libraryId_); }
  public function getLibraryId() { return $this->libraryId_; }
  public function setLibraryId($value) { $this->libraryId_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:LibraryDirtyData)
}

// message Notification
class Notification {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("Notification: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->notificationType_ = $tmp;
          
          break;
        case 3:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->timestamp_ = $tmp;
          
          break;
        case 4:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->docid_ = new Docid($fp, $len);
          ASSERT('$len == 0');
          break;
        case 5:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->docTitle_ = $tmp;
          $limit-=$len;
          break;
        case 6:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->userEmail_ = $tmp;
          $limit-=$len;
          break;
        case 7:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->appData_ = new AndroidAppNotificationData($fp, $len);
          ASSERT('$len == 0');
          break;
        case 8:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->appDeliveryData_ = new AndroidAppDeliveryData($fp, $len);
          ASSERT('$len == 0');
          break;
        case 9:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->purchaseRemovalData_ = new PurchaseRemovalData($fp, $len);
          ASSERT('$len == 0');
          break;
        case 10:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->userNotificationData_ = new UserNotificationData($fp, $len);
          ASSERT('$len == 0');
          break;
        case 11:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->inAppNotificationData_ = new InAppNotificationData($fp, $len);
          ASSERT('$len == 0');
          break;
        case 12:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->purchaseDeclinedData_ = new PurchaseDeclinedData($fp, $len);
          ASSERT('$len == 0');
          break;
        case 13:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->notificationId_ = $tmp;
          $limit-=$len;
          break;
        case 14:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->libraryUpdate_ = new LibraryUpdate($fp, $len);
          ASSERT('$len == 0');
          break;
        case 15:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->libraryDirtyData_ = new LibraryDirtyData($fp, $len);
          ASSERT('$len == 0');
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->notificationType_)) {
      fwrite($fp, "\x08");
      Protobuf::write_varint($fp, (int)$this->notificationType_);
    }
    if (!is_null($this->timestamp_)) {
      fwrite($fp, "\x18");
      Protobuf::write_varint($fp, (int)$this->timestamp_);
    }
    if (!is_null($this->docid_)) {
      fwrite($fp, "\"");
      Protobuf::write_varint($fp, $this->docid_->size()); // message
      $this->docid_->write($fp);
    }
    if (!is_null($this->docTitle_)) {
      fwrite($fp, "*");
      Protobuf::write_varint($fp, strlen((string)$this->docTitle_));
      fwrite($fp, (string)$this->docTitle_);
    }
    if (!is_null($this->userEmail_)) {
      fwrite($fp, "2");
      Protobuf::write_varint($fp, strlen((string)$this->userEmail_));
      fwrite($fp, (string)$this->userEmail_);
    }
    if (!is_null($this->appData_)) {
      fwrite($fp, ":");
      Protobuf::write_varint($fp, $this->appData_->size()); // message
      $this->appData_->write($fp);
    }
    if (!is_null($this->appDeliveryData_)) {
      fwrite($fp, "B");
      Protobuf::write_varint($fp, $this->appDeliveryData_->size()); // message
      $this->appDeliveryData_->write($fp);
    }
    if (!is_null($this->purchaseRemovalData_)) {
      fwrite($fp, "J");
      Protobuf::write_varint($fp, $this->purchaseRemovalData_->size()); // message
      $this->purchaseRemovalData_->write($fp);
    }
    if (!is_null($this->userNotificationData_)) {
      fwrite($fp, "R");
      Protobuf::write_varint($fp, $this->userNotificationData_->size()); // message
      $this->userNotificationData_->write($fp);
    }
    if (!is_null($this->inAppNotificationData_)) {
      fwrite($fp, "Z");
      Protobuf::write_varint($fp, $this->inAppNotificationData_->size()); // message
      $this->inAppNotificationData_->write($fp);
    }
    if (!is_null($this->purchaseDeclinedData_)) {
      fwrite($fp, "b");
      Protobuf::write_varint($fp, $this->purchaseDeclinedData_->size()); // message
      $this->purchaseDeclinedData_->write($fp);
    }
    if (!is_null($this->notificationId_)) {
      fwrite($fp, "j");
      Protobuf::write_varint($fp, strlen((string)$this->notificationId_));
      fwrite($fp, (string)$this->notificationId_);
    }
    if (!is_null($this->libraryUpdate_)) {
      fwrite($fp, "r");
      Protobuf::write_varint($fp, $this->libraryUpdate_->size()); // message
      $this->libraryUpdate_->write($fp);
    }
    if (!is_null($this->libraryDirtyData_)) {
      fwrite($fp, "z");
      Protobuf::write_varint($fp, $this->libraryDirtyData_->size()); // message
      $this->libraryDirtyData_->write($fp);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->notificationType_)) {
      $size += 1 + Protobuf::size_varint($this->notificationType_);
    }
    if (!is_null($this->timestamp_)) {
      $size += 1 + Protobuf::size_varint($this->timestamp_);
    }
    if (!is_null($this->docid_)) {
      $l = $this->docid_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->docTitle_)) {
      $l = strlen((string)$this->docTitle_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->userEmail_)) {
      $l = strlen((string)$this->userEmail_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->appData_)) {
      $l = $this->appData_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->appDeliveryData_)) {
      $l = $this->appDeliveryData_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->purchaseRemovalData_)) {
      $l = $this->purchaseRemovalData_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->userNotificationData_)) {
      $l = $this->userNotificationData_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->inAppNotificationData_)) {
      $l = $this->inAppNotificationData_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->purchaseDeclinedData_)) {
      $l = $this->purchaseDeclinedData_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->notificationId_)) {
      $l = strlen((string)$this->notificationId_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->libraryUpdate_)) {
      $l = $this->libraryUpdate_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->libraryDirtyData_)) {
      $l = $this->libraryDirtyData_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('notificationType_', $this->notificationType_)
         . Protobuf::toString('timestamp_', $this->timestamp_)
         . Protobuf::toString('docid_', $this->docid_)
         . Protobuf::toString('docTitle_', $this->docTitle_)
         . Protobuf::toString('userEmail_', $this->userEmail_)
         . Protobuf::toString('appData_', $this->appData_)
         . Protobuf::toString('appDeliveryData_', $this->appDeliveryData_)
         . Protobuf::toString('purchaseRemovalData_', $this->purchaseRemovalData_)
         . Protobuf::toString('userNotificationData_', $this->userNotificationData_)
         . Protobuf::toString('inAppNotificationData_', $this->inAppNotificationData_)
         . Protobuf::toString('purchaseDeclinedData_', $this->purchaseDeclinedData_)
         . Protobuf::toString('notificationId_', $this->notificationId_)
         . Protobuf::toString('libraryUpdate_', $this->libraryUpdate_)
         . Protobuf::toString('libraryDirtyData_', $this->libraryDirtyData_);
  }
  
  // optional int32 notificationType = 1;

  protected $notificationType_;
  public function resetNotificationType() { unset($this->notificationType_); }
  public function clearNotificationType() { unset($this->notificationType_); }
  public function hasNotificationType() { return isset($this->notificationType_); }
  public function getNotificationType() { return $this->notificationType_; }
  public function setNotificationType($value) { $this->notificationType_ = (string)$value; }
  
  // optional int64 timestamp = 3;

  protected $timestamp_;
  public function resetTimestamp() { unset($this->timestamp_); }
  public function clearTimestamp() { unset($this->timestamp_); }
  public function hasTimestamp() { return isset($this->timestamp_); }
  public function getTimestamp() { return $this->timestamp_; }
  public function setTimestamp($value) { $this->timestamp_ = (string)$value; }
  
  // optional .Docid docid = 4;

  protected $docid_;
  public function resetDocid() { unset($this->docid_); }
  public function clearDocid() { unset($this->docid_); }
  public function hasDocid() { return isset($this->docid_); }
  public function getDocid() { return $this->docid_; }
  public function setDocid(Docid $value) { $this->docid_ = $value; }
  
  // optional string docTitle = 5;

  protected $docTitle_;
  public function resetDocTitle() { unset($this->docTitle_); }
  public function clearDocTitle() { unset($this->docTitle_); }
  public function hasDocTitle() { return isset($this->docTitle_); }
  public function getDocTitle() { return $this->docTitle_; }
  public function setDocTitle($value) { $this->docTitle_ = (string)$value; }
  
  // optional string userEmail = 6;

  protected $userEmail_;
  public function resetUserEmail() { unset($this->userEmail_); }
  public function clearUserEmail() { unset($this->userEmail_); }
  public function hasUserEmail() { return isset($this->userEmail_); }
  public function getUserEmail() { return $this->userEmail_; }
  public function setUserEmail($value) { $this->userEmail_ = (string)$value; }
  
  // optional .AndroidAppNotificationData appData = 7;

  protected $appData_;
  public function resetAppData() { unset($this->appData_); }
  public function clearAppData() { unset($this->appData_); }
  public function hasAppData() { return isset($this->appData_); }
  public function getAppData() { return $this->appData_; }
  public function setAppData(AndroidAppNotificationData $value) { $this->appData_ = $value; }
  
  // optional .AndroidAppDeliveryData appDeliveryData = 8;

  protected $appDeliveryData_;
  public function resetAppDeliveryData() { unset($this->appDeliveryData_); }
  public function clearAppDeliveryData() { unset($this->appDeliveryData_); }
  public function hasAppDeliveryData() { return isset($this->appDeliveryData_); }
  public function getAppDeliveryData() { return $this->appDeliveryData_; }
  public function setAppDeliveryData(AndroidAppDeliveryData $value) { $this->appDeliveryData_ = $value; }
  
  // optional .PurchaseRemovalData purchaseRemovalData = 9;

  protected $purchaseRemovalData_;
  public function resetPurchaseRemovalData() { unset($this->purchaseRemovalData_); }
  public function clearPurchaseRemovalData() { unset($this->purchaseRemovalData_); }
  public function hasPurchaseRemovalData() { return isset($this->purchaseRemovalData_); }
  public function getPurchaseRemovalData() { return $this->purchaseRemovalData_; }
  public function setPurchaseRemovalData(PurchaseRemovalData $value) { $this->purchaseRemovalData_ = $value; }
  
  // optional .UserNotificationData userNotificationData = 10;

  protected $userNotificationData_;
  public function resetUserNotificationData() { unset($this->userNotificationData_); }
  public function clearUserNotificationData() { unset($this->userNotificationData_); }
  public function hasUserNotificationData() { return isset($this->userNotificationData_); }
  public function getUserNotificationData() { return $this->userNotificationData_; }
  public function setUserNotificationData(UserNotificationData $value) { $this->userNotificationData_ = $value; }
  
  // optional .InAppNotificationData inAppNotificationData = 11;

  protected $inAppNotificationData_;
  public function resetInAppNotificationData() { unset($this->inAppNotificationData_); }
  public function clearInAppNotificationData() { unset($this->inAppNotificationData_); }
  public function hasInAppNotificationData() { return isset($this->inAppNotificationData_); }
  public function getInAppNotificationData() { return $this->inAppNotificationData_; }
  public function setInAppNotificationData(InAppNotificationData $value) { $this->inAppNotificationData_ = $value; }
  
  // optional .PurchaseDeclinedData purchaseDeclinedData = 12;

  protected $purchaseDeclinedData_;
  public function resetPurchaseDeclinedData() { unset($this->purchaseDeclinedData_); }
  public function clearPurchaseDeclinedData() { unset($this->purchaseDeclinedData_); }
  public function hasPurchaseDeclinedData() { return isset($this->purchaseDeclinedData_); }
  public function getPurchaseDeclinedData() { return $this->purchaseDeclinedData_; }
  public function setPurchaseDeclinedData(PurchaseDeclinedData $value) { $this->purchaseDeclinedData_ = $value; }
  
  // optional string notificationId = 13;

  protected $notificationId_;
  public function resetNotificationId() { unset($this->notificationId_); }
  public function clearNotificationId() { unset($this->notificationId_); }
  public function hasNotificationId() { return isset($this->notificationId_); }
  public function getNotificationId() { return $this->notificationId_; }
  public function setNotificationId($value) { $this->notificationId_ = (string)$value; }
  
  // optional .LibraryUpdate libraryUpdate = 14;

  protected $libraryUpdate_;
  public function resetLibraryUpdate() { unset($this->libraryUpdate_); }
  public function clearLibraryUpdate() { unset($this->libraryUpdate_); }
  public function hasLibraryUpdate() { return isset($this->libraryUpdate_); }
  public function getLibraryUpdate() { return $this->libraryUpdate_; }
  public function setLibraryUpdate(LibraryUpdate $value) { $this->libraryUpdate_ = $value; }
  
  // optional .LibraryDirtyData libraryDirtyData = 15;

  protected $libraryDirtyData_;
  public function resetLibraryDirtyData() { unset($this->libraryDirtyData_); }
  public function clearLibraryDirtyData() { unset($this->libraryDirtyData_); }
  public function hasLibraryDirtyData() { return isset($this->libraryDirtyData_); }
  public function getLibraryDirtyData() { return $this->libraryDirtyData_; }
  public function setLibraryDirtyData(LibraryDirtyData $value) { $this->libraryDirtyData_ = $value; }
  
  // @@protoc_insertion_point(class_scope:Notification)
}

// message PurchaseDeclinedData
class PurchaseDeclinedData {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("PurchaseDeclinedData: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->reason_ = $tmp;
          
          break;
        case 2:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->showNotification_ = $tmp > 0 ? true : false;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->reason_)) {
      fwrite($fp, "\x08");
      Protobuf::write_varint($fp, (int)$this->reason_);
    }
    if (!is_null($this->showNotification_)) {
      fwrite($fp, "\x10");
      Protobuf::write_varint($fp, (int)$this->showNotification_ ? 1 : 0);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->reason_)) {
      $size += 1 + Protobuf::size_varint($this->reason_);
    }
    if (!is_null($this->showNotification_)) {
      $size += 2;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('reason_', $this->reason_)
         . Protobuf::toString('showNotification_', $this->showNotification_);
  }
  
  // optional int32 reason = 1;

  protected $reason_;
  public function resetReason() { unset($this->reason_); }
  public function clearReason() { unset($this->reason_); }
  public function hasReason() { return isset($this->reason_); }
  public function getReason() { return $this->reason_; }
  public function setReason($value) { $this->reason_ = (string)$value; }
  
  // optional bool showNotification = 2;

  protected $showNotification_;
  public function resetShowNotification() { unset($this->showNotification_); }
  public function clearShowNotification() { unset($this->showNotification_); }
  public function hasShowNotification() { return isset($this->showNotification_); }
  public function getShowNotification() { return $this->showNotification_; }
  public function setShowNotification($value) { $this->showNotification_ = (bool)$value; }
  
  // @@protoc_insertion_point(class_scope:PurchaseDeclinedData)
}

// message PurchaseRemovalData
class PurchaseRemovalData {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("PurchaseRemovalData: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->malicious_ = $tmp > 0 ? true : false;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->malicious_)) {
      fwrite($fp, "\x08");
      Protobuf::write_varint($fp, (int)$this->malicious_ ? 1 : 0);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->malicious_)) {
      $size += 2;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('malicious_', $this->malicious_);
  }
  
  // optional bool malicious = 1;

  protected $malicious_;
  public function resetMalicious() { unset($this->malicious_); }
  public function clearMalicious() { unset($this->malicious_); }
  public function hasMalicious() { return isset($this->malicious_); }
  public function getMalicious() { return $this->malicious_; }
  public function setMalicious($value) { $this->malicious_ = (bool)$value; }
  
  // @@protoc_insertion_point(class_scope:PurchaseRemovalData)
}

// message UserNotificationData
class UserNotificationData {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("UserNotificationData: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->notificationTitle_ = $tmp;
          $limit-=$len;
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->notificationText_ = $tmp;
          $limit-=$len;
          break;
        case 3:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->tickerText_ = $tmp;
          $limit-=$len;
          break;
        case 4:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->dialogTitle_ = $tmp;
          $limit-=$len;
          break;
        case 5:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->dialogText_ = $tmp;
          $limit-=$len;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->notificationTitle_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, strlen((string)$this->notificationTitle_));
      fwrite($fp, (string)$this->notificationTitle_);
    }
    if (!is_null($this->notificationText_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, strlen((string)$this->notificationText_));
      fwrite($fp, (string)$this->notificationText_);
    }
    if (!is_null($this->tickerText_)) {
      fwrite($fp, "\x1a");
      Protobuf::write_varint($fp, strlen((string)$this->tickerText_));
      fwrite($fp, (string)$this->tickerText_);
    }
    if (!is_null($this->dialogTitle_)) {
      fwrite($fp, "\"");
      Protobuf::write_varint($fp, strlen((string)$this->dialogTitle_));
      fwrite($fp, (string)$this->dialogTitle_);
    }
    if (!is_null($this->dialogText_)) {
      fwrite($fp, "*");
      Protobuf::write_varint($fp, strlen((string)$this->dialogText_));
      fwrite($fp, (string)$this->dialogText_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->notificationTitle_)) {
      $l = strlen((string)$this->notificationTitle_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->notificationText_)) {
      $l = strlen((string)$this->notificationText_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->tickerText_)) {
      $l = strlen((string)$this->tickerText_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->dialogTitle_)) {
      $l = strlen((string)$this->dialogTitle_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->dialogText_)) {
      $l = strlen((string)$this->dialogText_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('notificationTitle_', $this->notificationTitle_)
         . Protobuf::toString('notificationText_', $this->notificationText_)
         . Protobuf::toString('tickerText_', $this->tickerText_)
         . Protobuf::toString('dialogTitle_', $this->dialogTitle_)
         . Protobuf::toString('dialogText_', $this->dialogText_);
  }
  
  // optional string notificationTitle = 1;

  protected $notificationTitle_;
  public function resetNotificationTitle() { unset($this->notificationTitle_); }
  public function clearNotificationTitle() { unset($this->notificationTitle_); }
  public function hasNotificationTitle() { return isset($this->notificationTitle_); }
  public function getNotificationTitle() { return $this->notificationTitle_; }
  public function setNotificationTitle($value) { $this->notificationTitle_ = (string)$value; }
  
  // optional string notificationText = 2;

  protected $notificationText_;
  public function resetNotificationText() { unset($this->notificationText_); }
  public function clearNotificationText() { unset($this->notificationText_); }
  public function hasNotificationText() { return isset($this->notificationText_); }
  public function getNotificationText() { return $this->notificationText_; }
  public function setNotificationText($value) { $this->notificationText_ = (string)$value; }
  
  // optional string tickerText = 3;

  protected $tickerText_;
  public function resetTickerText() { unset($this->tickerText_); }
  public function clearTickerText() { unset($this->tickerText_); }
  public function hasTickerText() { return isset($this->tickerText_); }
  public function getTickerText() { return $this->tickerText_; }
  public function setTickerText($value) { $this->tickerText_ = (string)$value; }
  
  // optional string dialogTitle = 4;

  protected $dialogTitle_;
  public function resetDialogTitle() { unset($this->dialogTitle_); }
  public function clearDialogTitle() { unset($this->dialogTitle_); }
  public function hasDialogTitle() { return isset($this->dialogTitle_); }
  public function getDialogTitle() { return $this->dialogTitle_; }
  public function setDialogTitle($value) { $this->dialogTitle_ = (string)$value; }
  
  // optional string dialogText = 5;

  protected $dialogText_;
  public function resetDialogText() { unset($this->dialogText_); }
  public function clearDialogText() { unset($this->dialogText_); }
  public function hasDialogText() { return isset($this->dialogText_); }
  public function getDialogText() { return $this->dialogText_; }
  public function setDialogText($value) { $this->dialogText_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:UserNotificationData)
}

// message OwnershipInfo
class OwnershipInfo {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("OwnershipInfo: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->initiationTimestampMsec_ = $tmp;
          
          break;
        case 2:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->validUntilTimestampMsec_ = $tmp;
          
          break;
        case 3:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->autoRenewing_ = $tmp > 0 ? true : false;
          break;
        case 4:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->refundTimeoutTimestampMsec_ = $tmp;
          
          break;
        case 5:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->postDeliveryRefundWindowMsec_ = $tmp;
          
          break;
        case 6:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->developerPurchaseInfo_ = new SignedData($fp, $len);
          ASSERT('$len == 0');
          break;
        case 7:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->preordered_ = $tmp > 0 ? true : false;
          break;
        case 8:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->hidden_ = $tmp > 0 ? true : false;
          break;
        case 9:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->rentalTerms_ = new RentalTerms($fp, $len);
          ASSERT('$len == 0');
          break;
        case 10:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->groupLicenseInfo_ = new GroupLicenseInfo($fp, $len);
          ASSERT('$len == 0');
          break;
        case 11:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->licensedDocumentInfo_ = new LicensedDocumentInfo($fp, $len);
          ASSERT('$len == 0');
          break;
        case 12:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->quantity_ = $tmp;
          
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->initiationTimestampMsec_)) {
      fwrite($fp, "\x08");
      Protobuf::write_varint($fp, (int)$this->initiationTimestampMsec_);
    }
    if (!is_null($this->validUntilTimestampMsec_)) {
      fwrite($fp, "\x10");
      Protobuf::write_varint($fp, (int)$this->validUntilTimestampMsec_);
    }
    if (!is_null($this->autoRenewing_)) {
      fwrite($fp, "\x18");
      Protobuf::write_varint($fp, (int)$this->autoRenewing_ ? 1 : 0);
    }
    if (!is_null($this->refundTimeoutTimestampMsec_)) {
      fwrite($fp, " ");
      Protobuf::write_varint($fp, (int)$this->refundTimeoutTimestampMsec_);
    }
    if (!is_null($this->postDeliveryRefundWindowMsec_)) {
      fwrite($fp, "(");
      Protobuf::write_varint($fp, (int)$this->postDeliveryRefundWindowMsec_);
    }
    if (!is_null($this->developerPurchaseInfo_)) {
      fwrite($fp, "2");
      Protobuf::write_varint($fp, $this->developerPurchaseInfo_->size()); // message
      $this->developerPurchaseInfo_->write($fp);
    }
    if (!is_null($this->preordered_)) {
      fwrite($fp, "8");
      Protobuf::write_varint($fp, (int)$this->preordered_ ? 1 : 0);
    }
    if (!is_null($this->hidden_)) {
      fwrite($fp, "@");
      Protobuf::write_varint($fp, (int)$this->hidden_ ? 1 : 0);
    }
    if (!is_null($this->rentalTerms_)) {
      fwrite($fp, "J");
      Protobuf::write_varint($fp, $this->rentalTerms_->size()); // message
      $this->rentalTerms_->write($fp);
    }
    if (!is_null($this->groupLicenseInfo_)) {
      fwrite($fp, "R");
      Protobuf::write_varint($fp, $this->groupLicenseInfo_->size()); // message
      $this->groupLicenseInfo_->write($fp);
    }
    if (!is_null($this->licensedDocumentInfo_)) {
      fwrite($fp, "Z");
      Protobuf::write_varint($fp, $this->licensedDocumentInfo_->size()); // message
      $this->licensedDocumentInfo_->write($fp);
    }
    if (!is_null($this->quantity_)) {
      fwrite($fp, "`");
      Protobuf::write_varint($fp, (int)$this->quantity_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->initiationTimestampMsec_)) {
      $size += 1 + Protobuf::size_varint($this->initiationTimestampMsec_);
    }
    if (!is_null($this->validUntilTimestampMsec_)) {
      $size += 1 + Protobuf::size_varint($this->validUntilTimestampMsec_);
    }
    if (!is_null($this->autoRenewing_)) {
      $size += 2;
    }
    if (!is_null($this->refundTimeoutTimestampMsec_)) {
      $size += 1 + Protobuf::size_varint($this->refundTimeoutTimestampMsec_);
    }
    if (!is_null($this->postDeliveryRefundWindowMsec_)) {
      $size += 1 + Protobuf::size_varint($this->postDeliveryRefundWindowMsec_);
    }
    if (!is_null($this->developerPurchaseInfo_)) {
      $l = $this->developerPurchaseInfo_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->preordered_)) {
      $size += 2;
    }
    if (!is_null($this->hidden_)) {
      $size += 2;
    }
    if (!is_null($this->rentalTerms_)) {
      $l = $this->rentalTerms_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->groupLicenseInfo_)) {
      $l = $this->groupLicenseInfo_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->licensedDocumentInfo_)) {
      $l = $this->licensedDocumentInfo_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->quantity_)) {
      $size += 1 + Protobuf::size_varint($this->quantity_);
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('initiationTimestampMsec_', $this->initiationTimestampMsec_)
         . Protobuf::toString('validUntilTimestampMsec_', $this->validUntilTimestampMsec_)
         . Protobuf::toString('autoRenewing_', $this->autoRenewing_)
         . Protobuf::toString('refundTimeoutTimestampMsec_', $this->refundTimeoutTimestampMsec_)
         . Protobuf::toString('postDeliveryRefundWindowMsec_', $this->postDeliveryRefundWindowMsec_)
         . Protobuf::toString('developerPurchaseInfo_', $this->developerPurchaseInfo_)
         . Protobuf::toString('preordered_', $this->preordered_)
         . Protobuf::toString('hidden_', $this->hidden_)
         . Protobuf::toString('rentalTerms_', $this->rentalTerms_)
         . Protobuf::toString('groupLicenseInfo_', $this->groupLicenseInfo_)
         . Protobuf::toString('licensedDocumentInfo_', $this->licensedDocumentInfo_)
         . Protobuf::toString('quantity_', $this->quantity_);
  }
  
  // optional int64 initiationTimestampMsec = 1;

  protected $initiationTimestampMsec_;
  public function resetInitiationTimestampMsec() { unset($this->initiationTimestampMsec_); }
  public function clearInitiationTimestampMsec() { unset($this->initiationTimestampMsec_); }
  public function hasInitiationTimestampMsec() { return isset($this->initiationTimestampMsec_); }
  public function getInitiationTimestampMsec() { return $this->initiationTimestampMsec_; }
  public function setInitiationTimestampMsec($value) { $this->initiationTimestampMsec_ = (string)$value; }
  
  // optional int64 validUntilTimestampMsec = 2;

  protected $validUntilTimestampMsec_;
  public function resetValidUntilTimestampMsec() { unset($this->validUntilTimestampMsec_); }
  public function clearValidUntilTimestampMsec() { unset($this->validUntilTimestampMsec_); }
  public function hasValidUntilTimestampMsec() { return isset($this->validUntilTimestampMsec_); }
  public function getValidUntilTimestampMsec() { return $this->validUntilTimestampMsec_; }
  public function setValidUntilTimestampMsec($value) { $this->validUntilTimestampMsec_ = (string)$value; }
  
  // optional bool autoRenewing = 3;

  protected $autoRenewing_;
  public function resetAutoRenewing() { unset($this->autoRenewing_); }
  public function clearAutoRenewing() { unset($this->autoRenewing_); }
  public function hasAutoRenewing() { return isset($this->autoRenewing_); }
  public function getAutoRenewing() { return $this->autoRenewing_; }
  public function setAutoRenewing($value) { $this->autoRenewing_ = (bool)$value; }
  
  // optional int64 refundTimeoutTimestampMsec = 4;

  protected $refundTimeoutTimestampMsec_;
  public function resetRefundTimeoutTimestampMsec() { unset($this->refundTimeoutTimestampMsec_); }
  public function clearRefundTimeoutTimestampMsec() { unset($this->refundTimeoutTimestampMsec_); }
  public function hasRefundTimeoutTimestampMsec() { return isset($this->refundTimeoutTimestampMsec_); }
  public function getRefundTimeoutTimestampMsec() { return $this->refundTimeoutTimestampMsec_; }
  public function setRefundTimeoutTimestampMsec($value) { $this->refundTimeoutTimestampMsec_ = (string)$value; }
  
  // optional int64 postDeliveryRefundWindowMsec = 5;

  protected $postDeliveryRefundWindowMsec_;
  public function resetPostDeliveryRefundWindowMsec() { unset($this->postDeliveryRefundWindowMsec_); }
  public function clearPostDeliveryRefundWindowMsec() { unset($this->postDeliveryRefundWindowMsec_); }
  public function hasPostDeliveryRefundWindowMsec() { return isset($this->postDeliveryRefundWindowMsec_); }
  public function getPostDeliveryRefundWindowMsec() { return $this->postDeliveryRefundWindowMsec_; }
  public function setPostDeliveryRefundWindowMsec($value) { $this->postDeliveryRefundWindowMsec_ = (string)$value; }
  
  // optional .SignedData developerPurchaseInfo = 6;

  protected $developerPurchaseInfo_;
  public function resetDeveloperPurchaseInfo() { unset($this->developerPurchaseInfo_); }
  public function clearDeveloperPurchaseInfo() { unset($this->developerPurchaseInfo_); }
  public function hasDeveloperPurchaseInfo() { return isset($this->developerPurchaseInfo_); }
  public function getDeveloperPurchaseInfo() { return $this->developerPurchaseInfo_; }
  public function setDeveloperPurchaseInfo(SignedData $value) { $this->developerPurchaseInfo_ = $value; }
  
  // optional bool preordered = 7;

  protected $preordered_;
  public function resetPreordered() { unset($this->preordered_); }
  public function clearPreordered() { unset($this->preordered_); }
  public function hasPreordered() { return isset($this->preordered_); }
  public function getPreordered() { return $this->preordered_; }
  public function setPreordered($value) { $this->preordered_ = (bool)$value; }
  
  // optional bool hidden = 8;

  protected $hidden_;
  public function resetHidden() { unset($this->hidden_); }
  public function clearHidden() { unset($this->hidden_); }
  public function hasHidden() { return isset($this->hidden_); }
  public function getHidden() { return $this->hidden_; }
  public function setHidden($value) { $this->hidden_ = (bool)$value; }
  
  // optional .RentalTerms rentalTerms = 9;

  protected $rentalTerms_;
  public function resetRentalTerms() { unset($this->rentalTerms_); }
  public function clearRentalTerms() { unset($this->rentalTerms_); }
  public function hasRentalTerms() { return isset($this->rentalTerms_); }
  public function getRentalTerms() { return $this->rentalTerms_; }
  public function setRentalTerms(RentalTerms $value) { $this->rentalTerms_ = $value; }
  
  // optional .GroupLicenseInfo groupLicenseInfo = 10;

  protected $groupLicenseInfo_;
  public function resetGroupLicenseInfo() { unset($this->groupLicenseInfo_); }
  public function clearGroupLicenseInfo() { unset($this->groupLicenseInfo_); }
  public function hasGroupLicenseInfo() { return isset($this->groupLicenseInfo_); }
  public function getGroupLicenseInfo() { return $this->groupLicenseInfo_; }
  public function setGroupLicenseInfo(GroupLicenseInfo $value) { $this->groupLicenseInfo_ = $value; }
  
  // optional .LicensedDocumentInfo licensedDocumentInfo = 11;

  protected $licensedDocumentInfo_;
  public function resetLicensedDocumentInfo() { unset($this->licensedDocumentInfo_); }
  public function clearLicensedDocumentInfo() { unset($this->licensedDocumentInfo_); }
  public function hasLicensedDocumentInfo() { return isset($this->licensedDocumentInfo_); }
  public function getLicensedDocumentInfo() { return $this->licensedDocumentInfo_; }
  public function setLicensedDocumentInfo(LicensedDocumentInfo $value) { $this->licensedDocumentInfo_ = $value; }
  
  // optional int32 quantity = 12;

  protected $quantity_;
  public function resetQuantity() { unset($this->quantity_); }
  public function clearQuantity() { unset($this->quantity_); }
  public function hasQuantity() { return isset($this->quantity_); }
  public function getQuantity() { return $this->quantity_; }
  public function setQuantity($value) { $this->quantity_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:OwnershipInfo)
}

// message AppData
class AppData {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("AppData: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->version_ = $tmp;
          
          break;
        case 2:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->oldVersion_ = $tmp;
          
          break;
        case 3:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->systemApp_ = $tmp > 0 ? true : false;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->version_)) {
      fwrite($fp, "\x08");
      Protobuf::write_varint($fp, (int)$this->version_);
    }
    if (!is_null($this->oldVersion_)) {
      fwrite($fp, "\x10");
      Protobuf::write_varint($fp, (int)$this->oldVersion_);
    }
    if (!is_null($this->systemApp_)) {
      fwrite($fp, "\x18");
      Protobuf::write_varint($fp, (int)$this->systemApp_ ? 1 : 0);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->version_)) {
      $size += 1 + Protobuf::size_varint($this->version_);
    }
    if (!is_null($this->oldVersion_)) {
      $size += 1 + Protobuf::size_varint($this->oldVersion_);
    }
    if (!is_null($this->systemApp_)) {
      $size += 2;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('version_', $this->version_)
         . Protobuf::toString('oldVersion_', $this->oldVersion_)
         . Protobuf::toString('systemApp_', $this->systemApp_);
  }
  
  // optional int32 version = 1;

  protected $version_;
  public function resetVersion() { unset($this->version_); }
  public function clearVersion() { unset($this->version_); }
  public function hasVersion() { return isset($this->version_); }
  public function getVersion() { return $this->version_; }
  public function setVersion($value) { $this->version_ = (string)$value; }
  
  // optional int32 oldVersion = 2;

  protected $oldVersion_;
  public function resetOldVersion() { unset($this->oldVersion_); }
  public function clearOldVersion() { unset($this->oldVersion_); }
  public function hasOldVersion() { return isset($this->oldVersion_); }
  public function getOldVersion() { return $this->oldVersion_; }
  public function setOldVersion($value) { $this->oldVersion_ = (string)$value; }
  
  // optional bool systemApp = 3;

  protected $systemApp_;
  public function resetSystemApp() { unset($this->systemApp_); }
  public function clearSystemApp() { unset($this->systemApp_); }
  public function hasSystemApp() { return isset($this->systemApp_); }
  public function getSystemApp() { return $this->systemApp_; }
  public function setSystemApp($value) { $this->systemApp_ = (bool)$value; }
  
  // @@protoc_insertion_point(class_scope:AppData)
}

// message NlpRepairStatus
class NlpRepairStatus {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("NlpRepairStatus: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->repairStatus_ = $tmp;
          
          break;
        case 2:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->flags_ = $tmp;
          
          break;
        case 3:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->versionCode_ = $tmp;
          
          break;
        case 4:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->signatureHash_ = $tmp;
          $limit-=$len;
          break;
        case 5:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->foundTestKeys_ = $tmp > 0 ? true : false;
          break;
        case 6:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->holdoffUntilBoot_ = $tmp > 0 ? true : false;
          break;
        case 7:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->holdoffUntilWipe_ = $tmp > 0 ? true : false;
          break;
        case 8:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->holdoffAfterInstall_ = $tmp > 0 ? true : false;
          break;
        case 9:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->enabled_ = $tmp;
          
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->repairStatus_)) {
      fwrite($fp, "\x08");
      Protobuf::write_varint($fp, (int)$this->repairStatus_);
    }
    if (!is_null($this->flags_)) {
      fwrite($fp, "\x10");
      Protobuf::write_varint($fp, (int)$this->flags_);
    }
    if (!is_null($this->versionCode_)) {
      fwrite($fp, "\x18");
      Protobuf::write_varint($fp, (int)$this->versionCode_);
    }
    if (!is_null($this->signatureHash_)) {
      fwrite($fp, "\"");
      Protobuf::write_varint($fp, strlen((string)$this->signatureHash_));
      fwrite($fp, (string)$this->signatureHash_);
    }
    if (!is_null($this->foundTestKeys_)) {
      fwrite($fp, "(");
      Protobuf::write_varint($fp, (int)$this->foundTestKeys_ ? 1 : 0);
    }
    if (!is_null($this->holdoffUntilBoot_)) {
      fwrite($fp, "0");
      Protobuf::write_varint($fp, (int)$this->holdoffUntilBoot_ ? 1 : 0);
    }
    if (!is_null($this->holdoffUntilWipe_)) {
      fwrite($fp, "8");
      Protobuf::write_varint($fp, (int)$this->holdoffUntilWipe_ ? 1 : 0);
    }
    if (!is_null($this->holdoffAfterInstall_)) {
      fwrite($fp, "@");
      Protobuf::write_varint($fp, (int)$this->holdoffAfterInstall_ ? 1 : 0);
    }
    if (!is_null($this->enabled_)) {
      fwrite($fp, "H");
      Protobuf::write_varint($fp, (int)$this->enabled_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->repairStatus_)) {
      $size += 1 + Protobuf::size_varint($this->repairStatus_);
    }
    if (!is_null($this->flags_)) {
      $size += 1 + Protobuf::size_varint($this->flags_);
    }
    if (!is_null($this->versionCode_)) {
      $size += 1 + Protobuf::size_varint($this->versionCode_);
    }
    if (!is_null($this->signatureHash_)) {
      $l = strlen((string)$this->signatureHash_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->foundTestKeys_)) {
      $size += 2;
    }
    if (!is_null($this->holdoffUntilBoot_)) {
      $size += 2;
    }
    if (!is_null($this->holdoffUntilWipe_)) {
      $size += 2;
    }
    if (!is_null($this->holdoffAfterInstall_)) {
      $size += 2;
    }
    if (!is_null($this->enabled_)) {
      $size += 1 + Protobuf::size_varint($this->enabled_);
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('repairStatus_', $this->repairStatus_)
         . Protobuf::toString('flags_', $this->flags_)
         . Protobuf::toString('versionCode_', $this->versionCode_)
         . Protobuf::toString('signatureHash_', $this->signatureHash_)
         . Protobuf::toString('foundTestKeys_', $this->foundTestKeys_)
         . Protobuf::toString('holdoffUntilBoot_', $this->holdoffUntilBoot_)
         . Protobuf::toString('holdoffUntilWipe_', $this->holdoffUntilWipe_)
         . Protobuf::toString('holdoffAfterInstall_', $this->holdoffAfterInstall_)
         . Protobuf::toString('enabled_', $this->enabled_);
  }
  
  // optional int32 repairStatus = 1;

  protected $repairStatus_;
  public function resetRepairStatus() { unset($this->repairStatus_); }
  public function clearRepairStatus() { unset($this->repairStatus_); }
  public function hasRepairStatus() { return isset($this->repairStatus_); }
  public function getRepairStatus() { return $this->repairStatus_; }
  public function setRepairStatus($value) { $this->repairStatus_ = (string)$value; }
  
  // optional int32 flags = 2;

  protected $flags_;
  public function resetFlags() { unset($this->flags_); }
  public function clearFlags() { unset($this->flags_); }
  public function hasFlags() { return isset($this->flags_); }
  public function getFlags() { return $this->flags_; }
  public function setFlags($value) { $this->flags_ = (string)$value; }
  
  // optional int32 versionCode = 3;

  protected $versionCode_;
  public function resetVersionCode() { unset($this->versionCode_); }
  public function clearVersionCode() { unset($this->versionCode_); }
  public function hasVersionCode() { return isset($this->versionCode_); }
  public function getVersionCode() { return $this->versionCode_; }
  public function setVersionCode($value) { $this->versionCode_ = (string)$value; }
  
  // optional string signatureHash = 4;

  protected $signatureHash_;
  public function resetSignatureHash() { unset($this->signatureHash_); }
  public function clearSignatureHash() { unset($this->signatureHash_); }
  public function hasSignatureHash() { return isset($this->signatureHash_); }
  public function getSignatureHash() { return $this->signatureHash_; }
  public function setSignatureHash($value) { $this->signatureHash_ = (string)$value; }
  
  // optional bool foundTestKeys = 5;

  protected $foundTestKeys_;
  public function resetFoundTestKeys() { unset($this->foundTestKeys_); }
  public function clearFoundTestKeys() { unset($this->foundTestKeys_); }
  public function hasFoundTestKeys() { return isset($this->foundTestKeys_); }
  public function getFoundTestKeys() { return $this->foundTestKeys_; }
  public function setFoundTestKeys($value) { $this->foundTestKeys_ = (bool)$value; }
  
  // optional bool holdoffUntilBoot = 6;

  protected $holdoffUntilBoot_;
  public function resetHoldoffUntilBoot() { unset($this->holdoffUntilBoot_); }
  public function clearHoldoffUntilBoot() { unset($this->holdoffUntilBoot_); }
  public function hasHoldoffUntilBoot() { return isset($this->holdoffUntilBoot_); }
  public function getHoldoffUntilBoot() { return $this->holdoffUntilBoot_; }
  public function setHoldoffUntilBoot($value) { $this->holdoffUntilBoot_ = (bool)$value; }
  
  // optional bool holdoffUntilWipe = 7;

  protected $holdoffUntilWipe_;
  public function resetHoldoffUntilWipe() { unset($this->holdoffUntilWipe_); }
  public function clearHoldoffUntilWipe() { unset($this->holdoffUntilWipe_); }
  public function hasHoldoffUntilWipe() { return isset($this->holdoffUntilWipe_); }
  public function getHoldoffUntilWipe() { return $this->holdoffUntilWipe_; }
  public function setHoldoffUntilWipe($value) { $this->holdoffUntilWipe_ = (bool)$value; }
  
  // optional bool holdoffAfterInstall = 8;

  protected $holdoffAfterInstall_;
  public function resetHoldoffAfterInstall() { unset($this->holdoffAfterInstall_); }
  public function clearHoldoffAfterInstall() { unset($this->holdoffAfterInstall_); }
  public function hasHoldoffAfterInstall() { return isset($this->holdoffAfterInstall_); }
  public function getHoldoffAfterInstall() { return $this->holdoffAfterInstall_; }
  public function setHoldoffAfterInstall($value) { $this->holdoffAfterInstall_ = (bool)$value; }
  
  // optional int32 enabled = 9;

  protected $enabled_;
  public function resetEnabled() { unset($this->enabled_); }
  public function clearEnabled() { unset($this->enabled_); }
  public function hasEnabled() { return isset($this->enabled_); }
  public function getEnabled() { return $this->enabled_; }
  public function setEnabled($value) { $this->enabled_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:NlpRepairStatus)
}

// message PlayStoreBackgroundActionEvent
class PlayStoreBackgroundActionEvent {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("PlayStoreBackgroundActionEvent: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->type_ = $tmp;
          
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->document_ = $tmp;
          $limit-=$len;
          break;
        case 3:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->reason_ = $tmp;
          $limit-=$len;
          break;
        case 4:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->errorCode_ = $tmp;
          
          break;
        case 5:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->exceptionType_ = $tmp;
          $limit-=$len;
          break;
        case 6:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->serverLogsCookie_ = $tmp;
          $limit-=$len;
          break;
        case 7:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->offerType_ = $tmp;
          
          break;
        case 8:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->fromSetting_ = $tmp;
          
          break;
        case 9:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->toSetting_ = $tmp;
          
          break;
        case 10:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->sessionInfo_ = new PlayStoreSessionData($fp, $len);
          ASSERT('$len == 0');
          break;
        case 11:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->appData_ = new AppData($fp, $len);
          ASSERT('$len == 0');
          break;
        case 12:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->serverLatencyMs_ = $tmp;
          
          break;
        case 13:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->clientLatencyMs_ = $tmp;
          
          break;
        case 14:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->nlpRepairStatus_ = new NlpRepairStatus($fp, $len);
          ASSERT('$len == 0');
          break;
        case 15:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->operationSuccess_ = $tmp > 0 ? true : false;
          break;
        case 16:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->host_ = $tmp;
          $limit-=$len;
          break;
        case 17:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->widgetEventData_ = new WidgetEventData($fp, $len);
          ASSERT('$len == 0');
          break;
        case 18:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->wifiAutoUpdateAttempt_ = new WifiAutoUpdateAttempt($fp, $len);
          ASSERT('$len == 0');
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->type_)) {
      fwrite($fp, "\x08");
      Protobuf::write_varint($fp, (int)$this->type_);
    }
    if (!is_null($this->document_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, strlen((string)$this->document_));
      fwrite($fp, (string)$this->document_);
    }
    if (!is_null($this->reason_)) {
      fwrite($fp, "\x1a");
      Protobuf::write_varint($fp, strlen((string)$this->reason_));
      fwrite($fp, (string)$this->reason_);
    }
    if (!is_null($this->errorCode_)) {
      fwrite($fp, " ");
      Protobuf::write_varint($fp, (int)$this->errorCode_);
    }
    if (!is_null($this->exceptionType_)) {
      fwrite($fp, "*");
      Protobuf::write_varint($fp, strlen((string)$this->exceptionType_));
      fwrite($fp, (string)$this->exceptionType_);
    }
    if (!is_null($this->serverLogsCookie_)) {
      fwrite($fp, "2");
      Protobuf::write_varint($fp, strlen((string)$this->serverLogsCookie_));
      fwrite($fp, (string)$this->serverLogsCookie_);
    }
    if (!is_null($this->offerType_)) {
      fwrite($fp, "8");
      Protobuf::write_varint($fp, (int)$this->offerType_);
    }
    if (!is_null($this->fromSetting_)) {
      fwrite($fp, "@");
      Protobuf::write_varint($fp, (int)$this->fromSetting_);
    }
    if (!is_null($this->toSetting_)) {
      fwrite($fp, "H");
      Protobuf::write_varint($fp, (int)$this->toSetting_);
    }
    if (!is_null($this->sessionInfo_)) {
      fwrite($fp, "R");
      Protobuf::write_varint($fp, $this->sessionInfo_->size()); // message
      $this->sessionInfo_->write($fp);
    }
    if (!is_null($this->appData_)) {
      fwrite($fp, "Z");
      Protobuf::write_varint($fp, $this->appData_->size()); // message
      $this->appData_->write($fp);
    }
    if (!is_null($this->serverLatencyMs_)) {
      fwrite($fp, "`");
      Protobuf::write_varint($fp, (int)$this->serverLatencyMs_);
    }
    if (!is_null($this->clientLatencyMs_)) {
      fwrite($fp, "h");
      Protobuf::write_varint($fp, (int)$this->clientLatencyMs_);
    }
    if (!is_null($this->nlpRepairStatus_)) {
      fwrite($fp, "r");
      Protobuf::write_varint($fp, $this->nlpRepairStatus_->size()); // message
      $this->nlpRepairStatus_->write($fp);
    }
    if (!is_null($this->operationSuccess_)) {
      fwrite($fp, "x");
      Protobuf::write_varint($fp, (int)$this->operationSuccess_ ? 1 : 0);
    }
    if (!is_null($this->host_)) {
      fwrite($fp, "\x82\x01");
      Protobuf::write_varint($fp, strlen((string)$this->host_));
      fwrite($fp, (string)$this->host_);
    }
    if (!is_null($this->widgetEventData_)) {
      fwrite($fp, "\x8a\x01");
      Protobuf::write_varint($fp, $this->widgetEventData_->size()); // message
      $this->widgetEventData_->write($fp);
    }
    if (!is_null($this->wifiAutoUpdateAttempt_)) {
      fwrite($fp, "\x92\x01");
      Protobuf::write_varint($fp, $this->wifiAutoUpdateAttempt_->size()); // message
      $this->wifiAutoUpdateAttempt_->write($fp);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->type_)) {
      $size += 1 + Protobuf::size_varint($this->type_);
    }
    if (!is_null($this->document_)) {
      $l = strlen((string)$this->document_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->reason_)) {
      $l = strlen((string)$this->reason_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->errorCode_)) {
      $size += 1 + Protobuf::size_varint($this->errorCode_);
    }
    if (!is_null($this->exceptionType_)) {
      $l = strlen((string)$this->exceptionType_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->serverLogsCookie_)) {
      $l = strlen((string)$this->serverLogsCookie_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->offerType_)) {
      $size += 1 + Protobuf::size_varint($this->offerType_);
    }
    if (!is_null($this->fromSetting_)) {
      $size += 1 + Protobuf::size_varint($this->fromSetting_);
    }
    if (!is_null($this->toSetting_)) {
      $size += 1 + Protobuf::size_varint($this->toSetting_);
    }
    if (!is_null($this->sessionInfo_)) {
      $l = $this->sessionInfo_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->appData_)) {
      $l = $this->appData_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->serverLatencyMs_)) {
      $size += 1 + Protobuf::size_varint($this->serverLatencyMs_);
    }
    if (!is_null($this->clientLatencyMs_)) {
      $size += 1 + Protobuf::size_varint($this->clientLatencyMs_);
    }
    if (!is_null($this->nlpRepairStatus_)) {
      $l = $this->nlpRepairStatus_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->operationSuccess_)) {
      $size += 2;
    }
    if (!is_null($this->host_)) {
      $l = strlen((string)$this->host_);
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->widgetEventData_)) {
      $l = $this->widgetEventData_->size();
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->wifiAutoUpdateAttempt_)) {
      $l = $this->wifiAutoUpdateAttempt_->size();
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('type_', $this->type_)
         . Protobuf::toString('document_', $this->document_)
         . Protobuf::toString('reason_', $this->reason_)
         . Protobuf::toString('errorCode_', $this->errorCode_)
         . Protobuf::toString('exceptionType_', $this->exceptionType_)
         . Protobuf::toString('serverLogsCookie_', $this->serverLogsCookie_)
         . Protobuf::toString('offerType_', $this->offerType_)
         . Protobuf::toString('fromSetting_', $this->fromSetting_)
         . Protobuf::toString('toSetting_', $this->toSetting_)
         . Protobuf::toString('sessionInfo_', $this->sessionInfo_)
         . Protobuf::toString('appData_', $this->appData_)
         . Protobuf::toString('serverLatencyMs_', $this->serverLatencyMs_)
         . Protobuf::toString('clientLatencyMs_', $this->clientLatencyMs_)
         . Protobuf::toString('nlpRepairStatus_', $this->nlpRepairStatus_)
         . Protobuf::toString('operationSuccess_', $this->operationSuccess_)
         . Protobuf::toString('host_', $this->host_)
         . Protobuf::toString('widgetEventData_', $this->widgetEventData_)
         . Protobuf::toString('wifiAutoUpdateAttempt_', $this->wifiAutoUpdateAttempt_);
  }
  
  // optional int32 type = 1;

  protected $type_;
  public function resetType() { unset($this->type_); }
  public function clearType() { unset($this->type_); }
  public function hasType() { return isset($this->type_); }
  public function getType() { return $this->type_; }
  public function setType($value) { $this->type_ = (string)$value; }
  
  // optional string document = 2;

  protected $document_;
  public function resetDocument() { unset($this->document_); }
  public function clearDocument() { unset($this->document_); }
  public function hasDocument() { return isset($this->document_); }
  public function getDocument() { return $this->document_; }
  public function setDocument($value) { $this->document_ = (string)$value; }
  
  // optional string reason = 3;

  protected $reason_;
  public function resetReason() { unset($this->reason_); }
  public function clearReason() { unset($this->reason_); }
  public function hasReason() { return isset($this->reason_); }
  public function getReason() { return $this->reason_; }
  public function setReason($value) { $this->reason_ = (string)$value; }
  
  // optional int32 errorCode = 4;

  protected $errorCode_;
  public function resetErrorCode() { unset($this->errorCode_); }
  public function clearErrorCode() { unset($this->errorCode_); }
  public function hasErrorCode() { return isset($this->errorCode_); }
  public function getErrorCode() { return $this->errorCode_; }
  public function setErrorCode($value) { $this->errorCode_ = (string)$value; }
  
  // optional string exceptionType = 5;

  protected $exceptionType_;
  public function resetExceptionType() { unset($this->exceptionType_); }
  public function clearExceptionType() { unset($this->exceptionType_); }
  public function hasExceptionType() { return isset($this->exceptionType_); }
  public function getExceptionType() { return $this->exceptionType_; }
  public function setExceptionType($value) { $this->exceptionType_ = (string)$value; }
  
  // optional bytes serverLogsCookie = 6;

  protected $serverLogsCookie_;
  public function resetServerLogsCookie() { unset($this->serverLogsCookie_); }
  public function clearServerLogsCookie() { unset($this->serverLogsCookie_); }
  public function hasServerLogsCookie() { return isset($this->serverLogsCookie_); }
  public function getServerLogsCookie() { return $this->serverLogsCookie_; }
  public function setServerLogsCookie($value) { $this->serverLogsCookie_ = (string)$value; }
  
  // optional int32 offerType = 7;

  protected $offerType_;
  public function resetOfferType() { unset($this->offerType_); }
  public function clearOfferType() { unset($this->offerType_); }
  public function hasOfferType() { return isset($this->offerType_); }
  public function getOfferType() { return $this->offerType_; }
  public function setOfferType($value) { $this->offerType_ = (string)$value; }
  
  // optional int32 fromSetting = 8;

  protected $fromSetting_;
  public function resetFromSetting() { unset($this->fromSetting_); }
  public function clearFromSetting() { unset($this->fromSetting_); }
  public function hasFromSetting() { return isset($this->fromSetting_); }
  public function getFromSetting() { return $this->fromSetting_; }
  public function setFromSetting($value) { $this->fromSetting_ = (string)$value; }
  
  // optional int32 toSetting = 9;

  protected $toSetting_;
  public function resetToSetting() { unset($this->toSetting_); }
  public function clearToSetting() { unset($this->toSetting_); }
  public function hasToSetting() { return isset($this->toSetting_); }
  public function getToSetting() { return $this->toSetting_; }
  public function setToSetting($value) { $this->toSetting_ = (string)$value; }
  
  // optional .PlayStoreSessionData sessionInfo = 10;

  protected $sessionInfo_;
  public function resetSessionInfo() { unset($this->sessionInfo_); }
  public function clearSessionInfo() { unset($this->sessionInfo_); }
  public function hasSessionInfo() { return isset($this->sessionInfo_); }
  public function getSessionInfo() { return $this->sessionInfo_; }
  public function setSessionInfo(PlayStoreSessionData $value) { $this->sessionInfo_ = $value; }
  
  // optional .AppData appData = 11;

  protected $appData_;
  public function resetAppData() { unset($this->appData_); }
  public function clearAppData() { unset($this->appData_); }
  public function hasAppData() { return isset($this->appData_); }
  public function getAppData() { return $this->appData_; }
  public function setAppData(AppData $value) { $this->appData_ = $value; }
  
  // optional int64 serverLatencyMs = 12;

  protected $serverLatencyMs_;
  public function resetServerLatencyMs() { unset($this->serverLatencyMs_); }
  public function clearServerLatencyMs() { unset($this->serverLatencyMs_); }
  public function hasServerLatencyMs() { return isset($this->serverLatencyMs_); }
  public function getServerLatencyMs() { return $this->serverLatencyMs_; }
  public function setServerLatencyMs($value) { $this->serverLatencyMs_ = (string)$value; }
  
  // optional int64 clientLatencyMs = 13;

  protected $clientLatencyMs_;
  public function resetClientLatencyMs() { unset($this->clientLatencyMs_); }
  public function clearClientLatencyMs() { unset($this->clientLatencyMs_); }
  public function hasClientLatencyMs() { return isset($this->clientLatencyMs_); }
  public function getClientLatencyMs() { return $this->clientLatencyMs_; }
  public function setClientLatencyMs($value) { $this->clientLatencyMs_ = (string)$value; }
  
  // optional .NlpRepairStatus nlpRepairStatus = 14;

  protected $nlpRepairStatus_;
  public function resetNlpRepairStatus() { unset($this->nlpRepairStatus_); }
  public function clearNlpRepairStatus() { unset($this->nlpRepairStatus_); }
  public function hasNlpRepairStatus() { return isset($this->nlpRepairStatus_); }
  public function getNlpRepairStatus() { return $this->nlpRepairStatus_; }
  public function setNlpRepairStatus(NlpRepairStatus $value) { $this->nlpRepairStatus_ = $value; }
  
  // optional bool operationSuccess = 15;

  protected $operationSuccess_;
  public function resetOperationSuccess() { unset($this->operationSuccess_); }
  public function clearOperationSuccess() { unset($this->operationSuccess_); }
  public function hasOperationSuccess() { return isset($this->operationSuccess_); }
  public function getOperationSuccess() { return $this->operationSuccess_; }
  public function setOperationSuccess($value) { $this->operationSuccess_ = (bool)$value; }
  
  // optional string host = 16;

  protected $host_;
  public function resetHost() { unset($this->host_); }
  public function clearHost() { unset($this->host_); }
  public function hasHost() { return isset($this->host_); }
  public function getHost() { return $this->host_; }
  public function setHost($value) { $this->host_ = (string)$value; }
  
  // optional .WidgetEventData widgetEventData = 17;

  protected $widgetEventData_;
  public function resetWidgetEventData() { unset($this->widgetEventData_); }
  public function clearWidgetEventData() { unset($this->widgetEventData_); }
  public function hasWidgetEventData() { return isset($this->widgetEventData_); }
  public function getWidgetEventData() { return $this->widgetEventData_; }
  public function setWidgetEventData(WidgetEventData $value) { $this->widgetEventData_ = $value; }
  
  // optional .WifiAutoUpdateAttempt wifiAutoUpdateAttempt = 18;

  protected $wifiAutoUpdateAttempt_;
  public function resetWifiAutoUpdateAttempt() { unset($this->wifiAutoUpdateAttempt_); }
  public function clearWifiAutoUpdateAttempt() { unset($this->wifiAutoUpdateAttempt_); }
  public function hasWifiAutoUpdateAttempt() { return isset($this->wifiAutoUpdateAttempt_); }
  public function getWifiAutoUpdateAttempt() { return $this->wifiAutoUpdateAttempt_; }
  public function setWifiAutoUpdateAttempt(WifiAutoUpdateAttempt $value) { $this->wifiAutoUpdateAttempt_ = $value; }
  
  // @@protoc_insertion_point(class_scope:PlayStoreBackgroundActionEvent)
}

// message PlayStoreClickEvent
class PlayStoreClickEvent {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("PlayStoreClickEvent: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->elementPath_[] = new PlayStoreUiElement($fp, $len);
          ASSERT('$len == 0');
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->elementPath_))
      foreach($this->elementPath_ as $v) {
        fwrite($fp, "\x0a");
        Protobuf::write_varint($fp, $v->size()); // message
        $v->write($fp);
      }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->elementPath_))
      foreach($this->elementPath_ as $v) {
        $l = $v->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('elementPath_', $this->elementPath_);
  }
  
  // repeated .PlayStoreUiElement elementPath = 1;

  protected $elementPath_ = array();
  public function clearElementPath() { $this->elementPath_ = array(); }
  public function getElementPathCount() { return count($this->elementPath_); }
  public function hasElementPath() { return (count($this->elementPath_) > 0); }
  public function indexOfElementPath($value) { return array_search($value,$this->elementPath_);}
  public function removeElementPath($index) { unset($this->elementPath_[$index]); }
  public function removeValElementPath($value) { $idx = array_search($value,$this->elementPath_); if($idx !== FALSE){unset($this->elementPath_[$idx]); }}
  public function removeValsElementPath($values) { foreach($values as $value){$idx = array_search($value,$this->elementPath_); if($idx !== FALSE){unset($this->elementPath_[$idx]); }}}
  public function pushElementPath($newvar) { return array_push($this->elementPath_,$newvar); }
  public function popElementPath() { return array_pop($this->elementPath_); }
  public function shiftElementPath() { return array_shift($this->elementPath_); }
  public function unshiftElementPath($newvar) { return array_unshift($this->elementPath_,$newvar); }
  public function getElementPath($index) { return $this->elementPath_[$index]; }
  public function getElementPathArray() { return $this->elementPath_; }
  public function setElementPath($index, $value) {$this->elementPath_[$index] = $value;	}
  public function addElementPath($value) { $this->elementPath_[] = $value; }
  public function addAllElementPath(array $values) { foreach($values as $value) {$this->elementPath_[] = $value;} }
  
  // @@protoc_insertion_point(class_scope:PlayStoreClickEvent)
}

// message PlayStoreDeepLinkEvent
class PlayStoreDeepLinkEvent {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("PlayStoreDeepLinkEvent: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->externalUrl_ = $tmp;
          $limit-=$len;
          break;
        case 2:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->resolvedType_ = $tmp;
          
          break;
        case 3:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->package_ = $tmp;
          $limit-=$len;
          break;
        case 4:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->minVersion_ = $tmp;
          
          break;
        case 5:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->newEnough_ = $tmp > 0 ? true : false;
          break;
        case 6:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->canResolve_ = $tmp > 0 ? true : false;
          break;
        case 7:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->serverLogsCookie_ = $tmp;
          $limit-=$len;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->externalUrl_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, strlen((string)$this->externalUrl_));
      fwrite($fp, (string)$this->externalUrl_);
    }
    if (!is_null($this->resolvedType_)) {
      fwrite($fp, "\x10");
      Protobuf::write_varint($fp, (int)$this->resolvedType_);
    }
    if (!is_null($this->package_)) {
      fwrite($fp, "\x1a");
      Protobuf::write_varint($fp, strlen((string)$this->package_));
      fwrite($fp, (string)$this->package_);
    }
    if (!is_null($this->minVersion_)) {
      fwrite($fp, " ");
      Protobuf::write_varint($fp, (int)$this->minVersion_);
    }
    if (!is_null($this->newEnough_)) {
      fwrite($fp, "(");
      Protobuf::write_varint($fp, (int)$this->newEnough_ ? 1 : 0);
    }
    if (!is_null($this->canResolve_)) {
      fwrite($fp, "0");
      Protobuf::write_varint($fp, (int)$this->canResolve_ ? 1 : 0);
    }
    if (!is_null($this->serverLogsCookie_)) {
      fwrite($fp, ":");
      Protobuf::write_varint($fp, strlen((string)$this->serverLogsCookie_));
      fwrite($fp, (string)$this->serverLogsCookie_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->externalUrl_)) {
      $l = strlen((string)$this->externalUrl_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->resolvedType_)) {
      $size += 1 + Protobuf::size_varint($this->resolvedType_);
    }
    if (!is_null($this->package_)) {
      $l = strlen((string)$this->package_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->minVersion_)) {
      $size += 1 + Protobuf::size_varint($this->minVersion_);
    }
    if (!is_null($this->newEnough_)) {
      $size += 2;
    }
    if (!is_null($this->canResolve_)) {
      $size += 2;
    }
    if (!is_null($this->serverLogsCookie_)) {
      $l = strlen((string)$this->serverLogsCookie_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('externalUrl_', $this->externalUrl_)
         . Protobuf::toString('resolvedType_', $this->resolvedType_)
         . Protobuf::toString('package_', $this->package_)
         . Protobuf::toString('minVersion_', $this->minVersion_)
         . Protobuf::toString('newEnough_', $this->newEnough_)
         . Protobuf::toString('canResolve_', $this->canResolve_)
         . Protobuf::toString('serverLogsCookie_', $this->serverLogsCookie_);
  }
  
  // optional string externalUrl = 1;

  protected $externalUrl_;
  public function resetExternalUrl() { unset($this->externalUrl_); }
  public function clearExternalUrl() { unset($this->externalUrl_); }
  public function hasExternalUrl() { return isset($this->externalUrl_); }
  public function getExternalUrl() { return $this->externalUrl_; }
  public function setExternalUrl($value) { $this->externalUrl_ = (string)$value; }
  
  // optional int32 resolvedType = 2;

  protected $resolvedType_;
  public function resetResolvedType() { unset($this->resolvedType_); }
  public function clearResolvedType() { unset($this->resolvedType_); }
  public function hasResolvedType() { return isset($this->resolvedType_); }
  public function getResolvedType() { return $this->resolvedType_; }
  public function setResolvedType($value) { $this->resolvedType_ = (string)$value; }
  
  // optional string package = 3;

  protected $package_;
  public function resetPackage() { unset($this->package_); }
  public function clearPackage() { unset($this->package_); }
  public function hasPackage() { return isset($this->package_); }
  public function getPackage() { return $this->package_; }
  public function setPackage($value) { $this->package_ = (string)$value; }
  
  // optional int32 minVersion = 4;

  protected $minVersion_;
  public function resetMinVersion() { unset($this->minVersion_); }
  public function clearMinVersion() { unset($this->minVersion_); }
  public function hasMinVersion() { return isset($this->minVersion_); }
  public function getMinVersion() { return $this->minVersion_; }
  public function setMinVersion($value) { $this->minVersion_ = (string)$value; }
  
  // optional bool newEnough = 5;

  protected $newEnough_;
  public function resetNewEnough() { unset($this->newEnough_); }
  public function clearNewEnough() { unset($this->newEnough_); }
  public function hasNewEnough() { return isset($this->newEnough_); }
  public function getNewEnough() { return $this->newEnough_; }
  public function setNewEnough($value) { $this->newEnough_ = (bool)$value; }
  
  // optional bool canResolve = 6;

  protected $canResolve_;
  public function resetCanResolve() { unset($this->canResolve_); }
  public function clearCanResolve() { unset($this->canResolve_); }
  public function hasCanResolve() { return isset($this->canResolve_); }
  public function getCanResolve() { return $this->canResolve_; }
  public function setCanResolve($value) { $this->canResolve_ = (bool)$value; }
  
  // optional bytes serverLogsCookie = 7;

  protected $serverLogsCookie_;
  public function resetServerLogsCookie() { unset($this->serverLogsCookie_); }
  public function clearServerLogsCookie() { unset($this->serverLogsCookie_); }
  public function hasServerLogsCookie() { return isset($this->serverLogsCookie_); }
  public function getServerLogsCookie() { return $this->serverLogsCookie_; }
  public function setServerLogsCookie($value) { $this->serverLogsCookie_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:PlayStoreDeepLinkEvent)
}

// message PlayStoreImpressionEvent
class PlayStoreImpressionEvent {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("PlayStoreImpressionEvent: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->tree_ = new PlayStoreUiElement($fp, $len);
          ASSERT('$len == 0');
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->referrerPath_[] = new PlayStoreUiElement($fp, $len);
          ASSERT('$len == 0');
          break;
        case 3:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->id_ = $tmp;
          
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->tree_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, $this->tree_->size()); // message
      $this->tree_->write($fp);
    }
    if (!is_null($this->referrerPath_))
      foreach($this->referrerPath_ as $v) {
        fwrite($fp, "\x12");
        Protobuf::write_varint($fp, $v->size()); // message
        $v->write($fp);
      }
    if (!is_null($this->id_)) {
      fwrite($fp, "\x18");
      Protobuf::write_varint($fp, (int)$this->id_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->tree_)) {
      $l = $this->tree_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->referrerPath_))
      foreach($this->referrerPath_ as $v) {
        $l = $v->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
    if (!is_null($this->id_)) {
      $size += 1 + Protobuf::size_varint($this->id_);
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('tree_', $this->tree_)
         . Protobuf::toString('referrerPath_', $this->referrerPath_)
         . Protobuf::toString('id_', $this->id_);
  }
  
  // optional .PlayStoreUiElement tree = 1;

  protected $tree_;
  public function resetTree() { unset($this->tree_); }
  public function clearTree() { unset($this->tree_); }
  public function hasTree() { return isset($this->tree_); }
  public function getTree() { return $this->tree_; }
  public function setTree(PlayStoreUiElement $value) { $this->tree_ = $value; }
  
  // repeated .PlayStoreUiElement referrerPath = 2;

  protected $referrerPath_ = array();
  public function clearReferrerPath() { $this->referrerPath_ = array(); }
  public function getReferrerPathCount() { return count($this->referrerPath_); }
  public function hasReferrerPath() { return (count($this->referrerPath_) > 0); }
  public function indexOfReferrerPath($value) { return array_search($value,$this->referrerPath_);}
  public function removeReferrerPath($index) { unset($this->referrerPath_[$index]); }
  public function removeValReferrerPath($value) { $idx = array_search($value,$this->referrerPath_); if($idx !== FALSE){unset($this->referrerPath_[$idx]); }}
  public function removeValsReferrerPath($values) { foreach($values as $value){$idx = array_search($value,$this->referrerPath_); if($idx !== FALSE){unset($this->referrerPath_[$idx]); }}}
  public function pushReferrerPath($newvar) { return array_push($this->referrerPath_,$newvar); }
  public function popReferrerPath() { return array_pop($this->referrerPath_); }
  public function shiftReferrerPath() { return array_shift($this->referrerPath_); }
  public function unshiftReferrerPath($newvar) { return array_unshift($this->referrerPath_,$newvar); }
  public function getReferrerPath($index) { return $this->referrerPath_[$index]; }
  public function getReferrerPathArray() { return $this->referrerPath_; }
  public function setReferrerPath($index, $value) {$this->referrerPath_[$index] = $value;	}
  public function addReferrerPath($value) { $this->referrerPath_[] = $value; }
  public function addAllReferrerPath(array $values) { foreach($values as $value) {$this->referrerPath_[] = $value;} }
  
  // optional int64 id = 3;

  protected $id_;
  public function resetId() { unset($this->id_); }
  public function clearId() { unset($this->id_); }
  public function hasId() { return isset($this->id_); }
  public function getId() { return $this->id_; }
  public function setId($value) { $this->id_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:PlayStoreImpressionEvent)
}

// message PlayStoreLogEvent
class PlayStoreLogEvent {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("PlayStoreLogEvent: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->impression_ = new PlayStoreImpressionEvent($fp, $len);
          ASSERT('$len == 0');
          break;
        case 3:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->click_ = new PlayStoreClickEvent($fp, $len);
          ASSERT('$len == 0');
          break;
        case 4:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->backgroundAction_ = new PlayStoreBackgroundActionEvent($fp, $len);
          ASSERT('$len == 0');
          break;
        case 5:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->search_ = new PlayStoreSearchEvent($fp, $len);
          ASSERT('$len == 0');
          break;
        case 6:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->deepLink_ = new PlayStoreDeepLinkEvent($fp, $len);
          ASSERT('$len == 0');
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->impression_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, $this->impression_->size()); // message
      $this->impression_->write($fp);
    }
    if (!is_null($this->click_)) {
      fwrite($fp, "\x1a");
      Protobuf::write_varint($fp, $this->click_->size()); // message
      $this->click_->write($fp);
    }
    if (!is_null($this->backgroundAction_)) {
      fwrite($fp, "\"");
      Protobuf::write_varint($fp, $this->backgroundAction_->size()); // message
      $this->backgroundAction_->write($fp);
    }
    if (!is_null($this->search_)) {
      fwrite($fp, "*");
      Protobuf::write_varint($fp, $this->search_->size()); // message
      $this->search_->write($fp);
    }
    if (!is_null($this->deepLink_)) {
      fwrite($fp, "2");
      Protobuf::write_varint($fp, $this->deepLink_->size()); // message
      $this->deepLink_->write($fp);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->impression_)) {
      $l = $this->impression_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->click_)) {
      $l = $this->click_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->backgroundAction_)) {
      $l = $this->backgroundAction_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->search_)) {
      $l = $this->search_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->deepLink_)) {
      $l = $this->deepLink_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('impression_', $this->impression_)
         . Protobuf::toString('click_', $this->click_)
         . Protobuf::toString('backgroundAction_', $this->backgroundAction_)
         . Protobuf::toString('search_', $this->search_)
         . Protobuf::toString('deepLink_', $this->deepLink_);
  }
  
  // optional .PlayStoreImpressionEvent impression = 1;

  protected $impression_;
  public function resetImpression() { unset($this->impression_); }
  public function clearImpression() { unset($this->impression_); }
  public function hasImpression() { return isset($this->impression_); }
  public function getImpression() { return $this->impression_; }
  public function setImpression(PlayStoreImpressionEvent $value) { $this->impression_ = $value; }
  
  // optional .PlayStoreClickEvent click = 3;

  protected $click_;
  public function resetClick() { unset($this->click_); }
  public function clearClick() { unset($this->click_); }
  public function hasClick() { return isset($this->click_); }
  public function getClick() { return $this->click_; }
  public function setClick(PlayStoreClickEvent $value) { $this->click_ = $value; }
  
  // optional .PlayStoreBackgroundActionEvent backgroundAction = 4;

  protected $backgroundAction_;
  public function resetBackgroundAction() { unset($this->backgroundAction_); }
  public function clearBackgroundAction() { unset($this->backgroundAction_); }
  public function hasBackgroundAction() { return isset($this->backgroundAction_); }
  public function getBackgroundAction() { return $this->backgroundAction_; }
  public function setBackgroundAction(PlayStoreBackgroundActionEvent $value) { $this->backgroundAction_ = $value; }
  
  // optional .PlayStoreSearchEvent search = 5;

  protected $search_;
  public function resetSearch() { unset($this->search_); }
  public function clearSearch() { unset($this->search_); }
  public function hasSearch() { return isset($this->search_); }
  public function getSearch() { return $this->search_; }
  public function setSearch(PlayStoreSearchEvent $value) { $this->search_ = $value; }
  
  // optional .PlayStoreDeepLinkEvent deepLink = 6;

  protected $deepLink_;
  public function resetDeepLink() { unset($this->deepLink_); }
  public function clearDeepLink() { unset($this->deepLink_); }
  public function hasDeepLink() { return isset($this->deepLink_); }
  public function getDeepLink() { return $this->deepLink_; }
  public function setDeepLink(PlayStoreDeepLinkEvent $value) { $this->deepLink_ = $value; }
  
  // @@protoc_insertion_point(class_scope:PlayStoreLogEvent)
}

// message PlayStoreSearchEvent
class PlayStoreSearchEvent {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("PlayStoreSearchEvent: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->query_ = $tmp;
          $limit-=$len;
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->queryUrl_ = $tmp;
          $limit-=$len;
          break;
        case 3:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->referrerUrl_ = $tmp;
          $limit-=$len;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->query_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, strlen((string)$this->query_));
      fwrite($fp, (string)$this->query_);
    }
    if (!is_null($this->queryUrl_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, strlen((string)$this->queryUrl_));
      fwrite($fp, (string)$this->queryUrl_);
    }
    if (!is_null($this->referrerUrl_)) {
      fwrite($fp, "\x1a");
      Protobuf::write_varint($fp, strlen((string)$this->referrerUrl_));
      fwrite($fp, (string)$this->referrerUrl_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->query_)) {
      $l = strlen((string)$this->query_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->queryUrl_)) {
      $l = strlen((string)$this->queryUrl_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->referrerUrl_)) {
      $l = strlen((string)$this->referrerUrl_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('query_', $this->query_)
         . Protobuf::toString('queryUrl_', $this->queryUrl_)
         . Protobuf::toString('referrerUrl_', $this->referrerUrl_);
  }
  
  // optional string query = 1;

  protected $query_;
  public function resetQuery() { unset($this->query_); }
  public function clearQuery() { unset($this->query_); }
  public function hasQuery() { return isset($this->query_); }
  public function getQuery() { return $this->query_; }
  public function setQuery($value) { $this->query_ = (string)$value; }
  
  // optional string queryUrl = 2;

  protected $queryUrl_;
  public function resetQueryUrl() { unset($this->queryUrl_); }
  public function clearQueryUrl() { unset($this->queryUrl_); }
  public function hasQueryUrl() { return isset($this->queryUrl_); }
  public function getQueryUrl() { return $this->queryUrl_; }
  public function setQueryUrl($value) { $this->queryUrl_ = (string)$value; }
  
  // optional string referrerUrl = 3;

  protected $referrerUrl_;
  public function resetReferrerUrl() { unset($this->referrerUrl_); }
  public function clearReferrerUrl() { unset($this->referrerUrl_); }
  public function hasReferrerUrl() { return isset($this->referrerUrl_); }
  public function getReferrerUrl() { return $this->referrerUrl_; }
  public function setReferrerUrl($value) { $this->referrerUrl_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:PlayStoreSearchEvent)
}

// message PlayStoreSessionData
class PlayStoreSessionData {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("PlayStoreSessionData: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->globalAutoUpdateEnabled_ = $tmp > 0 ? true : false;
          break;
        case 2:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->globalAutoUpdateOverWifiOnly_ = $tmp > 0 ? true : false;
          break;
        case 3:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->autoUpdateCleanupDialogNumTimesShown_ = $tmp;
          
          break;
        case 4:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->networkType_ = $tmp;
          
          break;
        case 5:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->networkSubType_ = $tmp;
          
          break;
        case 6:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->numAccountsOnDevice_ = $tmp;
          
          break;
        case 7:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->numInstalledApps_ = $tmp;
          
          break;
        case 8:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->numAutoUpdatingInstalledApps_ = $tmp;
          
          break;
        case 9:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->numInstalledAppsNotAutoUpdating_ = $tmp;
          
          break;
        case 10:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->gaiaPasswordAuthOptedOut_ = $tmp > 0 ? true : false;
          break;
        case 11:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->contentFilterLevel_ = $tmp;
          
          break;
        case 12:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->allowUnknownSources_ = $tmp > 0 ? true : false;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->globalAutoUpdateEnabled_)) {
      fwrite($fp, "\x08");
      Protobuf::write_varint($fp, (int)$this->globalAutoUpdateEnabled_ ? 1 : 0);
    }
    if (!is_null($this->globalAutoUpdateOverWifiOnly_)) {
      fwrite($fp, "\x10");
      Protobuf::write_varint($fp, (int)$this->globalAutoUpdateOverWifiOnly_ ? 1 : 0);
    }
    if (!is_null($this->autoUpdateCleanupDialogNumTimesShown_)) {
      fwrite($fp, "\x18");
      Protobuf::write_varint($fp, (int)$this->autoUpdateCleanupDialogNumTimesShown_);
    }
    if (!is_null($this->networkType_)) {
      fwrite($fp, " ");
      Protobuf::write_varint($fp, (int)$this->networkType_);
    }
    if (!is_null($this->networkSubType_)) {
      fwrite($fp, "(");
      Protobuf::write_varint($fp, (int)$this->networkSubType_);
    }
    if (!is_null($this->numAccountsOnDevice_)) {
      fwrite($fp, "0");
      Protobuf::write_varint($fp, (int)$this->numAccountsOnDevice_);
    }
    if (!is_null($this->numInstalledApps_)) {
      fwrite($fp, "8");
      Protobuf::write_varint($fp, (int)$this->numInstalledApps_);
    }
    if (!is_null($this->numAutoUpdatingInstalledApps_)) {
      fwrite($fp, "@");
      Protobuf::write_varint($fp, (int)$this->numAutoUpdatingInstalledApps_);
    }
    if (!is_null($this->numInstalledAppsNotAutoUpdating_)) {
      fwrite($fp, "H");
      Protobuf::write_varint($fp, (int)$this->numInstalledAppsNotAutoUpdating_);
    }
    if (!is_null($this->gaiaPasswordAuthOptedOut_)) {
      fwrite($fp, "P");
      Protobuf::write_varint($fp, (int)$this->gaiaPasswordAuthOptedOut_ ? 1 : 0);
    }
    if (!is_null($this->contentFilterLevel_)) {
      fwrite($fp, "X");
      Protobuf::write_varint($fp, (int)$this->contentFilterLevel_);
    }
    if (!is_null($this->allowUnknownSources_)) {
      fwrite($fp, "`");
      Protobuf::write_varint($fp, (int)$this->allowUnknownSources_ ? 1 : 0);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->globalAutoUpdateEnabled_)) {
      $size += 2;
    }
    if (!is_null($this->globalAutoUpdateOverWifiOnly_)) {
      $size += 2;
    }
    if (!is_null($this->autoUpdateCleanupDialogNumTimesShown_)) {
      $size += 1 + Protobuf::size_varint($this->autoUpdateCleanupDialogNumTimesShown_);
    }
    if (!is_null($this->networkType_)) {
      $size += 1 + Protobuf::size_varint($this->networkType_);
    }
    if (!is_null($this->networkSubType_)) {
      $size += 1 + Protobuf::size_varint($this->networkSubType_);
    }
    if (!is_null($this->numAccountsOnDevice_)) {
      $size += 1 + Protobuf::size_varint($this->numAccountsOnDevice_);
    }
    if (!is_null($this->numInstalledApps_)) {
      $size += 1 + Protobuf::size_varint($this->numInstalledApps_);
    }
    if (!is_null($this->numAutoUpdatingInstalledApps_)) {
      $size += 1 + Protobuf::size_varint($this->numAutoUpdatingInstalledApps_);
    }
    if (!is_null($this->numInstalledAppsNotAutoUpdating_)) {
      $size += 1 + Protobuf::size_varint($this->numInstalledAppsNotAutoUpdating_);
    }
    if (!is_null($this->gaiaPasswordAuthOptedOut_)) {
      $size += 2;
    }
    if (!is_null($this->contentFilterLevel_)) {
      $size += 1 + Protobuf::size_varint($this->contentFilterLevel_);
    }
    if (!is_null($this->allowUnknownSources_)) {
      $size += 2;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('globalAutoUpdateEnabled_', $this->globalAutoUpdateEnabled_)
         . Protobuf::toString('globalAutoUpdateOverWifiOnly_', $this->globalAutoUpdateOverWifiOnly_)
         . Protobuf::toString('autoUpdateCleanupDialogNumTimesShown_', $this->autoUpdateCleanupDialogNumTimesShown_)
         . Protobuf::toString('networkType_', $this->networkType_)
         . Protobuf::toString('networkSubType_', $this->networkSubType_)
         . Protobuf::toString('numAccountsOnDevice_', $this->numAccountsOnDevice_)
         . Protobuf::toString('numInstalledApps_', $this->numInstalledApps_)
         . Protobuf::toString('numAutoUpdatingInstalledApps_', $this->numAutoUpdatingInstalledApps_)
         . Protobuf::toString('numInstalledAppsNotAutoUpdating_', $this->numInstalledAppsNotAutoUpdating_)
         . Protobuf::toString('gaiaPasswordAuthOptedOut_', $this->gaiaPasswordAuthOptedOut_)
         . Protobuf::toString('contentFilterLevel_', $this->contentFilterLevel_)
         . Protobuf::toString('allowUnknownSources_', $this->allowUnknownSources_);
  }
  
  // optional bool globalAutoUpdateEnabled = 1;

  protected $globalAutoUpdateEnabled_;
  public function resetGlobalAutoUpdateEnabled() { unset($this->globalAutoUpdateEnabled_); }
  public function clearGlobalAutoUpdateEnabled() { unset($this->globalAutoUpdateEnabled_); }
  public function hasGlobalAutoUpdateEnabled() { return isset($this->globalAutoUpdateEnabled_); }
  public function getGlobalAutoUpdateEnabled() { return $this->globalAutoUpdateEnabled_; }
  public function setGlobalAutoUpdateEnabled($value) { $this->globalAutoUpdateEnabled_ = (bool)$value; }
  
  // optional bool globalAutoUpdateOverWifiOnly = 2;

  protected $globalAutoUpdateOverWifiOnly_;
  public function resetGlobalAutoUpdateOverWifiOnly() { unset($this->globalAutoUpdateOverWifiOnly_); }
  public function clearGlobalAutoUpdateOverWifiOnly() { unset($this->globalAutoUpdateOverWifiOnly_); }
  public function hasGlobalAutoUpdateOverWifiOnly() { return isset($this->globalAutoUpdateOverWifiOnly_); }
  public function getGlobalAutoUpdateOverWifiOnly() { return $this->globalAutoUpdateOverWifiOnly_; }
  public function setGlobalAutoUpdateOverWifiOnly($value) { $this->globalAutoUpdateOverWifiOnly_ = (bool)$value; }
  
  // optional int32 autoUpdateCleanupDialogNumTimesShown = 3;

  protected $autoUpdateCleanupDialogNumTimesShown_;
  public function resetAutoUpdateCleanupDialogNumTimesShown() { unset($this->autoUpdateCleanupDialogNumTimesShown_); }
  public function clearAutoUpdateCleanupDialogNumTimesShown() { unset($this->autoUpdateCleanupDialogNumTimesShown_); }
  public function hasAutoUpdateCleanupDialogNumTimesShown() { return isset($this->autoUpdateCleanupDialogNumTimesShown_); }
  public function getAutoUpdateCleanupDialogNumTimesShown() { return $this->autoUpdateCleanupDialogNumTimesShown_; }
  public function setAutoUpdateCleanupDialogNumTimesShown($value) { $this->autoUpdateCleanupDialogNumTimesShown_ = (string)$value; }
  
  // optional int32 networkType = 4;

  protected $networkType_;
  public function resetNetworkType() { unset($this->networkType_); }
  public function clearNetworkType() { unset($this->networkType_); }
  public function hasNetworkType() { return isset($this->networkType_); }
  public function getNetworkType() { return $this->networkType_; }
  public function setNetworkType($value) { $this->networkType_ = (string)$value; }
  
  // optional int32 networkSubType = 5;

  protected $networkSubType_;
  public function resetNetworkSubType() { unset($this->networkSubType_); }
  public function clearNetworkSubType() { unset($this->networkSubType_); }
  public function hasNetworkSubType() { return isset($this->networkSubType_); }
  public function getNetworkSubType() { return $this->networkSubType_; }
  public function setNetworkSubType($value) { $this->networkSubType_ = (string)$value; }
  
  // optional int32 numAccountsOnDevice = 6;

  protected $numAccountsOnDevice_;
  public function resetNumAccountsOnDevice() { unset($this->numAccountsOnDevice_); }
  public function clearNumAccountsOnDevice() { unset($this->numAccountsOnDevice_); }
  public function hasNumAccountsOnDevice() { return isset($this->numAccountsOnDevice_); }
  public function getNumAccountsOnDevice() { return $this->numAccountsOnDevice_; }
  public function setNumAccountsOnDevice($value) { $this->numAccountsOnDevice_ = (string)$value; }
  
  // optional int32 numInstalledApps = 7;

  protected $numInstalledApps_;
  public function resetNumInstalledApps() { unset($this->numInstalledApps_); }
  public function clearNumInstalledApps() { unset($this->numInstalledApps_); }
  public function hasNumInstalledApps() { return isset($this->numInstalledApps_); }
  public function getNumInstalledApps() { return $this->numInstalledApps_; }
  public function setNumInstalledApps($value) { $this->numInstalledApps_ = (string)$value; }
  
  // optional int32 numAutoUpdatingInstalledApps = 8;

  protected $numAutoUpdatingInstalledApps_;
  public function resetNumAutoUpdatingInstalledApps() { unset($this->numAutoUpdatingInstalledApps_); }
  public function clearNumAutoUpdatingInstalledApps() { unset($this->numAutoUpdatingInstalledApps_); }
  public function hasNumAutoUpdatingInstalledApps() { return isset($this->numAutoUpdatingInstalledApps_); }
  public function getNumAutoUpdatingInstalledApps() { return $this->numAutoUpdatingInstalledApps_; }
  public function setNumAutoUpdatingInstalledApps($value) { $this->numAutoUpdatingInstalledApps_ = (string)$value; }
  
  // optional int32 numInstalledAppsNotAutoUpdating = 9;

  protected $numInstalledAppsNotAutoUpdating_;
  public function resetNumInstalledAppsNotAutoUpdating() { unset($this->numInstalledAppsNotAutoUpdating_); }
  public function clearNumInstalledAppsNotAutoUpdating() { unset($this->numInstalledAppsNotAutoUpdating_); }
  public function hasNumInstalledAppsNotAutoUpdating() { return isset($this->numInstalledAppsNotAutoUpdating_); }
  public function getNumInstalledAppsNotAutoUpdating() { return $this->numInstalledAppsNotAutoUpdating_; }
  public function setNumInstalledAppsNotAutoUpdating($value) { $this->numInstalledAppsNotAutoUpdating_ = (string)$value; }
  
  // optional bool gaiaPasswordAuthOptedOut = 10;

  protected $gaiaPasswordAuthOptedOut_;
  public function resetGaiaPasswordAuthOptedOut() { unset($this->gaiaPasswordAuthOptedOut_); }
  public function clearGaiaPasswordAuthOptedOut() { unset($this->gaiaPasswordAuthOptedOut_); }
  public function hasGaiaPasswordAuthOptedOut() { return isset($this->gaiaPasswordAuthOptedOut_); }
  public function getGaiaPasswordAuthOptedOut() { return $this->gaiaPasswordAuthOptedOut_; }
  public function setGaiaPasswordAuthOptedOut($value) { $this->gaiaPasswordAuthOptedOut_ = (bool)$value; }
  
  // optional int32 contentFilterLevel = 11;

  protected $contentFilterLevel_;
  public function resetContentFilterLevel() { unset($this->contentFilterLevel_); }
  public function clearContentFilterLevel() { unset($this->contentFilterLevel_); }
  public function hasContentFilterLevel() { return isset($this->contentFilterLevel_); }
  public function getContentFilterLevel() { return $this->contentFilterLevel_; }
  public function setContentFilterLevel($value) { $this->contentFilterLevel_ = (string)$value; }
  
  // optional bool allowUnknownSources = 12;

  protected $allowUnknownSources_;
  public function resetAllowUnknownSources() { unset($this->allowUnknownSources_); }
  public function clearAllowUnknownSources() { unset($this->allowUnknownSources_); }
  public function hasAllowUnknownSources() { return isset($this->allowUnknownSources_); }
  public function getAllowUnknownSources() { return $this->allowUnknownSources_; }
  public function setAllowUnknownSources($value) { $this->allowUnknownSources_ = (bool)$value; }
  
  // @@protoc_insertion_point(class_scope:PlayStoreSessionData)
}

// message PlayStoreUiElement
class PlayStoreUiElement {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("PlayStoreUiElement: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->type_ = $tmp;
          
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->serverLogsCookie_ = $tmp;
          $limit-=$len;
          break;
        case 3:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->clientLogsCookie_ = new PlayStoreUiElementInfo($fp, $len);
          ASSERT('$len == 0');
          break;
        case 4:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->child_[] = new PlayStoreUiElement($fp, $len);
          ASSERT('$len == 0');
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->type_)) {
      fwrite($fp, "\x08");
      Protobuf::write_varint($fp, (int)$this->type_);
    }
    if (!is_null($this->serverLogsCookie_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, strlen((string)$this->serverLogsCookie_));
      fwrite($fp, (string)$this->serverLogsCookie_);
    }
    if (!is_null($this->clientLogsCookie_)) {
      fwrite($fp, "\x1a");
      Protobuf::write_varint($fp, $this->clientLogsCookie_->size()); // message
      $this->clientLogsCookie_->write($fp);
    }
    if (!is_null($this->child_))
      foreach($this->child_ as $v) {
        fwrite($fp, "\"");
        Protobuf::write_varint($fp, $v->size()); // message
        $v->write($fp);
      }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->type_)) {
      $size += 1 + Protobuf::size_varint($this->type_);
    }
    if (!is_null($this->serverLogsCookie_)) {
      $l = strlen((string)$this->serverLogsCookie_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->clientLogsCookie_)) {
      $l = $this->clientLogsCookie_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->child_))
      foreach($this->child_ as $v) {
        $l = $v->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('type_', $this->type_)
         . Protobuf::toString('serverLogsCookie_', $this->serverLogsCookie_)
         . Protobuf::toString('clientLogsCookie_', $this->clientLogsCookie_)
         . Protobuf::toString('child_', $this->child_);
  }
  
  // optional int32 type = 1;

  protected $type_;
  public function resetType() { unset($this->type_); }
  public function clearType() { unset($this->type_); }
  public function hasType() { return isset($this->type_); }
  public function getType() { return $this->type_; }
  public function setType($value) { $this->type_ = (string)$value; }
  
  // optional bytes serverLogsCookie = 2;

  protected $serverLogsCookie_;
  public function resetServerLogsCookie() { unset($this->serverLogsCookie_); }
  public function clearServerLogsCookie() { unset($this->serverLogsCookie_); }
  public function hasServerLogsCookie() { return isset($this->serverLogsCookie_); }
  public function getServerLogsCookie() { return $this->serverLogsCookie_; }
  public function setServerLogsCookie($value) { $this->serverLogsCookie_ = (string)$value; }
  
  // optional .PlayStoreUiElementInfo clientLogsCookie = 3;

  protected $clientLogsCookie_;
  public function resetClientLogsCookie() { unset($this->clientLogsCookie_); }
  public function clearClientLogsCookie() { unset($this->clientLogsCookie_); }
  public function hasClientLogsCookie() { return isset($this->clientLogsCookie_); }
  public function getClientLogsCookie() { return $this->clientLogsCookie_; }
  public function setClientLogsCookie(PlayStoreUiElementInfo $value) { $this->clientLogsCookie_ = $value; }
  
  // repeated .PlayStoreUiElement child = 4;

  protected $child_ = array();
  public function clearChild() { $this->child_ = array(); }
  public function getChildCount() { return count($this->child_); }
  public function hasChild() { return (count($this->child_) > 0); }
  public function indexOfChild($value) { return array_search($value,$this->child_);}
  public function removeChild($index) { unset($this->child_[$index]); }
  public function removeValChild($value) { $idx = array_search($value,$this->child_); if($idx !== FALSE){unset($this->child_[$idx]); }}
  public function removeValsChild($values) { foreach($values as $value){$idx = array_search($value,$this->child_); if($idx !== FALSE){unset($this->child_[$idx]); }}}
  public function pushChild($newvar) { return array_push($this->child_,$newvar); }
  public function popChild() { return array_pop($this->child_); }
  public function shiftChild() { return array_shift($this->child_); }
  public function unshiftChild($newvar) { return array_unshift($this->child_,$newvar); }
  public function getChild($index) { return $this->child_[$index]; }
  public function getChildArray() { return $this->child_; }
  public function setChild($index, $value) {$this->child_[$index] = $value;	}
  public function addChild($value) { $this->child_[] = $value; }
  public function addAllChild(array $values) { foreach($values as $value) {$this->child_[] = $value;} }
  
  // @@protoc_insertion_point(class_scope:PlayStoreUiElement)
}


// message PlayStoreUiElementInfo.InstrumentInfo
class PlayStoreUiElementInfo_InstrumentInfo {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("PlayStoreUiElementInfo_InstrumentInfo: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->instrumentFamily_ = $tmp;
          
          break;
        case 2:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->isDefault_ = $tmp > 0 ? true : false;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->instrumentFamily_)) {
      fwrite($fp, "\x08");
      Protobuf::write_varint($fp, (int)$this->instrumentFamily_);
    }
    if (!is_null($this->isDefault_)) {
      fwrite($fp, "\x10");
      Protobuf::write_varint($fp, (int)$this->isDefault_ ? 1 : 0);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->instrumentFamily_)) {
      $size += 1 + Protobuf::size_varint($this->instrumentFamily_);
    }
    if (!is_null($this->isDefault_)) {
      $size += 2;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('instrumentFamily_', $this->instrumentFamily_)
         . Protobuf::toString('isDefault_', $this->isDefault_);
  }
  
  // optional int32 instrumentFamily = 1;

  protected $instrumentFamily_;
  public function resetInstrumentFamily() { unset($this->instrumentFamily_); }
  public function clearInstrumentFamily() { unset($this->instrumentFamily_); }
  public function hasInstrumentFamily() { return isset($this->instrumentFamily_); }
  public function getInstrumentFamily() { return $this->instrumentFamily_; }
  public function setInstrumentFamily($value) { $this->instrumentFamily_ = (string)$value; }
  
  // optional bool isDefault = 2;

  protected $isDefault_;
  public function resetIsDefault() { unset($this->isDefault_); }
  public function clearIsDefault() { unset($this->isDefault_); }
  public function hasIsDefault() { return isset($this->isDefault_); }
  public function getIsDefault() { return $this->isDefault_; }
  public function setIsDefault($value) { $this->isDefault_ = (bool)$value; }
  
  // @@protoc_insertion_point(class_scope:PlayStoreUiElementInfo.InstrumentInfo)
}

// message PlayStoreUiElementInfo
class PlayStoreUiElementInfo {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("PlayStoreUiElementInfo: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->instrumentInfo_ = new PlayStoreUiElementInfo_InstrumentInfo($fp, $len);
          ASSERT('$len == 0');
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->serialDocid_ = $tmp;
          $limit-=$len;
          break;
        case 3:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->host_ = $tmp;
          $limit-=$len;
          break;
        case 4:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->document_ = $tmp;
          $limit-=$len;
          break;
        case 5:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->offerType_ = $tmp;
          
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->instrumentInfo_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, $this->instrumentInfo_->size()); // message
      $this->instrumentInfo_->write($fp);
    }
    if (!is_null($this->serialDocid_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, strlen((string)$this->serialDocid_));
      fwrite($fp, (string)$this->serialDocid_);
    }
    if (!is_null($this->host_)) {
      fwrite($fp, "\x1a");
      Protobuf::write_varint($fp, strlen((string)$this->host_));
      fwrite($fp, (string)$this->host_);
    }
    if (!is_null($this->document_)) {
      fwrite($fp, "\"");
      Protobuf::write_varint($fp, strlen((string)$this->document_));
      fwrite($fp, (string)$this->document_);
    }
    if (!is_null($this->offerType_)) {
      fwrite($fp, "(");
      Protobuf::write_varint($fp, (int)$this->offerType_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->instrumentInfo_)) {
      $l = $this->instrumentInfo_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->serialDocid_)) {
      $l = strlen((string)$this->serialDocid_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->host_)) {
      $l = strlen((string)$this->host_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->document_)) {
      $l = strlen((string)$this->document_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->offerType_)) {
      $size += 1 + Protobuf::size_varint($this->offerType_);
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('instrumentInfo_', $this->instrumentInfo_)
         . Protobuf::toString('serialDocid_', $this->serialDocid_)
         . Protobuf::toString('host_', $this->host_)
         . Protobuf::toString('document_', $this->document_)
         . Protobuf::toString('offerType_', $this->offerType_);
  }
  
  // optional .PlayStoreUiElementInfo.InstrumentInfo instrumentInfo = 1;

  protected $instrumentInfo_;
  public function resetInstrumentInfo() { unset($this->instrumentInfo_); }
  public function clearInstrumentInfo() { unset($this->instrumentInfo_); }
  public function hasInstrumentInfo() { return isset($this->instrumentInfo_); }
  public function getInstrumentInfo() { return $this->instrumentInfo_; }
  public function setInstrumentInfo(PlayStoreUiElementInfo_InstrumentInfo $value) { $this->instrumentInfo_ = $value; }
  
  // optional string serialDocid = 2;

  protected $serialDocid_;
  public function resetSerialDocid() { unset($this->serialDocid_); }
  public function clearSerialDocid() { unset($this->serialDocid_); }
  public function hasSerialDocid() { return isset($this->serialDocid_); }
  public function getSerialDocid() { return $this->serialDocid_; }
  public function setSerialDocid($value) { $this->serialDocid_ = (string)$value; }
  
  // optional string host = 3;

  protected $host_;
  public function resetHost() { unset($this->host_); }
  public function clearHost() { unset($this->host_); }
  public function hasHost() { return isset($this->host_); }
  public function getHost() { return $this->host_; }
  public function setHost($value) { $this->host_ = (string)$value; }
  
  // optional string document = 4;

  protected $document_;
  public function resetDocument() { unset($this->document_); }
  public function clearDocument() { unset($this->document_); }
  public function hasDocument() { return isset($this->document_); }
  public function getDocument() { return $this->document_; }
  public function setDocument($value) { $this->document_ = (string)$value; }
  
  // optional int32 offerType = 5;

  protected $offerType_;
  public function resetOfferType() { unset($this->offerType_); }
  public function clearOfferType() { unset($this->offerType_); }
  public function hasOfferType() { return isset($this->offerType_); }
  public function getOfferType() { return $this->offerType_; }
  public function setOfferType($value) { $this->offerType_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:PlayStoreUiElementInfo)
}

// message WidgetEventData
class WidgetEventData {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("WidgetEventData: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->classId_ = $tmp;
          
          break;
        case 2:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->intentActionId_ = $tmp;
          
          break;
        case 3:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->numWidgets_ = $tmp;
          
          break;
        case 4:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->backendId_ = $tmp;
          
          break;
        case 5:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->minWidth_ = $tmp;
          
          break;
        case 6:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->minHeight_ = $tmp;
          
          break;
        case 7:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->maxWidth_ = $tmp;
          
          break;
        case 8:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->maxHeight_ = $tmp;
          
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->classId_)) {
      fwrite($fp, "\x08");
      Protobuf::write_varint($fp, (int)$this->classId_);
    }
    if (!is_null($this->intentActionId_)) {
      fwrite($fp, "\x10");
      Protobuf::write_varint($fp, (int)$this->intentActionId_);
    }
    if (!is_null($this->numWidgets_)) {
      fwrite($fp, "\x18");
      Protobuf::write_varint($fp, (int)$this->numWidgets_);
    }
    if (!is_null($this->backendId_)) {
      fwrite($fp, " ");
      Protobuf::write_varint($fp, (int)$this->backendId_);
    }
    if (!is_null($this->minWidth_)) {
      fwrite($fp, "(");
      Protobuf::write_varint($fp, (int)$this->minWidth_);
    }
    if (!is_null($this->minHeight_)) {
      fwrite($fp, "0");
      Protobuf::write_varint($fp, (int)$this->minHeight_);
    }
    if (!is_null($this->maxWidth_)) {
      fwrite($fp, "8");
      Protobuf::write_varint($fp, (int)$this->maxWidth_);
    }
    if (!is_null($this->maxHeight_)) {
      fwrite($fp, "@");
      Protobuf::write_varint($fp, (int)$this->maxHeight_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->classId_)) {
      $size += 1 + Protobuf::size_varint($this->classId_);
    }
    if (!is_null($this->intentActionId_)) {
      $size += 1 + Protobuf::size_varint($this->intentActionId_);
    }
    if (!is_null($this->numWidgets_)) {
      $size += 1 + Protobuf::size_varint($this->numWidgets_);
    }
    if (!is_null($this->backendId_)) {
      $size += 1 + Protobuf::size_varint($this->backendId_);
    }
    if (!is_null($this->minWidth_)) {
      $size += 1 + Protobuf::size_varint($this->minWidth_);
    }
    if (!is_null($this->minHeight_)) {
      $size += 1 + Protobuf::size_varint($this->minHeight_);
    }
    if (!is_null($this->maxWidth_)) {
      $size += 1 + Protobuf::size_varint($this->maxWidth_);
    }
    if (!is_null($this->maxHeight_)) {
      $size += 1 + Protobuf::size_varint($this->maxHeight_);
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('classId_', $this->classId_)
         . Protobuf::toString('intentActionId_', $this->intentActionId_)
         . Protobuf::toString('numWidgets_', $this->numWidgets_)
         . Protobuf::toString('backendId_', $this->backendId_)
         . Protobuf::toString('minWidth_', $this->minWidth_)
         . Protobuf::toString('minHeight_', $this->minHeight_)
         . Protobuf::toString('maxWidth_', $this->maxWidth_)
         . Protobuf::toString('maxHeight_', $this->maxHeight_);
  }
  
  // optional int32 classId = 1;

  protected $classId_;
  public function resetClassId() { unset($this->classId_); }
  public function clearClassId() { unset($this->classId_); }
  public function hasClassId() { return isset($this->classId_); }
  public function getClassId() { return $this->classId_; }
  public function setClassId($value) { $this->classId_ = (string)$value; }
  
  // optional int32 intentActionId = 2;

  protected $intentActionId_;
  public function resetIntentActionId() { unset($this->intentActionId_); }
  public function clearIntentActionId() { unset($this->intentActionId_); }
  public function hasIntentActionId() { return isset($this->intentActionId_); }
  public function getIntentActionId() { return $this->intentActionId_; }
  public function setIntentActionId($value) { $this->intentActionId_ = (string)$value; }
  
  // optional int32 numWidgets = 3;

  protected $numWidgets_;
  public function resetNumWidgets() { unset($this->numWidgets_); }
  public function clearNumWidgets() { unset($this->numWidgets_); }
  public function hasNumWidgets() { return isset($this->numWidgets_); }
  public function getNumWidgets() { return $this->numWidgets_; }
  public function setNumWidgets($value) { $this->numWidgets_ = (string)$value; }
  
  // optional int32 backendId = 4;

  protected $backendId_;
  public function resetBackendId() { unset($this->backendId_); }
  public function clearBackendId() { unset($this->backendId_); }
  public function hasBackendId() { return isset($this->backendId_); }
  public function getBackendId() { return $this->backendId_; }
  public function setBackendId($value) { $this->backendId_ = (string)$value; }
  
  // optional int32 minWidth = 5;

  protected $minWidth_;
  public function resetMinWidth() { unset($this->minWidth_); }
  public function clearMinWidth() { unset($this->minWidth_); }
  public function hasMinWidth() { return isset($this->minWidth_); }
  public function getMinWidth() { return $this->minWidth_; }
  public function setMinWidth($value) { $this->minWidth_ = (string)$value; }
  
  // optional int32 minHeight = 6;

  protected $minHeight_;
  public function resetMinHeight() { unset($this->minHeight_); }
  public function clearMinHeight() { unset($this->minHeight_); }
  public function hasMinHeight() { return isset($this->minHeight_); }
  public function getMinHeight() { return $this->minHeight_; }
  public function setMinHeight($value) { $this->minHeight_ = (string)$value; }
  
  // optional int32 maxWidth = 7;

  protected $maxWidth_;
  public function resetMaxWidth() { unset($this->maxWidth_); }
  public function clearMaxWidth() { unset($this->maxWidth_); }
  public function hasMaxWidth() { return isset($this->maxWidth_); }
  public function getMaxWidth() { return $this->maxWidth_; }
  public function setMaxWidth($value) { $this->maxWidth_ = (string)$value; }
  
  // optional int32 maxHeight = 8;

  protected $maxHeight_;
  public function resetMaxHeight() { unset($this->maxHeight_); }
  public function clearMaxHeight() { unset($this->maxHeight_); }
  public function hasMaxHeight() { return isset($this->maxHeight_); }
  public function getMaxHeight() { return $this->maxHeight_; }
  public function setMaxHeight($value) { $this->maxHeight_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:WidgetEventData)
}

// message WifiAutoUpdateAttempt
class WifiAutoUpdateAttempt {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("WifiAutoUpdateAttempt: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->autoUpdateSuccess_ = $tmp > 0 ? true : false;
          break;
        case 2:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->numFailedAttempts_ = $tmp;
          
          break;
        case 3:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->timeSinceFirstFailMs_ = $tmp;
          
          break;
        case 4:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->wifiCheckIntervalMs_ = $tmp;
          
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->autoUpdateSuccess_)) {
      fwrite($fp, "\x08");
      Protobuf::write_varint($fp, (int)$this->autoUpdateSuccess_ ? 1 : 0);
    }
    if (!is_null($this->numFailedAttempts_)) {
      fwrite($fp, "\x10");
      Protobuf::write_varint($fp, (int)$this->numFailedAttempts_);
    }
    if (!is_null($this->timeSinceFirstFailMs_)) {
      fwrite($fp, "\x18");
      Protobuf::write_varint($fp, (int)$this->timeSinceFirstFailMs_);
    }
    if (!is_null($this->wifiCheckIntervalMs_)) {
      fwrite($fp, " ");
      Protobuf::write_varint($fp, (int)$this->wifiCheckIntervalMs_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->autoUpdateSuccess_)) {
      $size += 2;
    }
    if (!is_null($this->numFailedAttempts_)) {
      $size += 1 + Protobuf::size_varint($this->numFailedAttempts_);
    }
    if (!is_null($this->timeSinceFirstFailMs_)) {
      $size += 1 + Protobuf::size_varint($this->timeSinceFirstFailMs_);
    }
    if (!is_null($this->wifiCheckIntervalMs_)) {
      $size += 1 + Protobuf::size_varint($this->wifiCheckIntervalMs_);
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('autoUpdateSuccess_', $this->autoUpdateSuccess_)
         . Protobuf::toString('numFailedAttempts_', $this->numFailedAttempts_)
         . Protobuf::toString('timeSinceFirstFailMs_', $this->timeSinceFirstFailMs_)
         . Protobuf::toString('wifiCheckIntervalMs_', $this->wifiCheckIntervalMs_);
  }
  
  // optional bool autoUpdateSuccess = 1;

  protected $autoUpdateSuccess_;
  public function resetAutoUpdateSuccess() { unset($this->autoUpdateSuccess_); }
  public function clearAutoUpdateSuccess() { unset($this->autoUpdateSuccess_); }
  public function hasAutoUpdateSuccess() { return isset($this->autoUpdateSuccess_); }
  public function getAutoUpdateSuccess() { return $this->autoUpdateSuccess_; }
  public function setAutoUpdateSuccess($value) { $this->autoUpdateSuccess_ = (bool)$value; }
  
  // optional int32 numFailedAttempts = 2;

  protected $numFailedAttempts_;
  public function resetNumFailedAttempts() { unset($this->numFailedAttempts_); }
  public function clearNumFailedAttempts() { unset($this->numFailedAttempts_); }
  public function hasNumFailedAttempts() { return isset($this->numFailedAttempts_); }
  public function getNumFailedAttempts() { return $this->numFailedAttempts_; }
  public function setNumFailedAttempts($value) { $this->numFailedAttempts_ = (string)$value; }
  
  // optional int64 timeSinceFirstFailMs = 3;

  protected $timeSinceFirstFailMs_;
  public function resetTimeSinceFirstFailMs() { unset($this->timeSinceFirstFailMs_); }
  public function clearTimeSinceFirstFailMs() { unset($this->timeSinceFirstFailMs_); }
  public function hasTimeSinceFirstFailMs() { return isset($this->timeSinceFirstFailMs_); }
  public function getTimeSinceFirstFailMs() { return $this->timeSinceFirstFailMs_; }
  public function setTimeSinceFirstFailMs($value) { $this->timeSinceFirstFailMs_ = (string)$value; }
  
  // optional int64 wifiCheckIntervalMs = 4;

  protected $wifiCheckIntervalMs_;
  public function resetWifiCheckIntervalMs() { unset($this->wifiCheckIntervalMs_); }
  public function clearWifiCheckIntervalMs() { unset($this->wifiCheckIntervalMs_); }
  public function hasWifiCheckIntervalMs() { return isset($this->wifiCheckIntervalMs_); }
  public function getWifiCheckIntervalMs() { return $this->wifiCheckIntervalMs_; }
  public function setWifiCheckIntervalMs($value) { $this->wifiCheckIntervalMs_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:WifiAutoUpdateAttempt)
}

// message PlusProfile
class PlusProfile {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("PlusProfile: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->displayName_ = $tmp;
          $limit-=$len;
          break;
        case 4:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->profileImageUrl_ = $tmp;
          $limit-=$len;
          break;
        case 5:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->profileImage_ = new Image($fp, $len);
          ASSERT('$len == 0');
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->displayName_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, strlen((string)$this->displayName_));
      fwrite($fp, (string)$this->displayName_);
    }
    if (!is_null($this->profileImageUrl_)) {
      fwrite($fp, "\"");
      Protobuf::write_varint($fp, strlen((string)$this->profileImageUrl_));
      fwrite($fp, (string)$this->profileImageUrl_);
    }
    if (!is_null($this->profileImage_)) {
      fwrite($fp, "*");
      Protobuf::write_varint($fp, $this->profileImage_->size()); // message
      $this->profileImage_->write($fp);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->displayName_)) {
      $l = strlen((string)$this->displayName_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->profileImageUrl_)) {
      $l = strlen((string)$this->profileImageUrl_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->profileImage_)) {
      $l = $this->profileImage_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('displayName_', $this->displayName_)
         . Protobuf::toString('profileImageUrl_', $this->profileImageUrl_)
         . Protobuf::toString('profileImage_', $this->profileImage_);
  }
  
  // optional string displayName = 2;

  protected $displayName_;
  public function resetDisplayName() { unset($this->displayName_); }
  public function clearDisplayName() { unset($this->displayName_); }
  public function hasDisplayName() { return isset($this->displayName_); }
  public function getDisplayName() { return $this->displayName_; }
  public function setDisplayName($value) { $this->displayName_ = (string)$value; }
  
  // optional string profileImageUrl = 4;

  protected $profileImageUrl_;
  public function resetProfileImageUrl() { unset($this->profileImageUrl_); }
  public function clearProfileImageUrl() { unset($this->profileImageUrl_); }
  public function hasProfileImageUrl() { return isset($this->profileImageUrl_); }
  public function getProfileImageUrl() { return $this->profileImageUrl_; }
  public function setProfileImageUrl($value) { $this->profileImageUrl_ = (string)$value; }
  
  // optional .Image profileImage = 5;

  protected $profileImage_;
  public function resetProfileImage() { unset($this->profileImage_); }
  public function clearProfileImage() { unset($this->profileImage_); }
  public function hasProfileImage() { return isset($this->profileImage_); }
  public function getProfileImage() { return $this->profileImage_; }
  public function setProfileImage(Image $value) { $this->profileImage_ = $value; }
  
  // @@protoc_insertion_point(class_scope:PlusProfile)
}

// message PlusOneResponse
class PlusOneResponse {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("PlusOneResponse: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  public function size() {
    $size = 0;
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown);
  }
  
  // @@protoc_insertion_point(class_scope:PlusOneResponse)
}

// message PlusProfileResponse
class PlusProfileResponse {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("PlusProfileResponse: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->plusProfile_ = new PlusProfile($fp, $len);
          ASSERT('$len == 0');
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->plusProfile_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, $this->plusProfile_->size()); // message
      $this->plusProfile_->write($fp);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->plusProfile_)) {
      $l = $this->plusProfile_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('plusProfile_', $this->plusProfile_);
  }
  
  // optional .PlusProfile plusProfile = 1;

  protected $plusProfile_;
  public function resetPlusProfile() { unset($this->plusProfile_); }
  public function clearPlusProfile() { unset($this->plusProfile_); }
  public function hasPlusProfile() { return isset($this->plusProfile_); }
  public function getPlusProfile() { return $this->plusProfile_; }
  public function setPlusProfile(PlusProfile $value) { $this->plusProfile_ = $value; }
  
  // @@protoc_insertion_point(class_scope:PlusProfileResponse)
}

// message ClientCart
class ClientCart {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("ClientCart: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->title_ = $tmp;
          $limit-=$len;
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->formattedPrice_ = $tmp;
          $limit-=$len;
          break;
        case 3:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->purchaseContextToken_ = $tmp;
          $limit-=$len;
          break;
        case 4:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->instrument_ = new Instrument($fp, $len);
          ASSERT('$len == 0');
          break;
        case 5:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->extendedDetailHtml_[] = $tmp;
          $limit-=$len;
          break;
        case 6:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->footerHtml_ = $tmp;
          $limit-=$len;
          break;
        case 7:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->addInstrumentPromptHtml_ = $tmp;
          $limit-=$len;
          break;
        case 8:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->buttonText_ = $tmp;
          $limit-=$len;
          break;
        case 9:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->completePurchaseChallenge_ = new Challenge($fp, $len);
          ASSERT('$len == 0');
          break;
        case 10:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->priceByline_ = $tmp;
          $limit-=$len;
          break;
        case 11:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->detailHtml_[] = $tmp;
          $limit-=$len;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->title_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, strlen((string)$this->title_));
      fwrite($fp, (string)$this->title_);
    }
    if (!is_null($this->formattedPrice_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, strlen((string)$this->formattedPrice_));
      fwrite($fp, (string)$this->formattedPrice_);
    }
    if (!is_null($this->purchaseContextToken_)) {
      fwrite($fp, "\x1a");
      Protobuf::write_varint($fp, strlen((string)$this->purchaseContextToken_));
      fwrite($fp, (string)$this->purchaseContextToken_);
    }
    if (!is_null($this->instrument_)) {
      fwrite($fp, "\"");
      Protobuf::write_varint($fp, $this->instrument_->size()); // message
      $this->instrument_->write($fp);
    }
    if (!is_null($this->extendedDetailHtml_))
      foreach($this->extendedDetailHtml_ as $v) {
        fwrite($fp, "*");
        Protobuf::write_varint($fp, strlen((string)$v));
        fwrite($fp, (string)$v);
      }
    if (!is_null($this->footerHtml_)) {
      fwrite($fp, "2");
      Protobuf::write_varint($fp, strlen((string)$this->footerHtml_));
      fwrite($fp, (string)$this->footerHtml_);
    }
    if (!is_null($this->addInstrumentPromptHtml_)) {
      fwrite($fp, ":");
      Protobuf::write_varint($fp, strlen((string)$this->addInstrumentPromptHtml_));
      fwrite($fp, (string)$this->addInstrumentPromptHtml_);
    }
    if (!is_null($this->buttonText_)) {
      fwrite($fp, "B");
      Protobuf::write_varint($fp, strlen((string)$this->buttonText_));
      fwrite($fp, (string)$this->buttonText_);
    }
    if (!is_null($this->completePurchaseChallenge_)) {
      fwrite($fp, "J");
      Protobuf::write_varint($fp, $this->completePurchaseChallenge_->size()); // message
      $this->completePurchaseChallenge_->write($fp);
    }
    if (!is_null($this->priceByline_)) {
      fwrite($fp, "R");
      Protobuf::write_varint($fp, strlen((string)$this->priceByline_));
      fwrite($fp, (string)$this->priceByline_);
    }
    if (!is_null($this->detailHtml_))
      foreach($this->detailHtml_ as $v) {
        fwrite($fp, "Z");
        Protobuf::write_varint($fp, strlen((string)$v));
        fwrite($fp, (string)$v);
      }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->title_)) {
      $l = strlen((string)$this->title_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->formattedPrice_)) {
      $l = strlen((string)$this->formattedPrice_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->purchaseContextToken_)) {
      $l = strlen((string)$this->purchaseContextToken_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->instrument_)) {
      $l = $this->instrument_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->extendedDetailHtml_))
      foreach($this->extendedDetailHtml_ as $v) {
        $l = strlen((string)$v);
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
    if (!is_null($this->footerHtml_)) {
      $l = strlen((string)$this->footerHtml_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->addInstrumentPromptHtml_)) {
      $l = strlen((string)$this->addInstrumentPromptHtml_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->buttonText_)) {
      $l = strlen((string)$this->buttonText_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->completePurchaseChallenge_)) {
      $l = $this->completePurchaseChallenge_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->priceByline_)) {
      $l = strlen((string)$this->priceByline_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->detailHtml_))
      foreach($this->detailHtml_ as $v) {
        $l = strlen((string)$v);
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('title_', $this->title_)
         . Protobuf::toString('formattedPrice_', $this->formattedPrice_)
         . Protobuf::toString('purchaseContextToken_', $this->purchaseContextToken_)
         . Protobuf::toString('instrument_', $this->instrument_)
         . Protobuf::toString('extendedDetailHtml_', $this->extendedDetailHtml_)
         . Protobuf::toString('footerHtml_', $this->footerHtml_)
         . Protobuf::toString('addInstrumentPromptHtml_', $this->addInstrumentPromptHtml_)
         . Protobuf::toString('buttonText_', $this->buttonText_)
         . Protobuf::toString('completePurchaseChallenge_', $this->completePurchaseChallenge_)
         . Protobuf::toString('priceByline_', $this->priceByline_)
         . Protobuf::toString('detailHtml_', $this->detailHtml_);
  }
  
  // optional string title = 1;

  protected $title_;
  public function resetTitle() { unset($this->title_); }
  public function clearTitle() { unset($this->title_); }
  public function hasTitle() { return isset($this->title_); }
  public function getTitle() { return $this->title_; }
  public function setTitle($value) { $this->title_ = (string)$value; }
  
  // optional string formattedPrice = 2;

  protected $formattedPrice_;
  public function resetFormattedPrice() { unset($this->formattedPrice_); }
  public function clearFormattedPrice() { unset($this->formattedPrice_); }
  public function hasFormattedPrice() { return isset($this->formattedPrice_); }
  public function getFormattedPrice() { return $this->formattedPrice_; }
  public function setFormattedPrice($value) { $this->formattedPrice_ = (string)$value; }
  
  // optional string purchaseContextToken = 3;

  protected $purchaseContextToken_;
  public function resetPurchaseContextToken() { unset($this->purchaseContextToken_); }
  public function clearPurchaseContextToken() { unset($this->purchaseContextToken_); }
  public function hasPurchaseContextToken() { return isset($this->purchaseContextToken_); }
  public function getPurchaseContextToken() { return $this->purchaseContextToken_; }
  public function setPurchaseContextToken($value) { $this->purchaseContextToken_ = (string)$value; }
  
  // optional .Instrument instrument = 4;

  protected $instrument_;
  public function resetInstrument() { unset($this->instrument_); }
  public function clearInstrument() { unset($this->instrument_); }
  public function hasInstrument() { return isset($this->instrument_); }
  public function getInstrument() { return $this->instrument_; }
  public function setInstrument(Instrument $value) { $this->instrument_ = $value; }
  
  // repeated string extendedDetailHtml = 5;

  protected $extendedDetailHtml_ = array();
  public function clearExtendedDetailHtml() { $this->extendedDetailHtml_ = array(); }
  public function getExtendedDetailHtmlCount() { return count($this->extendedDetailHtml_); }
  public function hasExtendedDetailHtml() { return (count($this->extendedDetailHtml_) > 0); }
  public function indexOfExtendedDetailHtml($value) { return array_search($value,$this->extendedDetailHtml_);}
  public function removeExtendedDetailHtml($index) { unset($this->extendedDetailHtml_[$index]); }
  public function removeValExtendedDetailHtml($value) { $idx = array_search($value,$this->extendedDetailHtml_); if($idx !== FALSE){unset($this->extendedDetailHtml_[$idx]); }}
  public function removeValsExtendedDetailHtml($values) { foreach($values as $value){$idx = array_search($value,$this->extendedDetailHtml_); if($idx !== FALSE){unset($this->extendedDetailHtml_[$idx]); }}}
  public function pushExtendedDetailHtml($newvar) { return array_push($this->extendedDetailHtml_,(string)$newvar); }
  public function popExtendedDetailHtml() { return array_pop($this->extendedDetailHtml_); }
  public function shiftExtendedDetailHtml() { return array_shift($this->extendedDetailHtml_); }
  public function unshiftExtendedDetailHtml($newvar) { return array_unshift($this->extendedDetailHtml_,(string)$newvar); }
  public function getExtendedDetailHtml($index) { return $this->extendedDetailHtml_[$index]; }
  public function getExtendedDetailHtmlArray() { return $this->extendedDetailHtml_; }
  public function setExtendedDetailHtml($index, $value) {$this->extendedDetailHtml_[$index] = (string)$value;	}
  public function addExtendedDetailHtml($value) { $this->extendedDetailHtml_[] = (string)$value; }
  public function addAllExtendedDetailHtml(array $values) { foreach($values as $value) {$this->extendedDetailHtml_[] = (string)$value;} }
  
  // optional string footerHtml = 6;

  protected $footerHtml_;
  public function resetFooterHtml() { unset($this->footerHtml_); }
  public function clearFooterHtml() { unset($this->footerHtml_); }
  public function hasFooterHtml() { return isset($this->footerHtml_); }
  public function getFooterHtml() { return $this->footerHtml_; }
  public function setFooterHtml($value) { $this->footerHtml_ = (string)$value; }
  
  // optional string addInstrumentPromptHtml = 7;

  protected $addInstrumentPromptHtml_;
  public function resetAddInstrumentPromptHtml() { unset($this->addInstrumentPromptHtml_); }
  public function clearAddInstrumentPromptHtml() { unset($this->addInstrumentPromptHtml_); }
  public function hasAddInstrumentPromptHtml() { return isset($this->addInstrumentPromptHtml_); }
  public function getAddInstrumentPromptHtml() { return $this->addInstrumentPromptHtml_; }
  public function setAddInstrumentPromptHtml($value) { $this->addInstrumentPromptHtml_ = (string)$value; }
  
  // optional string buttonText = 8;

  protected $buttonText_;
  public function resetButtonText() { unset($this->buttonText_); }
  public function clearButtonText() { unset($this->buttonText_); }
  public function hasButtonText() { return isset($this->buttonText_); }
  public function getButtonText() { return $this->buttonText_; }
  public function setButtonText($value) { $this->buttonText_ = (string)$value; }
  
  // optional .Challenge completePurchaseChallenge = 9;

  protected $completePurchaseChallenge_;
  public function resetCompletePurchaseChallenge() { unset($this->completePurchaseChallenge_); }
  public function clearCompletePurchaseChallenge() { unset($this->completePurchaseChallenge_); }
  public function hasCompletePurchaseChallenge() { return isset($this->completePurchaseChallenge_); }
  public function getCompletePurchaseChallenge() { return $this->completePurchaseChallenge_; }
  public function setCompletePurchaseChallenge(Challenge $value) { $this->completePurchaseChallenge_ = $value; }
  
  // optional string priceByline = 10;

  protected $priceByline_;
  public function resetPriceByline() { unset($this->priceByline_); }
  public function clearPriceByline() { unset($this->priceByline_); }
  public function hasPriceByline() { return isset($this->priceByline_); }
  public function getPriceByline() { return $this->priceByline_; }
  public function setPriceByline($value) { $this->priceByline_ = (string)$value; }
  
  // repeated string detailHtml = 11;

  protected $detailHtml_ = array();
  public function clearDetailHtml() { $this->detailHtml_ = array(); }
  public function getDetailHtmlCount() { return count($this->detailHtml_); }
  public function hasDetailHtml() { return (count($this->detailHtml_) > 0); }
  public function indexOfDetailHtml($value) { return array_search($value,$this->detailHtml_);}
  public function removeDetailHtml($index) { unset($this->detailHtml_[$index]); }
  public function removeValDetailHtml($value) { $idx = array_search($value,$this->detailHtml_); if($idx !== FALSE){unset($this->detailHtml_[$idx]); }}
  public function removeValsDetailHtml($values) { foreach($values as $value){$idx = array_search($value,$this->detailHtml_); if($idx !== FALSE){unset($this->detailHtml_[$idx]); }}}
  public function pushDetailHtml($newvar) { return array_push($this->detailHtml_,(string)$newvar); }
  public function popDetailHtml() { return array_pop($this->detailHtml_); }
  public function shiftDetailHtml() { return array_shift($this->detailHtml_); }
  public function unshiftDetailHtml($newvar) { return array_unshift($this->detailHtml_,(string)$newvar); }
  public function getDetailHtml($index) { return $this->detailHtml_[$index]; }
  public function getDetailHtmlArray() { return $this->detailHtml_; }
  public function setDetailHtml($index, $value) {$this->detailHtml_[$index] = (string)$value;	}
  public function addDetailHtml($value) { $this->detailHtml_[] = (string)$value; }
  public function addAllDetailHtml(array $values) { foreach($values as $value) {$this->detailHtml_[] = (string)$value;} }
  
  // @@protoc_insertion_point(class_scope:ClientCart)
}

// message CommitPurchaseResponse
class CommitPurchaseResponse {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("CommitPurchaseResponse: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->purchaseStatus_ = new PurchaseStatus($fp, $len);
          ASSERT('$len == 0');
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->challenge_ = new Challenge($fp, $len);
          ASSERT('$len == 0');
          break;
        case 3:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->libraryUpdate_[] = new LibraryUpdate($fp, $len);
          ASSERT('$len == 0');
          break;
        case 4:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->appDeliveryData_ = new AndroidAppDeliveryData($fp, $len);
          ASSERT('$len == 0');
          break;
        case 5:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->serverLogsCookie_ = $tmp;
          $limit-=$len;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->purchaseStatus_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, $this->purchaseStatus_->size()); // message
      $this->purchaseStatus_->write($fp);
    }
    if (!is_null($this->challenge_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, $this->challenge_->size()); // message
      $this->challenge_->write($fp);
    }
    if (!is_null($this->libraryUpdate_))
      foreach($this->libraryUpdate_ as $v) {
        fwrite($fp, "\x1a");
        Protobuf::write_varint($fp, $v->size()); // message
        $v->write($fp);
      }
    if (!is_null($this->appDeliveryData_)) {
      fwrite($fp, "\"");
      Protobuf::write_varint($fp, $this->appDeliveryData_->size()); // message
      $this->appDeliveryData_->write($fp);
    }
    if (!is_null($this->serverLogsCookie_)) {
      fwrite($fp, "*");
      Protobuf::write_varint($fp, strlen((string)$this->serverLogsCookie_));
      fwrite($fp, (string)$this->serverLogsCookie_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->purchaseStatus_)) {
      $l = $this->purchaseStatus_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->challenge_)) {
      $l = $this->challenge_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->libraryUpdate_))
      foreach($this->libraryUpdate_ as $v) {
        $l = $v->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
    if (!is_null($this->appDeliveryData_)) {
      $l = $this->appDeliveryData_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->serverLogsCookie_)) {
      $l = strlen((string)$this->serverLogsCookie_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('purchaseStatus_', $this->purchaseStatus_)
         . Protobuf::toString('challenge_', $this->challenge_)
         . Protobuf::toString('libraryUpdate_', $this->libraryUpdate_)
         . Protobuf::toString('appDeliveryData_', $this->appDeliveryData_)
         . Protobuf::toString('serverLogsCookie_', $this->serverLogsCookie_);
  }
  
  // optional .PurchaseStatus purchaseStatus = 1;

  protected $purchaseStatus_;
  public function resetPurchaseStatus() { unset($this->purchaseStatus_); }
  public function clearPurchaseStatus() { unset($this->purchaseStatus_); }
  public function hasPurchaseStatus() { return isset($this->purchaseStatus_); }
  public function getPurchaseStatus() { return $this->purchaseStatus_; }
  public function setPurchaseStatus(PurchaseStatus $value) { $this->purchaseStatus_ = $value; }
  
  // optional .Challenge challenge = 2;

  protected $challenge_;
  public function resetChallenge() { unset($this->challenge_); }
  public function clearChallenge() { unset($this->challenge_); }
  public function hasChallenge() { return isset($this->challenge_); }
  public function getChallenge() { return $this->challenge_; }
  public function setChallenge(Challenge $value) { $this->challenge_ = $value; }
  
  // repeated .LibraryUpdate libraryUpdate = 3;

  protected $libraryUpdate_ = array();
  public function clearLibraryUpdate() { $this->libraryUpdate_ = array(); }
  public function getLibraryUpdateCount() { return count($this->libraryUpdate_); }
  public function hasLibraryUpdate() { return (count($this->libraryUpdate_) > 0); }
  public function indexOfLibraryUpdate($value) { return array_search($value,$this->libraryUpdate_);}
  public function removeLibraryUpdate($index) { unset($this->libraryUpdate_[$index]); }
  public function removeValLibraryUpdate($value) { $idx = array_search($value,$this->libraryUpdate_); if($idx !== FALSE){unset($this->libraryUpdate_[$idx]); }}
  public function removeValsLibraryUpdate($values) { foreach($values as $value){$idx = array_search($value,$this->libraryUpdate_); if($idx !== FALSE){unset($this->libraryUpdate_[$idx]); }}}
  public function pushLibraryUpdate($newvar) { return array_push($this->libraryUpdate_,$newvar); }
  public function popLibraryUpdate() { return array_pop($this->libraryUpdate_); }
  public function shiftLibraryUpdate() { return array_shift($this->libraryUpdate_); }
  public function unshiftLibraryUpdate($newvar) { return array_unshift($this->libraryUpdate_,$newvar); }
  public function getLibraryUpdate($index) { return $this->libraryUpdate_[$index]; }
  public function getLibraryUpdateArray() { return $this->libraryUpdate_; }
  public function setLibraryUpdate($index, $value) {$this->libraryUpdate_[$index] = $value;	}
  public function addLibraryUpdate($value) { $this->libraryUpdate_[] = $value; }
  public function addAllLibraryUpdate(array $values) { foreach($values as $value) {$this->libraryUpdate_[] = $value;} }
  
  // optional .AndroidAppDeliveryData appDeliveryData = 4;

  protected $appDeliveryData_;
  public function resetAppDeliveryData() { unset($this->appDeliveryData_); }
  public function clearAppDeliveryData() { unset($this->appDeliveryData_); }
  public function hasAppDeliveryData() { return isset($this->appDeliveryData_); }
  public function getAppDeliveryData() { return $this->appDeliveryData_; }
  public function setAppDeliveryData(AndroidAppDeliveryData $value) { $this->appDeliveryData_ = $value; }
  
  // optional bytes serverLogsCookie = 5;

  protected $serverLogsCookie_;
  public function resetServerLogsCookie() { unset($this->serverLogsCookie_); }
  public function clearServerLogsCookie() { unset($this->serverLogsCookie_); }
  public function hasServerLogsCookie() { return isset($this->serverLogsCookie_); }
  public function getServerLogsCookie() { return $this->serverLogsCookie_; }
  public function setServerLogsCookie($value) { $this->serverLogsCookie_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:CommitPurchaseResponse)
}

// message PreparePurchaseResponse
class PreparePurchaseResponse {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("PreparePurchaseResponse: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->purchaseStatus_ = new PurchaseStatus($fp, $len);
          ASSERT('$len == 0');
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->challenge_ = new Challenge($fp, $len);
          ASSERT('$len == 0');
          break;
        case 3:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->cart_ = new ClientCart($fp, $len);
          ASSERT('$len == 0');
          break;
        case 4:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->libraryUpdate_[] = new LibraryUpdate($fp, $len);
          ASSERT('$len == 0');
          break;
        case 5:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->serverLogsCookie_ = $tmp;
          $limit-=$len;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->purchaseStatus_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, $this->purchaseStatus_->size()); // message
      $this->purchaseStatus_->write($fp);
    }
    if (!is_null($this->challenge_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, $this->challenge_->size()); // message
      $this->challenge_->write($fp);
    }
    if (!is_null($this->cart_)) {
      fwrite($fp, "\x1a");
      Protobuf::write_varint($fp, $this->cart_->size()); // message
      $this->cart_->write($fp);
    }
    if (!is_null($this->libraryUpdate_))
      foreach($this->libraryUpdate_ as $v) {
        fwrite($fp, "\"");
        Protobuf::write_varint($fp, $v->size()); // message
        $v->write($fp);
      }
    if (!is_null($this->serverLogsCookie_)) {
      fwrite($fp, "*");
      Protobuf::write_varint($fp, strlen((string)$this->serverLogsCookie_));
      fwrite($fp, (string)$this->serverLogsCookie_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->purchaseStatus_)) {
      $l = $this->purchaseStatus_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->challenge_)) {
      $l = $this->challenge_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->cart_)) {
      $l = $this->cart_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->libraryUpdate_))
      foreach($this->libraryUpdate_ as $v) {
        $l = $v->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
    if (!is_null($this->serverLogsCookie_)) {
      $l = strlen((string)$this->serverLogsCookie_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('purchaseStatus_', $this->purchaseStatus_)
         . Protobuf::toString('challenge_', $this->challenge_)
         . Protobuf::toString('cart_', $this->cart_)
         . Protobuf::toString('libraryUpdate_', $this->libraryUpdate_)
         . Protobuf::toString('serverLogsCookie_', $this->serverLogsCookie_);
  }
  
  // optional .PurchaseStatus purchaseStatus = 1;

  protected $purchaseStatus_;
  public function resetPurchaseStatus() { unset($this->purchaseStatus_); }
  public function clearPurchaseStatus() { unset($this->purchaseStatus_); }
  public function hasPurchaseStatus() { return isset($this->purchaseStatus_); }
  public function getPurchaseStatus() { return $this->purchaseStatus_; }
  public function setPurchaseStatus(PurchaseStatus $value) { $this->purchaseStatus_ = $value; }
  
  // optional .Challenge challenge = 2;

  protected $challenge_;
  public function resetChallenge() { unset($this->challenge_); }
  public function clearChallenge() { unset($this->challenge_); }
  public function hasChallenge() { return isset($this->challenge_); }
  public function getChallenge() { return $this->challenge_; }
  public function setChallenge(Challenge $value) { $this->challenge_ = $value; }
  
  // optional .ClientCart cart = 3;

  protected $cart_;
  public function resetCart() { unset($this->cart_); }
  public function clearCart() { unset($this->cart_); }
  public function hasCart() { return isset($this->cart_); }
  public function getCart() { return $this->cart_; }
  public function setCart(ClientCart $value) { $this->cart_ = $value; }
  
  // repeated .LibraryUpdate libraryUpdate = 4;

  protected $libraryUpdate_ = array();
  public function clearLibraryUpdate() { $this->libraryUpdate_ = array(); }
  public function getLibraryUpdateCount() { return count($this->libraryUpdate_); }
  public function hasLibraryUpdate() { return (count($this->libraryUpdate_) > 0); }
  public function indexOfLibraryUpdate($value) { return array_search($value,$this->libraryUpdate_);}
  public function removeLibraryUpdate($index) { unset($this->libraryUpdate_[$index]); }
  public function removeValLibraryUpdate($value) { $idx = array_search($value,$this->libraryUpdate_); if($idx !== FALSE){unset($this->libraryUpdate_[$idx]); }}
  public function removeValsLibraryUpdate($values) { foreach($values as $value){$idx = array_search($value,$this->libraryUpdate_); if($idx !== FALSE){unset($this->libraryUpdate_[$idx]); }}}
  public function pushLibraryUpdate($newvar) { return array_push($this->libraryUpdate_,$newvar); }
  public function popLibraryUpdate() { return array_pop($this->libraryUpdate_); }
  public function shiftLibraryUpdate() { return array_shift($this->libraryUpdate_); }
  public function unshiftLibraryUpdate($newvar) { return array_unshift($this->libraryUpdate_,$newvar); }
  public function getLibraryUpdate($index) { return $this->libraryUpdate_[$index]; }
  public function getLibraryUpdateArray() { return $this->libraryUpdate_; }
  public function setLibraryUpdate($index, $value) {$this->libraryUpdate_[$index] = $value;	}
  public function addLibraryUpdate($value) { $this->libraryUpdate_[] = $value; }
  public function addAllLibraryUpdate(array $values) { foreach($values as $value) {$this->libraryUpdate_[] = $value;} }
  
  // optional bytes serverLogsCookie = 5;

  protected $serverLogsCookie_;
  public function resetServerLogsCookie() { unset($this->serverLogsCookie_); }
  public function clearServerLogsCookie() { unset($this->serverLogsCookie_); }
  public function hasServerLogsCookie() { return isset($this->serverLogsCookie_); }
  public function getServerLogsCookie() { return $this->serverLogsCookie_; }
  public function setServerLogsCookie($value) { $this->serverLogsCookie_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:PreparePurchaseResponse)
}

// message PurchaseStatus
class PurchaseStatus {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("PurchaseStatus: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->statusCode_ = $tmp;
          
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->errorMessageHtml_ = $tmp;
          $limit-=$len;
          break;
        case 3:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->permissionError_ = $tmp;
          
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->statusCode_)) {
      fwrite($fp, "\x08");
      Protobuf::write_varint($fp, (int)$this->statusCode_);
    }
    if (!is_null($this->errorMessageHtml_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, strlen((string)$this->errorMessageHtml_));
      fwrite($fp, (string)$this->errorMessageHtml_);
    }
    if (!is_null($this->permissionError_)) {
      fwrite($fp, "\x18");
      Protobuf::write_varint($fp, (int)$this->permissionError_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->statusCode_)) {
      $size += 1 + Protobuf::size_varint($this->statusCode_);
    }
    if (!is_null($this->errorMessageHtml_)) {
      $l = strlen((string)$this->errorMessageHtml_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->permissionError_)) {
      $size += 1 + Protobuf::size_varint($this->permissionError_);
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('statusCode_', $this->statusCode_)
         . Protobuf::toString('errorMessageHtml_', $this->errorMessageHtml_)
         . Protobuf::toString('permissionError_', $this->permissionError_);
  }
  
  // optional int32 statusCode = 1;

  protected $statusCode_;
  public function resetStatusCode() { unset($this->statusCode_); }
  public function clearStatusCode() { unset($this->statusCode_); }
  public function hasStatusCode() { return isset($this->statusCode_); }
  public function getStatusCode() { return $this->statusCode_; }
  public function setStatusCode($value) { $this->statusCode_ = (string)$value; }
  
  // optional string errorMessageHtml = 2;

  protected $errorMessageHtml_;
  public function resetErrorMessageHtml() { unset($this->errorMessageHtml_); }
  public function clearErrorMessageHtml() { unset($this->errorMessageHtml_); }
  public function hasErrorMessageHtml() { return isset($this->errorMessageHtml_); }
  public function getErrorMessageHtml() { return $this->errorMessageHtml_; }
  public function setErrorMessageHtml($value) { $this->errorMessageHtml_ = (string)$value; }
  
  // optional int32 permissionError = 3;

  protected $permissionError_;
  public function resetPermissionError() { unset($this->permissionError_); }
  public function clearPermissionError() { unset($this->permissionError_); }
  public function hasPermissionError() { return isset($this->permissionError_); }
  public function getPermissionError() { return $this->permissionError_; }
  public function setPermissionError($value) { $this->permissionError_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:PurchaseStatus)
}

// message RateSuggestedContentResponse
class RateSuggestedContentResponse {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("RateSuggestedContentResponse: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  public function size() {
    $size = 0;
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown);
  }
  
  // @@protoc_insertion_point(class_scope:RateSuggestedContentResponse)
}

// message AggregateRating
class AggregateRating {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("AggregateRating: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->type_ = $tmp;
          
          break;
        case 2:
          ASSERT('$wire == 5');
          $tmp = Protobuf::read_float($fp);
          if ($tmp === false)
            throw new Exception('Protobuf::read_float returned false');
          $this->starRating_ = $tmp;
          $limit-=4;
          break;
        case 3:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->ratingsCount_ = $tmp;
          
          break;
        case 4:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->oneStarRatings_ = $tmp;
          
          break;
        case 5:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->twoStarRatings_ = $tmp;
          
          break;
        case 6:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->threeStarRatings_ = $tmp;
          
          break;
        case 7:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->fourStarRatings_ = $tmp;
          
          break;
        case 8:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->fiveStarRatings_ = $tmp;
          
          break;
        case 9:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->thumbsUpCount_ = $tmp;
          
          break;
        case 10:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->thumbsDownCount_ = $tmp;
          
          break;
        case 11:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->commentCount_ = $tmp;
          
          break;
        case 12:
          ASSERT('$wire == 1');
          $tmp = Protobuf::read_double($fp);
          if ($tmp === false)
            throw new Exception('Protobuf::read_double returned false');
          $this->bayesianMeanRating_ = $tmp;
          $limit-=8;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->type_)) {
      fwrite($fp, "\x08");
      Protobuf::write_varint($fp, (int)$this->type_);
    }
    if (!is_null($this->starRating_)) {
      fwrite($fp, "\x15");
      Protobuf::write_float($fp, (float)$this->starRating_);
    }
    if (!is_null($this->ratingsCount_)) {
      fwrite($fp, "\x18");
      Protobuf::write_varint($fp, (int)$this->ratingsCount_);
    }
    if (!is_null($this->oneStarRatings_)) {
      fwrite($fp, " ");
      Protobuf::write_varint($fp, (int)$this->oneStarRatings_);
    }
    if (!is_null($this->twoStarRatings_)) {
      fwrite($fp, "(");
      Protobuf::write_varint($fp, (int)$this->twoStarRatings_);
    }
    if (!is_null($this->threeStarRatings_)) {
      fwrite($fp, "0");
      Protobuf::write_varint($fp, (int)$this->threeStarRatings_);
    }
    if (!is_null($this->fourStarRatings_)) {
      fwrite($fp, "8");
      Protobuf::write_varint($fp, (int)$this->fourStarRatings_);
    }
    if (!is_null($this->fiveStarRatings_)) {
      fwrite($fp, "@");
      Protobuf::write_varint($fp, (int)$this->fiveStarRatings_);
    }
    if (!is_null($this->thumbsUpCount_)) {
      fwrite($fp, "H");
      Protobuf::write_varint($fp, (int)$this->thumbsUpCount_);
    }
    if (!is_null($this->thumbsDownCount_)) {
      fwrite($fp, "P");
      Protobuf::write_varint($fp, (int)$this->thumbsDownCount_);
    }
    if (!is_null($this->commentCount_)) {
      fwrite($fp, "X");
      Protobuf::write_varint($fp, (int)$this->commentCount_);
    }
    if (!is_null($this->bayesianMeanRating_)) {
      fwrite($fp, "a");
      Protobuf::write_double($fp, (double)$this->bayesianMeanRating_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->type_)) {
      $size += 1 + Protobuf::size_varint($this->type_);
    }
    if (!is_null($this->starRating_)) {
      $size += 5;
    }
    if (!is_null($this->ratingsCount_)) {
      $size += 1 + Protobuf::size_varint($this->ratingsCount_);
    }
    if (!is_null($this->oneStarRatings_)) {
      $size += 1 + Protobuf::size_varint($this->oneStarRatings_);
    }
    if (!is_null($this->twoStarRatings_)) {
      $size += 1 + Protobuf::size_varint($this->twoStarRatings_);
    }
    if (!is_null($this->threeStarRatings_)) {
      $size += 1 + Protobuf::size_varint($this->threeStarRatings_);
    }
    if (!is_null($this->fourStarRatings_)) {
      $size += 1 + Protobuf::size_varint($this->fourStarRatings_);
    }
    if (!is_null($this->fiveStarRatings_)) {
      $size += 1 + Protobuf::size_varint($this->fiveStarRatings_);
    }
    if (!is_null($this->thumbsUpCount_)) {
      $size += 1 + Protobuf::size_varint($this->thumbsUpCount_);
    }
    if (!is_null($this->thumbsDownCount_)) {
      $size += 1 + Protobuf::size_varint($this->thumbsDownCount_);
    }
    if (!is_null($this->commentCount_)) {
      $size += 1 + Protobuf::size_varint($this->commentCount_);
    }
    if (!is_null($this->bayesianMeanRating_)) {
      $size += 9;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('type_', $this->type_)
         . Protobuf::toString('starRating_', $this->starRating_)
         . Protobuf::toString('ratingsCount_', $this->ratingsCount_)
         . Protobuf::toString('oneStarRatings_', $this->oneStarRatings_)
         . Protobuf::toString('twoStarRatings_', $this->twoStarRatings_)
         . Protobuf::toString('threeStarRatings_', $this->threeStarRatings_)
         . Protobuf::toString('fourStarRatings_', $this->fourStarRatings_)
         . Protobuf::toString('fiveStarRatings_', $this->fiveStarRatings_)
         . Protobuf::toString('thumbsUpCount_', $this->thumbsUpCount_)
         . Protobuf::toString('thumbsDownCount_', $this->thumbsDownCount_)
         . Protobuf::toString('commentCount_', $this->commentCount_)
         . Protobuf::toString('bayesianMeanRating_', $this->bayesianMeanRating_);
  }
  
  // optional int32 type = 1;

  protected $type_;
  public function resetType() { unset($this->type_); }
  public function clearType() { unset($this->type_); }
  public function hasType() { return isset($this->type_); }
  public function getType() { return $this->type_; }
  public function setType($value) { $this->type_ = (string)$value; }
  
  // optional float starRating = 2;

  protected $starRating_;
  public function resetStarRating() { unset($this->starRating_); }
  public function clearStarRating() { unset($this->starRating_); }
  public function hasStarRating() { return isset($this->starRating_); }
  public function getStarRating() { return $this->starRating_; }
  public function setStarRating($value) { $this->starRating_ = (float)$value; }
  
  // optional uint64 ratingsCount = 3;

  protected $ratingsCount_;
  public function resetRatingsCount() { unset($this->ratingsCount_); }
  public function clearRatingsCount() { unset($this->ratingsCount_); }
  public function hasRatingsCount() { return isset($this->ratingsCount_); }
  public function getRatingsCount() { return $this->ratingsCount_; }
  public function setRatingsCount($value) { $this->ratingsCount_ = (string)$value; }
  
  // optional uint64 oneStarRatings = 4;

  protected $oneStarRatings_;
  public function resetOneStarRatings() { unset($this->oneStarRatings_); }
  public function clearOneStarRatings() { unset($this->oneStarRatings_); }
  public function hasOneStarRatings() { return isset($this->oneStarRatings_); }
  public function getOneStarRatings() { return $this->oneStarRatings_; }
  public function setOneStarRatings($value) { $this->oneStarRatings_ = (string)$value; }
  
  // optional uint64 twoStarRatings = 5;

  protected $twoStarRatings_;
  public function resetTwoStarRatings() { unset($this->twoStarRatings_); }
  public function clearTwoStarRatings() { unset($this->twoStarRatings_); }
  public function hasTwoStarRatings() { return isset($this->twoStarRatings_); }
  public function getTwoStarRatings() { return $this->twoStarRatings_; }
  public function setTwoStarRatings($value) { $this->twoStarRatings_ = (string)$value; }
  
  // optional uint64 threeStarRatings = 6;

  protected $threeStarRatings_;
  public function resetThreeStarRatings() { unset($this->threeStarRatings_); }
  public function clearThreeStarRatings() { unset($this->threeStarRatings_); }
  public function hasThreeStarRatings() { return isset($this->threeStarRatings_); }
  public function getThreeStarRatings() { return $this->threeStarRatings_; }
  public function setThreeStarRatings($value) { $this->threeStarRatings_ = (string)$value; }
  
  // optional uint64 fourStarRatings = 7;

  protected $fourStarRatings_;
  public function resetFourStarRatings() { unset($this->fourStarRatings_); }
  public function clearFourStarRatings() { unset($this->fourStarRatings_); }
  public function hasFourStarRatings() { return isset($this->fourStarRatings_); }
  public function getFourStarRatings() { return $this->fourStarRatings_; }
  public function setFourStarRatings($value) { $this->fourStarRatings_ = (string)$value; }
  
  // optional uint64 fiveStarRatings = 8;

  protected $fiveStarRatings_;
  public function resetFiveStarRatings() { unset($this->fiveStarRatings_); }
  public function clearFiveStarRatings() { unset($this->fiveStarRatings_); }
  public function hasFiveStarRatings() { return isset($this->fiveStarRatings_); }
  public function getFiveStarRatings() { return $this->fiveStarRatings_; }
  public function setFiveStarRatings($value) { $this->fiveStarRatings_ = (string)$value; }
  
  // optional uint64 thumbsUpCount = 9;

  protected $thumbsUpCount_;
  public function resetThumbsUpCount() { unset($this->thumbsUpCount_); }
  public function clearThumbsUpCount() { unset($this->thumbsUpCount_); }
  public function hasThumbsUpCount() { return isset($this->thumbsUpCount_); }
  public function getThumbsUpCount() { return $this->thumbsUpCount_; }
  public function setThumbsUpCount($value) { $this->thumbsUpCount_ = (string)$value; }
  
  // optional uint64 thumbsDownCount = 10;

  protected $thumbsDownCount_;
  public function resetThumbsDownCount() { unset($this->thumbsDownCount_); }
  public function clearThumbsDownCount() { unset($this->thumbsDownCount_); }
  public function hasThumbsDownCount() { return isset($this->thumbsDownCount_); }
  public function getThumbsDownCount() { return $this->thumbsDownCount_; }
  public function setThumbsDownCount($value) { $this->thumbsDownCount_ = (string)$value; }
  
  // optional uint64 commentCount = 11;

  protected $commentCount_;
  public function resetCommentCount() { unset($this->commentCount_); }
  public function clearCommentCount() { unset($this->commentCount_); }
  public function hasCommentCount() { return isset($this->commentCount_); }
  public function getCommentCount() { return $this->commentCount_; }
  public function setCommentCount($value) { $this->commentCount_ = (string)$value; }
  
  // optional double bayesianMeanRating = 12;

  protected $bayesianMeanRating_;
  public function resetBayesianMeanRating() { unset($this->bayesianMeanRating_); }
  public function clearBayesianMeanRating() { unset($this->bayesianMeanRating_); }
  public function hasBayesianMeanRating() { return isset($this->bayesianMeanRating_); }
  public function getBayesianMeanRating() { return $this->bayesianMeanRating_; }
  public function setBayesianMeanRating($value) { $this->bayesianMeanRating_ = (float)$value; }
  
  // @@protoc_insertion_point(class_scope:AggregateRating)
}

// message DirectPurchase
class DirectPurchase {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("DirectPurchase: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->detailsUrl_ = $tmp;
          $limit-=$len;
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->purchaseDocid_ = $tmp;
          $limit-=$len;
          break;
        case 3:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->parentDocid_ = $tmp;
          $limit-=$len;
          break;
        case 4:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->offerType_ = $tmp;
          
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->detailsUrl_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, strlen((string)$this->detailsUrl_));
      fwrite($fp, (string)$this->detailsUrl_);
    }
    if (!is_null($this->purchaseDocid_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, strlen((string)$this->purchaseDocid_));
      fwrite($fp, (string)$this->purchaseDocid_);
    }
    if (!is_null($this->parentDocid_)) {
      fwrite($fp, "\x1a");
      Protobuf::write_varint($fp, strlen((string)$this->parentDocid_));
      fwrite($fp, (string)$this->parentDocid_);
    }
    if (!is_null($this->offerType_)) {
      fwrite($fp, " ");
      Protobuf::write_varint($fp, (int)$this->offerType_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->detailsUrl_)) {
      $l = strlen((string)$this->detailsUrl_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->purchaseDocid_)) {
      $l = strlen((string)$this->purchaseDocid_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->parentDocid_)) {
      $l = strlen((string)$this->parentDocid_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->offerType_)) {
      $size += 1 + Protobuf::size_varint($this->offerType_);
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('detailsUrl_', $this->detailsUrl_)
         . Protobuf::toString('purchaseDocid_', $this->purchaseDocid_)
         . Protobuf::toString('parentDocid_', $this->parentDocid_)
         . Protobuf::toString('offerType_', $this->offerType_);
  }
  
  // optional string detailsUrl = 1;

  protected $detailsUrl_;
  public function resetDetailsUrl() { unset($this->detailsUrl_); }
  public function clearDetailsUrl() { unset($this->detailsUrl_); }
  public function hasDetailsUrl() { return isset($this->detailsUrl_); }
  public function getDetailsUrl() { return $this->detailsUrl_; }
  public function setDetailsUrl($value) { $this->detailsUrl_ = (string)$value; }
  
  // optional string purchaseDocid = 2;

  protected $purchaseDocid_;
  public function resetPurchaseDocid() { unset($this->purchaseDocid_); }
  public function clearPurchaseDocid() { unset($this->purchaseDocid_); }
  public function hasPurchaseDocid() { return isset($this->purchaseDocid_); }
  public function getPurchaseDocid() { return $this->purchaseDocid_; }
  public function setPurchaseDocid($value) { $this->purchaseDocid_ = (string)$value; }
  
  // optional string parentDocid = 3;

  protected $parentDocid_;
  public function resetParentDocid() { unset($this->parentDocid_); }
  public function clearParentDocid() { unset($this->parentDocid_); }
  public function hasParentDocid() { return isset($this->parentDocid_); }
  public function getParentDocid() { return $this->parentDocid_; }
  public function setParentDocid($value) { $this->parentDocid_ = (string)$value; }
  
  // optional int32 offerType = 4;

  protected $offerType_;
  public function resetOfferType() { unset($this->offerType_); }
  public function clearOfferType() { unset($this->offerType_); }
  public function hasOfferType() { return isset($this->offerType_); }
  public function getOfferType() { return $this->offerType_; }
  public function setOfferType($value) { $this->offerType_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:DirectPurchase)
}

// message RedeemGiftCard
class RedeemGiftCard {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("RedeemGiftCard: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  public function size() {
    $size = 0;
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown);
  }
  
  // @@protoc_insertion_point(class_scope:RedeemGiftCard)
}

// message ResolvedLink
class ResolvedLink {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("ResolvedLink: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->detailsUrl_ = $tmp;
          $limit-=$len;
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->browseUrl_ = $tmp;
          $limit-=$len;
          break;
        case 3:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->searchUrl_ = $tmp;
          $limit-=$len;
          break;
        case 4:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->directPurchase_ = new DirectPurchase($fp, $len);
          ASSERT('$len == 0');
          break;
        case 5:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->homeUrl_ = $tmp;
          $limit-=$len;
          break;
        case 6:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->redeemGiftCard_ = new RedeemGiftCard($fp, $len);
          ASSERT('$len == 0');
          break;
        case 7:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->serverLogsCookie_ = $tmp;
          $limit-=$len;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->detailsUrl_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, strlen((string)$this->detailsUrl_));
      fwrite($fp, (string)$this->detailsUrl_);
    }
    if (!is_null($this->browseUrl_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, strlen((string)$this->browseUrl_));
      fwrite($fp, (string)$this->browseUrl_);
    }
    if (!is_null($this->searchUrl_)) {
      fwrite($fp, "\x1a");
      Protobuf::write_varint($fp, strlen((string)$this->searchUrl_));
      fwrite($fp, (string)$this->searchUrl_);
    }
    if (!is_null($this->directPurchase_)) {
      fwrite($fp, "\"");
      Protobuf::write_varint($fp, $this->directPurchase_->size()); // message
      $this->directPurchase_->write($fp);
    }
    if (!is_null($this->homeUrl_)) {
      fwrite($fp, "*");
      Protobuf::write_varint($fp, strlen((string)$this->homeUrl_));
      fwrite($fp, (string)$this->homeUrl_);
    }
    if (!is_null($this->redeemGiftCard_)) {
      fwrite($fp, "2");
      Protobuf::write_varint($fp, $this->redeemGiftCard_->size()); // message
      $this->redeemGiftCard_->write($fp);
    }
    if (!is_null($this->serverLogsCookie_)) {
      fwrite($fp, ":");
      Protobuf::write_varint($fp, strlen((string)$this->serverLogsCookie_));
      fwrite($fp, (string)$this->serverLogsCookie_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->detailsUrl_)) {
      $l = strlen((string)$this->detailsUrl_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->browseUrl_)) {
      $l = strlen((string)$this->browseUrl_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->searchUrl_)) {
      $l = strlen((string)$this->searchUrl_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->directPurchase_)) {
      $l = $this->directPurchase_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->homeUrl_)) {
      $l = strlen((string)$this->homeUrl_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->redeemGiftCard_)) {
      $l = $this->redeemGiftCard_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->serverLogsCookie_)) {
      $l = strlen((string)$this->serverLogsCookie_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('detailsUrl_', $this->detailsUrl_)
         . Protobuf::toString('browseUrl_', $this->browseUrl_)
         . Protobuf::toString('searchUrl_', $this->searchUrl_)
         . Protobuf::toString('directPurchase_', $this->directPurchase_)
         . Protobuf::toString('homeUrl_', $this->homeUrl_)
         . Protobuf::toString('redeemGiftCard_', $this->redeemGiftCard_)
         . Protobuf::toString('serverLogsCookie_', $this->serverLogsCookie_);
  }
  
  // optional string detailsUrl = 1;

  protected $detailsUrl_;
  public function resetDetailsUrl() { unset($this->detailsUrl_); }
  public function clearDetailsUrl() { unset($this->detailsUrl_); }
  public function hasDetailsUrl() { return isset($this->detailsUrl_); }
  public function getDetailsUrl() { return $this->detailsUrl_; }
  public function setDetailsUrl($value) { $this->detailsUrl_ = (string)$value; }
  
  // optional string browseUrl = 2;

  protected $browseUrl_;
  public function resetBrowseUrl() { unset($this->browseUrl_); }
  public function clearBrowseUrl() { unset($this->browseUrl_); }
  public function hasBrowseUrl() { return isset($this->browseUrl_); }
  public function getBrowseUrl() { return $this->browseUrl_; }
  public function setBrowseUrl($value) { $this->browseUrl_ = (string)$value; }
  
  // optional string searchUrl = 3;

  protected $searchUrl_;
  public function resetSearchUrl() { unset($this->searchUrl_); }
  public function clearSearchUrl() { unset($this->searchUrl_); }
  public function hasSearchUrl() { return isset($this->searchUrl_); }
  public function getSearchUrl() { return $this->searchUrl_; }
  public function setSearchUrl($value) { $this->searchUrl_ = (string)$value; }
  
  // optional .DirectPurchase directPurchase = 4;

  protected $directPurchase_;
  public function resetDirectPurchase() { unset($this->directPurchase_); }
  public function clearDirectPurchase() { unset($this->directPurchase_); }
  public function hasDirectPurchase() { return isset($this->directPurchase_); }
  public function getDirectPurchase() { return $this->directPurchase_; }
  public function setDirectPurchase(DirectPurchase $value) { $this->directPurchase_ = $value; }
  
  // optional string homeUrl = 5;

  protected $homeUrl_;
  public function resetHomeUrl() { unset($this->homeUrl_); }
  public function clearHomeUrl() { unset($this->homeUrl_); }
  public function hasHomeUrl() { return isset($this->homeUrl_); }
  public function getHomeUrl() { return $this->homeUrl_; }
  public function setHomeUrl($value) { $this->homeUrl_ = (string)$value; }
  
  // optional .RedeemGiftCard redeemGiftCard = 6;

  protected $redeemGiftCard_;
  public function resetRedeemGiftCard() { unset($this->redeemGiftCard_); }
  public function clearRedeemGiftCard() { unset($this->redeemGiftCard_); }
  public function hasRedeemGiftCard() { return isset($this->redeemGiftCard_); }
  public function getRedeemGiftCard() { return $this->redeemGiftCard_; }
  public function setRedeemGiftCard(RedeemGiftCard $value) { $this->redeemGiftCard_ = $value; }
  
  // optional bytes serverLogsCookie = 7;

  protected $serverLogsCookie_;
  public function resetServerLogsCookie() { unset($this->serverLogsCookie_); }
  public function clearServerLogsCookie() { unset($this->serverLogsCookie_); }
  public function hasServerLogsCookie() { return isset($this->serverLogsCookie_); }
  public function getServerLogsCookie() { return $this->serverLogsCookie_; }
  public function setServerLogsCookie($value) { $this->serverLogsCookie_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:ResolvedLink)
}

// message Payload
class Payload {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("Payload: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->listResponse_ = new ListResponse($fp, $len);
          ASSERT('$len == 0');
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->detailsResponse_ = new DetailsResponse($fp, $len);
          ASSERT('$len == 0');
          break;
        case 3:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->reviewResponse_ = new ReviewResponse($fp, $len);
          ASSERT('$len == 0');
          break;
        case 4:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->buyResponse_ = new BuyResponse($fp, $len);
          ASSERT('$len == 0');
          break;
        case 5:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->searchResponse_ = new SearchResponse($fp, $len);
          ASSERT('$len == 0');
          break;
        case 6:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->tocResponse_ = new TocResponse($fp, $len);
          ASSERT('$len == 0');
          break;
        case 7:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->browseResponse_ = new BrowseResponse($fp, $len);
          ASSERT('$len == 0');
          break;
        case 8:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->purchaseStatusResponse_ = new PurchaseStatusResponse($fp, $len);
          ASSERT('$len == 0');
          break;
        case 9:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->updateInstrumentResponse_ = new UpdateInstrumentResponse($fp, $len);
          ASSERT('$len == 0');
          break;
        case 10:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->logResponse_ = new LogResponse($fp, $len);
          ASSERT('$len == 0');
          break;
        case 11:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->checkInstrumentResponse_ = new CheckInstrumentResponse($fp, $len);
          ASSERT('$len == 0');
          break;
        case 12:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->plusOneResponse_ = new PlusOneResponse($fp, $len);
          ASSERT('$len == 0');
          break;
        case 13:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->flagContentResponse_ = new FlagContentResponse($fp, $len);
          ASSERT('$len == 0');
          break;
        case 14:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->ackNotificationResponse_ = new AckNotificationResponse($fp, $len);
          ASSERT('$len == 0');
          break;
        case 15:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->initiateAssociationResponse_ = new InitiateAssociationResponse($fp, $len);
          ASSERT('$len == 0');
          break;
        case 16:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->verifyAssociationResponse_ = new VerifyAssociationResponse($fp, $len);
          ASSERT('$len == 0');
          break;
        case 17:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->libraryReplicationResponse_ = new LibraryReplicationResponse($fp, $len);
          ASSERT('$len == 0');
          break;
        case 18:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->revokeResponse_ = new RevokeResponse($fp, $len);
          ASSERT('$len == 0');
          break;
        case 19:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->bulkDetailsResponse_ = new BulkDetailsResponse($fp, $len);
          ASSERT('$len == 0');
          break;
        case 20:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->resolveLinkResponse_ = new ResolvedLink($fp, $len);
          ASSERT('$len == 0');
          break;
        case 21:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->deliveryResponse_ = new DeliveryResponse($fp, $len);
          ASSERT('$len == 0');
          break;
        case 22:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->acceptTosResponse_ = new AcceptTosResponse($fp, $len);
          ASSERT('$len == 0');
          break;
        case 23:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->rateSuggestedContentResponse_ = new RateSuggestedContentResponse($fp, $len);
          ASSERT('$len == 0');
          break;
        case 24:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->checkPromoOfferResponse_ = new CheckPromoOfferResponse($fp, $len);
          ASSERT('$len == 0');
          break;
        case 25:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->instrumentSetupInfoResponse_ = new InstrumentSetupInfoResponse($fp, $len);
          ASSERT('$len == 0');
          break;
        case 26:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->redeemGiftCardResponse_ = new RedeemGiftCardResponse($fp, $len);
          ASSERT('$len == 0');
          break;
        case 27:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->modifyLibraryResponse_ = new ModifyLibraryResponse($fp, $len);
          ASSERT('$len == 0');
          break;
        case 28:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->uploadDeviceConfigResponse_ = new UploadDeviceConfigResponse($fp, $len);
          ASSERT('$len == 0');
          break;
        case 29:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->plusProfileResponse_ = new PlusProfileResponse($fp, $len);
          ASSERT('$len == 0');
          break;
        case 30:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->consumePurchaseResponse_ = new ConsumePurchaseResponse($fp, $len);
          ASSERT('$len == 0');
          break;
        case 31:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->billingProfileResponse_ = new BillingProfileResponse($fp, $len);
          ASSERT('$len == 0');
          break;
        case 32:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->preparePurchaseResponse_ = new PreparePurchaseResponse($fp, $len);
          ASSERT('$len == 0');
          break;
        case 33:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->commitPurchaseResponse_ = new CommitPurchaseResponse($fp, $len);
          ASSERT('$len == 0');
          break;
        case 34:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->debugSettingsResponse_ = new DebugSettingsResponse($fp, $len);
          ASSERT('$len == 0');
          break;
        case 35:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->checkIabPromoResponse_ = new CheckIabPromoResponse($fp, $len);
          ASSERT('$len == 0');
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->listResponse_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, $this->listResponse_->size()); // message
      $this->listResponse_->write($fp);
    }
    if (!is_null($this->detailsResponse_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, $this->detailsResponse_->size()); // message
      $this->detailsResponse_->write($fp);
    }
    if (!is_null($this->reviewResponse_)) {
      fwrite($fp, "\x1a");
      Protobuf::write_varint($fp, $this->reviewResponse_->size()); // message
      $this->reviewResponse_->write($fp);
    }
    if (!is_null($this->buyResponse_)) {
      fwrite($fp, "\"");
      Protobuf::write_varint($fp, $this->buyResponse_->size()); // message
      $this->buyResponse_->write($fp);
    }
    if (!is_null($this->searchResponse_)) {
      fwrite($fp, "*");
      Protobuf::write_varint($fp, $this->searchResponse_->size()); // message
      $this->searchResponse_->write($fp);
    }
    if (!is_null($this->tocResponse_)) {
      fwrite($fp, "2");
      Protobuf::write_varint($fp, $this->tocResponse_->size()); // message
      $this->tocResponse_->write($fp);
    }
    if (!is_null($this->browseResponse_)) {
      fwrite($fp, ":");
      Protobuf::write_varint($fp, $this->browseResponse_->size()); // message
      $this->browseResponse_->write($fp);
    }
    if (!is_null($this->purchaseStatusResponse_)) {
      fwrite($fp, "B");
      Protobuf::write_varint($fp, $this->purchaseStatusResponse_->size()); // message
      $this->purchaseStatusResponse_->write($fp);
    }
    if (!is_null($this->updateInstrumentResponse_)) {
      fwrite($fp, "J");
      Protobuf::write_varint($fp, $this->updateInstrumentResponse_->size()); // message
      $this->updateInstrumentResponse_->write($fp);
    }
    if (!is_null($this->logResponse_)) {
      fwrite($fp, "R");
      Protobuf::write_varint($fp, $this->logResponse_->size()); // message
      $this->logResponse_->write($fp);
    }
    if (!is_null($this->checkInstrumentResponse_)) {
      fwrite($fp, "Z");
      Protobuf::write_varint($fp, $this->checkInstrumentResponse_->size()); // message
      $this->checkInstrumentResponse_->write($fp);
    }
    if (!is_null($this->plusOneResponse_)) {
      fwrite($fp, "b");
      Protobuf::write_varint($fp, $this->plusOneResponse_->size()); // message
      $this->plusOneResponse_->write($fp);
    }
    if (!is_null($this->flagContentResponse_)) {
      fwrite($fp, "j");
      Protobuf::write_varint($fp, $this->flagContentResponse_->size()); // message
      $this->flagContentResponse_->write($fp);
    }
    if (!is_null($this->ackNotificationResponse_)) {
      fwrite($fp, "r");
      Protobuf::write_varint($fp, $this->ackNotificationResponse_->size()); // message
      $this->ackNotificationResponse_->write($fp);
    }
    if (!is_null($this->initiateAssociationResponse_)) {
      fwrite($fp, "z");
      Protobuf::write_varint($fp, $this->initiateAssociationResponse_->size()); // message
      $this->initiateAssociationResponse_->write($fp);
    }
    if (!is_null($this->verifyAssociationResponse_)) {
      fwrite($fp, "\x82\x01");
      Protobuf::write_varint($fp, $this->verifyAssociationResponse_->size()); // message
      $this->verifyAssociationResponse_->write($fp);
    }
    if (!is_null($this->libraryReplicationResponse_)) {
      fwrite($fp, "\x8a\x01");
      Protobuf::write_varint($fp, $this->libraryReplicationResponse_->size()); // message
      $this->libraryReplicationResponse_->write($fp);
    }
    if (!is_null($this->revokeResponse_)) {
      fwrite($fp, "\x92\x01");
      Protobuf::write_varint($fp, $this->revokeResponse_->size()); // message
      $this->revokeResponse_->write($fp);
    }
    if (!is_null($this->bulkDetailsResponse_)) {
      fwrite($fp, "\x9a\x01");
      Protobuf::write_varint($fp, $this->bulkDetailsResponse_->size()); // message
      $this->bulkDetailsResponse_->write($fp);
    }
    if (!is_null($this->resolveLinkResponse_)) {
      fwrite($fp, "\xa2\x01");
      Protobuf::write_varint($fp, $this->resolveLinkResponse_->size()); // message
      $this->resolveLinkResponse_->write($fp);
    }
    if (!is_null($this->deliveryResponse_)) {
      fwrite($fp, "\xaa\x01");
      Protobuf::write_varint($fp, $this->deliveryResponse_->size()); // message
      $this->deliveryResponse_->write($fp);
    }
    if (!is_null($this->acceptTosResponse_)) {
      fwrite($fp, "\xb2\x01");
      Protobuf::write_varint($fp, $this->acceptTosResponse_->size()); // message
      $this->acceptTosResponse_->write($fp);
    }
    if (!is_null($this->rateSuggestedContentResponse_)) {
      fwrite($fp, "\xba\x01");
      Protobuf::write_varint($fp, $this->rateSuggestedContentResponse_->size()); // message
      $this->rateSuggestedContentResponse_->write($fp);
    }
    if (!is_null($this->checkPromoOfferResponse_)) {
      fwrite($fp, "\xc2\x01");
      Protobuf::write_varint($fp, $this->checkPromoOfferResponse_->size()); // message
      $this->checkPromoOfferResponse_->write($fp);
    }
    if (!is_null($this->instrumentSetupInfoResponse_)) {
      fwrite($fp, "\xca\x01");
      Protobuf::write_varint($fp, $this->instrumentSetupInfoResponse_->size()); // message
      $this->instrumentSetupInfoResponse_->write($fp);
    }
    if (!is_null($this->redeemGiftCardResponse_)) {
      fwrite($fp, "\xd2\x01");
      Protobuf::write_varint($fp, $this->redeemGiftCardResponse_->size()); // message
      $this->redeemGiftCardResponse_->write($fp);
    }
    if (!is_null($this->modifyLibraryResponse_)) {
      fwrite($fp, "\xda\x01");
      Protobuf::write_varint($fp, $this->modifyLibraryResponse_->size()); // message
      $this->modifyLibraryResponse_->write($fp);
    }
    if (!is_null($this->uploadDeviceConfigResponse_)) {
      fwrite($fp, "\xe2\x01");
      Protobuf::write_varint($fp, $this->uploadDeviceConfigResponse_->size()); // message
      $this->uploadDeviceConfigResponse_->write($fp);
    }
    if (!is_null($this->plusProfileResponse_)) {
      fwrite($fp, "\xea\x01");
      Protobuf::write_varint($fp, $this->plusProfileResponse_->size()); // message
      $this->plusProfileResponse_->write($fp);
    }
    if (!is_null($this->consumePurchaseResponse_)) {
      fwrite($fp, "\xf2\x01");
      Protobuf::write_varint($fp, $this->consumePurchaseResponse_->size()); // message
      $this->consumePurchaseResponse_->write($fp);
    }
    if (!is_null($this->billingProfileResponse_)) {
      fwrite($fp, "\xfa\x01");
      Protobuf::write_varint($fp, $this->billingProfileResponse_->size()); // message
      $this->billingProfileResponse_->write($fp);
    }
    if (!is_null($this->preparePurchaseResponse_)) {
      fwrite($fp, "\x82\x02");
      Protobuf::write_varint($fp, $this->preparePurchaseResponse_->size()); // message
      $this->preparePurchaseResponse_->write($fp);
    }
    if (!is_null($this->commitPurchaseResponse_)) {
      fwrite($fp, "\x8a\x02");
      Protobuf::write_varint($fp, $this->commitPurchaseResponse_->size()); // message
      $this->commitPurchaseResponse_->write($fp);
    }
    if (!is_null($this->debugSettingsResponse_)) {
      fwrite($fp, "\x92\x02");
      Protobuf::write_varint($fp, $this->debugSettingsResponse_->size()); // message
      $this->debugSettingsResponse_->write($fp);
    }
    if (!is_null($this->checkIabPromoResponse_)) {
      fwrite($fp, "\x9a\x02");
      Protobuf::write_varint($fp, $this->checkIabPromoResponse_->size()); // message
      $this->checkIabPromoResponse_->write($fp);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->listResponse_)) {
      $l = $this->listResponse_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->detailsResponse_)) {
      $l = $this->detailsResponse_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->reviewResponse_)) {
      $l = $this->reviewResponse_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->buyResponse_)) {
      $l = $this->buyResponse_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->searchResponse_)) {
      $l = $this->searchResponse_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->tocResponse_)) {
      $l = $this->tocResponse_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->browseResponse_)) {
      $l = $this->browseResponse_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->purchaseStatusResponse_)) {
      $l = $this->purchaseStatusResponse_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->updateInstrumentResponse_)) {
      $l = $this->updateInstrumentResponse_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->logResponse_)) {
      $l = $this->logResponse_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->checkInstrumentResponse_)) {
      $l = $this->checkInstrumentResponse_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->plusOneResponse_)) {
      $l = $this->plusOneResponse_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->flagContentResponse_)) {
      $l = $this->flagContentResponse_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->ackNotificationResponse_)) {
      $l = $this->ackNotificationResponse_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->initiateAssociationResponse_)) {
      $l = $this->initiateAssociationResponse_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->verifyAssociationResponse_)) {
      $l = $this->verifyAssociationResponse_->size();
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->libraryReplicationResponse_)) {
      $l = $this->libraryReplicationResponse_->size();
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->revokeResponse_)) {
      $l = $this->revokeResponse_->size();
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->bulkDetailsResponse_)) {
      $l = $this->bulkDetailsResponse_->size();
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->resolveLinkResponse_)) {
      $l = $this->resolveLinkResponse_->size();
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->deliveryResponse_)) {
      $l = $this->deliveryResponse_->size();
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->acceptTosResponse_)) {
      $l = $this->acceptTosResponse_->size();
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->rateSuggestedContentResponse_)) {
      $l = $this->rateSuggestedContentResponse_->size();
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->checkPromoOfferResponse_)) {
      $l = $this->checkPromoOfferResponse_->size();
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->instrumentSetupInfoResponse_)) {
      $l = $this->instrumentSetupInfoResponse_->size();
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->redeemGiftCardResponse_)) {
      $l = $this->redeemGiftCardResponse_->size();
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->modifyLibraryResponse_)) {
      $l = $this->modifyLibraryResponse_->size();
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->uploadDeviceConfigResponse_)) {
      $l = $this->uploadDeviceConfigResponse_->size();
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->plusProfileResponse_)) {
      $l = $this->plusProfileResponse_->size();
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->consumePurchaseResponse_)) {
      $l = $this->consumePurchaseResponse_->size();
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->billingProfileResponse_)) {
      $l = $this->billingProfileResponse_->size();
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->preparePurchaseResponse_)) {
      $l = $this->preparePurchaseResponse_->size();
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->commitPurchaseResponse_)) {
      $l = $this->commitPurchaseResponse_->size();
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->debugSettingsResponse_)) {
      $l = $this->debugSettingsResponse_->size();
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->checkIabPromoResponse_)) {
      $l = $this->checkIabPromoResponse_->size();
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('listResponse_', $this->listResponse_)
         . Protobuf::toString('detailsResponse_', $this->detailsResponse_)
         . Protobuf::toString('reviewResponse_', $this->reviewResponse_)
         . Protobuf::toString('buyResponse_', $this->buyResponse_)
         . Protobuf::toString('searchResponse_', $this->searchResponse_)
         . Protobuf::toString('tocResponse_', $this->tocResponse_)
         . Protobuf::toString('browseResponse_', $this->browseResponse_)
         . Protobuf::toString('purchaseStatusResponse_', $this->purchaseStatusResponse_)
         . Protobuf::toString('updateInstrumentResponse_', $this->updateInstrumentResponse_)
         . Protobuf::toString('logResponse_', $this->logResponse_)
         . Protobuf::toString('checkInstrumentResponse_', $this->checkInstrumentResponse_)
         . Protobuf::toString('plusOneResponse_', $this->plusOneResponse_)
         . Protobuf::toString('flagContentResponse_', $this->flagContentResponse_)
         . Protobuf::toString('ackNotificationResponse_', $this->ackNotificationResponse_)
         . Protobuf::toString('initiateAssociationResponse_', $this->initiateAssociationResponse_)
         . Protobuf::toString('verifyAssociationResponse_', $this->verifyAssociationResponse_)
         . Protobuf::toString('libraryReplicationResponse_', $this->libraryReplicationResponse_)
         . Protobuf::toString('revokeResponse_', $this->revokeResponse_)
         . Protobuf::toString('bulkDetailsResponse_', $this->bulkDetailsResponse_)
         . Protobuf::toString('resolveLinkResponse_', $this->resolveLinkResponse_)
         . Protobuf::toString('deliveryResponse_', $this->deliveryResponse_)
         . Protobuf::toString('acceptTosResponse_', $this->acceptTosResponse_)
         . Protobuf::toString('rateSuggestedContentResponse_', $this->rateSuggestedContentResponse_)
         . Protobuf::toString('checkPromoOfferResponse_', $this->checkPromoOfferResponse_)
         . Protobuf::toString('instrumentSetupInfoResponse_', $this->instrumentSetupInfoResponse_)
         . Protobuf::toString('redeemGiftCardResponse_', $this->redeemGiftCardResponse_)
         . Protobuf::toString('modifyLibraryResponse_', $this->modifyLibraryResponse_)
         . Protobuf::toString('uploadDeviceConfigResponse_', $this->uploadDeviceConfigResponse_)
         . Protobuf::toString('plusProfileResponse_', $this->plusProfileResponse_)
         . Protobuf::toString('consumePurchaseResponse_', $this->consumePurchaseResponse_)
         . Protobuf::toString('billingProfileResponse_', $this->billingProfileResponse_)
         . Protobuf::toString('preparePurchaseResponse_', $this->preparePurchaseResponse_)
         . Protobuf::toString('commitPurchaseResponse_', $this->commitPurchaseResponse_)
         . Protobuf::toString('debugSettingsResponse_', $this->debugSettingsResponse_)
         . Protobuf::toString('checkIabPromoResponse_', $this->checkIabPromoResponse_);
  }
  
  // optional .ListResponse listResponse = 1;

  protected $listResponse_;
  public function resetListResponse() { unset($this->listResponse_); }
  public function clearListResponse() { unset($this->listResponse_); }
  public function hasListResponse() { return isset($this->listResponse_); }
  public function getListResponse() { return $this->listResponse_; }
  public function setListResponse(ListResponse $value) { $this->listResponse_ = $value; }
  
  // optional .DetailsResponse detailsResponse = 2;

  protected $detailsResponse_;
  public function resetDetailsResponse() { unset($this->detailsResponse_); }
  public function clearDetailsResponse() { unset($this->detailsResponse_); }
  public function hasDetailsResponse() { return isset($this->detailsResponse_); }
  public function getDetailsResponse() { return $this->detailsResponse_; }
  public function setDetailsResponse(DetailsResponse $value) { $this->detailsResponse_ = $value; }
  
  // optional .ReviewResponse reviewResponse = 3;

  protected $reviewResponse_;
  public function resetReviewResponse() { unset($this->reviewResponse_); }
  public function clearReviewResponse() { unset($this->reviewResponse_); }
  public function hasReviewResponse() { return isset($this->reviewResponse_); }
  public function getReviewResponse() { return $this->reviewResponse_; }
  public function setReviewResponse(ReviewResponse $value) { $this->reviewResponse_ = $value; }
  
  // optional .BuyResponse buyResponse = 4;

  protected $buyResponse_;
  public function resetBuyResponse() { unset($this->buyResponse_); }
  public function clearBuyResponse() { unset($this->buyResponse_); }
  public function hasBuyResponse() { return isset($this->buyResponse_); }
  public function getBuyResponse() { return $this->buyResponse_; }
  public function setBuyResponse(BuyResponse $value) { $this->buyResponse_ = $value; }
  
  // optional .SearchResponse searchResponse = 5;

  protected $searchResponse_;
  public function resetSearchResponse() { unset($this->searchResponse_); }
  public function clearSearchResponse() { unset($this->searchResponse_); }
  public function hasSearchResponse() { return isset($this->searchResponse_); }
  public function getSearchResponse() { return $this->searchResponse_; }
  public function setSearchResponse(SearchResponse $value) { $this->searchResponse_ = $value; }
  
  // optional .TocResponse tocResponse = 6;

  protected $tocResponse_;
  public function resetTocResponse() { unset($this->tocResponse_); }
  public function clearTocResponse() { unset($this->tocResponse_); }
  public function hasTocResponse() { return isset($this->tocResponse_); }
  public function getTocResponse() { return $this->tocResponse_; }
  public function setTocResponse(TocResponse $value) { $this->tocResponse_ = $value; }
  
  // optional .BrowseResponse browseResponse = 7;

  protected $browseResponse_;
  public function resetBrowseResponse() { unset($this->browseResponse_); }
  public function clearBrowseResponse() { unset($this->browseResponse_); }
  public function hasBrowseResponse() { return isset($this->browseResponse_); }
  public function getBrowseResponse() { return $this->browseResponse_; }
  public function setBrowseResponse(BrowseResponse $value) { $this->browseResponse_ = $value; }
  
  // optional .PurchaseStatusResponse purchaseStatusResponse = 8;

  protected $purchaseStatusResponse_;
  public function resetPurchaseStatusResponse() { unset($this->purchaseStatusResponse_); }
  public function clearPurchaseStatusResponse() { unset($this->purchaseStatusResponse_); }
  public function hasPurchaseStatusResponse() { return isset($this->purchaseStatusResponse_); }
  public function getPurchaseStatusResponse() { return $this->purchaseStatusResponse_; }
  public function setPurchaseStatusResponse(PurchaseStatusResponse $value) { $this->purchaseStatusResponse_ = $value; }
  
  // optional .UpdateInstrumentResponse updateInstrumentResponse = 9;

  protected $updateInstrumentResponse_;
  public function resetUpdateInstrumentResponse() { unset($this->updateInstrumentResponse_); }
  public function clearUpdateInstrumentResponse() { unset($this->updateInstrumentResponse_); }
  public function hasUpdateInstrumentResponse() { return isset($this->updateInstrumentResponse_); }
  public function getUpdateInstrumentResponse() { return $this->updateInstrumentResponse_; }
  public function setUpdateInstrumentResponse(UpdateInstrumentResponse $value) { $this->updateInstrumentResponse_ = $value; }
  
  // optional .LogResponse logResponse = 10;

  protected $logResponse_;
  public function resetLogResponse() { unset($this->logResponse_); }
  public function clearLogResponse() { unset($this->logResponse_); }
  public function hasLogResponse() { return isset($this->logResponse_); }
  public function getLogResponse() { return $this->logResponse_; }
  public function setLogResponse(LogResponse $value) { $this->logResponse_ = $value; }
  
  // optional .CheckInstrumentResponse checkInstrumentResponse = 11;

  protected $checkInstrumentResponse_;
  public function resetCheckInstrumentResponse() { unset($this->checkInstrumentResponse_); }
  public function clearCheckInstrumentResponse() { unset($this->checkInstrumentResponse_); }
  public function hasCheckInstrumentResponse() { return isset($this->checkInstrumentResponse_); }
  public function getCheckInstrumentResponse() { return $this->checkInstrumentResponse_; }
  public function setCheckInstrumentResponse(CheckInstrumentResponse $value) { $this->checkInstrumentResponse_ = $value; }
  
  // optional .PlusOneResponse plusOneResponse = 12;

  protected $plusOneResponse_;
  public function resetPlusOneResponse() { unset($this->plusOneResponse_); }
  public function clearPlusOneResponse() { unset($this->plusOneResponse_); }
  public function hasPlusOneResponse() { return isset($this->plusOneResponse_); }
  public function getPlusOneResponse() { return $this->plusOneResponse_; }
  public function setPlusOneResponse(PlusOneResponse $value) { $this->plusOneResponse_ = $value; }
  
  // optional .FlagContentResponse flagContentResponse = 13;

  protected $flagContentResponse_;
  public function resetFlagContentResponse() { unset($this->flagContentResponse_); }
  public function clearFlagContentResponse() { unset($this->flagContentResponse_); }
  public function hasFlagContentResponse() { return isset($this->flagContentResponse_); }
  public function getFlagContentResponse() { return $this->flagContentResponse_; }
  public function setFlagContentResponse(FlagContentResponse $value) { $this->flagContentResponse_ = $value; }
  
  // optional .AckNotificationResponse ackNotificationResponse = 14;

  protected $ackNotificationResponse_;
  public function resetAckNotificationResponse() { unset($this->ackNotificationResponse_); }
  public function clearAckNotificationResponse() { unset($this->ackNotificationResponse_); }
  public function hasAckNotificationResponse() { return isset($this->ackNotificationResponse_); }
  public function getAckNotificationResponse() { return $this->ackNotificationResponse_; }
  public function setAckNotificationResponse(AckNotificationResponse $value) { $this->ackNotificationResponse_ = $value; }
  
  // optional .InitiateAssociationResponse initiateAssociationResponse = 15;

  protected $initiateAssociationResponse_;
  public function resetInitiateAssociationResponse() { unset($this->initiateAssociationResponse_); }
  public function clearInitiateAssociationResponse() { unset($this->initiateAssociationResponse_); }
  public function hasInitiateAssociationResponse() { return isset($this->initiateAssociationResponse_); }
  public function getInitiateAssociationResponse() { return $this->initiateAssociationResponse_; }
  public function setInitiateAssociationResponse(InitiateAssociationResponse $value) { $this->initiateAssociationResponse_ = $value; }
  
  // optional .VerifyAssociationResponse verifyAssociationResponse = 16;

  protected $verifyAssociationResponse_;
  public function resetVerifyAssociationResponse() { unset($this->verifyAssociationResponse_); }
  public function clearVerifyAssociationResponse() { unset($this->verifyAssociationResponse_); }
  public function hasVerifyAssociationResponse() { return isset($this->verifyAssociationResponse_); }
  public function getVerifyAssociationResponse() { return $this->verifyAssociationResponse_; }
  public function setVerifyAssociationResponse(VerifyAssociationResponse $value) { $this->verifyAssociationResponse_ = $value; }
  
  // optional .LibraryReplicationResponse libraryReplicationResponse = 17;

  protected $libraryReplicationResponse_;
  public function resetLibraryReplicationResponse() { unset($this->libraryReplicationResponse_); }
  public function clearLibraryReplicationResponse() { unset($this->libraryReplicationResponse_); }
  public function hasLibraryReplicationResponse() { return isset($this->libraryReplicationResponse_); }
  public function getLibraryReplicationResponse() { return $this->libraryReplicationResponse_; }
  public function setLibraryReplicationResponse(LibraryReplicationResponse $value) { $this->libraryReplicationResponse_ = $value; }
  
  // optional .RevokeResponse revokeResponse = 18;

  protected $revokeResponse_;
  public function resetRevokeResponse() { unset($this->revokeResponse_); }
  public function clearRevokeResponse() { unset($this->revokeResponse_); }
  public function hasRevokeResponse() { return isset($this->revokeResponse_); }
  public function getRevokeResponse() { return $this->revokeResponse_; }
  public function setRevokeResponse(RevokeResponse $value) { $this->revokeResponse_ = $value; }
  
  // optional .BulkDetailsResponse bulkDetailsResponse = 19;

  protected $bulkDetailsResponse_;
  public function resetBulkDetailsResponse() { unset($this->bulkDetailsResponse_); }
  public function clearBulkDetailsResponse() { unset($this->bulkDetailsResponse_); }
  public function hasBulkDetailsResponse() { return isset($this->bulkDetailsResponse_); }
  public function getBulkDetailsResponse() { return $this->bulkDetailsResponse_; }
  public function setBulkDetailsResponse(BulkDetailsResponse $value) { $this->bulkDetailsResponse_ = $value; }
  
  // optional .ResolvedLink resolveLinkResponse = 20;

  protected $resolveLinkResponse_;
  public function resetResolveLinkResponse() { unset($this->resolveLinkResponse_); }
  public function clearResolveLinkResponse() { unset($this->resolveLinkResponse_); }
  public function hasResolveLinkResponse() { return isset($this->resolveLinkResponse_); }
  public function getResolveLinkResponse() { return $this->resolveLinkResponse_; }
  public function setResolveLinkResponse(ResolvedLink $value) { $this->resolveLinkResponse_ = $value; }
  
  // optional .DeliveryResponse deliveryResponse = 21;

  protected $deliveryResponse_;
  public function resetDeliveryResponse() { unset($this->deliveryResponse_); }
  public function clearDeliveryResponse() { unset($this->deliveryResponse_); }
  public function hasDeliveryResponse() { return isset($this->deliveryResponse_); }
  public function getDeliveryResponse() { return $this->deliveryResponse_; }
  public function setDeliveryResponse(DeliveryResponse $value) { $this->deliveryResponse_ = $value; }
  
  // optional .AcceptTosResponse acceptTosResponse = 22;

  protected $acceptTosResponse_;
  public function resetAcceptTosResponse() { unset($this->acceptTosResponse_); }
  public function clearAcceptTosResponse() { unset($this->acceptTosResponse_); }
  public function hasAcceptTosResponse() { return isset($this->acceptTosResponse_); }
  public function getAcceptTosResponse() { return $this->acceptTosResponse_; }
  public function setAcceptTosResponse(AcceptTosResponse $value) { $this->acceptTosResponse_ = $value; }
  
  // optional .RateSuggestedContentResponse rateSuggestedContentResponse = 23;

  protected $rateSuggestedContentResponse_;
  public function resetRateSuggestedContentResponse() { unset($this->rateSuggestedContentResponse_); }
  public function clearRateSuggestedContentResponse() { unset($this->rateSuggestedContentResponse_); }
  public function hasRateSuggestedContentResponse() { return isset($this->rateSuggestedContentResponse_); }
  public function getRateSuggestedContentResponse() { return $this->rateSuggestedContentResponse_; }
  public function setRateSuggestedContentResponse(RateSuggestedContentResponse $value) { $this->rateSuggestedContentResponse_ = $value; }
  
  // optional .CheckPromoOfferResponse checkPromoOfferResponse = 24;

  protected $checkPromoOfferResponse_;
  public function resetCheckPromoOfferResponse() { unset($this->checkPromoOfferResponse_); }
  public function clearCheckPromoOfferResponse() { unset($this->checkPromoOfferResponse_); }
  public function hasCheckPromoOfferResponse() { return isset($this->checkPromoOfferResponse_); }
  public function getCheckPromoOfferResponse() { return $this->checkPromoOfferResponse_; }
  public function setCheckPromoOfferResponse(CheckPromoOfferResponse $value) { $this->checkPromoOfferResponse_ = $value; }
  
  // optional .InstrumentSetupInfoResponse instrumentSetupInfoResponse = 25;

  protected $instrumentSetupInfoResponse_;
  public function resetInstrumentSetupInfoResponse() { unset($this->instrumentSetupInfoResponse_); }
  public function clearInstrumentSetupInfoResponse() { unset($this->instrumentSetupInfoResponse_); }
  public function hasInstrumentSetupInfoResponse() { return isset($this->instrumentSetupInfoResponse_); }
  public function getInstrumentSetupInfoResponse() { return $this->instrumentSetupInfoResponse_; }
  public function setInstrumentSetupInfoResponse(InstrumentSetupInfoResponse $value) { $this->instrumentSetupInfoResponse_ = $value; }
  
  // optional .RedeemGiftCardResponse redeemGiftCardResponse = 26;

  protected $redeemGiftCardResponse_;
  public function resetRedeemGiftCardResponse() { unset($this->redeemGiftCardResponse_); }
  public function clearRedeemGiftCardResponse() { unset($this->redeemGiftCardResponse_); }
  public function hasRedeemGiftCardResponse() { return isset($this->redeemGiftCardResponse_); }
  public function getRedeemGiftCardResponse() { return $this->redeemGiftCardResponse_; }
  public function setRedeemGiftCardResponse(RedeemGiftCardResponse $value) { $this->redeemGiftCardResponse_ = $value; }
  
  // optional .ModifyLibraryResponse modifyLibraryResponse = 27;

  protected $modifyLibraryResponse_;
  public function resetModifyLibraryResponse() { unset($this->modifyLibraryResponse_); }
  public function clearModifyLibraryResponse() { unset($this->modifyLibraryResponse_); }
  public function hasModifyLibraryResponse() { return isset($this->modifyLibraryResponse_); }
  public function getModifyLibraryResponse() { return $this->modifyLibraryResponse_; }
  public function setModifyLibraryResponse(ModifyLibraryResponse $value) { $this->modifyLibraryResponse_ = $value; }
  
  // optional .UploadDeviceConfigResponse uploadDeviceConfigResponse = 28;

  protected $uploadDeviceConfigResponse_;
  public function resetUploadDeviceConfigResponse() { unset($this->uploadDeviceConfigResponse_); }
  public function clearUploadDeviceConfigResponse() { unset($this->uploadDeviceConfigResponse_); }
  public function hasUploadDeviceConfigResponse() { return isset($this->uploadDeviceConfigResponse_); }
  public function getUploadDeviceConfigResponse() { return $this->uploadDeviceConfigResponse_; }
  public function setUploadDeviceConfigResponse(UploadDeviceConfigResponse $value) { $this->uploadDeviceConfigResponse_ = $value; }
  
  // optional .PlusProfileResponse plusProfileResponse = 29;

  protected $plusProfileResponse_;
  public function resetPlusProfileResponse() { unset($this->plusProfileResponse_); }
  public function clearPlusProfileResponse() { unset($this->plusProfileResponse_); }
  public function hasPlusProfileResponse() { return isset($this->plusProfileResponse_); }
  public function getPlusProfileResponse() { return $this->plusProfileResponse_; }
  public function setPlusProfileResponse(PlusProfileResponse $value) { $this->plusProfileResponse_ = $value; }
  
  // optional .ConsumePurchaseResponse consumePurchaseResponse = 30;

  protected $consumePurchaseResponse_;
  public function resetConsumePurchaseResponse() { unset($this->consumePurchaseResponse_); }
  public function clearConsumePurchaseResponse() { unset($this->consumePurchaseResponse_); }
  public function hasConsumePurchaseResponse() { return isset($this->consumePurchaseResponse_); }
  public function getConsumePurchaseResponse() { return $this->consumePurchaseResponse_; }
  public function setConsumePurchaseResponse(ConsumePurchaseResponse $value) { $this->consumePurchaseResponse_ = $value; }
  
  // optional .BillingProfileResponse billingProfileResponse = 31;

  protected $billingProfileResponse_;
  public function resetBillingProfileResponse() { unset($this->billingProfileResponse_); }
  public function clearBillingProfileResponse() { unset($this->billingProfileResponse_); }
  public function hasBillingProfileResponse() { return isset($this->billingProfileResponse_); }
  public function getBillingProfileResponse() { return $this->billingProfileResponse_; }
  public function setBillingProfileResponse(BillingProfileResponse $value) { $this->billingProfileResponse_ = $value; }
  
  // optional .PreparePurchaseResponse preparePurchaseResponse = 32;

  protected $preparePurchaseResponse_;
  public function resetPreparePurchaseResponse() { unset($this->preparePurchaseResponse_); }
  public function clearPreparePurchaseResponse() { unset($this->preparePurchaseResponse_); }
  public function hasPreparePurchaseResponse() { return isset($this->preparePurchaseResponse_); }
  public function getPreparePurchaseResponse() { return $this->preparePurchaseResponse_; }
  public function setPreparePurchaseResponse(PreparePurchaseResponse $value) { $this->preparePurchaseResponse_ = $value; }
  
  // optional .CommitPurchaseResponse commitPurchaseResponse = 33;

  protected $commitPurchaseResponse_;
  public function resetCommitPurchaseResponse() { unset($this->commitPurchaseResponse_); }
  public function clearCommitPurchaseResponse() { unset($this->commitPurchaseResponse_); }
  public function hasCommitPurchaseResponse() { return isset($this->commitPurchaseResponse_); }
  public function getCommitPurchaseResponse() { return $this->commitPurchaseResponse_; }
  public function setCommitPurchaseResponse(CommitPurchaseResponse $value) { $this->commitPurchaseResponse_ = $value; }
  
  // optional .DebugSettingsResponse debugSettingsResponse = 34;

  protected $debugSettingsResponse_;
  public function resetDebugSettingsResponse() { unset($this->debugSettingsResponse_); }
  public function clearDebugSettingsResponse() { unset($this->debugSettingsResponse_); }
  public function hasDebugSettingsResponse() { return isset($this->debugSettingsResponse_); }
  public function getDebugSettingsResponse() { return $this->debugSettingsResponse_; }
  public function setDebugSettingsResponse(DebugSettingsResponse $value) { $this->debugSettingsResponse_ = $value; }
  
  // optional .CheckIabPromoResponse checkIabPromoResponse = 35;

  protected $checkIabPromoResponse_;
  public function resetCheckIabPromoResponse() { unset($this->checkIabPromoResponse_); }
  public function clearCheckIabPromoResponse() { unset($this->checkIabPromoResponse_); }
  public function hasCheckIabPromoResponse() { return isset($this->checkIabPromoResponse_); }
  public function getCheckIabPromoResponse() { return $this->checkIabPromoResponse_; }
  public function setCheckIabPromoResponse(CheckIabPromoResponse $value) { $this->checkIabPromoResponse_ = $value; }
  
  // @@protoc_insertion_point(class_scope:Payload)
}

// message PreFetch
class PreFetch {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("PreFetch: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->url_ = $tmp;
          $limit-=$len;
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->response_ = $tmp;
          $limit-=$len;
          break;
        case 3:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->etag_ = $tmp;
          $limit-=$len;
          break;
        case 4:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->ttl_ = $tmp;
          
          break;
        case 5:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->softTtl_ = $tmp;
          
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->url_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, strlen((string)$this->url_));
      fwrite($fp, (string)$this->url_);
    }
    if (!is_null($this->response_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, strlen((string)$this->response_));
      fwrite($fp, (string)$this->response_);
    }
    if (!is_null($this->etag_)) {
      fwrite($fp, "\x1a");
      Protobuf::write_varint($fp, strlen((string)$this->etag_));
      fwrite($fp, (string)$this->etag_);
    }
    if (!is_null($this->ttl_)) {
      fwrite($fp, " ");
      Protobuf::write_varint($fp, (int)$this->ttl_);
    }
    if (!is_null($this->softTtl_)) {
      fwrite($fp, "(");
      Protobuf::write_varint($fp, (int)$this->softTtl_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->url_)) {
      $l = strlen((string)$this->url_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->response_)) {
      $l = strlen((string)$this->response_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->etag_)) {
      $l = strlen((string)$this->etag_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->ttl_)) {
      $size += 1 + Protobuf::size_varint($this->ttl_);
    }
    if (!is_null($this->softTtl_)) {
      $size += 1 + Protobuf::size_varint($this->softTtl_);
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('url_', $this->url_)
         . Protobuf::toString('response_', $this->response_)
         . Protobuf::toString('etag_', $this->etag_)
         . Protobuf::toString('ttl_', $this->ttl_)
         . Protobuf::toString('softTtl_', $this->softTtl_);
  }
  
  // optional string url = 1;

  protected $url_;
  public function resetUrl() { unset($this->url_); }
  public function clearUrl() { unset($this->url_); }
  public function hasUrl() { return isset($this->url_); }
  public function getUrl() { return $this->url_; }
  public function setUrl($value) { $this->url_ = (string)$value; }
  
  // optional bytes response = 2;

  protected $response_;
  public function resetResponse() { unset($this->response_); }
  public function clearResponse() { unset($this->response_); }
  public function hasResponse() { return isset($this->response_); }
  public function getResponse() { return $this->response_; }
  public function setResponse($value) { $this->response_ = (string)$value; }
  
  // optional string etag = 3;

  protected $etag_;
  public function resetEtag() { unset($this->etag_); }
  public function clearEtag() { unset($this->etag_); }
  public function hasEtag() { return isset($this->etag_); }
  public function getEtag() { return $this->etag_; }
  public function setEtag($value) { $this->etag_ = (string)$value; }
  
  // optional int64 ttl = 4;

  protected $ttl_;
  public function resetTtl() { unset($this->ttl_); }
  public function clearTtl() { unset($this->ttl_); }
  public function hasTtl() { return isset($this->ttl_); }
  public function getTtl() { return $this->ttl_; }
  public function setTtl($value) { $this->ttl_ = (string)$value; }
  
  // optional int64 softTtl = 5;

  protected $softTtl_;
  public function resetSoftTtl() { unset($this->softTtl_); }
  public function clearSoftTtl() { unset($this->softTtl_); }
  public function hasSoftTtl() { return isset($this->softTtl_); }
  public function getSoftTtl() { return $this->softTtl_; }
  public function setSoftTtl($value) { $this->softTtl_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:PreFetch)
}

// message ResponseWrapper
class ResponseWrapper {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("ResponseWrapper: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->payload_ = new Payload($fp, $len);
          ASSERT('$len == 0');
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->commands_ = new ServerCommands($fp, $len);
          ASSERT('$len == 0');
          break;
        case 3:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->preFetch_[] = new PreFetch($fp, $len);
          ASSERT('$len == 0');
          break;
        case 4:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->notification_[] = new Notification($fp, $len);
          ASSERT('$len == 0');
          break;
        case 5:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->serverMetadata_ = new ServerMetadata($fp, $len);
          ASSERT('$len == 0');
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->payload_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, $this->payload_->size()); // message
      $this->payload_->write($fp);
    }
    if (!is_null($this->commands_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, $this->commands_->size()); // message
      $this->commands_->write($fp);
    }
    if (!is_null($this->preFetch_))
      foreach($this->preFetch_ as $v) {
        fwrite($fp, "\x1a");
        Protobuf::write_varint($fp, $v->size()); // message
        $v->write($fp);
      }
    if (!is_null($this->notification_))
      foreach($this->notification_ as $v) {
        fwrite($fp, "\"");
        Protobuf::write_varint($fp, $v->size()); // message
        $v->write($fp);
      }
    if (!is_null($this->serverMetadata_)) {
      fwrite($fp, "*");
      Protobuf::write_varint($fp, $this->serverMetadata_->size()); // message
      $this->serverMetadata_->write($fp);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->payload_)) {
      $l = $this->payload_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->commands_)) {
      $l = $this->commands_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->preFetch_))
      foreach($this->preFetch_ as $v) {
        $l = $v->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
    if (!is_null($this->notification_))
      foreach($this->notification_ as $v) {
        $l = $v->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
    if (!is_null($this->serverMetadata_)) {
      $l = $this->serverMetadata_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('payload_', $this->payload_)
         . Protobuf::toString('commands_', $this->commands_)
         . Protobuf::toString('preFetch_', $this->preFetch_)
         . Protobuf::toString('notification_', $this->notification_)
         . Protobuf::toString('serverMetadata_', $this->serverMetadata_);
  }
  
  // optional .Payload payload = 1;

  protected $payload_;
  public function resetPayload() { unset($this->payload_); }
  public function clearPayload() { unset($this->payload_); }
  public function hasPayload() { return isset($this->payload_); }
  public function getPayload() { return $this->payload_; }
  public function setPayload(Payload $value) { $this->payload_ = $value; }
  
  // optional .ServerCommands commands = 2;

  protected $commands_;
  public function resetCommands() { unset($this->commands_); }
  public function clearCommands() { unset($this->commands_); }
  public function hasCommands() { return isset($this->commands_); }
  public function getCommands() { return $this->commands_; }
  public function setCommands(ServerCommands $value) { $this->commands_ = $value; }
  
  // repeated .PreFetch preFetch = 3;

  protected $preFetch_ = array();
  public function clearPreFetch() { $this->preFetch_ = array(); }
  public function getPreFetchCount() { return count($this->preFetch_); }
  public function hasPreFetch() { return (count($this->preFetch_) > 0); }
  public function indexOfPreFetch($value) { return array_search($value,$this->preFetch_);}
  public function removePreFetch($index) { unset($this->preFetch_[$index]); }
  public function removeValPreFetch($value) { $idx = array_search($value,$this->preFetch_); if($idx !== FALSE){unset($this->preFetch_[$idx]); }}
  public function removeValsPreFetch($values) { foreach($values as $value){$idx = array_search($value,$this->preFetch_); if($idx !== FALSE){unset($this->preFetch_[$idx]); }}}
  public function pushPreFetch($newvar) { return array_push($this->preFetch_,$newvar); }
  public function popPreFetch() { return array_pop($this->preFetch_); }
  public function shiftPreFetch() { return array_shift($this->preFetch_); }
  public function unshiftPreFetch($newvar) { return array_unshift($this->preFetch_,$newvar); }
  public function getPreFetch($index) { return $this->preFetch_[$index]; }
  public function getPreFetchArray() { return $this->preFetch_; }
  public function setPreFetch($index, $value) {$this->preFetch_[$index] = $value;	}
  public function addPreFetch($value) { $this->preFetch_[] = $value; }
  public function addAllPreFetch(array $values) { foreach($values as $value) {$this->preFetch_[] = $value;} }
  
  // repeated .Notification notification = 4;

  protected $notification_ = array();
  public function clearNotification() { $this->notification_ = array(); }
  public function getNotificationCount() { return count($this->notification_); }
  public function hasNotification() { return (count($this->notification_) > 0); }
  public function indexOfNotification($value) { return array_search($value,$this->notification_);}
  public function removeNotification($index) { unset($this->notification_[$index]); }
  public function removeValNotification($value) { $idx = array_search($value,$this->notification_); if($idx !== FALSE){unset($this->notification_[$idx]); }}
  public function removeValsNotification($values) { foreach($values as $value){$idx = array_search($value,$this->notification_); if($idx !== FALSE){unset($this->notification_[$idx]); }}}
  public function pushNotification($newvar) { return array_push($this->notification_,$newvar); }
  public function popNotification() { return array_pop($this->notification_); }
  public function shiftNotification() { return array_shift($this->notification_); }
  public function unshiftNotification($newvar) { return array_unshift($this->notification_,$newvar); }
  public function getNotification($index) { return $this->notification_[$index]; }
  public function getNotificationArray() { return $this->notification_; }
  public function setNotification($index, $value) {$this->notification_[$index] = $value;	}
  public function addNotification($value) { $this->notification_[] = $value; }
  public function addAllNotification(array $values) { foreach($values as $value) {$this->notification_[] = $value;} }
  
  // optional .ServerMetadata serverMetadata = 5;

  protected $serverMetadata_;
  public function resetServerMetadata() { unset($this->serverMetadata_); }
  public function clearServerMetadata() { unset($this->serverMetadata_); }
  public function hasServerMetadata() { return isset($this->serverMetadata_); }
  public function getServerMetadata() { return $this->serverMetadata_; }
  public function setServerMetadata(ServerMetadata $value) { $this->serverMetadata_ = $value; }
  
  // @@protoc_insertion_point(class_scope:ResponseWrapper)
}

// message ServerCommands
class ServerCommands {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("ServerCommands: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->clearCache_ = $tmp > 0 ? true : false;
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->displayErrorMessage_ = $tmp;
          $limit-=$len;
          break;
        case 3:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->logErrorStacktrace_ = $tmp;
          $limit-=$len;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->clearCache_)) {
      fwrite($fp, "\x08");
      Protobuf::write_varint($fp, (int)$this->clearCache_ ? 1 : 0);
    }
    if (!is_null($this->displayErrorMessage_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, strlen((string)$this->displayErrorMessage_));
      fwrite($fp, (string)$this->displayErrorMessage_);
    }
    if (!is_null($this->logErrorStacktrace_)) {
      fwrite($fp, "\x1a");
      Protobuf::write_varint($fp, strlen((string)$this->logErrorStacktrace_));
      fwrite($fp, (string)$this->logErrorStacktrace_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->clearCache_)) {
      $size += 2;
    }
    if (!is_null($this->displayErrorMessage_)) {
      $l = strlen((string)$this->displayErrorMessage_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->logErrorStacktrace_)) {
      $l = strlen((string)$this->logErrorStacktrace_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('clearCache_', $this->clearCache_)
         . Protobuf::toString('displayErrorMessage_', $this->displayErrorMessage_)
         . Protobuf::toString('logErrorStacktrace_', $this->logErrorStacktrace_);
  }
  
  // optional bool clearCache = 1;

  protected $clearCache_;
  public function resetClearCache() { unset($this->clearCache_); }
  public function clearClearCache() { unset($this->clearCache_); }
  public function hasClearCache() { return isset($this->clearCache_); }
  public function getClearCache() { return $this->clearCache_; }
  public function setClearCache($value) { $this->clearCache_ = (bool)$value; }
  
  // optional string displayErrorMessage = 2;

  protected $displayErrorMessage_;
  public function resetDisplayErrorMessage() { unset($this->displayErrorMessage_); }
  public function clearDisplayErrorMessage() { unset($this->displayErrorMessage_); }
  public function hasDisplayErrorMessage() { return isset($this->displayErrorMessage_); }
  public function getDisplayErrorMessage() { return $this->displayErrorMessage_; }
  public function setDisplayErrorMessage($value) { $this->displayErrorMessage_ = (string)$value; }
  
  // optional string logErrorStacktrace = 3;

  protected $logErrorStacktrace_;
  public function resetLogErrorStacktrace() { unset($this->logErrorStacktrace_); }
  public function clearLogErrorStacktrace() { unset($this->logErrorStacktrace_); }
  public function hasLogErrorStacktrace() { return isset($this->logErrorStacktrace_); }
  public function getLogErrorStacktrace() { return $this->logErrorStacktrace_; }
  public function setLogErrorStacktrace($value) { $this->logErrorStacktrace_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:ServerCommands)
}

// message ServerMetadata
class ServerMetadata {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("ServerMetadata: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->latencyMillis_ = $tmp;
          
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->latencyMillis_)) {
      fwrite($fp, "\x08");
      Protobuf::write_varint($fp, (int)$this->latencyMillis_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->latencyMillis_)) {
      $size += 1 + Protobuf::size_varint($this->latencyMillis_);
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('latencyMillis_', $this->latencyMillis_);
  }
  
  // optional int64 latencyMillis = 1;

  protected $latencyMillis_;
  public function resetLatencyMillis() { unset($this->latencyMillis_); }
  public function clearLatencyMillis() { unset($this->latencyMillis_); }
  public function hasLatencyMillis() { return isset($this->latencyMillis_); }
  public function getLatencyMillis() { return $this->latencyMillis_; }
  public function setLatencyMillis($value) { $this->latencyMillis_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:ServerMetadata)
}

// message GetReviewsResponse
class GetReviewsResponse {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("GetReviewsResponse: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->review_[] = new Review($fp, $len);
          ASSERT('$len == 0');
          break;
        case 2:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->matchingCount_ = $tmp;
          
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->review_))
      foreach($this->review_ as $v) {
        fwrite($fp, "\x0a");
        Protobuf::write_varint($fp, $v->size()); // message
        $v->write($fp);
      }
    if (!is_null($this->matchingCount_)) {
      fwrite($fp, "\x10");
      Protobuf::write_varint($fp, (int)$this->matchingCount_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->review_))
      foreach($this->review_ as $v) {
        $l = $v->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
    if (!is_null($this->matchingCount_)) {
      $size += 1 + Protobuf::size_varint($this->matchingCount_);
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('review_', $this->review_)
         . Protobuf::toString('matchingCount_', $this->matchingCount_);
  }
  
  // repeated .Review review = 1;

  protected $review_ = array();
  public function clearReview() { $this->review_ = array(); }
  public function getReviewCount() { return count($this->review_); }
  public function hasReview() { return (count($this->review_) > 0); }
  public function indexOfReview($value) { return array_search($value,$this->review_);}
  public function removeReview($index) { unset($this->review_[$index]); }
  public function removeValReview($value) { $idx = array_search($value,$this->review_); if($idx !== FALSE){unset($this->review_[$idx]); }}
  public function removeValsReview($values) { foreach($values as $value){$idx = array_search($value,$this->review_); if($idx !== FALSE){unset($this->review_[$idx]); }}}
  public function pushReview($newvar) { return array_push($this->review_,$newvar); }
  public function popReview() { return array_pop($this->review_); }
  public function shiftReview() { return array_shift($this->review_); }
  public function unshiftReview($newvar) { return array_unshift($this->review_,$newvar); }
  public function getReview($index) { return $this->review_[$index]; }
  public function getReviewArray() { return $this->review_; }
  public function setReview($index, $value) {$this->review_[$index] = $value;	}
  public function addReview($value) { $this->review_[] = $value; }
  public function addAllReview(array $values) { foreach($values as $value) {$this->review_[] = $value;} }
  
  // optional int64 matchingCount = 2;

  protected $matchingCount_;
  public function resetMatchingCount() { unset($this->matchingCount_); }
  public function clearMatchingCount() { unset($this->matchingCount_); }
  public function hasMatchingCount() { return isset($this->matchingCount_); }
  public function getMatchingCount() { return $this->matchingCount_; }
  public function setMatchingCount($value) { $this->matchingCount_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:GetReviewsResponse)
}

// message Review
class Review {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("Review: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->authorName_ = $tmp;
          $limit-=$len;
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->url_ = $tmp;
          $limit-=$len;
          break;
        case 3:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->source_ = $tmp;
          $limit-=$len;
          break;
        case 4:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->documentVersion_ = $tmp;
          $limit-=$len;
          break;
        case 5:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->timestampMsec_ = $tmp;
          
          break;
        case 6:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->starRating_ = $tmp;
          
          break;
        case 7:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->title_ = $tmp;
          $limit-=$len;
          break;
        case 8:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->comment_ = $tmp;
          $limit-=$len;
          break;
        case 9:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->commentId_ = $tmp;
          $limit-=$len;
          break;
        case 19:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->deviceName_ = $tmp;
          $limit-=$len;
          break;
        case 29:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->replyText_ = $tmp;
          $limit-=$len;
          break;
        case 30:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->replyTimestampMsec_ = $tmp;
          
          break;
        case 31:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->plusProfile_ = new PlusProfile($fp, $len);
          ASSERT('$len == 0');
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->authorName_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, strlen((string)$this->authorName_));
      fwrite($fp, (string)$this->authorName_);
    }
    if (!is_null($this->url_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, strlen((string)$this->url_));
      fwrite($fp, (string)$this->url_);
    }
    if (!is_null($this->source_)) {
      fwrite($fp, "\x1a");
      Protobuf::write_varint($fp, strlen((string)$this->source_));
      fwrite($fp, (string)$this->source_);
    }
    if (!is_null($this->documentVersion_)) {
      fwrite($fp, "\"");
      Protobuf::write_varint($fp, strlen((string)$this->documentVersion_));
      fwrite($fp, (string)$this->documentVersion_);
    }
    if (!is_null($this->timestampMsec_)) {
      fwrite($fp, "(");
      Protobuf::write_varint($fp, (int)$this->timestampMsec_);
    }
    if (!is_null($this->starRating_)) {
      fwrite($fp, "0");
      Protobuf::write_varint($fp, (int)$this->starRating_);
    }
    if (!is_null($this->title_)) {
      fwrite($fp, ":");
      Protobuf::write_varint($fp, strlen((string)$this->title_));
      fwrite($fp, (string)$this->title_);
    }
    if (!is_null($this->comment_)) {
      fwrite($fp, "B");
      Protobuf::write_varint($fp, strlen((string)$this->comment_));
      fwrite($fp, (string)$this->comment_);
    }
    if (!is_null($this->commentId_)) {
      fwrite($fp, "J");
      Protobuf::write_varint($fp, strlen((string)$this->commentId_));
      fwrite($fp, (string)$this->commentId_);
    }
    if (!is_null($this->deviceName_)) {
      fwrite($fp, "\x9a\x01");
      Protobuf::write_varint($fp, strlen((string)$this->deviceName_));
      fwrite($fp, (string)$this->deviceName_);
    }
    if (!is_null($this->replyText_)) {
      fwrite($fp, "\xea\x01");
      Protobuf::write_varint($fp, strlen((string)$this->replyText_));
      fwrite($fp, (string)$this->replyText_);
    }
    if (!is_null($this->replyTimestampMsec_)) {
      fwrite($fp, "\xf0\x01");
      Protobuf::write_varint($fp, (int)$this->replyTimestampMsec_);
    }
    if (!is_null($this->plusProfile_)) {
      fwrite($fp, "\xfa\x01");
      Protobuf::write_varint($fp, $this->plusProfile_->size()); // message
      $this->plusProfile_->write($fp);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->authorName_)) {
      $l = strlen((string)$this->authorName_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->url_)) {
      $l = strlen((string)$this->url_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->source_)) {
      $l = strlen((string)$this->source_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->documentVersion_)) {
      $l = strlen((string)$this->documentVersion_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->timestampMsec_)) {
      $size += 1 + Protobuf::size_varint($this->timestampMsec_);
    }
    if (!is_null($this->starRating_)) {
      $size += 1 + Protobuf::size_varint($this->starRating_);
    }
    if (!is_null($this->title_)) {
      $l = strlen((string)$this->title_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->comment_)) {
      $l = strlen((string)$this->comment_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->commentId_)) {
      $l = strlen((string)$this->commentId_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->deviceName_)) {
      $l = strlen((string)$this->deviceName_);
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->replyText_)) {
      $l = strlen((string)$this->replyText_);
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->replyTimestampMsec_)) {
      $size += 2 + Protobuf::size_varint($this->replyTimestampMsec_);
    }
    if (!is_null($this->plusProfile_)) {
      $l = $this->plusProfile_->size();
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('authorName_', $this->authorName_)
         . Protobuf::toString('url_', $this->url_)
         . Protobuf::toString('source_', $this->source_)
         . Protobuf::toString('documentVersion_', $this->documentVersion_)
         . Protobuf::toString('timestampMsec_', $this->timestampMsec_)
         . Protobuf::toString('starRating_', $this->starRating_)
         . Protobuf::toString('title_', $this->title_)
         . Protobuf::toString('comment_', $this->comment_)
         . Protobuf::toString('commentId_', $this->commentId_)
         . Protobuf::toString('deviceName_', $this->deviceName_)
         . Protobuf::toString('replyText_', $this->replyText_)
         . Protobuf::toString('replyTimestampMsec_', $this->replyTimestampMsec_)
         . Protobuf::toString('plusProfile_', $this->plusProfile_);
  }
  
  // optional string authorName = 1;

  protected $authorName_;
  public function resetAuthorName() { unset($this->authorName_); }
  public function clearAuthorName() { unset($this->authorName_); }
  public function hasAuthorName() { return isset($this->authorName_); }
  public function getAuthorName() { return $this->authorName_; }
  public function setAuthorName($value) { $this->authorName_ = (string)$value; }
  
  // optional string url = 2;

  protected $url_;
  public function resetUrl() { unset($this->url_); }
  public function clearUrl() { unset($this->url_); }
  public function hasUrl() { return isset($this->url_); }
  public function getUrl() { return $this->url_; }
  public function setUrl($value) { $this->url_ = (string)$value; }
  
  // optional string source = 3;

  protected $source_;
  public function resetSource() { unset($this->source_); }
  public function clearSource() { unset($this->source_); }
  public function hasSource() { return isset($this->source_); }
  public function getSource() { return $this->source_; }
  public function setSource($value) { $this->source_ = (string)$value; }
  
  // optional string documentVersion = 4;

  protected $documentVersion_;
  public function resetDocumentVersion() { unset($this->documentVersion_); }
  public function clearDocumentVersion() { unset($this->documentVersion_); }
  public function hasDocumentVersion() { return isset($this->documentVersion_); }
  public function getDocumentVersion() { return $this->documentVersion_; }
  public function setDocumentVersion($value) { $this->documentVersion_ = (string)$value; }
  
  // optional int64 timestampMsec = 5;

  protected $timestampMsec_;
  public function resetTimestampMsec() { unset($this->timestampMsec_); }
  public function clearTimestampMsec() { unset($this->timestampMsec_); }
  public function hasTimestampMsec() { return isset($this->timestampMsec_); }
  public function getTimestampMsec() { return $this->timestampMsec_; }
  public function setTimestampMsec($value) { $this->timestampMsec_ = (string)$value; }
  
  // optional int32 starRating = 6;

  protected $starRating_;
  public function resetStarRating() { unset($this->starRating_); }
  public function clearStarRating() { unset($this->starRating_); }
  public function hasStarRating() { return isset($this->starRating_); }
  public function getStarRating() { return $this->starRating_; }
  public function setStarRating($value) { $this->starRating_ = (string)$value; }
  
  // optional string title = 7;

  protected $title_;
  public function resetTitle() { unset($this->title_); }
  public function clearTitle() { unset($this->title_); }
  public function hasTitle() { return isset($this->title_); }
  public function getTitle() { return $this->title_; }
  public function setTitle($value) { $this->title_ = (string)$value; }
  
  // optional string comment = 8;

  protected $comment_;
  public function resetComment() { unset($this->comment_); }
  public function clearComment() { unset($this->comment_); }
  public function hasComment() { return isset($this->comment_); }
  public function getComment() { return $this->comment_; }
  public function setComment($value) { $this->comment_ = (string)$value; }
  
  // optional string commentId = 9;

  protected $commentId_;
  public function resetCommentId() { unset($this->commentId_); }
  public function clearCommentId() { unset($this->commentId_); }
  public function hasCommentId() { return isset($this->commentId_); }
  public function getCommentId() { return $this->commentId_; }
  public function setCommentId($value) { $this->commentId_ = (string)$value; }
  
  // optional string deviceName = 19;

  protected $deviceName_;
  public function resetDeviceName() { unset($this->deviceName_); }
  public function clearDeviceName() { unset($this->deviceName_); }
  public function hasDeviceName() { return isset($this->deviceName_); }
  public function getDeviceName() { return $this->deviceName_; }
  public function setDeviceName($value) { $this->deviceName_ = (string)$value; }
  
  // optional string replyText = 29;

  protected $replyText_;
  public function resetReplyText() { unset($this->replyText_); }
  public function clearReplyText() { unset($this->replyText_); }
  public function hasReplyText() { return isset($this->replyText_); }
  public function getReplyText() { return $this->replyText_; }
  public function setReplyText($value) { $this->replyText_ = (string)$value; }
  
  // optional int64 replyTimestampMsec = 30;

  protected $replyTimestampMsec_;
  public function resetReplyTimestampMsec() { unset($this->replyTimestampMsec_); }
  public function clearReplyTimestampMsec() { unset($this->replyTimestampMsec_); }
  public function hasReplyTimestampMsec() { return isset($this->replyTimestampMsec_); }
  public function getReplyTimestampMsec() { return $this->replyTimestampMsec_; }
  public function setReplyTimestampMsec($value) { $this->replyTimestampMsec_ = (string)$value; }
  
  // optional .PlusProfile plusProfile = 31;

  protected $plusProfile_;
  public function resetPlusProfile() { unset($this->plusProfile_); }
  public function clearPlusProfile() { unset($this->plusProfile_); }
  public function hasPlusProfile() { return isset($this->plusProfile_); }
  public function getPlusProfile() { return $this->plusProfile_; }
  public function setPlusProfile(PlusProfile $value) { $this->plusProfile_ = $value; }
  
  // @@protoc_insertion_point(class_scope:Review)
}

// message ReviewResponse
class ReviewResponse {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("ReviewResponse: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->getResponse_ = new GetReviewsResponse($fp, $len);
          ASSERT('$len == 0');
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->nextPageUrl_ = $tmp;
          $limit-=$len;
          break;
        case 3:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->updatedReview_ = new Review($fp, $len);
          ASSERT('$len == 0');
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->getResponse_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, $this->getResponse_->size()); // message
      $this->getResponse_->write($fp);
    }
    if (!is_null($this->nextPageUrl_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, strlen((string)$this->nextPageUrl_));
      fwrite($fp, (string)$this->nextPageUrl_);
    }
    if (!is_null($this->updatedReview_)) {
      fwrite($fp, "\x1a");
      Protobuf::write_varint($fp, $this->updatedReview_->size()); // message
      $this->updatedReview_->write($fp);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->getResponse_)) {
      $l = $this->getResponse_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->nextPageUrl_)) {
      $l = strlen((string)$this->nextPageUrl_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->updatedReview_)) {
      $l = $this->updatedReview_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('getResponse_', $this->getResponse_)
         . Protobuf::toString('nextPageUrl_', $this->nextPageUrl_)
         . Protobuf::toString('updatedReview_', $this->updatedReview_);
  }
  
  // optional .GetReviewsResponse getResponse = 1;

  protected $getResponse_;
  public function resetGetResponse() { unset($this->getResponse_); }
  public function clearGetResponse() { unset($this->getResponse_); }
  public function hasGetResponse() { return isset($this->getResponse_); }
  public function getGetResponse() { return $this->getResponse_; }
  public function setGetResponse(GetReviewsResponse $value) { $this->getResponse_ = $value; }
  
  // optional string nextPageUrl = 2;

  protected $nextPageUrl_;
  public function resetNextPageUrl() { unset($this->nextPageUrl_); }
  public function clearNextPageUrl() { unset($this->nextPageUrl_); }
  public function hasNextPageUrl() { return isset($this->nextPageUrl_); }
  public function getNextPageUrl() { return $this->nextPageUrl_; }
  public function setNextPageUrl($value) { $this->nextPageUrl_ = (string)$value; }
  
  // optional .Review updatedReview = 3;

  protected $updatedReview_;
  public function resetUpdatedReview() { unset($this->updatedReview_); }
  public function clearUpdatedReview() { unset($this->updatedReview_); }
  public function hasUpdatedReview() { return isset($this->updatedReview_); }
  public function getUpdatedReview() { return $this->updatedReview_; }
  public function setUpdatedReview(Review $value) { $this->updatedReview_ = $value; }
  
  // @@protoc_insertion_point(class_scope:ReviewResponse)
}

// message RevokeResponse
class RevokeResponse {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("RevokeResponse: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->libraryUpdate_ = new LibraryUpdate($fp, $len);
          ASSERT('$len == 0');
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->libraryUpdate_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, $this->libraryUpdate_->size()); // message
      $this->libraryUpdate_->write($fp);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->libraryUpdate_)) {
      $l = $this->libraryUpdate_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('libraryUpdate_', $this->libraryUpdate_);
  }
  
  // optional .LibraryUpdate libraryUpdate = 1;

  protected $libraryUpdate_;
  public function resetLibraryUpdate() { unset($this->libraryUpdate_); }
  public function clearLibraryUpdate() { unset($this->libraryUpdate_); }
  public function hasLibraryUpdate() { return isset($this->libraryUpdate_); }
  public function getLibraryUpdate() { return $this->libraryUpdate_; }
  public function setLibraryUpdate(LibraryUpdate $value) { $this->libraryUpdate_ = $value; }
  
  // @@protoc_insertion_point(class_scope:RevokeResponse)
}

// message RelatedSearch
class RelatedSearch {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("RelatedSearch: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->searchUrl_ = $tmp;
          $limit-=$len;
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->header_ = $tmp;
          $limit-=$len;
          break;
        case 3:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->backendId_ = $tmp;
          
          break;
        case 4:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->docType_ = $tmp;
          
          break;
        case 5:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->current_ = $tmp > 0 ? true : false;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->searchUrl_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, strlen((string)$this->searchUrl_));
      fwrite($fp, (string)$this->searchUrl_);
    }
    if (!is_null($this->header_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, strlen((string)$this->header_));
      fwrite($fp, (string)$this->header_);
    }
    if (!is_null($this->backendId_)) {
      fwrite($fp, "\x18");
      Protobuf::write_varint($fp, (int)$this->backendId_);
    }
    if (!is_null($this->docType_)) {
      fwrite($fp, " ");
      Protobuf::write_varint($fp, (int)$this->docType_);
    }
    if (!is_null($this->current_)) {
      fwrite($fp, "(");
      Protobuf::write_varint($fp, (int)$this->current_ ? 1 : 0);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->searchUrl_)) {
      $l = strlen((string)$this->searchUrl_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->header_)) {
      $l = strlen((string)$this->header_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->backendId_)) {
      $size += 1 + Protobuf::size_varint($this->backendId_);
    }
    if (!is_null($this->docType_)) {
      $size += 1 + Protobuf::size_varint($this->docType_);
    }
    if (!is_null($this->current_)) {
      $size += 2;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('searchUrl_', $this->searchUrl_)
         . Protobuf::toString('header_', $this->header_)
         . Protobuf::toString('backendId_', $this->backendId_)
         . Protobuf::toString('docType_', $this->docType_)
         . Protobuf::toString('current_', $this->current_);
  }
  
  // optional string searchUrl = 1;

  protected $searchUrl_;
  public function resetSearchUrl() { unset($this->searchUrl_); }
  public function clearSearchUrl() { unset($this->searchUrl_); }
  public function hasSearchUrl() { return isset($this->searchUrl_); }
  public function getSearchUrl() { return $this->searchUrl_; }
  public function setSearchUrl($value) { $this->searchUrl_ = (string)$value; }
  
  // optional string header = 2;

  protected $header_;
  public function resetHeader() { unset($this->header_); }
  public function clearHeader() { unset($this->header_); }
  public function hasHeader() { return isset($this->header_); }
  public function getHeader() { return $this->header_; }
  public function setHeader($value) { $this->header_ = (string)$value; }
  
  // optional int32 backendId = 3;

  protected $backendId_;
  public function resetBackendId() { unset($this->backendId_); }
  public function clearBackendId() { unset($this->backendId_); }
  public function hasBackendId() { return isset($this->backendId_); }
  public function getBackendId() { return $this->backendId_; }
  public function setBackendId($value) { $this->backendId_ = (string)$value; }
  
  // optional int32 docType = 4;

  protected $docType_;
  public function resetDocType() { unset($this->docType_); }
  public function clearDocType() { unset($this->docType_); }
  public function hasDocType() { return isset($this->docType_); }
  public function getDocType() { return $this->docType_; }
  public function setDocType($value) { $this->docType_ = (string)$value; }
  
  // optional bool current = 5;

  protected $current_;
  public function resetCurrent() { unset($this->current_); }
  public function clearCurrent() { unset($this->current_); }
  public function hasCurrent() { return isset($this->current_); }
  public function getCurrent() { return $this->current_; }
  public function setCurrent($value) { $this->current_ = (bool)$value; }
  
  // @@protoc_insertion_point(class_scope:RelatedSearch)
}

// message SearchResponse
class SearchResponse {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("SearchResponse: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->originalQuery_ = $tmp;
          $limit-=$len;
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->suggestedQuery_ = $tmp;
          $limit-=$len;
          break;
        case 3:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->aggregateQuery_ = $tmp > 0 ? true : false;
          break;
        case 4:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->bucket_[] = new Bucket($fp, $len);
          ASSERT('$len == 0');
          break;
        case 5:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->doc_[] = new DocV2($fp, $len);
          ASSERT('$len == 0');
          break;
        case 6:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->relatedSearch_[] = new RelatedSearch($fp, $len);
          ASSERT('$len == 0');
          break;
        case 7:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->serverLogsCookie_ = $tmp;
          $limit-=$len;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->originalQuery_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, strlen((string)$this->originalQuery_));
      fwrite($fp, (string)$this->originalQuery_);
    }
    if (!is_null($this->suggestedQuery_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, strlen((string)$this->suggestedQuery_));
      fwrite($fp, (string)$this->suggestedQuery_);
    }
    if (!is_null($this->aggregateQuery_)) {
      fwrite($fp, "\x18");
      Protobuf::write_varint($fp, (int)$this->aggregateQuery_ ? 1 : 0);
    }
    if (!is_null($this->bucket_))
      foreach($this->bucket_ as $v) {
        fwrite($fp, "\"");
        Protobuf::write_varint($fp, $v->size()); // message
        $v->write($fp);
      }
    if (!is_null($this->doc_))
      foreach($this->doc_ as $v) {
        fwrite($fp, "*");
        Protobuf::write_varint($fp, $v->size()); // message
        $v->write($fp);
      }
    if (!is_null($this->relatedSearch_))
      foreach($this->relatedSearch_ as $v) {
        fwrite($fp, "2");
        Protobuf::write_varint($fp, $v->size()); // message
        $v->write($fp);
      }
    if (!is_null($this->serverLogsCookie_)) {
      fwrite($fp, ":");
      Protobuf::write_varint($fp, strlen((string)$this->serverLogsCookie_));
      fwrite($fp, (string)$this->serverLogsCookie_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->originalQuery_)) {
      $l = strlen((string)$this->originalQuery_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->suggestedQuery_)) {
      $l = strlen((string)$this->suggestedQuery_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->aggregateQuery_)) {
      $size += 2;
    }
    if (!is_null($this->bucket_))
      foreach($this->bucket_ as $v) {
        $l = $v->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
    if (!is_null($this->doc_))
      foreach($this->doc_ as $v) {
        $l = $v->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
    if (!is_null($this->relatedSearch_))
      foreach($this->relatedSearch_ as $v) {
        $l = $v->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
    if (!is_null($this->serverLogsCookie_)) {
      $l = strlen((string)$this->serverLogsCookie_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('originalQuery_', $this->originalQuery_)
         . Protobuf::toString('suggestedQuery_', $this->suggestedQuery_)
         . Protobuf::toString('aggregateQuery_', $this->aggregateQuery_)
         . Protobuf::toString('bucket_', $this->bucket_)
         . Protobuf::toString('doc_', $this->doc_)
         . Protobuf::toString('relatedSearch_', $this->relatedSearch_)
         . Protobuf::toString('serverLogsCookie_', $this->serverLogsCookie_);
  }
  
  // optional string originalQuery = 1;

  protected $originalQuery_;
  public function resetOriginalQuery() { unset($this->originalQuery_); }
  public function clearOriginalQuery() { unset($this->originalQuery_); }
  public function hasOriginalQuery() { return isset($this->originalQuery_); }
  public function getOriginalQuery() { return $this->originalQuery_; }
  public function setOriginalQuery($value) { $this->originalQuery_ = (string)$value; }
  
  // optional string suggestedQuery = 2;

  protected $suggestedQuery_;
  public function resetSuggestedQuery() { unset($this->suggestedQuery_); }
  public function clearSuggestedQuery() { unset($this->suggestedQuery_); }
  public function hasSuggestedQuery() { return isset($this->suggestedQuery_); }
  public function getSuggestedQuery() { return $this->suggestedQuery_; }
  public function setSuggestedQuery($value) { $this->suggestedQuery_ = (string)$value; }
  
  // optional bool aggregateQuery = 3;

  protected $aggregateQuery_;
  public function resetAggregateQuery() { unset($this->aggregateQuery_); }
  public function clearAggregateQuery() { unset($this->aggregateQuery_); }
  public function hasAggregateQuery() { return isset($this->aggregateQuery_); }
  public function getAggregateQuery() { return $this->aggregateQuery_; }
  public function setAggregateQuery($value) { $this->aggregateQuery_ = (bool)$value; }
  
  // repeated .Bucket bucket = 4;

  protected $bucket_ = array();
  public function clearBucket() { $this->bucket_ = array(); }
  public function getBucketCount() { return count($this->bucket_); }
  public function hasBucket() { return (count($this->bucket_) > 0); }
  public function indexOfBucket($value) { return array_search($value,$this->bucket_);}
  public function removeBucket($index) { unset($this->bucket_[$index]); }
  public function removeValBucket($value) { $idx = array_search($value,$this->bucket_); if($idx !== FALSE){unset($this->bucket_[$idx]); }}
  public function removeValsBucket($values) { foreach($values as $value){$idx = array_search($value,$this->bucket_); if($idx !== FALSE){unset($this->bucket_[$idx]); }}}
  public function pushBucket($newvar) { return array_push($this->bucket_,$newvar); }
  public function popBucket() { return array_pop($this->bucket_); }
  public function shiftBucket() { return array_shift($this->bucket_); }
  public function unshiftBucket($newvar) { return array_unshift($this->bucket_,$newvar); }
  public function getBucket($index) { return $this->bucket_[$index]; }
  public function getBucketArray() { return $this->bucket_; }
  public function setBucket($index, $value) {$this->bucket_[$index] = $value;	}
  public function addBucket($value) { $this->bucket_[] = $value; }
  public function addAllBucket(array $values) { foreach($values as $value) {$this->bucket_[] = $value;} }
  
  // repeated .DocV2 doc = 5;

  protected $doc_ = array();
  public function clearDoc() { $this->doc_ = array(); }
  public function getDocCount() { return count($this->doc_); }
  public function hasDoc() { return (count($this->doc_) > 0); }
  public function indexOfDoc($value) { return array_search($value,$this->doc_);}
  public function removeDoc($index) { unset($this->doc_[$index]); }
  public function removeValDoc($value) { $idx = array_search($value,$this->doc_); if($idx !== FALSE){unset($this->doc_[$idx]); }}
  public function removeValsDoc($values) { foreach($values as $value){$idx = array_search($value,$this->doc_); if($idx !== FALSE){unset($this->doc_[$idx]); }}}
  public function pushDoc($newvar) { return array_push($this->doc_,$newvar); }
  public function popDoc() { return array_pop($this->doc_); }
  public function shiftDoc() { return array_shift($this->doc_); }
  public function unshiftDoc($newvar) { return array_unshift($this->doc_,$newvar); }
  public function getDoc($index) { return $this->doc_[$index]; }
  public function getDocArray() { return $this->doc_; }
  public function setDoc($index, $value) {$this->doc_[$index] = $value;	}
  public function addDoc($value) { $this->doc_[] = $value; }
  public function addAllDoc(array $values) { foreach($values as $value) {$this->doc_[] = $value;} }
  
  // repeated .RelatedSearch relatedSearch = 6;

  protected $relatedSearch_ = array();
  public function clearRelatedSearch() { $this->relatedSearch_ = array(); }
  public function getRelatedSearchCount() { return count($this->relatedSearch_); }
  public function hasRelatedSearch() { return (count($this->relatedSearch_) > 0); }
  public function indexOfRelatedSearch($value) { return array_search($value,$this->relatedSearch_);}
  public function removeRelatedSearch($index) { unset($this->relatedSearch_[$index]); }
  public function removeValRelatedSearch($value) { $idx = array_search($value,$this->relatedSearch_); if($idx !== FALSE){unset($this->relatedSearch_[$idx]); }}
  public function removeValsRelatedSearch($values) { foreach($values as $value){$idx = array_search($value,$this->relatedSearch_); if($idx !== FALSE){unset($this->relatedSearch_[$idx]); }}}
  public function pushRelatedSearch($newvar) { return array_push($this->relatedSearch_,$newvar); }
  public function popRelatedSearch() { return array_pop($this->relatedSearch_); }
  public function shiftRelatedSearch() { return array_shift($this->relatedSearch_); }
  public function unshiftRelatedSearch($newvar) { return array_unshift($this->relatedSearch_,$newvar); }
  public function getRelatedSearch($index) { return $this->relatedSearch_[$index]; }
  public function getRelatedSearchArray() { return $this->relatedSearch_; }
  public function setRelatedSearch($index, $value) {$this->relatedSearch_[$index] = $value;	}
  public function addRelatedSearch($value) { $this->relatedSearch_[] = $value; }
  public function addAllRelatedSearch(array $values) { foreach($values as $value) {$this->relatedSearch_[] = $value;} }
  
  // optional bytes serverLogsCookie = 7;

  protected $serverLogsCookie_;
  public function resetServerLogsCookie() { unset($this->serverLogsCookie_); }
  public function clearServerLogsCookie() { unset($this->serverLogsCookie_); }
  public function hasServerLogsCookie() { return isset($this->serverLogsCookie_); }
  public function getServerLogsCookie() { return $this->serverLogsCookie_; }
  public function setServerLogsCookie($value) { $this->serverLogsCookie_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:SearchResponse)
}

// message BillingConfig
class BillingConfig {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("BillingConfig: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->carrierBillingConfig_ = new CarrierBillingConfig($fp, $len);
          ASSERT('$len == 0');
          break;
        case 2:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->maxIabApiVersion_ = $tmp;
          
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->carrierBillingConfig_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, $this->carrierBillingConfig_->size()); // message
      $this->carrierBillingConfig_->write($fp);
    }
    if (!is_null($this->maxIabApiVersion_)) {
      fwrite($fp, "\x10");
      Protobuf::write_varint($fp, (int)$this->maxIabApiVersion_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->carrierBillingConfig_)) {
      $l = $this->carrierBillingConfig_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->maxIabApiVersion_)) {
      $size += 1 + Protobuf::size_varint($this->maxIabApiVersion_);
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('carrierBillingConfig_', $this->carrierBillingConfig_)
         . Protobuf::toString('maxIabApiVersion_', $this->maxIabApiVersion_);
  }
  
  // optional .CarrierBillingConfig carrierBillingConfig = 1;

  protected $carrierBillingConfig_;
  public function resetCarrierBillingConfig() { unset($this->carrierBillingConfig_); }
  public function clearCarrierBillingConfig() { unset($this->carrierBillingConfig_); }
  public function hasCarrierBillingConfig() { return isset($this->carrierBillingConfig_); }
  public function getCarrierBillingConfig() { return $this->carrierBillingConfig_; }
  public function setCarrierBillingConfig(CarrierBillingConfig $value) { $this->carrierBillingConfig_ = $value; }
  
  // optional int32 maxIabApiVersion = 2;

  protected $maxIabApiVersion_;
  public function resetMaxIabApiVersion() { unset($this->maxIabApiVersion_); }
  public function clearMaxIabApiVersion() { unset($this->maxIabApiVersion_); }
  public function hasMaxIabApiVersion() { return isset($this->maxIabApiVersion_); }
  public function getMaxIabApiVersion() { return $this->maxIabApiVersion_; }
  public function setMaxIabApiVersion($value) { $this->maxIabApiVersion_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:BillingConfig)
}

// message CarrierBillingConfig
class CarrierBillingConfig {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("CarrierBillingConfig: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->id_ = $tmp;
          $limit-=$len;
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->name_ = $tmp;
          $limit-=$len;
          break;
        case 3:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->apiVersion_ = $tmp;
          
          break;
        case 4:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->provisioningUrl_ = $tmp;
          $limit-=$len;
          break;
        case 5:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->credentialsUrl_ = $tmp;
          $limit-=$len;
          break;
        case 6:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->tosRequired_ = $tmp > 0 ? true : false;
          break;
        case 7:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->perTransactionCredentialsRequired_ = $tmp > 0 ? true : false;
          break;
        case 8:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->sendSubscriberIdWithCarrierBillingRequests_ = $tmp > 0 ? true : false;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->id_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, strlen((string)$this->id_));
      fwrite($fp, (string)$this->id_);
    }
    if (!is_null($this->name_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, strlen((string)$this->name_));
      fwrite($fp, (string)$this->name_);
    }
    if (!is_null($this->apiVersion_)) {
      fwrite($fp, "\x18");
      Protobuf::write_varint($fp, (int)$this->apiVersion_);
    }
    if (!is_null($this->provisioningUrl_)) {
      fwrite($fp, "\"");
      Protobuf::write_varint($fp, strlen((string)$this->provisioningUrl_));
      fwrite($fp, (string)$this->provisioningUrl_);
    }
    if (!is_null($this->credentialsUrl_)) {
      fwrite($fp, "*");
      Protobuf::write_varint($fp, strlen((string)$this->credentialsUrl_));
      fwrite($fp, (string)$this->credentialsUrl_);
    }
    if (!is_null($this->tosRequired_)) {
      fwrite($fp, "0");
      Protobuf::write_varint($fp, (int)$this->tosRequired_ ? 1 : 0);
    }
    if (!is_null($this->perTransactionCredentialsRequired_)) {
      fwrite($fp, "8");
      Protobuf::write_varint($fp, (int)$this->perTransactionCredentialsRequired_ ? 1 : 0);
    }
    if (!is_null($this->sendSubscriberIdWithCarrierBillingRequests_)) {
      fwrite($fp, "@");
      Protobuf::write_varint($fp, (int)$this->sendSubscriberIdWithCarrierBillingRequests_ ? 1 : 0);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->id_)) {
      $l = strlen((string)$this->id_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->name_)) {
      $l = strlen((string)$this->name_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->apiVersion_)) {
      $size += 1 + Protobuf::size_varint($this->apiVersion_);
    }
    if (!is_null($this->provisioningUrl_)) {
      $l = strlen((string)$this->provisioningUrl_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->credentialsUrl_)) {
      $l = strlen((string)$this->credentialsUrl_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->tosRequired_)) {
      $size += 2;
    }
    if (!is_null($this->perTransactionCredentialsRequired_)) {
      $size += 2;
    }
    if (!is_null($this->sendSubscriberIdWithCarrierBillingRequests_)) {
      $size += 2;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('id_', $this->id_)
         . Protobuf::toString('name_', $this->name_)
         . Protobuf::toString('apiVersion_', $this->apiVersion_)
         . Protobuf::toString('provisioningUrl_', $this->provisioningUrl_)
         . Protobuf::toString('credentialsUrl_', $this->credentialsUrl_)
         . Protobuf::toString('tosRequired_', $this->tosRequired_)
         . Protobuf::toString('perTransactionCredentialsRequired_', $this->perTransactionCredentialsRequired_)
         . Protobuf::toString('sendSubscriberIdWithCarrierBillingRequests_', $this->sendSubscriberIdWithCarrierBillingRequests_);
  }
  
  // optional string id = 1;

  protected $id_;
  public function resetId() { unset($this->id_); }
  public function clearId() { unset($this->id_); }
  public function hasId() { return isset($this->id_); }
  public function getId() { return $this->id_; }
  public function setId($value) { $this->id_ = (string)$value; }
  
  // optional string name = 2;

  protected $name_;
  public function resetName() { unset($this->name_); }
  public function clearName() { unset($this->name_); }
  public function hasName() { return isset($this->name_); }
  public function getName() { return $this->name_; }
  public function setName($value) { $this->name_ = (string)$value; }
  
  // optional int32 apiVersion = 3;

  protected $apiVersion_;
  public function resetApiVersion() { unset($this->apiVersion_); }
  public function clearApiVersion() { unset($this->apiVersion_); }
  public function hasApiVersion() { return isset($this->apiVersion_); }
  public function getApiVersion() { return $this->apiVersion_; }
  public function setApiVersion($value) { $this->apiVersion_ = (string)$value; }
  
  // optional string provisioningUrl = 4;

  protected $provisioningUrl_;
  public function resetProvisioningUrl() { unset($this->provisioningUrl_); }
  public function clearProvisioningUrl() { unset($this->provisioningUrl_); }
  public function hasProvisioningUrl() { return isset($this->provisioningUrl_); }
  public function getProvisioningUrl() { return $this->provisioningUrl_; }
  public function setProvisioningUrl($value) { $this->provisioningUrl_ = (string)$value; }
  
  // optional string credentialsUrl = 5;

  protected $credentialsUrl_;
  public function resetCredentialsUrl() { unset($this->credentialsUrl_); }
  public function clearCredentialsUrl() { unset($this->credentialsUrl_); }
  public function hasCredentialsUrl() { return isset($this->credentialsUrl_); }
  public function getCredentialsUrl() { return $this->credentialsUrl_; }
  public function setCredentialsUrl($value) { $this->credentialsUrl_ = (string)$value; }
  
  // optional bool tosRequired = 6;

  protected $tosRequired_;
  public function resetTosRequired() { unset($this->tosRequired_); }
  public function clearTosRequired() { unset($this->tosRequired_); }
  public function hasTosRequired() { return isset($this->tosRequired_); }
  public function getTosRequired() { return $this->tosRequired_; }
  public function setTosRequired($value) { $this->tosRequired_ = (bool)$value; }
  
  // optional bool perTransactionCredentialsRequired = 7;

  protected $perTransactionCredentialsRequired_;
  public function resetPerTransactionCredentialsRequired() { unset($this->perTransactionCredentialsRequired_); }
  public function clearPerTransactionCredentialsRequired() { unset($this->perTransactionCredentialsRequired_); }
  public function hasPerTransactionCredentialsRequired() { return isset($this->perTransactionCredentialsRequired_); }
  public function getPerTransactionCredentialsRequired() { return $this->perTransactionCredentialsRequired_; }
  public function setPerTransactionCredentialsRequired($value) { $this->perTransactionCredentialsRequired_ = (bool)$value; }
  
  // optional bool sendSubscriberIdWithCarrierBillingRequests = 8;

  protected $sendSubscriberIdWithCarrierBillingRequests_;
  public function resetSendSubscriberIdWithCarrierBillingRequests() { unset($this->sendSubscriberIdWithCarrierBillingRequests_); }
  public function clearSendSubscriberIdWithCarrierBillingRequests() { unset($this->sendSubscriberIdWithCarrierBillingRequests_); }
  public function hasSendSubscriberIdWithCarrierBillingRequests() { return isset($this->sendSubscriberIdWithCarrierBillingRequests_); }
  public function getSendSubscriberIdWithCarrierBillingRequests() { return $this->sendSubscriberIdWithCarrierBillingRequests_; }
  public function setSendSubscriberIdWithCarrierBillingRequests($value) { $this->sendSubscriberIdWithCarrierBillingRequests_ = (bool)$value; }
  
  // @@protoc_insertion_point(class_scope:CarrierBillingConfig)
}

// message CorpusMetadata
class CorpusMetadata {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("CorpusMetadata: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->backend_ = $tmp;
          
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->name_ = $tmp;
          $limit-=$len;
          break;
        case 3:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->landingUrl_ = $tmp;
          $limit-=$len;
          break;
        case 4:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->libraryName_ = $tmp;
          $limit-=$len;
          break;
        case 6:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->recsWidgetUrl_ = $tmp;
          $limit-=$len;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->backend_)) {
      fwrite($fp, "\x08");
      Protobuf::write_varint($fp, (int)$this->backend_);
    }
    if (!is_null($this->name_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, strlen((string)$this->name_));
      fwrite($fp, (string)$this->name_);
    }
    if (!is_null($this->landingUrl_)) {
      fwrite($fp, "\x1a");
      Protobuf::write_varint($fp, strlen((string)$this->landingUrl_));
      fwrite($fp, (string)$this->landingUrl_);
    }
    if (!is_null($this->libraryName_)) {
      fwrite($fp, "\"");
      Protobuf::write_varint($fp, strlen((string)$this->libraryName_));
      fwrite($fp, (string)$this->libraryName_);
    }
    if (!is_null($this->recsWidgetUrl_)) {
      fwrite($fp, "2");
      Protobuf::write_varint($fp, strlen((string)$this->recsWidgetUrl_));
      fwrite($fp, (string)$this->recsWidgetUrl_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->backend_)) {
      $size += 1 + Protobuf::size_varint($this->backend_);
    }
    if (!is_null($this->name_)) {
      $l = strlen((string)$this->name_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->landingUrl_)) {
      $l = strlen((string)$this->landingUrl_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->libraryName_)) {
      $l = strlen((string)$this->libraryName_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->recsWidgetUrl_)) {
      $l = strlen((string)$this->recsWidgetUrl_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('backend_', $this->backend_)
         . Protobuf::toString('name_', $this->name_)
         . Protobuf::toString('landingUrl_', $this->landingUrl_)
         . Protobuf::toString('libraryName_', $this->libraryName_)
         . Protobuf::toString('recsWidgetUrl_', $this->recsWidgetUrl_);
  }
  
  // optional int32 backend = 1;

  protected $backend_;
  public function resetBackend() { unset($this->backend_); }
  public function clearBackend() { unset($this->backend_); }
  public function hasBackend() { return isset($this->backend_); }
  public function getBackend() { return $this->backend_; }
  public function setBackend($value) { $this->backend_ = (string)$value; }
  
  // optional string name = 2;

  protected $name_;
  public function resetName() { unset($this->name_); }
  public function clearName() { unset($this->name_); }
  public function hasName() { return isset($this->name_); }
  public function getName() { return $this->name_; }
  public function setName($value) { $this->name_ = (string)$value; }
  
  // optional string landingUrl = 3;

  protected $landingUrl_;
  public function resetLandingUrl() { unset($this->landingUrl_); }
  public function clearLandingUrl() { unset($this->landingUrl_); }
  public function hasLandingUrl() { return isset($this->landingUrl_); }
  public function getLandingUrl() { return $this->landingUrl_; }
  public function setLandingUrl($value) { $this->landingUrl_ = (string)$value; }
  
  // optional string libraryName = 4;

  protected $libraryName_;
  public function resetLibraryName() { unset($this->libraryName_); }
  public function clearLibraryName() { unset($this->libraryName_); }
  public function hasLibraryName() { return isset($this->libraryName_); }
  public function getLibraryName() { return $this->libraryName_; }
  public function setLibraryName($value) { $this->libraryName_ = (string)$value; }
  
  // optional string recsWidgetUrl = 6;

  protected $recsWidgetUrl_;
  public function resetRecsWidgetUrl() { unset($this->recsWidgetUrl_); }
  public function clearRecsWidgetUrl() { unset($this->recsWidgetUrl_); }
  public function hasRecsWidgetUrl() { return isset($this->recsWidgetUrl_); }
  public function getRecsWidgetUrl() { return $this->recsWidgetUrl_; }
  public function setRecsWidgetUrl($value) { $this->recsWidgetUrl_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:CorpusMetadata)
}

// message Experiments
class Experiments {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("Experiments: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->experimentId_[] = $tmp;
          $limit-=$len;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->experimentId_))
      foreach($this->experimentId_ as $v) {
        fwrite($fp, "\x0a");
        Protobuf::write_varint($fp, strlen((string)$v));
        fwrite($fp, (string)$v);
      }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->experimentId_))
      foreach($this->experimentId_ as $v) {
        $l = strlen((string)$v);
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('experimentId_', $this->experimentId_);
  }
  
  // repeated string experimentId = 1;

  protected $experimentId_ = array();
  public function clearExperimentId() { $this->experimentId_ = array(); }
  public function getExperimentIdCount() { return count($this->experimentId_); }
  public function hasExperimentId() { return (count($this->experimentId_) > 0); }
  public function indexOfExperimentId($value) { return array_search($value,$this->experimentId_);}
  public function removeExperimentId($index) { unset($this->experimentId_[$index]); }
  public function removeValExperimentId($value) { $idx = array_search($value,$this->experimentId_); if($idx !== FALSE){unset($this->experimentId_[$idx]); }}
  public function removeValsExperimentId($values) { foreach($values as $value){$idx = array_search($value,$this->experimentId_); if($idx !== FALSE){unset($this->experimentId_[$idx]); }}}
  public function pushExperimentId($newvar) { return array_push($this->experimentId_,(string)$newvar); }
  public function popExperimentId() { return array_pop($this->experimentId_); }
  public function shiftExperimentId() { return array_shift($this->experimentId_); }
  public function unshiftExperimentId($newvar) { return array_unshift($this->experimentId_,(string)$newvar); }
  public function getExperimentId($index) { return $this->experimentId_[$index]; }
  public function getExperimentIdArray() { return $this->experimentId_; }
  public function setExperimentId($index, $value) {$this->experimentId_[$index] = (string)$value;	}
  public function addExperimentId($value) { $this->experimentId_[] = (string)$value; }
  public function addAllExperimentId(array $values) { foreach($values as $value) {$this->experimentId_[] = (string)$value;} }
  
  // @@protoc_insertion_point(class_scope:Experiments)
}

// message SelfUpdateConfig
class SelfUpdateConfig {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("SelfUpdateConfig: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->latestClientVersionCode_ = $tmp;
          
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->latestClientVersionCode_)) {
      fwrite($fp, "\x08");
      Protobuf::write_varint($fp, (int)$this->latestClientVersionCode_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->latestClientVersionCode_)) {
      $size += 1 + Protobuf::size_varint($this->latestClientVersionCode_);
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('latestClientVersionCode_', $this->latestClientVersionCode_);
  }
  
  // optional int32 latestClientVersionCode = 1;

  protected $latestClientVersionCode_;
  public function resetLatestClientVersionCode() { unset($this->latestClientVersionCode_); }
  public function clearLatestClientVersionCode() { unset($this->latestClientVersionCode_); }
  public function hasLatestClientVersionCode() { return isset($this->latestClientVersionCode_); }
  public function getLatestClientVersionCode() { return $this->latestClientVersionCode_; }
  public function setLatestClientVersionCode($value) { $this->latestClientVersionCode_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:SelfUpdateConfig)
}

// message TocResponse
class TocResponse {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("TocResponse: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->corpus_[] = new CorpusMetadata($fp, $len);
          ASSERT('$len == 0');
          break;
        case 2:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->tosVersionDeprecated_ = $tmp;
          
          break;
        case 3:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->tosContent_ = $tmp;
          $limit-=$len;
          break;
        case 4:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->homeUrl_ = $tmp;
          $limit-=$len;
          break;
        case 5:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->experiments_ = new Experiments($fp, $len);
          ASSERT('$len == 0');
          break;
        case 6:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->tosCheckboxTextMarketingEmails_ = $tmp;
          $limit-=$len;
          break;
        case 7:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->tosToken_ = $tmp;
          $limit-=$len;
          break;
        case 8:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->userSettings_ = new UserSettings($fp, $len);
          ASSERT('$len == 0');
          break;
        case 9:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->iconOverrideUrl_ = $tmp;
          $limit-=$len;
          break;
        case 10:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->selfUpdateConfig_ = new SelfUpdateConfig($fp, $len);
          ASSERT('$len == 0');
          break;
        case 11:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->requiresUploadDeviceConfig_ = $tmp > 0 ? true : false;
          break;
        case 12:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->billingConfig_ = new BillingConfig($fp, $len);
          ASSERT('$len == 0');
          break;
        case 13:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->recsWidgetUrl_ = $tmp;
          $limit-=$len;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->corpus_))
      foreach($this->corpus_ as $v) {
        fwrite($fp, "\x0a");
        Protobuf::write_varint($fp, $v->size()); // message
        $v->write($fp);
      }
    if (!is_null($this->tosVersionDeprecated_)) {
      fwrite($fp, "\x10");
      Protobuf::write_varint($fp, (int)$this->tosVersionDeprecated_);
    }
    if (!is_null($this->tosContent_)) {
      fwrite($fp, "\x1a");
      Protobuf::write_varint($fp, strlen((string)$this->tosContent_));
      fwrite($fp, (string)$this->tosContent_);
    }
    if (!is_null($this->homeUrl_)) {
      fwrite($fp, "\"");
      Protobuf::write_varint($fp, strlen((string)$this->homeUrl_));
      fwrite($fp, (string)$this->homeUrl_);
    }
    if (!is_null($this->experiments_)) {
      fwrite($fp, "*");
      Protobuf::write_varint($fp, $this->experiments_->size()); // message
      $this->experiments_->write($fp);
    }
    if (!is_null($this->tosCheckboxTextMarketingEmails_)) {
      fwrite($fp, "2");
      Protobuf::write_varint($fp, strlen((string)$this->tosCheckboxTextMarketingEmails_));
      fwrite($fp, (string)$this->tosCheckboxTextMarketingEmails_);
    }
    if (!is_null($this->tosToken_)) {
      fwrite($fp, ":");
      Protobuf::write_varint($fp, strlen((string)$this->tosToken_));
      fwrite($fp, (string)$this->tosToken_);
    }
    if (!is_null($this->userSettings_)) {
      fwrite($fp, "B");
      Protobuf::write_varint($fp, $this->userSettings_->size()); // message
      $this->userSettings_->write($fp);
    }
    if (!is_null($this->iconOverrideUrl_)) {
      fwrite($fp, "J");
      Protobuf::write_varint($fp, strlen((string)$this->iconOverrideUrl_));
      fwrite($fp, (string)$this->iconOverrideUrl_);
    }
    if (!is_null($this->selfUpdateConfig_)) {
      fwrite($fp, "R");
      Protobuf::write_varint($fp, $this->selfUpdateConfig_->size()); // message
      $this->selfUpdateConfig_->write($fp);
    }
    if (!is_null($this->requiresUploadDeviceConfig_)) {
      fwrite($fp, "X");
      Protobuf::write_varint($fp, (int)$this->requiresUploadDeviceConfig_ ? 1 : 0);
    }
    if (!is_null($this->billingConfig_)) {
      fwrite($fp, "b");
      Protobuf::write_varint($fp, $this->billingConfig_->size()); // message
      $this->billingConfig_->write($fp);
    }
    if (!is_null($this->recsWidgetUrl_)) {
      fwrite($fp, "j");
      Protobuf::write_varint($fp, strlen((string)$this->recsWidgetUrl_));
      fwrite($fp, (string)$this->recsWidgetUrl_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->corpus_))
      foreach($this->corpus_ as $v) {
        $l = $v->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
    if (!is_null($this->tosVersionDeprecated_)) {
      $size += 1 + Protobuf::size_varint($this->tosVersionDeprecated_);
    }
    if (!is_null($this->tosContent_)) {
      $l = strlen((string)$this->tosContent_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->homeUrl_)) {
      $l = strlen((string)$this->homeUrl_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->experiments_)) {
      $l = $this->experiments_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->tosCheckboxTextMarketingEmails_)) {
      $l = strlen((string)$this->tosCheckboxTextMarketingEmails_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->tosToken_)) {
      $l = strlen((string)$this->tosToken_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->userSettings_)) {
      $l = $this->userSettings_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->iconOverrideUrl_)) {
      $l = strlen((string)$this->iconOverrideUrl_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->selfUpdateConfig_)) {
      $l = $this->selfUpdateConfig_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->requiresUploadDeviceConfig_)) {
      $size += 2;
    }
    if (!is_null($this->billingConfig_)) {
      $l = $this->billingConfig_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->recsWidgetUrl_)) {
      $l = strlen((string)$this->recsWidgetUrl_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('corpus_', $this->corpus_)
         . Protobuf::toString('tosVersionDeprecated_', $this->tosVersionDeprecated_)
         . Protobuf::toString('tosContent_', $this->tosContent_)
         . Protobuf::toString('homeUrl_', $this->homeUrl_)
         . Protobuf::toString('experiments_', $this->experiments_)
         . Protobuf::toString('tosCheckboxTextMarketingEmails_', $this->tosCheckboxTextMarketingEmails_)
         . Protobuf::toString('tosToken_', $this->tosToken_)
         . Protobuf::toString('userSettings_', $this->userSettings_)
         . Protobuf::toString('iconOverrideUrl_', $this->iconOverrideUrl_)
         . Protobuf::toString('selfUpdateConfig_', $this->selfUpdateConfig_)
         . Protobuf::toString('requiresUploadDeviceConfig_', $this->requiresUploadDeviceConfig_)
         . Protobuf::toString('billingConfig_', $this->billingConfig_)
         . Protobuf::toString('recsWidgetUrl_', $this->recsWidgetUrl_);
  }
  
  // repeated .CorpusMetadata corpus = 1;

  protected $corpus_ = array();
  public function clearCorpus() { $this->corpus_ = array(); }
  public function getCorpusCount() { return count($this->corpus_); }
  public function hasCorpus() { return (count($this->corpus_) > 0); }
  public function indexOfCorpus($value) { return array_search($value,$this->corpus_);}
  public function removeCorpus($index) { unset($this->corpus_[$index]); }
  public function removeValCorpus($value) { $idx = array_search($value,$this->corpus_); if($idx !== FALSE){unset($this->corpus_[$idx]); }}
  public function removeValsCorpus($values) { foreach($values as $value){$idx = array_search($value,$this->corpus_); if($idx !== FALSE){unset($this->corpus_[$idx]); }}}
  public function pushCorpus($newvar) { return array_push($this->corpus_,$newvar); }
  public function popCorpus() { return array_pop($this->corpus_); }
  public function shiftCorpus() { return array_shift($this->corpus_); }
  public function unshiftCorpus($newvar) { return array_unshift($this->corpus_,$newvar); }
  public function getCorpus($index) { return $this->corpus_[$index]; }
  public function getCorpusArray() { return $this->corpus_; }
  public function setCorpus($index, $value) {$this->corpus_[$index] = $value;	}
  public function addCorpus($value) { $this->corpus_[] = $value; }
  public function addAllCorpus(array $values) { foreach($values as $value) {$this->corpus_[] = $value;} }
  
  // optional int32 tosVersionDeprecated = 2;

  protected $tosVersionDeprecated_;
  public function resetTosVersionDeprecated() { unset($this->tosVersionDeprecated_); }
  public function clearTosVersionDeprecated() { unset($this->tosVersionDeprecated_); }
  public function hasTosVersionDeprecated() { return isset($this->tosVersionDeprecated_); }
  public function getTosVersionDeprecated() { return $this->tosVersionDeprecated_; }
  public function setTosVersionDeprecated($value) { $this->tosVersionDeprecated_ = (string)$value; }
  
  // optional string tosContent = 3;

  protected $tosContent_;
  public function resetTosContent() { unset($this->tosContent_); }
  public function clearTosContent() { unset($this->tosContent_); }
  public function hasTosContent() { return isset($this->tosContent_); }
  public function getTosContent() { return $this->tosContent_; }
  public function setTosContent($value) { $this->tosContent_ = (string)$value; }
  
  // optional string homeUrl = 4;

  protected $homeUrl_;
  public function resetHomeUrl() { unset($this->homeUrl_); }
  public function clearHomeUrl() { unset($this->homeUrl_); }
  public function hasHomeUrl() { return isset($this->homeUrl_); }
  public function getHomeUrl() { return $this->homeUrl_; }
  public function setHomeUrl($value) { $this->homeUrl_ = (string)$value; }
  
  // optional .Experiments experiments = 5;

  protected $experiments_;
  public function resetExperiments() { unset($this->experiments_); }
  public function clearExperiments() { unset($this->experiments_); }
  public function hasExperiments() { return isset($this->experiments_); }
  public function getExperiments() { return $this->experiments_; }
  public function setExperiments(Experiments $value) { $this->experiments_ = $value; }
  
  // optional string tosCheckboxTextMarketingEmails = 6;

  protected $tosCheckboxTextMarketingEmails_;
  public function resetTosCheckboxTextMarketingEmails() { unset($this->tosCheckboxTextMarketingEmails_); }
  public function clearTosCheckboxTextMarketingEmails() { unset($this->tosCheckboxTextMarketingEmails_); }
  public function hasTosCheckboxTextMarketingEmails() { return isset($this->tosCheckboxTextMarketingEmails_); }
  public function getTosCheckboxTextMarketingEmails() { return $this->tosCheckboxTextMarketingEmails_; }
  public function setTosCheckboxTextMarketingEmails($value) { $this->tosCheckboxTextMarketingEmails_ = (string)$value; }
  
  // optional string tosToken = 7;

  protected $tosToken_;
  public function resetTosToken() { unset($this->tosToken_); }
  public function clearTosToken() { unset($this->tosToken_); }
  public function hasTosToken() { return isset($this->tosToken_); }
  public function getTosToken() { return $this->tosToken_; }
  public function setTosToken($value) { $this->tosToken_ = (string)$value; }
  
  // optional .UserSettings userSettings = 8;

  protected $userSettings_;
  public function resetUserSettings() { unset($this->userSettings_); }
  public function clearUserSettings() { unset($this->userSettings_); }
  public function hasUserSettings() { return isset($this->userSettings_); }
  public function getUserSettings() { return $this->userSettings_; }
  public function setUserSettings(UserSettings $value) { $this->userSettings_ = $value; }
  
  // optional string iconOverrideUrl = 9;

  protected $iconOverrideUrl_;
  public function resetIconOverrideUrl() { unset($this->iconOverrideUrl_); }
  public function clearIconOverrideUrl() { unset($this->iconOverrideUrl_); }
  public function hasIconOverrideUrl() { return isset($this->iconOverrideUrl_); }
  public function getIconOverrideUrl() { return $this->iconOverrideUrl_; }
  public function setIconOverrideUrl($value) { $this->iconOverrideUrl_ = (string)$value; }
  
  // optional .SelfUpdateConfig selfUpdateConfig = 10;

  protected $selfUpdateConfig_;
  public function resetSelfUpdateConfig() { unset($this->selfUpdateConfig_); }
  public function clearSelfUpdateConfig() { unset($this->selfUpdateConfig_); }
  public function hasSelfUpdateConfig() { return isset($this->selfUpdateConfig_); }
  public function getSelfUpdateConfig() { return $this->selfUpdateConfig_; }
  public function setSelfUpdateConfig(SelfUpdateConfig $value) { $this->selfUpdateConfig_ = $value; }
  
  // optional bool requiresUploadDeviceConfig = 11;

  protected $requiresUploadDeviceConfig_;
  public function resetRequiresUploadDeviceConfig() { unset($this->requiresUploadDeviceConfig_); }
  public function clearRequiresUploadDeviceConfig() { unset($this->requiresUploadDeviceConfig_); }
  public function hasRequiresUploadDeviceConfig() { return isset($this->requiresUploadDeviceConfig_); }
  public function getRequiresUploadDeviceConfig() { return $this->requiresUploadDeviceConfig_; }
  public function setRequiresUploadDeviceConfig($value) { $this->requiresUploadDeviceConfig_ = (bool)$value; }
  
  // optional .BillingConfig billingConfig = 12;

  protected $billingConfig_;
  public function resetBillingConfig() { unset($this->billingConfig_); }
  public function clearBillingConfig() { unset($this->billingConfig_); }
  public function hasBillingConfig() { return isset($this->billingConfig_); }
  public function getBillingConfig() { return $this->billingConfig_; }
  public function setBillingConfig(BillingConfig $value) { $this->billingConfig_ = $value; }
  
  // optional string recsWidgetUrl = 13;

  protected $recsWidgetUrl_;
  public function resetRecsWidgetUrl() { unset($this->recsWidgetUrl_); }
  public function clearRecsWidgetUrl() { unset($this->recsWidgetUrl_); }
  public function hasRecsWidgetUrl() { return isset($this->recsWidgetUrl_); }
  public function getRecsWidgetUrl() { return $this->recsWidgetUrl_; }
  public function setRecsWidgetUrl($value) { $this->recsWidgetUrl_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:TocResponse)
}

// message UserSettings
class UserSettings {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("UserSettings: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->tosCheckboxMarketingEmailsOptedIn_ = $tmp > 0 ? true : false;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->tosCheckboxMarketingEmailsOptedIn_)) {
      fwrite($fp, "\x08");
      Protobuf::write_varint($fp, (int)$this->tosCheckboxMarketingEmailsOptedIn_ ? 1 : 0);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->tosCheckboxMarketingEmailsOptedIn_)) {
      $size += 2;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('tosCheckboxMarketingEmailsOptedIn_', $this->tosCheckboxMarketingEmailsOptedIn_);
  }
  
  // optional bool tosCheckboxMarketingEmailsOptedIn = 1;

  protected $tosCheckboxMarketingEmailsOptedIn_;
  public function resetTosCheckboxMarketingEmailsOptedIn() { unset($this->tosCheckboxMarketingEmailsOptedIn_); }
  public function clearTosCheckboxMarketingEmailsOptedIn() { unset($this->tosCheckboxMarketingEmailsOptedIn_); }
  public function hasTosCheckboxMarketingEmailsOptedIn() { return isset($this->tosCheckboxMarketingEmailsOptedIn_); }
  public function getTosCheckboxMarketingEmailsOptedIn() { return $this->tosCheckboxMarketingEmailsOptedIn_; }
  public function setTosCheckboxMarketingEmailsOptedIn($value) { $this->tosCheckboxMarketingEmailsOptedIn_ = (bool)$value; }
  
  // @@protoc_insertion_point(class_scope:UserSettings)
}

// message AcceptTosResponse
class AcceptTosResponse {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("AcceptTosResponse: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  public function size() {
    $size = 0;
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown);
  }
  
  // @@protoc_insertion_point(class_scope:AcceptTosResponse)
}

// message UploadDeviceConfigRequest
class UploadDeviceConfigRequest {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("UploadDeviceConfigRequest: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->deviceConfiguration_ = new DeviceConfigurationProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->manufacturer_ = $tmp;
          $limit-=$len;
          break;
        case 3:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->gcmRegistrationId_ = $tmp;
          $limit-=$len;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->deviceConfiguration_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, $this->deviceConfiguration_->size()); // message
      $this->deviceConfiguration_->write($fp);
    }
    if (!is_null($this->manufacturer_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, strlen((string)$this->manufacturer_));
      fwrite($fp, (string)$this->manufacturer_);
    }
    if (!is_null($this->gcmRegistrationId_)) {
      fwrite($fp, "\x1a");
      Protobuf::write_varint($fp, strlen((string)$this->gcmRegistrationId_));
      fwrite($fp, (string)$this->gcmRegistrationId_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->deviceConfiguration_)) {
      $l = $this->deviceConfiguration_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->manufacturer_)) {
      $l = strlen((string)$this->manufacturer_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->gcmRegistrationId_)) {
      $l = strlen((string)$this->gcmRegistrationId_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('deviceConfiguration_', $this->deviceConfiguration_)
         . Protobuf::toString('manufacturer_', $this->manufacturer_)
         . Protobuf::toString('gcmRegistrationId_', $this->gcmRegistrationId_);
  }
  
  // optional .DeviceConfigurationProto deviceConfiguration = 1;

  protected $deviceConfiguration_;
  public function resetDeviceConfiguration() { unset($this->deviceConfiguration_); }
  public function clearDeviceConfiguration() { unset($this->deviceConfiguration_); }
  public function hasDeviceConfiguration() { return isset($this->deviceConfiguration_); }
  public function getDeviceConfiguration() { return $this->deviceConfiguration_; }
  public function setDeviceConfiguration(DeviceConfigurationProto $value) { $this->deviceConfiguration_ = $value; }
  
  // optional string manufacturer = 2;

  protected $manufacturer_;
  public function resetManufacturer() { unset($this->manufacturer_); }
  public function clearManufacturer() { unset($this->manufacturer_); }
  public function hasManufacturer() { return isset($this->manufacturer_); }
  public function getManufacturer() { return $this->manufacturer_; }
  public function setManufacturer($value) { $this->manufacturer_ = (string)$value; }
  
  // optional string gcmRegistrationId = 3;

  protected $gcmRegistrationId_;
  public function resetGcmRegistrationId() { unset($this->gcmRegistrationId_); }
  public function clearGcmRegistrationId() { unset($this->gcmRegistrationId_); }
  public function hasGcmRegistrationId() { return isset($this->gcmRegistrationId_); }
  public function getGcmRegistrationId() { return $this->gcmRegistrationId_; }
  public function setGcmRegistrationId($value) { $this->gcmRegistrationId_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:UploadDeviceConfigRequest)
}

// message UploadDeviceConfigResponse
class UploadDeviceConfigResponse {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("UploadDeviceConfigResponse: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->uploadDeviceConfigToken_ = $tmp;
          $limit-=$len;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->uploadDeviceConfigToken_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, strlen((string)$this->uploadDeviceConfigToken_));
      fwrite($fp, (string)$this->uploadDeviceConfigToken_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->uploadDeviceConfigToken_)) {
      $l = strlen((string)$this->uploadDeviceConfigToken_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('uploadDeviceConfigToken_', $this->uploadDeviceConfigToken_);
  }
  
  // optional string uploadDeviceConfigToken = 1;

  protected $uploadDeviceConfigToken_;
  public function resetUploadDeviceConfigToken() { unset($this->uploadDeviceConfigToken_); }
  public function clearUploadDeviceConfigToken() { unset($this->uploadDeviceConfigToken_); }
  public function hasUploadDeviceConfigToken() { return isset($this->uploadDeviceConfigToken_); }
  public function getUploadDeviceConfigToken() { return $this->uploadDeviceConfigToken_; }
  public function setUploadDeviceConfigToken($value) { $this->uploadDeviceConfigToken_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:UploadDeviceConfigResponse)
}

// message AckNotificationsRequestProto
class AckNotificationsRequestProto {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("AckNotificationsRequestProto: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->notificationId_[] = $tmp;
          $limit-=$len;
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->signatureHash_ = new SignatureHashProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 3:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->nackNotificationId_[] = $tmp;
          $limit-=$len;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->notificationId_))
      foreach($this->notificationId_ as $v) {
        fwrite($fp, "\x0a");
        Protobuf::write_varint($fp, strlen((string)$v));
        fwrite($fp, (string)$v);
      }
    if (!is_null($this->signatureHash_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, $this->signatureHash_->size()); // message
      $this->signatureHash_->write($fp);
    }
    if (!is_null($this->nackNotificationId_))
      foreach($this->nackNotificationId_ as $v) {
        fwrite($fp, "\x1a");
        Protobuf::write_varint($fp, strlen((string)$v));
        fwrite($fp, (string)$v);
      }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->notificationId_))
      foreach($this->notificationId_ as $v) {
        $l = strlen((string)$v);
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
    if (!is_null($this->signatureHash_)) {
      $l = $this->signatureHash_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->nackNotificationId_))
      foreach($this->nackNotificationId_ as $v) {
        $l = strlen((string)$v);
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('notificationId_', $this->notificationId_)
         . Protobuf::toString('signatureHash_', $this->signatureHash_)
         . Protobuf::toString('nackNotificationId_', $this->nackNotificationId_);
  }
  
  // repeated string notificationId = 1;

  protected $notificationId_ = array();
  public function clearNotificationId() { $this->notificationId_ = array(); }
  public function getNotificationIdCount() { return count($this->notificationId_); }
  public function hasNotificationId() { return (count($this->notificationId_) > 0); }
  public function indexOfNotificationId($value) { return array_search($value,$this->notificationId_);}
  public function removeNotificationId($index) { unset($this->notificationId_[$index]); }
  public function removeValNotificationId($value) { $idx = array_search($value,$this->notificationId_); if($idx !== FALSE){unset($this->notificationId_[$idx]); }}
  public function removeValsNotificationId($values) { foreach($values as $value){$idx = array_search($value,$this->notificationId_); if($idx !== FALSE){unset($this->notificationId_[$idx]); }}}
  public function pushNotificationId($newvar) { return array_push($this->notificationId_,(string)$newvar); }
  public function popNotificationId() { return array_pop($this->notificationId_); }
  public function shiftNotificationId() { return array_shift($this->notificationId_); }
  public function unshiftNotificationId($newvar) { return array_unshift($this->notificationId_,(string)$newvar); }
  public function getNotificationId($index) { return $this->notificationId_[$index]; }
  public function getNotificationIdArray() { return $this->notificationId_; }
  public function setNotificationId($index, $value) {$this->notificationId_[$index] = (string)$value;	}
  public function addNotificationId($value) { $this->notificationId_[] = (string)$value; }
  public function addAllNotificationId(array $values) { foreach($values as $value) {$this->notificationId_[] = (string)$value;} }
  
  // optional .SignatureHashProto signatureHash = 2;

  protected $signatureHash_;
  public function resetSignatureHash() { unset($this->signatureHash_); }
  public function clearSignatureHash() { unset($this->signatureHash_); }
  public function hasSignatureHash() { return isset($this->signatureHash_); }
  public function getSignatureHash() { return $this->signatureHash_; }
  public function setSignatureHash(SignatureHashProto $value) { $this->signatureHash_ = $value; }
  
  // repeated string nackNotificationId = 3;

  protected $nackNotificationId_ = array();
  public function clearNackNotificationId() { $this->nackNotificationId_ = array(); }
  public function getNackNotificationIdCount() { return count($this->nackNotificationId_); }
  public function hasNackNotificationId() { return (count($this->nackNotificationId_) > 0); }
  public function indexOfNackNotificationId($value) { return array_search($value,$this->nackNotificationId_);}
  public function removeNackNotificationId($index) { unset($this->nackNotificationId_[$index]); }
  public function removeValNackNotificationId($value) { $idx = array_search($value,$this->nackNotificationId_); if($idx !== FALSE){unset($this->nackNotificationId_[$idx]); }}
  public function removeValsNackNotificationId($values) { foreach($values as $value){$idx = array_search($value,$this->nackNotificationId_); if($idx !== FALSE){unset($this->nackNotificationId_[$idx]); }}}
  public function pushNackNotificationId($newvar) { return array_push($this->nackNotificationId_,(string)$newvar); }
  public function popNackNotificationId() { return array_pop($this->nackNotificationId_); }
  public function shiftNackNotificationId() { return array_shift($this->nackNotificationId_); }
  public function unshiftNackNotificationId($newvar) { return array_unshift($this->nackNotificationId_,(string)$newvar); }
  public function getNackNotificationId($index) { return $this->nackNotificationId_[$index]; }
  public function getNackNotificationIdArray() { return $this->nackNotificationId_; }
  public function setNackNotificationId($index, $value) {$this->nackNotificationId_[$index] = (string)$value;	}
  public function addNackNotificationId($value) { $this->nackNotificationId_[] = (string)$value; }
  public function addAllNackNotificationId(array $values) { foreach($values as $value) {$this->nackNotificationId_[] = (string)$value;} }
  
  // @@protoc_insertion_point(class_scope:AckNotificationsRequestProto)
}

// message AckNotificationsResponseProto
class AckNotificationsResponseProto {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("AckNotificationsResponseProto: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  public function size() {
    $size = 0;
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown);
  }
  
  // @@protoc_insertion_point(class_scope:AckNotificationsResponseProto)
}

// message AddressProto
class AddressProto {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("AddressProto: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->address1_ = $tmp;
          $limit-=$len;
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->address2_ = $tmp;
          $limit-=$len;
          break;
        case 3:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->city_ = $tmp;
          $limit-=$len;
          break;
        case 4:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->state_ = $tmp;
          $limit-=$len;
          break;
        case 5:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->postalCode_ = $tmp;
          $limit-=$len;
          break;
        case 6:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->country_ = $tmp;
          $limit-=$len;
          break;
        case 7:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->name_ = $tmp;
          $limit-=$len;
          break;
        case 8:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->type_ = $tmp;
          $limit-=$len;
          break;
        case 9:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->phone_ = $tmp;
          $limit-=$len;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->address1_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, strlen((string)$this->address1_));
      fwrite($fp, (string)$this->address1_);
    }
    if (!is_null($this->address2_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, strlen((string)$this->address2_));
      fwrite($fp, (string)$this->address2_);
    }
    if (!is_null($this->city_)) {
      fwrite($fp, "\x1a");
      Protobuf::write_varint($fp, strlen((string)$this->city_));
      fwrite($fp, (string)$this->city_);
    }
    if (!is_null($this->state_)) {
      fwrite($fp, "\"");
      Protobuf::write_varint($fp, strlen((string)$this->state_));
      fwrite($fp, (string)$this->state_);
    }
    if (!is_null($this->postalCode_)) {
      fwrite($fp, "*");
      Protobuf::write_varint($fp, strlen((string)$this->postalCode_));
      fwrite($fp, (string)$this->postalCode_);
    }
    if (!is_null($this->country_)) {
      fwrite($fp, "2");
      Protobuf::write_varint($fp, strlen((string)$this->country_));
      fwrite($fp, (string)$this->country_);
    }
    if (!is_null($this->name_)) {
      fwrite($fp, ":");
      Protobuf::write_varint($fp, strlen((string)$this->name_));
      fwrite($fp, (string)$this->name_);
    }
    if (!is_null($this->type_)) {
      fwrite($fp, "B");
      Protobuf::write_varint($fp, strlen((string)$this->type_));
      fwrite($fp, (string)$this->type_);
    }
    if (!is_null($this->phone_)) {
      fwrite($fp, "J");
      Protobuf::write_varint($fp, strlen((string)$this->phone_));
      fwrite($fp, (string)$this->phone_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->address1_)) {
      $l = strlen((string)$this->address1_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->address2_)) {
      $l = strlen((string)$this->address2_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->city_)) {
      $l = strlen((string)$this->city_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->state_)) {
      $l = strlen((string)$this->state_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->postalCode_)) {
      $l = strlen((string)$this->postalCode_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->country_)) {
      $l = strlen((string)$this->country_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->name_)) {
      $l = strlen((string)$this->name_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->type_)) {
      $l = strlen((string)$this->type_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->phone_)) {
      $l = strlen((string)$this->phone_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('address1_', $this->address1_)
         . Protobuf::toString('address2_', $this->address2_)
         . Protobuf::toString('city_', $this->city_)
         . Protobuf::toString('state_', $this->state_)
         . Protobuf::toString('postalCode_', $this->postalCode_)
         . Protobuf::toString('country_', $this->country_)
         . Protobuf::toString('name_', $this->name_)
         . Protobuf::toString('type_', $this->type_)
         . Protobuf::toString('phone_', $this->phone_);
  }
  
  // optional string address1 = 1;

  protected $address1_;
  public function resetAddress1() { unset($this->address1_); }
  public function clearAddress1() { unset($this->address1_); }
  public function hasAddress1() { return isset($this->address1_); }
  public function getAddress1() { return $this->address1_; }
  public function setAddress1($value) { $this->address1_ = (string)$value; }
  
  // optional string address2 = 2;

  protected $address2_;
  public function resetAddress2() { unset($this->address2_); }
  public function clearAddress2() { unset($this->address2_); }
  public function hasAddress2() { return isset($this->address2_); }
  public function getAddress2() { return $this->address2_; }
  public function setAddress2($value) { $this->address2_ = (string)$value; }
  
  // optional string city = 3;

  protected $city_;
  public function resetCity() { unset($this->city_); }
  public function clearCity() { unset($this->city_); }
  public function hasCity() { return isset($this->city_); }
  public function getCity() { return $this->city_; }
  public function setCity($value) { $this->city_ = (string)$value; }
  
  // optional string state = 4;

  protected $state_;
  public function resetState() { unset($this->state_); }
  public function clearState() { unset($this->state_); }
  public function hasState() { return isset($this->state_); }
  public function getState() { return $this->state_; }
  public function setState($value) { $this->state_ = (string)$value; }
  
  // optional string postalCode = 5;

  protected $postalCode_;
  public function resetPostalCode() { unset($this->postalCode_); }
  public function clearPostalCode() { unset($this->postalCode_); }
  public function hasPostalCode() { return isset($this->postalCode_); }
  public function getPostalCode() { return $this->postalCode_; }
  public function setPostalCode($value) { $this->postalCode_ = (string)$value; }
  
  // optional string country = 6;

  protected $country_;
  public function resetCountry() { unset($this->country_); }
  public function clearCountry() { unset($this->country_); }
  public function hasCountry() { return isset($this->country_); }
  public function getCountry() { return $this->country_; }
  public function setCountry($value) { $this->country_ = (string)$value; }
  
  // optional string name = 7;

  protected $name_;
  public function resetName() { unset($this->name_); }
  public function clearName() { unset($this->name_); }
  public function hasName() { return isset($this->name_); }
  public function getName() { return $this->name_; }
  public function setName($value) { $this->name_ = (string)$value; }
  
  // optional string type = 8;

  protected $type_;
  public function resetType() { unset($this->type_); }
  public function clearType() { unset($this->type_); }
  public function hasType() { return isset($this->type_); }
  public function getType() { return $this->type_; }
  public function setType($value) { $this->type_ = (string)$value; }
  
  // optional string phone = 9;

  protected $phone_;
  public function resetPhone() { unset($this->phone_); }
  public function clearPhone() { unset($this->phone_); }
  public function hasPhone() { return isset($this->phone_); }
  public function getPhone() { return $this->phone_; }
  public function setPhone($value) { $this->phone_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:AddressProto)
}

// message AppDataProto
class AppDataProto {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("AppDataProto: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->key_ = $tmp;
          $limit-=$len;
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->value_ = $tmp;
          $limit-=$len;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->key_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, strlen((string)$this->key_));
      fwrite($fp, (string)$this->key_);
    }
    if (!is_null($this->value_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, strlen((string)$this->value_));
      fwrite($fp, (string)$this->value_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->key_)) {
      $l = strlen((string)$this->key_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->value_)) {
      $l = strlen((string)$this->value_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('key_', $this->key_)
         . Protobuf::toString('value_', $this->value_);
  }
  
  // optional string key = 1;

  protected $key_;
  public function resetKey() { unset($this->key_); }
  public function clearKey() { unset($this->key_); }
  public function hasKey() { return isset($this->key_); }
  public function getKey() { return $this->key_; }
  public function setKey($value) { $this->key_ = (string)$value; }
  
  // optional string value = 2;

  protected $value_;
  public function resetValue() { unset($this->value_); }
  public function clearValue() { unset($this->value_); }
  public function hasValue() { return isset($this->value_); }
  public function getValue() { return $this->value_; }
  public function setValue($value) { $this->value_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:AppDataProto)
}

// message AppSuggestionProto
class AppSuggestionProto {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("AppSuggestionProto: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->assetInfo_ = new ExternalAssetProto($fp, $len);
          ASSERT('$len == 0');
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->assetInfo_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, $this->assetInfo_->size()); // message
      $this->assetInfo_->write($fp);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->assetInfo_)) {
      $l = $this->assetInfo_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('assetInfo_', $this->assetInfo_);
  }
  
  // optional .ExternalAssetProto assetInfo = 1;

  protected $assetInfo_;
  public function resetAssetInfo() { unset($this->assetInfo_); }
  public function clearAssetInfo() { unset($this->assetInfo_); }
  public function hasAssetInfo() { return isset($this->assetInfo_); }
  public function getAssetInfo() { return $this->assetInfo_; }
  public function setAssetInfo(ExternalAssetProto $value) { $this->assetInfo_ = $value; }
  
  // @@protoc_insertion_point(class_scope:AppSuggestionProto)
}

// message AssetIdentifierProto
class AssetIdentifierProto {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("AssetIdentifierProto: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->packageName_ = $tmp;
          $limit-=$len;
          break;
        case 2:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->versionCode_ = $tmp;
          
          break;
        case 3:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->assetId_ = $tmp;
          $limit-=$len;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->packageName_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, strlen((string)$this->packageName_));
      fwrite($fp, (string)$this->packageName_);
    }
    if (!is_null($this->versionCode_)) {
      fwrite($fp, "\x10");
      Protobuf::write_varint($fp, (int)$this->versionCode_);
    }
    if (!is_null($this->assetId_)) {
      fwrite($fp, "\x1a");
      Protobuf::write_varint($fp, strlen((string)$this->assetId_));
      fwrite($fp, (string)$this->assetId_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->packageName_)) {
      $l = strlen((string)$this->packageName_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->versionCode_)) {
      $size += 1 + Protobuf::size_varint($this->versionCode_);
    }
    if (!is_null($this->assetId_)) {
      $l = strlen((string)$this->assetId_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('packageName_', $this->packageName_)
         . Protobuf::toString('versionCode_', $this->versionCode_)
         . Protobuf::toString('assetId_', $this->assetId_);
  }
  
  // optional string packageName = 1;

  protected $packageName_;
  public function resetPackageName() { unset($this->packageName_); }
  public function clearPackageName() { unset($this->packageName_); }
  public function hasPackageName() { return isset($this->packageName_); }
  public function getPackageName() { return $this->packageName_; }
  public function setPackageName($value) { $this->packageName_ = (string)$value; }
  
  // optional int32 versionCode = 2;

  protected $versionCode_;
  public function resetVersionCode() { unset($this->versionCode_); }
  public function clearVersionCode() { unset($this->versionCode_); }
  public function hasVersionCode() { return isset($this->versionCode_); }
  public function getVersionCode() { return $this->versionCode_; }
  public function setVersionCode($value) { $this->versionCode_ = (string)$value; }
  
  // optional string assetId = 3;

  protected $assetId_;
  public function resetAssetId() { unset($this->assetId_); }
  public function clearAssetId() { unset($this->assetId_); }
  public function hasAssetId() { return isset($this->assetId_); }
  public function getAssetId() { return $this->assetId_; }
  public function setAssetId($value) { $this->assetId_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:AssetIdentifierProto)
}

// message AssetsRequestProto
class AssetsRequestProto {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("AssetsRequestProto: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->assetType_ = $tmp;
          
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->query_ = $tmp;
          $limit-=$len;
          break;
        case 3:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->categoryId_ = $tmp;
          $limit-=$len;
          break;
        case 4:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->assetId_[] = $tmp;
          $limit-=$len;
          break;
        case 5:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->retrieveVendingHistory_ = $tmp > 0 ? true : false;
          break;
        case 6:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->retrieveExtendedInfo_ = $tmp > 0 ? true : false;
          break;
        case 7:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->sortOrder_ = $tmp;
          
          break;
        case 8:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->startIndex_ = $tmp;
          
          break;
        case 9:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->numEntries_ = $tmp;
          
          break;
        case 10:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->viewFilter_ = $tmp;
          
          break;
        case 11:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->rankingType_ = $tmp;
          $limit-=$len;
          break;
        case 12:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->retrieveCarrierChannel_ = $tmp > 0 ? true : false;
          break;
        case 13:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->pendingDownloadAssetId_[] = $tmp;
          $limit-=$len;
          break;
        case 14:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->reconstructVendingHistory_ = $tmp > 0 ? true : false;
          break;
        case 15:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->unfilteredResults_ = $tmp > 0 ? true : false;
          break;
        case 16:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->badgeId_[] = $tmp;
          $limit-=$len;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->assetType_)) {
      fwrite($fp, "\x08");
      Protobuf::write_varint($fp, (int)$this->assetType_);
    }
    if (!is_null($this->query_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, strlen((string)$this->query_));
      fwrite($fp, (string)$this->query_);
    }
    if (!is_null($this->categoryId_)) {
      fwrite($fp, "\x1a");
      Protobuf::write_varint($fp, strlen((string)$this->categoryId_));
      fwrite($fp, (string)$this->categoryId_);
    }
    if (!is_null($this->assetId_))
      foreach($this->assetId_ as $v) {
        fwrite($fp, "\"");
        Protobuf::write_varint($fp, strlen((string)$v));
        fwrite($fp, (string)$v);
      }
    if (!is_null($this->retrieveVendingHistory_)) {
      fwrite($fp, "(");
      Protobuf::write_varint($fp, (int)$this->retrieveVendingHistory_ ? 1 : 0);
    }
    if (!is_null($this->retrieveExtendedInfo_)) {
      fwrite($fp, "0");
      Protobuf::write_varint($fp, (int)$this->retrieveExtendedInfo_ ? 1 : 0);
    }
    if (!is_null($this->sortOrder_)) {
      fwrite($fp, "8");
      Protobuf::write_varint($fp, (int)$this->sortOrder_);
    }
    if (!is_null($this->startIndex_)) {
      fwrite($fp, "@");
      Protobuf::write_varint($fp, (int)$this->startIndex_);
    }
    if (!is_null($this->numEntries_)) {
      fwrite($fp, "H");
      Protobuf::write_varint($fp, (int)$this->numEntries_);
    }
    if (!is_null($this->viewFilter_)) {
      fwrite($fp, "P");
      Protobuf::write_varint($fp, (int)$this->viewFilter_);
    }
    if (!is_null($this->rankingType_)) {
      fwrite($fp, "Z");
      Protobuf::write_varint($fp, strlen((string)$this->rankingType_));
      fwrite($fp, (string)$this->rankingType_);
    }
    if (!is_null($this->retrieveCarrierChannel_)) {
      fwrite($fp, "`");
      Protobuf::write_varint($fp, (int)$this->retrieveCarrierChannel_ ? 1 : 0);
    }
    if (!is_null($this->pendingDownloadAssetId_))
      foreach($this->pendingDownloadAssetId_ as $v) {
        fwrite($fp, "j");
        Protobuf::write_varint($fp, strlen((string)$v));
        fwrite($fp, (string)$v);
      }
    if (!is_null($this->reconstructVendingHistory_)) {
      fwrite($fp, "p");
      Protobuf::write_varint($fp, (int)$this->reconstructVendingHistory_ ? 1 : 0);
    }
    if (!is_null($this->unfilteredResults_)) {
      fwrite($fp, "x");
      Protobuf::write_varint($fp, (int)$this->unfilteredResults_ ? 1 : 0);
    }
    if (!is_null($this->badgeId_))
      foreach($this->badgeId_ as $v) {
        fwrite($fp, "\x82\x01");
        Protobuf::write_varint($fp, strlen((string)$v));
        fwrite($fp, (string)$v);
      }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->assetType_)) {
      $size += 1 + Protobuf::size_varint($this->assetType_);
    }
    if (!is_null($this->query_)) {
      $l = strlen((string)$this->query_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->categoryId_)) {
      $l = strlen((string)$this->categoryId_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->assetId_))
      foreach($this->assetId_ as $v) {
        $l = strlen((string)$v);
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
    if (!is_null($this->retrieveVendingHistory_)) {
      $size += 2;
    }
    if (!is_null($this->retrieveExtendedInfo_)) {
      $size += 2;
    }
    if (!is_null($this->sortOrder_)) {
      $size += 1 + Protobuf::size_varint($this->sortOrder_);
    }
    if (!is_null($this->startIndex_)) {
      $size += 1 + Protobuf::size_varint($this->startIndex_);
    }
    if (!is_null($this->numEntries_)) {
      $size += 1 + Protobuf::size_varint($this->numEntries_);
    }
    if (!is_null($this->viewFilter_)) {
      $size += 1 + Protobuf::size_varint($this->viewFilter_);
    }
    if (!is_null($this->rankingType_)) {
      $l = strlen((string)$this->rankingType_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->retrieveCarrierChannel_)) {
      $size += 2;
    }
    if (!is_null($this->pendingDownloadAssetId_))
      foreach($this->pendingDownloadAssetId_ as $v) {
        $l = strlen((string)$v);
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
    if (!is_null($this->reconstructVendingHistory_)) {
      $size += 2;
    }
    if (!is_null($this->unfilteredResults_)) {
      $size += 2;
    }
    if (!is_null($this->badgeId_))
      foreach($this->badgeId_ as $v) {
        $l = strlen((string)$v);
        $size += 2 + Protobuf::size_varint($l) + $l;
      }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('assetType_', $this->assetType_)
         . Protobuf::toString('query_', $this->query_)
         . Protobuf::toString('categoryId_', $this->categoryId_)
         . Protobuf::toString('assetId_', $this->assetId_)
         . Protobuf::toString('retrieveVendingHistory_', $this->retrieveVendingHistory_)
         . Protobuf::toString('retrieveExtendedInfo_', $this->retrieveExtendedInfo_)
         . Protobuf::toString('sortOrder_', $this->sortOrder_)
         . Protobuf::toString('startIndex_', $this->startIndex_)
         . Protobuf::toString('numEntries_', $this->numEntries_)
         . Protobuf::toString('viewFilter_', $this->viewFilter_)
         . Protobuf::toString('rankingType_', $this->rankingType_)
         . Protobuf::toString('retrieveCarrierChannel_', $this->retrieveCarrierChannel_)
         . Protobuf::toString('pendingDownloadAssetId_', $this->pendingDownloadAssetId_)
         . Protobuf::toString('reconstructVendingHistory_', $this->reconstructVendingHistory_)
         . Protobuf::toString('unfilteredResults_', $this->unfilteredResults_)
         . Protobuf::toString('badgeId_', $this->badgeId_);
  }
  
  // optional int32 assetType = 1;

  protected $assetType_;
  public function resetAssetType() { unset($this->assetType_); }
  public function clearAssetType() { unset($this->assetType_); }
  public function hasAssetType() { return isset($this->assetType_); }
  public function getAssetType() { return $this->assetType_; }
  public function setAssetType($value) { $this->assetType_ = (string)$value; }
  
  // optional string query = 2;

  protected $query_;
  public function resetQuery() { unset($this->query_); }
  public function clearQuery() { unset($this->query_); }
  public function hasQuery() { return isset($this->query_); }
  public function getQuery() { return $this->query_; }
  public function setQuery($value) { $this->query_ = (string)$value; }
  
  // optional string categoryId = 3;

  protected $categoryId_;
  public function resetCategoryId() { unset($this->categoryId_); }
  public function clearCategoryId() { unset($this->categoryId_); }
  public function hasCategoryId() { return isset($this->categoryId_); }
  public function getCategoryId() { return $this->categoryId_; }
  public function setCategoryId($value) { $this->categoryId_ = (string)$value; }
  
  // repeated string assetId = 4;

  protected $assetId_ = array();
  public function clearAssetId() { $this->assetId_ = array(); }
  public function getAssetIdCount() { return count($this->assetId_); }
  public function hasAssetId() { return (count($this->assetId_) > 0); }
  public function indexOfAssetId($value) { return array_search($value,$this->assetId_);}
  public function removeAssetId($index) { unset($this->assetId_[$index]); }
  public function removeValAssetId($value) { $idx = array_search($value,$this->assetId_); if($idx !== FALSE){unset($this->assetId_[$idx]); }}
  public function removeValsAssetId($values) { foreach($values as $value){$idx = array_search($value,$this->assetId_); if($idx !== FALSE){unset($this->assetId_[$idx]); }}}
  public function pushAssetId($newvar) { return array_push($this->assetId_,(string)$newvar); }
  public function popAssetId() { return array_pop($this->assetId_); }
  public function shiftAssetId() { return array_shift($this->assetId_); }
  public function unshiftAssetId($newvar) { return array_unshift($this->assetId_,(string)$newvar); }
  public function getAssetId($index) { return $this->assetId_[$index]; }
  public function getAssetIdArray() { return $this->assetId_; }
  public function setAssetId($index, $value) {$this->assetId_[$index] = (string)$value;	}
  public function addAssetId($value) { $this->assetId_[] = (string)$value; }
  public function addAllAssetId(array $values) { foreach($values as $value) {$this->assetId_[] = (string)$value;} }
  
  // optional bool retrieveVendingHistory = 5;

  protected $retrieveVendingHistory_;
  public function resetRetrieveVendingHistory() { unset($this->retrieveVendingHistory_); }
  public function clearRetrieveVendingHistory() { unset($this->retrieveVendingHistory_); }
  public function hasRetrieveVendingHistory() { return isset($this->retrieveVendingHistory_); }
  public function getRetrieveVendingHistory() { return $this->retrieveVendingHistory_; }
  public function setRetrieveVendingHistory($value) { $this->retrieveVendingHistory_ = (bool)$value; }
  
  // optional bool retrieveExtendedInfo = 6;

  protected $retrieveExtendedInfo_;
  public function resetRetrieveExtendedInfo() { unset($this->retrieveExtendedInfo_); }
  public function clearRetrieveExtendedInfo() { unset($this->retrieveExtendedInfo_); }
  public function hasRetrieveExtendedInfo() { return isset($this->retrieveExtendedInfo_); }
  public function getRetrieveExtendedInfo() { return $this->retrieveExtendedInfo_; }
  public function setRetrieveExtendedInfo($value) { $this->retrieveExtendedInfo_ = (bool)$value; }
  
  // optional int32 sortOrder = 7;

  protected $sortOrder_;
  public function resetSortOrder() { unset($this->sortOrder_); }
  public function clearSortOrder() { unset($this->sortOrder_); }
  public function hasSortOrder() { return isset($this->sortOrder_); }
  public function getSortOrder() { return $this->sortOrder_; }
  public function setSortOrder($value) { $this->sortOrder_ = (string)$value; }
  
  // optional int64 startIndex = 8;

  protected $startIndex_;
  public function resetStartIndex() { unset($this->startIndex_); }
  public function clearStartIndex() { unset($this->startIndex_); }
  public function hasStartIndex() { return isset($this->startIndex_); }
  public function getStartIndex() { return $this->startIndex_; }
  public function setStartIndex($value) { $this->startIndex_ = (string)$value; }
  
  // optional int64 numEntries = 9;

  protected $numEntries_;
  public function resetNumEntries() { unset($this->numEntries_); }
  public function clearNumEntries() { unset($this->numEntries_); }
  public function hasNumEntries() { return isset($this->numEntries_); }
  public function getNumEntries() { return $this->numEntries_; }
  public function setNumEntries($value) { $this->numEntries_ = (string)$value; }
  
  // optional int32 viewFilter = 10;

  protected $viewFilter_;
  public function resetViewFilter() { unset($this->viewFilter_); }
  public function clearViewFilter() { unset($this->viewFilter_); }
  public function hasViewFilter() { return isset($this->viewFilter_); }
  public function getViewFilter() { return $this->viewFilter_; }
  public function setViewFilter($value) { $this->viewFilter_ = (string)$value; }
  
  // optional string rankingType = 11;

  protected $rankingType_;
  public function resetRankingType() { unset($this->rankingType_); }
  public function clearRankingType() { unset($this->rankingType_); }
  public function hasRankingType() { return isset($this->rankingType_); }
  public function getRankingType() { return $this->rankingType_; }
  public function setRankingType($value) { $this->rankingType_ = (string)$value; }
  
  // optional bool retrieveCarrierChannel = 12;

  protected $retrieveCarrierChannel_;
  public function resetRetrieveCarrierChannel() { unset($this->retrieveCarrierChannel_); }
  public function clearRetrieveCarrierChannel() { unset($this->retrieveCarrierChannel_); }
  public function hasRetrieveCarrierChannel() { return isset($this->retrieveCarrierChannel_); }
  public function getRetrieveCarrierChannel() { return $this->retrieveCarrierChannel_; }
  public function setRetrieveCarrierChannel($value) { $this->retrieveCarrierChannel_ = (bool)$value; }
  
  // repeated string pendingDownloadAssetId = 13;

  protected $pendingDownloadAssetId_ = array();
  public function clearPendingDownloadAssetId() { $this->pendingDownloadAssetId_ = array(); }
  public function getPendingDownloadAssetIdCount() { return count($this->pendingDownloadAssetId_); }
  public function hasPendingDownloadAssetId() { return (count($this->pendingDownloadAssetId_) > 0); }
  public function indexOfPendingDownloadAssetId($value) { return array_search($value,$this->pendingDownloadAssetId_);}
  public function removePendingDownloadAssetId($index) { unset($this->pendingDownloadAssetId_[$index]); }
  public function removeValPendingDownloadAssetId($value) { $idx = array_search($value,$this->pendingDownloadAssetId_); if($idx !== FALSE){unset($this->pendingDownloadAssetId_[$idx]); }}
  public function removeValsPendingDownloadAssetId($values) { foreach($values as $value){$idx = array_search($value,$this->pendingDownloadAssetId_); if($idx !== FALSE){unset($this->pendingDownloadAssetId_[$idx]); }}}
  public function pushPendingDownloadAssetId($newvar) { return array_push($this->pendingDownloadAssetId_,(string)$newvar); }
  public function popPendingDownloadAssetId() { return array_pop($this->pendingDownloadAssetId_); }
  public function shiftPendingDownloadAssetId() { return array_shift($this->pendingDownloadAssetId_); }
  public function unshiftPendingDownloadAssetId($newvar) { return array_unshift($this->pendingDownloadAssetId_,(string)$newvar); }
  public function getPendingDownloadAssetId($index) { return $this->pendingDownloadAssetId_[$index]; }
  public function getPendingDownloadAssetIdArray() { return $this->pendingDownloadAssetId_; }
  public function setPendingDownloadAssetId($index, $value) {$this->pendingDownloadAssetId_[$index] = (string)$value;	}
  public function addPendingDownloadAssetId($value) { $this->pendingDownloadAssetId_[] = (string)$value; }
  public function addAllPendingDownloadAssetId(array $values) { foreach($values as $value) {$this->pendingDownloadAssetId_[] = (string)$value;} }
  
  // optional bool reconstructVendingHistory = 14;

  protected $reconstructVendingHistory_;
  public function resetReconstructVendingHistory() { unset($this->reconstructVendingHistory_); }
  public function clearReconstructVendingHistory() { unset($this->reconstructVendingHistory_); }
  public function hasReconstructVendingHistory() { return isset($this->reconstructVendingHistory_); }
  public function getReconstructVendingHistory() { return $this->reconstructVendingHistory_; }
  public function setReconstructVendingHistory($value) { $this->reconstructVendingHistory_ = (bool)$value; }
  
  // optional bool unfilteredResults = 15;

  protected $unfilteredResults_;
  public function resetUnfilteredResults() { unset($this->unfilteredResults_); }
  public function clearUnfilteredResults() { unset($this->unfilteredResults_); }
  public function hasUnfilteredResults() { return isset($this->unfilteredResults_); }
  public function getUnfilteredResults() { return $this->unfilteredResults_; }
  public function setUnfilteredResults($value) { $this->unfilteredResults_ = (bool)$value; }
  
  // repeated string badgeId = 16;

  protected $badgeId_ = array();
  public function clearBadgeId() { $this->badgeId_ = array(); }
  public function getBadgeIdCount() { return count($this->badgeId_); }
  public function hasBadgeId() { return (count($this->badgeId_) > 0); }
  public function indexOfBadgeId($value) { return array_search($value,$this->badgeId_);}
  public function removeBadgeId($index) { unset($this->badgeId_[$index]); }
  public function removeValBadgeId($value) { $idx = array_search($value,$this->badgeId_); if($idx !== FALSE){unset($this->badgeId_[$idx]); }}
  public function removeValsBadgeId($values) { foreach($values as $value){$idx = array_search($value,$this->badgeId_); if($idx !== FALSE){unset($this->badgeId_[$idx]); }}}
  public function pushBadgeId($newvar) { return array_push($this->badgeId_,(string)$newvar); }
  public function popBadgeId() { return array_pop($this->badgeId_); }
  public function shiftBadgeId() { return array_shift($this->badgeId_); }
  public function unshiftBadgeId($newvar) { return array_unshift($this->badgeId_,(string)$newvar); }
  public function getBadgeId($index) { return $this->badgeId_[$index]; }
  public function getBadgeIdArray() { return $this->badgeId_; }
  public function setBadgeId($index, $value) {$this->badgeId_[$index] = (string)$value;	}
  public function addBadgeId($value) { $this->badgeId_[] = (string)$value; }
  public function addAllBadgeId(array $values) { foreach($values as $value) {$this->badgeId_[] = (string)$value;} }
  
  // @@protoc_insertion_point(class_scope:AssetsRequestProto)
}

// message AssetsResponseProto
class AssetsResponseProto {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("AssetsResponseProto: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->asset_[] = new ExternalAssetProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 2:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->numTotalEntries_ = $tmp;
          
          break;
        case 3:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->correctedQuery_ = $tmp;
          $limit-=$len;
          break;
        case 4:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->altAsset_[] = new ExternalAssetProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 5:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->numCorrectedEntries_ = $tmp;
          
          break;
        case 6:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->header_ = $tmp;
          $limit-=$len;
          break;
        case 7:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->listType_ = $tmp;
          
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->asset_))
      foreach($this->asset_ as $v) {
        fwrite($fp, "\x0a");
        Protobuf::write_varint($fp, $v->size()); // message
        $v->write($fp);
      }
    if (!is_null($this->numTotalEntries_)) {
      fwrite($fp, "\x10");
      Protobuf::write_varint($fp, (int)$this->numTotalEntries_);
    }
    if (!is_null($this->correctedQuery_)) {
      fwrite($fp, "\x1a");
      Protobuf::write_varint($fp, strlen((string)$this->correctedQuery_));
      fwrite($fp, (string)$this->correctedQuery_);
    }
    if (!is_null($this->altAsset_))
      foreach($this->altAsset_ as $v) {
        fwrite($fp, "\"");
        Protobuf::write_varint($fp, $v->size()); // message
        $v->write($fp);
      }
    if (!is_null($this->numCorrectedEntries_)) {
      fwrite($fp, "(");
      Protobuf::write_varint($fp, (int)$this->numCorrectedEntries_);
    }
    if (!is_null($this->header_)) {
      fwrite($fp, "2");
      Protobuf::write_varint($fp, strlen((string)$this->header_));
      fwrite($fp, (string)$this->header_);
    }
    if (!is_null($this->listType_)) {
      fwrite($fp, "8");
      Protobuf::write_varint($fp, (int)$this->listType_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->asset_))
      foreach($this->asset_ as $v) {
        $l = $v->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
    if (!is_null($this->numTotalEntries_)) {
      $size += 1 + Protobuf::size_varint($this->numTotalEntries_);
    }
    if (!is_null($this->correctedQuery_)) {
      $l = strlen((string)$this->correctedQuery_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->altAsset_))
      foreach($this->altAsset_ as $v) {
        $l = $v->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
    if (!is_null($this->numCorrectedEntries_)) {
      $size += 1 + Protobuf::size_varint($this->numCorrectedEntries_);
    }
    if (!is_null($this->header_)) {
      $l = strlen((string)$this->header_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->listType_)) {
      $size += 1 + Protobuf::size_varint($this->listType_);
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('asset_', $this->asset_)
         . Protobuf::toString('numTotalEntries_', $this->numTotalEntries_)
         . Protobuf::toString('correctedQuery_', $this->correctedQuery_)
         . Protobuf::toString('altAsset_', $this->altAsset_)
         . Protobuf::toString('numCorrectedEntries_', $this->numCorrectedEntries_)
         . Protobuf::toString('header_', $this->header_)
         . Protobuf::toString('listType_', $this->listType_);
  }
  
  // repeated .ExternalAssetProto asset = 1;

  protected $asset_ = array();
  public function clearAsset() { $this->asset_ = array(); }
  public function getAssetCount() { return count($this->asset_); }
  public function hasAsset() { return (count($this->asset_) > 0); }
  public function indexOfAsset($value) { return array_search($value,$this->asset_);}
  public function removeAsset($index) { unset($this->asset_[$index]); }
  public function removeValAsset($value) { $idx = array_search($value,$this->asset_); if($idx !== FALSE){unset($this->asset_[$idx]); }}
  public function removeValsAsset($values) { foreach($values as $value){$idx = array_search($value,$this->asset_); if($idx !== FALSE){unset($this->asset_[$idx]); }}}
  public function pushAsset($newvar) { return array_push($this->asset_,$newvar); }
  public function popAsset() { return array_pop($this->asset_); }
  public function shiftAsset() { return array_shift($this->asset_); }
  public function unshiftAsset($newvar) { return array_unshift($this->asset_,$newvar); }
  public function getAsset($index) { return $this->asset_[$index]; }
  public function getAssetArray() { return $this->asset_; }
  public function setAsset($index, $value) {$this->asset_[$index] = $value;	}
  public function addAsset($value) { $this->asset_[] = $value; }
  public function addAllAsset(array $values) { foreach($values as $value) {$this->asset_[] = $value;} }
  
  // optional int64 numTotalEntries = 2;

  protected $numTotalEntries_;
  public function resetNumTotalEntries() { unset($this->numTotalEntries_); }
  public function clearNumTotalEntries() { unset($this->numTotalEntries_); }
  public function hasNumTotalEntries() { return isset($this->numTotalEntries_); }
  public function getNumTotalEntries() { return $this->numTotalEntries_; }
  public function setNumTotalEntries($value) { $this->numTotalEntries_ = (string)$value; }
  
  // optional string correctedQuery = 3;

  protected $correctedQuery_;
  public function resetCorrectedQuery() { unset($this->correctedQuery_); }
  public function clearCorrectedQuery() { unset($this->correctedQuery_); }
  public function hasCorrectedQuery() { return isset($this->correctedQuery_); }
  public function getCorrectedQuery() { return $this->correctedQuery_; }
  public function setCorrectedQuery($value) { $this->correctedQuery_ = (string)$value; }
  
  // repeated .ExternalAssetProto altAsset = 4;

  protected $altAsset_ = array();
  public function clearAltAsset() { $this->altAsset_ = array(); }
  public function getAltAssetCount() { return count($this->altAsset_); }
  public function hasAltAsset() { return (count($this->altAsset_) > 0); }
  public function indexOfAltAsset($value) { return array_search($value,$this->altAsset_);}
  public function removeAltAsset($index) { unset($this->altAsset_[$index]); }
  public function removeValAltAsset($value) { $idx = array_search($value,$this->altAsset_); if($idx !== FALSE){unset($this->altAsset_[$idx]); }}
  public function removeValsAltAsset($values) { foreach($values as $value){$idx = array_search($value,$this->altAsset_); if($idx !== FALSE){unset($this->altAsset_[$idx]); }}}
  public function pushAltAsset($newvar) { return array_push($this->altAsset_,$newvar); }
  public function popAltAsset() { return array_pop($this->altAsset_); }
  public function shiftAltAsset() { return array_shift($this->altAsset_); }
  public function unshiftAltAsset($newvar) { return array_unshift($this->altAsset_,$newvar); }
  public function getAltAsset($index) { return $this->altAsset_[$index]; }
  public function getAltAssetArray() { return $this->altAsset_; }
  public function setAltAsset($index, $value) {$this->altAsset_[$index] = $value;	}
  public function addAltAsset($value) { $this->altAsset_[] = $value; }
  public function addAllAltAsset(array $values) { foreach($values as $value) {$this->altAsset_[] = $value;} }
  
  // optional int64 numCorrectedEntries = 5;

  protected $numCorrectedEntries_;
  public function resetNumCorrectedEntries() { unset($this->numCorrectedEntries_); }
  public function clearNumCorrectedEntries() { unset($this->numCorrectedEntries_); }
  public function hasNumCorrectedEntries() { return isset($this->numCorrectedEntries_); }
  public function getNumCorrectedEntries() { return $this->numCorrectedEntries_; }
  public function setNumCorrectedEntries($value) { $this->numCorrectedEntries_ = (string)$value; }
  
  // optional string header = 6;

  protected $header_;
  public function resetHeader() { unset($this->header_); }
  public function clearHeader() { unset($this->header_); }
  public function hasHeader() { return isset($this->header_); }
  public function getHeader() { return $this->header_; }
  public function setHeader($value) { $this->header_ = (string)$value; }
  
  // optional int32 listType = 7;

  protected $listType_;
  public function resetListType() { unset($this->listType_); }
  public function clearListType() { unset($this->listType_); }
  public function hasListType() { return isset($this->listType_); }
  public function getListType() { return $this->listType_; }
  public function setListType($value) { $this->listType_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:AssetsResponseProto)
}

// message BillingEventRequestProto
class BillingEventRequestProto {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("BillingEventRequestProto: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->eventType_ = $tmp;
          
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->billingParametersId_ = $tmp;
          $limit-=$len;
          break;
        case 3:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->resultSuccess_ = $tmp > 0 ? true : false;
          break;
        case 4:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->clientMessage_ = $tmp;
          $limit-=$len;
          break;
        case 5:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->carrierInstrument_ = new ExternalCarrierBillingInstrumentProto($fp, $len);
          ASSERT('$len == 0');
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->eventType_)) {
      fwrite($fp, "\x08");
      Protobuf::write_varint($fp, (int)$this->eventType_);
    }
    if (!is_null($this->billingParametersId_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, strlen((string)$this->billingParametersId_));
      fwrite($fp, (string)$this->billingParametersId_);
    }
    if (!is_null($this->resultSuccess_)) {
      fwrite($fp, "\x18");
      Protobuf::write_varint($fp, (int)$this->resultSuccess_ ? 1 : 0);
    }
    if (!is_null($this->clientMessage_)) {
      fwrite($fp, "\"");
      Protobuf::write_varint($fp, strlen((string)$this->clientMessage_));
      fwrite($fp, (string)$this->clientMessage_);
    }
    if (!is_null($this->carrierInstrument_)) {
      fwrite($fp, "*");
      Protobuf::write_varint($fp, $this->carrierInstrument_->size()); // message
      $this->carrierInstrument_->write($fp);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->eventType_)) {
      $size += 1 + Protobuf::size_varint($this->eventType_);
    }
    if (!is_null($this->billingParametersId_)) {
      $l = strlen((string)$this->billingParametersId_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->resultSuccess_)) {
      $size += 2;
    }
    if (!is_null($this->clientMessage_)) {
      $l = strlen((string)$this->clientMessage_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->carrierInstrument_)) {
      $l = $this->carrierInstrument_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('eventType_', $this->eventType_)
         . Protobuf::toString('billingParametersId_', $this->billingParametersId_)
         . Protobuf::toString('resultSuccess_', $this->resultSuccess_)
         . Protobuf::toString('clientMessage_', $this->clientMessage_)
         . Protobuf::toString('carrierInstrument_', $this->carrierInstrument_);
  }
  
  // optional int32 eventType = 1;

  protected $eventType_;
  public function resetEventType() { unset($this->eventType_); }
  public function clearEventType() { unset($this->eventType_); }
  public function hasEventType() { return isset($this->eventType_); }
  public function getEventType() { return $this->eventType_; }
  public function setEventType($value) { $this->eventType_ = (string)$value; }
  
  // optional string billingParametersId = 2;

  protected $billingParametersId_;
  public function resetBillingParametersId() { unset($this->billingParametersId_); }
  public function clearBillingParametersId() { unset($this->billingParametersId_); }
  public function hasBillingParametersId() { return isset($this->billingParametersId_); }
  public function getBillingParametersId() { return $this->billingParametersId_; }
  public function setBillingParametersId($value) { $this->billingParametersId_ = (string)$value; }
  
  // optional bool resultSuccess = 3;

  protected $resultSuccess_;
  public function resetResultSuccess() { unset($this->resultSuccess_); }
  public function clearResultSuccess() { unset($this->resultSuccess_); }
  public function hasResultSuccess() { return isset($this->resultSuccess_); }
  public function getResultSuccess() { return $this->resultSuccess_; }
  public function setResultSuccess($value) { $this->resultSuccess_ = (bool)$value; }
  
  // optional string clientMessage = 4;

  protected $clientMessage_;
  public function resetClientMessage() { unset($this->clientMessage_); }
  public function clearClientMessage() { unset($this->clientMessage_); }
  public function hasClientMessage() { return isset($this->clientMessage_); }
  public function getClientMessage() { return $this->clientMessage_; }
  public function setClientMessage($value) { $this->clientMessage_ = (string)$value; }
  
  // optional .ExternalCarrierBillingInstrumentProto carrierInstrument = 5;

  protected $carrierInstrument_;
  public function resetCarrierInstrument() { unset($this->carrierInstrument_); }
  public function clearCarrierInstrument() { unset($this->carrierInstrument_); }
  public function hasCarrierInstrument() { return isset($this->carrierInstrument_); }
  public function getCarrierInstrument() { return $this->carrierInstrument_; }
  public function setCarrierInstrument(ExternalCarrierBillingInstrumentProto $value) { $this->carrierInstrument_ = $value; }
  
  // @@protoc_insertion_point(class_scope:BillingEventRequestProto)
}

// message BillingEventResponseProto
class BillingEventResponseProto {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("BillingEventResponseProto: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  public function size() {
    $size = 0;
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown);
  }
  
  // @@protoc_insertion_point(class_scope:BillingEventResponseProto)
}

// message BillingParameterProto
class BillingParameterProto {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("BillingParameterProto: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->id_ = $tmp;
          $limit-=$len;
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->name_ = $tmp;
          $limit-=$len;
          break;
        case 3:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->mncMcc_[] = $tmp;
          $limit-=$len;
          break;
        case 4:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->backendUrl_[] = $tmp;
          $limit-=$len;
          break;
        case 5:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->iconId_ = $tmp;
          $limit-=$len;
          break;
        case 6:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->billingInstrumentType_ = $tmp;
          
          break;
        case 7:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->applicationId_ = $tmp;
          $limit-=$len;
          break;
        case 8:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->tosUrl_ = $tmp;
          $limit-=$len;
          break;
        case 9:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->instrumentTosRequired_ = $tmp > 0 ? true : false;
          break;
        case 10:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->apiVersion_ = $tmp;
          
          break;
        case 11:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->perTransactionCredentialsRequired_ = $tmp > 0 ? true : false;
          break;
        case 12:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->sendSubscriberIdWithCarrierBillingRequests_ = $tmp > 0 ? true : false;
          break;
        case 13:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->deviceAssociationMethod_ = $tmp;
          
          break;
        case 14:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->userTokenRequestMessage_ = $tmp;
          $limit-=$len;
          break;
        case 15:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->userTokenRequestAddress_ = $tmp;
          $limit-=$len;
          break;
        case 16:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->passphraseRequired_ = $tmp > 0 ? true : false;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->id_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, strlen((string)$this->id_));
      fwrite($fp, (string)$this->id_);
    }
    if (!is_null($this->name_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, strlen((string)$this->name_));
      fwrite($fp, (string)$this->name_);
    }
    if (!is_null($this->mncMcc_))
      foreach($this->mncMcc_ as $v) {
        fwrite($fp, "\x1a");
        Protobuf::write_varint($fp, strlen((string)$v));
        fwrite($fp, (string)$v);
      }
    if (!is_null($this->backendUrl_))
      foreach($this->backendUrl_ as $v) {
        fwrite($fp, "\"");
        Protobuf::write_varint($fp, strlen((string)$v));
        fwrite($fp, (string)$v);
      }
    if (!is_null($this->iconId_)) {
      fwrite($fp, "*");
      Protobuf::write_varint($fp, strlen((string)$this->iconId_));
      fwrite($fp, (string)$this->iconId_);
    }
    if (!is_null($this->billingInstrumentType_)) {
      fwrite($fp, "0");
      Protobuf::write_varint($fp, (int)$this->billingInstrumentType_);
    }
    if (!is_null($this->applicationId_)) {
      fwrite($fp, ":");
      Protobuf::write_varint($fp, strlen((string)$this->applicationId_));
      fwrite($fp, (string)$this->applicationId_);
    }
    if (!is_null($this->tosUrl_)) {
      fwrite($fp, "B");
      Protobuf::write_varint($fp, strlen((string)$this->tosUrl_));
      fwrite($fp, (string)$this->tosUrl_);
    }
    if (!is_null($this->instrumentTosRequired_)) {
      fwrite($fp, "H");
      Protobuf::write_varint($fp, (int)$this->instrumentTosRequired_ ? 1 : 0);
    }
    if (!is_null($this->apiVersion_)) {
      fwrite($fp, "P");
      Protobuf::write_varint($fp, (int)$this->apiVersion_);
    }
    if (!is_null($this->perTransactionCredentialsRequired_)) {
      fwrite($fp, "X");
      Protobuf::write_varint($fp, (int)$this->perTransactionCredentialsRequired_ ? 1 : 0);
    }
    if (!is_null($this->sendSubscriberIdWithCarrierBillingRequests_)) {
      fwrite($fp, "`");
      Protobuf::write_varint($fp, (int)$this->sendSubscriberIdWithCarrierBillingRequests_ ? 1 : 0);
    }
    if (!is_null($this->deviceAssociationMethod_)) {
      fwrite($fp, "h");
      Protobuf::write_varint($fp, (int)$this->deviceAssociationMethod_);
    }
    if (!is_null($this->userTokenRequestMessage_)) {
      fwrite($fp, "r");
      Protobuf::write_varint($fp, strlen((string)$this->userTokenRequestMessage_));
      fwrite($fp, (string)$this->userTokenRequestMessage_);
    }
    if (!is_null($this->userTokenRequestAddress_)) {
      fwrite($fp, "z");
      Protobuf::write_varint($fp, strlen((string)$this->userTokenRequestAddress_));
      fwrite($fp, (string)$this->userTokenRequestAddress_);
    }
    if (!is_null($this->passphraseRequired_)) {
      fwrite($fp, "\x80\x01");
      Protobuf::write_varint($fp, (int)$this->passphraseRequired_ ? 1 : 0);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->id_)) {
      $l = strlen((string)$this->id_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->name_)) {
      $l = strlen((string)$this->name_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->mncMcc_))
      foreach($this->mncMcc_ as $v) {
        $l = strlen((string)$v);
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
    if (!is_null($this->backendUrl_))
      foreach($this->backendUrl_ as $v) {
        $l = strlen((string)$v);
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
    if (!is_null($this->iconId_)) {
      $l = strlen((string)$this->iconId_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->billingInstrumentType_)) {
      $size += 1 + Protobuf::size_varint($this->billingInstrumentType_);
    }
    if (!is_null($this->applicationId_)) {
      $l = strlen((string)$this->applicationId_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->tosUrl_)) {
      $l = strlen((string)$this->tosUrl_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->instrumentTosRequired_)) {
      $size += 2;
    }
    if (!is_null($this->apiVersion_)) {
      $size += 1 + Protobuf::size_varint($this->apiVersion_);
    }
    if (!is_null($this->perTransactionCredentialsRequired_)) {
      $size += 2;
    }
    if (!is_null($this->sendSubscriberIdWithCarrierBillingRequests_)) {
      $size += 2;
    }
    if (!is_null($this->deviceAssociationMethod_)) {
      $size += 1 + Protobuf::size_varint($this->deviceAssociationMethod_);
    }
    if (!is_null($this->userTokenRequestMessage_)) {
      $l = strlen((string)$this->userTokenRequestMessage_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->userTokenRequestAddress_)) {
      $l = strlen((string)$this->userTokenRequestAddress_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->passphraseRequired_)) {
      $size += 3;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('id_', $this->id_)
         . Protobuf::toString('name_', $this->name_)
         . Protobuf::toString('mncMcc_', $this->mncMcc_)
         . Protobuf::toString('backendUrl_', $this->backendUrl_)
         . Protobuf::toString('iconId_', $this->iconId_)
         . Protobuf::toString('billingInstrumentType_', $this->billingInstrumentType_)
         . Protobuf::toString('applicationId_', $this->applicationId_)
         . Protobuf::toString('tosUrl_', $this->tosUrl_)
         . Protobuf::toString('instrumentTosRequired_', $this->instrumentTosRequired_)
         . Protobuf::toString('apiVersion_', $this->apiVersion_)
         . Protobuf::toString('perTransactionCredentialsRequired_', $this->perTransactionCredentialsRequired_)
         . Protobuf::toString('sendSubscriberIdWithCarrierBillingRequests_', $this->sendSubscriberIdWithCarrierBillingRequests_)
         . Protobuf::toString('deviceAssociationMethod_', $this->deviceAssociationMethod_)
         . Protobuf::toString('userTokenRequestMessage_', $this->userTokenRequestMessage_)
         . Protobuf::toString('userTokenRequestAddress_', $this->userTokenRequestAddress_)
         . Protobuf::toString('passphraseRequired_', $this->passphraseRequired_);
  }
  
  // optional string id = 1;

  protected $id_;
  public function resetId() { unset($this->id_); }
  public function clearId() { unset($this->id_); }
  public function hasId() { return isset($this->id_); }
  public function getId() { return $this->id_; }
  public function setId($value) { $this->id_ = (string)$value; }
  
  // optional string name = 2;

  protected $name_;
  public function resetName() { unset($this->name_); }
  public function clearName() { unset($this->name_); }
  public function hasName() { return isset($this->name_); }
  public function getName() { return $this->name_; }
  public function setName($value) { $this->name_ = (string)$value; }
  
  // repeated string mncMcc = 3;

  protected $mncMcc_ = array();
  public function clearMncMcc() { $this->mncMcc_ = array(); }
  public function getMncMccCount() { return count($this->mncMcc_); }
  public function hasMncMcc() { return (count($this->mncMcc_) > 0); }
  public function indexOfMncMcc($value) { return array_search($value,$this->mncMcc_);}
  public function removeMncMcc($index) { unset($this->mncMcc_[$index]); }
  public function removeValMncMcc($value) { $idx = array_search($value,$this->mncMcc_); if($idx !== FALSE){unset($this->mncMcc_[$idx]); }}
  public function removeValsMncMcc($values) { foreach($values as $value){$idx = array_search($value,$this->mncMcc_); if($idx !== FALSE){unset($this->mncMcc_[$idx]); }}}
  public function pushMncMcc($newvar) { return array_push($this->mncMcc_,(string)$newvar); }
  public function popMncMcc() { return array_pop($this->mncMcc_); }
  public function shiftMncMcc() { return array_shift($this->mncMcc_); }
  public function unshiftMncMcc($newvar) { return array_unshift($this->mncMcc_,(string)$newvar); }
  public function getMncMcc($index) { return $this->mncMcc_[$index]; }
  public function getMncMccArray() { return $this->mncMcc_; }
  public function setMncMcc($index, $value) {$this->mncMcc_[$index] = (string)$value;	}
  public function addMncMcc($value) { $this->mncMcc_[] = (string)$value; }
  public function addAllMncMcc(array $values) { foreach($values as $value) {$this->mncMcc_[] = (string)$value;} }
  
  // repeated string backendUrl = 4;

  protected $backendUrl_ = array();
  public function clearBackendUrl() { $this->backendUrl_ = array(); }
  public function getBackendUrlCount() { return count($this->backendUrl_); }
  public function hasBackendUrl() { return (count($this->backendUrl_) > 0); }
  public function indexOfBackendUrl($value) { return array_search($value,$this->backendUrl_);}
  public function removeBackendUrl($index) { unset($this->backendUrl_[$index]); }
  public function removeValBackendUrl($value) { $idx = array_search($value,$this->backendUrl_); if($idx !== FALSE){unset($this->backendUrl_[$idx]); }}
  public function removeValsBackendUrl($values) { foreach($values as $value){$idx = array_search($value,$this->backendUrl_); if($idx !== FALSE){unset($this->backendUrl_[$idx]); }}}
  public function pushBackendUrl($newvar) { return array_push($this->backendUrl_,(string)$newvar); }
  public function popBackendUrl() { return array_pop($this->backendUrl_); }
  public function shiftBackendUrl() { return array_shift($this->backendUrl_); }
  public function unshiftBackendUrl($newvar) { return array_unshift($this->backendUrl_,(string)$newvar); }
  public function getBackendUrl($index) { return $this->backendUrl_[$index]; }
  public function getBackendUrlArray() { return $this->backendUrl_; }
  public function setBackendUrl($index, $value) {$this->backendUrl_[$index] = (string)$value;	}
  public function addBackendUrl($value) { $this->backendUrl_[] = (string)$value; }
  public function addAllBackendUrl(array $values) { foreach($values as $value) {$this->backendUrl_[] = (string)$value;} }
  
  // optional string iconId = 5;

  protected $iconId_;
  public function resetIconId() { unset($this->iconId_); }
  public function clearIconId() { unset($this->iconId_); }
  public function hasIconId() { return isset($this->iconId_); }
  public function getIconId() { return $this->iconId_; }
  public function setIconId($value) { $this->iconId_ = (string)$value; }
  
  // optional int32 billingInstrumentType = 6;

  protected $billingInstrumentType_;
  public function resetBillingInstrumentType() { unset($this->billingInstrumentType_); }
  public function clearBillingInstrumentType() { unset($this->billingInstrumentType_); }
  public function hasBillingInstrumentType() { return isset($this->billingInstrumentType_); }
  public function getBillingInstrumentType() { return $this->billingInstrumentType_; }
  public function setBillingInstrumentType($value) { $this->billingInstrumentType_ = (string)$value; }
  
  // optional string applicationId = 7;

  protected $applicationId_;
  public function resetApplicationId() { unset($this->applicationId_); }
  public function clearApplicationId() { unset($this->applicationId_); }
  public function hasApplicationId() { return isset($this->applicationId_); }
  public function getApplicationId() { return $this->applicationId_; }
  public function setApplicationId($value) { $this->applicationId_ = (string)$value; }
  
  // optional string tosUrl = 8;

  protected $tosUrl_;
  public function resetTosUrl() { unset($this->tosUrl_); }
  public function clearTosUrl() { unset($this->tosUrl_); }
  public function hasTosUrl() { return isset($this->tosUrl_); }
  public function getTosUrl() { return $this->tosUrl_; }
  public function setTosUrl($value) { $this->tosUrl_ = (string)$value; }
  
  // optional bool instrumentTosRequired = 9;

  protected $instrumentTosRequired_;
  public function resetInstrumentTosRequired() { unset($this->instrumentTosRequired_); }
  public function clearInstrumentTosRequired() { unset($this->instrumentTosRequired_); }
  public function hasInstrumentTosRequired() { return isset($this->instrumentTosRequired_); }
  public function getInstrumentTosRequired() { return $this->instrumentTosRequired_; }
  public function setInstrumentTosRequired($value) { $this->instrumentTosRequired_ = (bool)$value; }
  
  // optional int32 apiVersion = 10;

  protected $apiVersion_;
  public function resetApiVersion() { unset($this->apiVersion_); }
  public function clearApiVersion() { unset($this->apiVersion_); }
  public function hasApiVersion() { return isset($this->apiVersion_); }
  public function getApiVersion() { return $this->apiVersion_; }
  public function setApiVersion($value) { $this->apiVersion_ = (string)$value; }
  
  // optional bool perTransactionCredentialsRequired = 11;

  protected $perTransactionCredentialsRequired_;
  public function resetPerTransactionCredentialsRequired() { unset($this->perTransactionCredentialsRequired_); }
  public function clearPerTransactionCredentialsRequired() { unset($this->perTransactionCredentialsRequired_); }
  public function hasPerTransactionCredentialsRequired() { return isset($this->perTransactionCredentialsRequired_); }
  public function getPerTransactionCredentialsRequired() { return $this->perTransactionCredentialsRequired_; }
  public function setPerTransactionCredentialsRequired($value) { $this->perTransactionCredentialsRequired_ = (bool)$value; }
  
  // optional bool sendSubscriberIdWithCarrierBillingRequests = 12;

  protected $sendSubscriberIdWithCarrierBillingRequests_;
  public function resetSendSubscriberIdWithCarrierBillingRequests() { unset($this->sendSubscriberIdWithCarrierBillingRequests_); }
  public function clearSendSubscriberIdWithCarrierBillingRequests() { unset($this->sendSubscriberIdWithCarrierBillingRequests_); }
  public function hasSendSubscriberIdWithCarrierBillingRequests() { return isset($this->sendSubscriberIdWithCarrierBillingRequests_); }
  public function getSendSubscriberIdWithCarrierBillingRequests() { return $this->sendSubscriberIdWithCarrierBillingRequests_; }
  public function setSendSubscriberIdWithCarrierBillingRequests($value) { $this->sendSubscriberIdWithCarrierBillingRequests_ = (bool)$value; }
  
  // optional int32 deviceAssociationMethod = 13;

  protected $deviceAssociationMethod_;
  public function resetDeviceAssociationMethod() { unset($this->deviceAssociationMethod_); }
  public function clearDeviceAssociationMethod() { unset($this->deviceAssociationMethod_); }
  public function hasDeviceAssociationMethod() { return isset($this->deviceAssociationMethod_); }
  public function getDeviceAssociationMethod() { return $this->deviceAssociationMethod_; }
  public function setDeviceAssociationMethod($value) { $this->deviceAssociationMethod_ = (string)$value; }
  
  // optional string userTokenRequestMessage = 14;

  protected $userTokenRequestMessage_;
  public function resetUserTokenRequestMessage() { unset($this->userTokenRequestMessage_); }
  public function clearUserTokenRequestMessage() { unset($this->userTokenRequestMessage_); }
  public function hasUserTokenRequestMessage() { return isset($this->userTokenRequestMessage_); }
  public function getUserTokenRequestMessage() { return $this->userTokenRequestMessage_; }
  public function setUserTokenRequestMessage($value) { $this->userTokenRequestMessage_ = (string)$value; }
  
  // optional string userTokenRequestAddress = 15;

  protected $userTokenRequestAddress_;
  public function resetUserTokenRequestAddress() { unset($this->userTokenRequestAddress_); }
  public function clearUserTokenRequestAddress() { unset($this->userTokenRequestAddress_); }
  public function hasUserTokenRequestAddress() { return isset($this->userTokenRequestAddress_); }
  public function getUserTokenRequestAddress() { return $this->userTokenRequestAddress_; }
  public function setUserTokenRequestAddress($value) { $this->userTokenRequestAddress_ = (string)$value; }
  
  // optional bool passphraseRequired = 16;

  protected $passphraseRequired_;
  public function resetPassphraseRequired() { unset($this->passphraseRequired_); }
  public function clearPassphraseRequired() { unset($this->passphraseRequired_); }
  public function hasPassphraseRequired() { return isset($this->passphraseRequired_); }
  public function getPassphraseRequired() { return $this->passphraseRequired_; }
  public function setPassphraseRequired($value) { $this->passphraseRequired_ = (bool)$value; }
  
  // @@protoc_insertion_point(class_scope:BillingParameterProto)
}

// message CarrierBillingCredentialsProto
class CarrierBillingCredentialsProto {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("CarrierBillingCredentialsProto: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->credentials_ = $tmp;
          $limit-=$len;
          break;
        case 2:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->credentialsTimeout_ = $tmp;
          
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->credentials_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, strlen((string)$this->credentials_));
      fwrite($fp, (string)$this->credentials_);
    }
    if (!is_null($this->credentialsTimeout_)) {
      fwrite($fp, "\x10");
      Protobuf::write_varint($fp, (int)$this->credentialsTimeout_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->credentials_)) {
      $l = strlen((string)$this->credentials_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->credentialsTimeout_)) {
      $size += 1 + Protobuf::size_varint($this->credentialsTimeout_);
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('credentials_', $this->credentials_)
         . Protobuf::toString('credentialsTimeout_', $this->credentialsTimeout_);
  }
  
  // optional string credentials = 1;

  protected $credentials_;
  public function resetCredentials() { unset($this->credentials_); }
  public function clearCredentials() { unset($this->credentials_); }
  public function hasCredentials() { return isset($this->credentials_); }
  public function getCredentials() { return $this->credentials_; }
  public function setCredentials($value) { $this->credentials_ = (string)$value; }
  
  // optional int64 credentialsTimeout = 2;

  protected $credentialsTimeout_;
  public function resetCredentialsTimeout() { unset($this->credentialsTimeout_); }
  public function clearCredentialsTimeout() { unset($this->credentialsTimeout_); }
  public function hasCredentialsTimeout() { return isset($this->credentialsTimeout_); }
  public function getCredentialsTimeout() { return $this->credentialsTimeout_; }
  public function setCredentialsTimeout($value) { $this->credentialsTimeout_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:CarrierBillingCredentialsProto)
}

// message CategoryProto
class CategoryProto {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("CategoryProto: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 2:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->assetType_ = $tmp;
          
          break;
        case 3:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->categoryId_ = $tmp;
          $limit-=$len;
          break;
        case 4:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->categoryDisplay_ = $tmp;
          $limit-=$len;
          break;
        case 5:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->categorySubtitle_ = $tmp;
          $limit-=$len;
          break;
        case 6:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->promotedAssetsNew_[] = $tmp;
          $limit-=$len;
          break;
        case 7:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->promotedAssetsHome_[] = $tmp;
          $limit-=$len;
          break;
        case 8:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->subCategories_[] = new CategoryProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 9:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->promotedAssetsPaid_[] = $tmp;
          $limit-=$len;
          break;
        case 10:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->promotedAssetsFree_[] = $tmp;
          $limit-=$len;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->assetType_)) {
      fwrite($fp, "\x10");
      Protobuf::write_varint($fp, (int)$this->assetType_);
    }
    if (!is_null($this->categoryId_)) {
      fwrite($fp, "\x1a");
      Protobuf::write_varint($fp, strlen((string)$this->categoryId_));
      fwrite($fp, (string)$this->categoryId_);
    }
    if (!is_null($this->categoryDisplay_)) {
      fwrite($fp, "\"");
      Protobuf::write_varint($fp, strlen((string)$this->categoryDisplay_));
      fwrite($fp, (string)$this->categoryDisplay_);
    }
    if (!is_null($this->categorySubtitle_)) {
      fwrite($fp, "*");
      Protobuf::write_varint($fp, strlen((string)$this->categorySubtitle_));
      fwrite($fp, (string)$this->categorySubtitle_);
    }
    if (!is_null($this->promotedAssetsNew_))
      foreach($this->promotedAssetsNew_ as $v) {
        fwrite($fp, "2");
        Protobuf::write_varint($fp, strlen((string)$v));
        fwrite($fp, (string)$v);
      }
    if (!is_null($this->promotedAssetsHome_))
      foreach($this->promotedAssetsHome_ as $v) {
        fwrite($fp, ":");
        Protobuf::write_varint($fp, strlen((string)$v));
        fwrite($fp, (string)$v);
      }
    if (!is_null($this->subCategories_))
      foreach($this->subCategories_ as $v) {
        fwrite($fp, "B");
        Protobuf::write_varint($fp, $v->size()); // message
        $v->write($fp);
      }
    if (!is_null($this->promotedAssetsPaid_))
      foreach($this->promotedAssetsPaid_ as $v) {
        fwrite($fp, "J");
        Protobuf::write_varint($fp, strlen((string)$v));
        fwrite($fp, (string)$v);
      }
    if (!is_null($this->promotedAssetsFree_))
      foreach($this->promotedAssetsFree_ as $v) {
        fwrite($fp, "R");
        Protobuf::write_varint($fp, strlen((string)$v));
        fwrite($fp, (string)$v);
      }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->assetType_)) {
      $size += 1 + Protobuf::size_varint($this->assetType_);
    }
    if (!is_null($this->categoryId_)) {
      $l = strlen((string)$this->categoryId_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->categoryDisplay_)) {
      $l = strlen((string)$this->categoryDisplay_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->categorySubtitle_)) {
      $l = strlen((string)$this->categorySubtitle_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->promotedAssetsNew_))
      foreach($this->promotedAssetsNew_ as $v) {
        $l = strlen((string)$v);
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
    if (!is_null($this->promotedAssetsHome_))
      foreach($this->promotedAssetsHome_ as $v) {
        $l = strlen((string)$v);
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
    if (!is_null($this->subCategories_))
      foreach($this->subCategories_ as $v) {
        $l = $v->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
    if (!is_null($this->promotedAssetsPaid_))
      foreach($this->promotedAssetsPaid_ as $v) {
        $l = strlen((string)$v);
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
    if (!is_null($this->promotedAssetsFree_))
      foreach($this->promotedAssetsFree_ as $v) {
        $l = strlen((string)$v);
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('assetType_', $this->assetType_)
         . Protobuf::toString('categoryId_', $this->categoryId_)
         . Protobuf::toString('categoryDisplay_', $this->categoryDisplay_)
         . Protobuf::toString('categorySubtitle_', $this->categorySubtitle_)
         . Protobuf::toString('promotedAssetsNew_', $this->promotedAssetsNew_)
         . Protobuf::toString('promotedAssetsHome_', $this->promotedAssetsHome_)
         . Protobuf::toString('subCategories_', $this->subCategories_)
         . Protobuf::toString('promotedAssetsPaid_', $this->promotedAssetsPaid_)
         . Protobuf::toString('promotedAssetsFree_', $this->promotedAssetsFree_);
  }
  
  // optional int32 assetType = 2;

  protected $assetType_;
  public function resetAssetType() { unset($this->assetType_); }
  public function clearAssetType() { unset($this->assetType_); }
  public function hasAssetType() { return isset($this->assetType_); }
  public function getAssetType() { return $this->assetType_; }
  public function setAssetType($value) { $this->assetType_ = (string)$value; }
  
  // optional string categoryId = 3;

  protected $categoryId_;
  public function resetCategoryId() { unset($this->categoryId_); }
  public function clearCategoryId() { unset($this->categoryId_); }
  public function hasCategoryId() { return isset($this->categoryId_); }
  public function getCategoryId() { return $this->categoryId_; }
  public function setCategoryId($value) { $this->categoryId_ = (string)$value; }
  
  // optional string categoryDisplay = 4;

  protected $categoryDisplay_;
  public function resetCategoryDisplay() { unset($this->categoryDisplay_); }
  public function clearCategoryDisplay() { unset($this->categoryDisplay_); }
  public function hasCategoryDisplay() { return isset($this->categoryDisplay_); }
  public function getCategoryDisplay() { return $this->categoryDisplay_; }
  public function setCategoryDisplay($value) { $this->categoryDisplay_ = (string)$value; }
  
  // optional string categorySubtitle = 5;

  protected $categorySubtitle_;
  public function resetCategorySubtitle() { unset($this->categorySubtitle_); }
  public function clearCategorySubtitle() { unset($this->categorySubtitle_); }
  public function hasCategorySubtitle() { return isset($this->categorySubtitle_); }
  public function getCategorySubtitle() { return $this->categorySubtitle_; }
  public function setCategorySubtitle($value) { $this->categorySubtitle_ = (string)$value; }
  
  // repeated string promotedAssetsNew = 6;

  protected $promotedAssetsNew_ = array();
  public function clearPromotedAssetsNew() { $this->promotedAssetsNew_ = array(); }
  public function getPromotedAssetsNewCount() { return count($this->promotedAssetsNew_); }
  public function hasPromotedAssetsNew() { return (count($this->promotedAssetsNew_) > 0); }
  public function indexOfPromotedAssetsNew($value) { return array_search($value,$this->promotedAssetsNew_);}
  public function removePromotedAssetsNew($index) { unset($this->promotedAssetsNew_[$index]); }
  public function removeValPromotedAssetsNew($value) { $idx = array_search($value,$this->promotedAssetsNew_); if($idx !== FALSE){unset($this->promotedAssetsNew_[$idx]); }}
  public function removeValsPromotedAssetsNew($values) { foreach($values as $value){$idx = array_search($value,$this->promotedAssetsNew_); if($idx !== FALSE){unset($this->promotedAssetsNew_[$idx]); }}}
  public function pushPromotedAssetsNew($newvar) { return array_push($this->promotedAssetsNew_,(string)$newvar); }
  public function popPromotedAssetsNew() { return array_pop($this->promotedAssetsNew_); }
  public function shiftPromotedAssetsNew() { return array_shift($this->promotedAssetsNew_); }
  public function unshiftPromotedAssetsNew($newvar) { return array_unshift($this->promotedAssetsNew_,(string)$newvar); }
  public function getPromotedAssetsNew($index) { return $this->promotedAssetsNew_[$index]; }
  public function getPromotedAssetsNewArray() { return $this->promotedAssetsNew_; }
  public function setPromotedAssetsNew($index, $value) {$this->promotedAssetsNew_[$index] = (string)$value;	}
  public function addPromotedAssetsNew($value) { $this->promotedAssetsNew_[] = (string)$value; }
  public function addAllPromotedAssetsNew(array $values) { foreach($values as $value) {$this->promotedAssetsNew_[] = (string)$value;} }
  
  // repeated string promotedAssetsHome = 7;

  protected $promotedAssetsHome_ = array();
  public function clearPromotedAssetsHome() { $this->promotedAssetsHome_ = array(); }
  public function getPromotedAssetsHomeCount() { return count($this->promotedAssetsHome_); }
  public function hasPromotedAssetsHome() { return (count($this->promotedAssetsHome_) > 0); }
  public function indexOfPromotedAssetsHome($value) { return array_search($value,$this->promotedAssetsHome_);}
  public function removePromotedAssetsHome($index) { unset($this->promotedAssetsHome_[$index]); }
  public function removeValPromotedAssetsHome($value) { $idx = array_search($value,$this->promotedAssetsHome_); if($idx !== FALSE){unset($this->promotedAssetsHome_[$idx]); }}
  public function removeValsPromotedAssetsHome($values) { foreach($values as $value){$idx = array_search($value,$this->promotedAssetsHome_); if($idx !== FALSE){unset($this->promotedAssetsHome_[$idx]); }}}
  public function pushPromotedAssetsHome($newvar) { return array_push($this->promotedAssetsHome_,(string)$newvar); }
  public function popPromotedAssetsHome() { return array_pop($this->promotedAssetsHome_); }
  public function shiftPromotedAssetsHome() { return array_shift($this->promotedAssetsHome_); }
  public function unshiftPromotedAssetsHome($newvar) { return array_unshift($this->promotedAssetsHome_,(string)$newvar); }
  public function getPromotedAssetsHome($index) { return $this->promotedAssetsHome_[$index]; }
  public function getPromotedAssetsHomeArray() { return $this->promotedAssetsHome_; }
  public function setPromotedAssetsHome($index, $value) {$this->promotedAssetsHome_[$index] = (string)$value;	}
  public function addPromotedAssetsHome($value) { $this->promotedAssetsHome_[] = (string)$value; }
  public function addAllPromotedAssetsHome(array $values) { foreach($values as $value) {$this->promotedAssetsHome_[] = (string)$value;} }
  
  // repeated .CategoryProto subCategories = 8;

  protected $subCategories_ = array();
  public function clearSubCategories() { $this->subCategories_ = array(); }
  public function getSubCategoriesCount() { return count($this->subCategories_); }
  public function hasSubCategories() { return (count($this->subCategories_) > 0); }
  public function indexOfSubCategories($value) { return array_search($value,$this->subCategories_);}
  public function removeSubCategories($index) { unset($this->subCategories_[$index]); }
  public function removeValSubCategories($value) { $idx = array_search($value,$this->subCategories_); if($idx !== FALSE){unset($this->subCategories_[$idx]); }}
  public function removeValsSubCategories($values) { foreach($values as $value){$idx = array_search($value,$this->subCategories_); if($idx !== FALSE){unset($this->subCategories_[$idx]); }}}
  public function pushSubCategories($newvar) { return array_push($this->subCategories_,$newvar); }
  public function popSubCategories() { return array_pop($this->subCategories_); }
  public function shiftSubCategories() { return array_shift($this->subCategories_); }
  public function unshiftSubCategories($newvar) { return array_unshift($this->subCategories_,$newvar); }
  public function getSubCategories($index) { return $this->subCategories_[$index]; }
  public function getSubCategoriesArray() { return $this->subCategories_; }
  public function setSubCategories($index, $value) {$this->subCategories_[$index] = $value;	}
  public function addSubCategories($value) { $this->subCategories_[] = $value; }
  public function addAllSubCategories(array $values) { foreach($values as $value) {$this->subCategories_[] = $value;} }
  
  // repeated string promotedAssetsPaid = 9;

  protected $promotedAssetsPaid_ = array();
  public function clearPromotedAssetsPaid() { $this->promotedAssetsPaid_ = array(); }
  public function getPromotedAssetsPaidCount() { return count($this->promotedAssetsPaid_); }
  public function hasPromotedAssetsPaid() { return (count($this->promotedAssetsPaid_) > 0); }
  public function indexOfPromotedAssetsPaid($value) { return array_search($value,$this->promotedAssetsPaid_);}
  public function removePromotedAssetsPaid($index) { unset($this->promotedAssetsPaid_[$index]); }
  public function removeValPromotedAssetsPaid($value) { $idx = array_search($value,$this->promotedAssetsPaid_); if($idx !== FALSE){unset($this->promotedAssetsPaid_[$idx]); }}
  public function removeValsPromotedAssetsPaid($values) { foreach($values as $value){$idx = array_search($value,$this->promotedAssetsPaid_); if($idx !== FALSE){unset($this->promotedAssetsPaid_[$idx]); }}}
  public function pushPromotedAssetsPaid($newvar) { return array_push($this->promotedAssetsPaid_,(string)$newvar); }
  public function popPromotedAssetsPaid() { return array_pop($this->promotedAssetsPaid_); }
  public function shiftPromotedAssetsPaid() { return array_shift($this->promotedAssetsPaid_); }
  public function unshiftPromotedAssetsPaid($newvar) { return array_unshift($this->promotedAssetsPaid_,(string)$newvar); }
  public function getPromotedAssetsPaid($index) { return $this->promotedAssetsPaid_[$index]; }
  public function getPromotedAssetsPaidArray() { return $this->promotedAssetsPaid_; }
  public function setPromotedAssetsPaid($index, $value) {$this->promotedAssetsPaid_[$index] = (string)$value;	}
  public function addPromotedAssetsPaid($value) { $this->promotedAssetsPaid_[] = (string)$value; }
  public function addAllPromotedAssetsPaid(array $values) { foreach($values as $value) {$this->promotedAssetsPaid_[] = (string)$value;} }
  
  // repeated string promotedAssetsFree = 10;

  protected $promotedAssetsFree_ = array();
  public function clearPromotedAssetsFree() { $this->promotedAssetsFree_ = array(); }
  public function getPromotedAssetsFreeCount() { return count($this->promotedAssetsFree_); }
  public function hasPromotedAssetsFree() { return (count($this->promotedAssetsFree_) > 0); }
  public function indexOfPromotedAssetsFree($value) { return array_search($value,$this->promotedAssetsFree_);}
  public function removePromotedAssetsFree($index) { unset($this->promotedAssetsFree_[$index]); }
  public function removeValPromotedAssetsFree($value) { $idx = array_search($value,$this->promotedAssetsFree_); if($idx !== FALSE){unset($this->promotedAssetsFree_[$idx]); }}
  public function removeValsPromotedAssetsFree($values) { foreach($values as $value){$idx = array_search($value,$this->promotedAssetsFree_); if($idx !== FALSE){unset($this->promotedAssetsFree_[$idx]); }}}
  public function pushPromotedAssetsFree($newvar) { return array_push($this->promotedAssetsFree_,(string)$newvar); }
  public function popPromotedAssetsFree() { return array_pop($this->promotedAssetsFree_); }
  public function shiftPromotedAssetsFree() { return array_shift($this->promotedAssetsFree_); }
  public function unshiftPromotedAssetsFree($newvar) { return array_unshift($this->promotedAssetsFree_,(string)$newvar); }
  public function getPromotedAssetsFree($index) { return $this->promotedAssetsFree_[$index]; }
  public function getPromotedAssetsFreeArray() { return $this->promotedAssetsFree_; }
  public function setPromotedAssetsFree($index, $value) {$this->promotedAssetsFree_[$index] = (string)$value;	}
  public function addPromotedAssetsFree($value) { $this->promotedAssetsFree_[] = (string)$value; }
  public function addAllPromotedAssetsFree(array $values) { foreach($values as $value) {$this->promotedAssetsFree_[] = (string)$value;} }
  
  // @@protoc_insertion_point(class_scope:CategoryProto)
}

// message CheckForNotificationsRequestProto
class CheckForNotificationsRequestProto {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("CheckForNotificationsRequestProto: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->alarmDuration_ = $tmp;
          
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->alarmDuration_)) {
      fwrite($fp, "\x08");
      Protobuf::write_varint($fp, (int)$this->alarmDuration_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->alarmDuration_)) {
      $size += 1 + Protobuf::size_varint($this->alarmDuration_);
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('alarmDuration_', $this->alarmDuration_);
  }
  
  // optional int64 alarmDuration = 1;

  protected $alarmDuration_;
  public function resetAlarmDuration() { unset($this->alarmDuration_); }
  public function clearAlarmDuration() { unset($this->alarmDuration_); }
  public function hasAlarmDuration() { return isset($this->alarmDuration_); }
  public function getAlarmDuration() { return $this->alarmDuration_; }
  public function setAlarmDuration($value) { $this->alarmDuration_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:CheckForNotificationsRequestProto)
}

// message CheckForNotificationsResponseProto
class CheckForNotificationsResponseProto {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("CheckForNotificationsResponseProto: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  public function size() {
    $size = 0;
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown);
  }
  
  // @@protoc_insertion_point(class_scope:CheckForNotificationsResponseProto)
}

// message CheckLicenseRequestProto
class CheckLicenseRequestProto {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("CheckLicenseRequestProto: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->packageName_ = $tmp;
          $limit-=$len;
          break;
        case 2:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->versionCode_ = $tmp;
          
          break;
        case 3:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->nonce_ = $tmp;
          
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->packageName_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, strlen((string)$this->packageName_));
      fwrite($fp, (string)$this->packageName_);
    }
    if (!is_null($this->versionCode_)) {
      fwrite($fp, "\x10");
      Protobuf::write_varint($fp, (int)$this->versionCode_);
    }
    if (!is_null($this->nonce_)) {
      fwrite($fp, "\x18");
      Protobuf::write_varint($fp, (int)$this->nonce_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->packageName_)) {
      $l = strlen((string)$this->packageName_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->versionCode_)) {
      $size += 1 + Protobuf::size_varint($this->versionCode_);
    }
    if (!is_null($this->nonce_)) {
      $size += 1 + Protobuf::size_varint($this->nonce_);
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('packageName_', $this->packageName_)
         . Protobuf::toString('versionCode_', $this->versionCode_)
         . Protobuf::toString('nonce_', $this->nonce_);
  }
  
  // optional string packageName = 1;

  protected $packageName_;
  public function resetPackageName() { unset($this->packageName_); }
  public function clearPackageName() { unset($this->packageName_); }
  public function hasPackageName() { return isset($this->packageName_); }
  public function getPackageName() { return $this->packageName_; }
  public function setPackageName($value) { $this->packageName_ = (string)$value; }
  
  // optional int32 versionCode = 2;

  protected $versionCode_;
  public function resetVersionCode() { unset($this->versionCode_); }
  public function clearVersionCode() { unset($this->versionCode_); }
  public function hasVersionCode() { return isset($this->versionCode_); }
  public function getVersionCode() { return $this->versionCode_; }
  public function setVersionCode($value) { $this->versionCode_ = (string)$value; }
  
  // optional int64 nonce = 3;

  protected $nonce_;
  public function resetNonce() { unset($this->nonce_); }
  public function clearNonce() { unset($this->nonce_); }
  public function hasNonce() { return isset($this->nonce_); }
  public function getNonce() { return $this->nonce_; }
  public function setNonce($value) { $this->nonce_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:CheckLicenseRequestProto)
}

// message CheckLicenseResponseProto
class CheckLicenseResponseProto {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("CheckLicenseResponseProto: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->responseCode_ = $tmp;
          
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->signedData_ = $tmp;
          $limit-=$len;
          break;
        case 3:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->signature_ = $tmp;
          $limit-=$len;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->responseCode_)) {
      fwrite($fp, "\x08");
      Protobuf::write_varint($fp, (int)$this->responseCode_);
    }
    if (!is_null($this->signedData_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, strlen((string)$this->signedData_));
      fwrite($fp, (string)$this->signedData_);
    }
    if (!is_null($this->signature_)) {
      fwrite($fp, "\x1a");
      Protobuf::write_varint($fp, strlen((string)$this->signature_));
      fwrite($fp, (string)$this->signature_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->responseCode_)) {
      $size += 1 + Protobuf::size_varint($this->responseCode_);
    }
    if (!is_null($this->signedData_)) {
      $l = strlen((string)$this->signedData_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->signature_)) {
      $l = strlen((string)$this->signature_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('responseCode_', $this->responseCode_)
         . Protobuf::toString('signedData_', $this->signedData_)
         . Protobuf::toString('signature_', $this->signature_);
  }
  
  // optional int32 responseCode = 1;

  protected $responseCode_;
  public function resetResponseCode() { unset($this->responseCode_); }
  public function clearResponseCode() { unset($this->responseCode_); }
  public function hasResponseCode() { return isset($this->responseCode_); }
  public function getResponseCode() { return $this->responseCode_; }
  public function setResponseCode($value) { $this->responseCode_ = (string)$value; }
  
  // optional string signedData = 2;

  protected $signedData_;
  public function resetSignedData() { unset($this->signedData_); }
  public function clearSignedData() { unset($this->signedData_); }
  public function hasSignedData() { return isset($this->signedData_); }
  public function getSignedData() { return $this->signedData_; }
  public function setSignedData($value) { $this->signedData_ = (string)$value; }
  
  // optional string signature = 3;

  protected $signature_;
  public function resetSignature() { unset($this->signature_); }
  public function clearSignature() { unset($this->signature_); }
  public function hasSignature() { return isset($this->signature_); }
  public function getSignature() { return $this->signature_; }
  public function setSignature($value) { $this->signature_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:CheckLicenseResponseProto)
}

// message CommentsRequestProto
class CommentsRequestProto {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("CommentsRequestProto: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->assetId_ = $tmp;
          $limit-=$len;
          break;
        case 2:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->startIndex_ = $tmp;
          
          break;
        case 3:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->numEntries_ = $tmp;
          
          break;
        case 4:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->shouldReturnSelfComment_ = $tmp > 0 ? true : false;
          break;
        case 5:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->assetReferrer_ = $tmp;
          $limit-=$len;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->assetId_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, strlen((string)$this->assetId_));
      fwrite($fp, (string)$this->assetId_);
    }
    if (!is_null($this->startIndex_)) {
      fwrite($fp, "\x10");
      Protobuf::write_varint($fp, (int)$this->startIndex_);
    }
    if (!is_null($this->numEntries_)) {
      fwrite($fp, "\x18");
      Protobuf::write_varint($fp, (int)$this->numEntries_);
    }
    if (!is_null($this->shouldReturnSelfComment_)) {
      fwrite($fp, " ");
      Protobuf::write_varint($fp, (int)$this->shouldReturnSelfComment_ ? 1 : 0);
    }
    if (!is_null($this->assetReferrer_)) {
      fwrite($fp, "*");
      Protobuf::write_varint($fp, strlen((string)$this->assetReferrer_));
      fwrite($fp, (string)$this->assetReferrer_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->assetId_)) {
      $l = strlen((string)$this->assetId_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->startIndex_)) {
      $size += 1 + Protobuf::size_varint($this->startIndex_);
    }
    if (!is_null($this->numEntries_)) {
      $size += 1 + Protobuf::size_varint($this->numEntries_);
    }
    if (!is_null($this->shouldReturnSelfComment_)) {
      $size += 2;
    }
    if (!is_null($this->assetReferrer_)) {
      $l = strlen((string)$this->assetReferrer_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('assetId_', $this->assetId_)
         . Protobuf::toString('startIndex_', $this->startIndex_)
         . Protobuf::toString('numEntries_', $this->numEntries_)
         . Protobuf::toString('shouldReturnSelfComment_', $this->shouldReturnSelfComment_)
         . Protobuf::toString('assetReferrer_', $this->assetReferrer_);
  }
  
  // optional string assetId = 1;

  protected $assetId_;
  public function resetAssetId() { unset($this->assetId_); }
  public function clearAssetId() { unset($this->assetId_); }
  public function hasAssetId() { return isset($this->assetId_); }
  public function getAssetId() { return $this->assetId_; }
  public function setAssetId($value) { $this->assetId_ = (string)$value; }
  
  // optional int64 startIndex = 2;

  protected $startIndex_;
  public function resetStartIndex() { unset($this->startIndex_); }
  public function clearStartIndex() { unset($this->startIndex_); }
  public function hasStartIndex() { return isset($this->startIndex_); }
  public function getStartIndex() { return $this->startIndex_; }
  public function setStartIndex($value) { $this->startIndex_ = (string)$value; }
  
  // optional int64 numEntries = 3;

  protected $numEntries_;
  public function resetNumEntries() { unset($this->numEntries_); }
  public function clearNumEntries() { unset($this->numEntries_); }
  public function hasNumEntries() { return isset($this->numEntries_); }
  public function getNumEntries() { return $this->numEntries_; }
  public function setNumEntries($value) { $this->numEntries_ = (string)$value; }
  
  // optional bool shouldReturnSelfComment = 4;

  protected $shouldReturnSelfComment_;
  public function resetShouldReturnSelfComment() { unset($this->shouldReturnSelfComment_); }
  public function clearShouldReturnSelfComment() { unset($this->shouldReturnSelfComment_); }
  public function hasShouldReturnSelfComment() { return isset($this->shouldReturnSelfComment_); }
  public function getShouldReturnSelfComment() { return $this->shouldReturnSelfComment_; }
  public function setShouldReturnSelfComment($value) { $this->shouldReturnSelfComment_ = (bool)$value; }
  
  // optional string assetReferrer = 5;

  protected $assetReferrer_;
  public function resetAssetReferrer() { unset($this->assetReferrer_); }
  public function clearAssetReferrer() { unset($this->assetReferrer_); }
  public function hasAssetReferrer() { return isset($this->assetReferrer_); }
  public function getAssetReferrer() { return $this->assetReferrer_; }
  public function setAssetReferrer($value) { $this->assetReferrer_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:CommentsRequestProto)
}

// message CommentsResponseProto
class CommentsResponseProto {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("CommentsResponseProto: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->comment_[] = new ExternalCommentProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 2:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->numTotalEntries_ = $tmp;
          
          break;
        case 3:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->selfComment_ = new ExternalCommentProto($fp, $len);
          ASSERT('$len == 0');
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->comment_))
      foreach($this->comment_ as $v) {
        fwrite($fp, "\x0a");
        Protobuf::write_varint($fp, $v->size()); // message
        $v->write($fp);
      }
    if (!is_null($this->numTotalEntries_)) {
      fwrite($fp, "\x10");
      Protobuf::write_varint($fp, (int)$this->numTotalEntries_);
    }
    if (!is_null($this->selfComment_)) {
      fwrite($fp, "\x1a");
      Protobuf::write_varint($fp, $this->selfComment_->size()); // message
      $this->selfComment_->write($fp);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->comment_))
      foreach($this->comment_ as $v) {
        $l = $v->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
    if (!is_null($this->numTotalEntries_)) {
      $size += 1 + Protobuf::size_varint($this->numTotalEntries_);
    }
    if (!is_null($this->selfComment_)) {
      $l = $this->selfComment_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('comment_', $this->comment_)
         . Protobuf::toString('numTotalEntries_', $this->numTotalEntries_)
         . Protobuf::toString('selfComment_', $this->selfComment_);
  }
  
  // repeated .ExternalCommentProto comment = 1;

  protected $comment_ = array();
  public function clearComment() { $this->comment_ = array(); }
  public function getCommentCount() { return count($this->comment_); }
  public function hasComment() { return (count($this->comment_) > 0); }
  public function indexOfComment($value) { return array_search($value,$this->comment_);}
  public function removeComment($index) { unset($this->comment_[$index]); }
  public function removeValComment($value) { $idx = array_search($value,$this->comment_); if($idx !== FALSE){unset($this->comment_[$idx]); }}
  public function removeValsComment($values) { foreach($values as $value){$idx = array_search($value,$this->comment_); if($idx !== FALSE){unset($this->comment_[$idx]); }}}
  public function pushComment($newvar) { return array_push($this->comment_,$newvar); }
  public function popComment() { return array_pop($this->comment_); }
  public function shiftComment() { return array_shift($this->comment_); }
  public function unshiftComment($newvar) { return array_unshift($this->comment_,$newvar); }
  public function getComment($index) { return $this->comment_[$index]; }
  public function getCommentArray() { return $this->comment_; }
  public function setComment($index, $value) {$this->comment_[$index] = $value;	}
  public function addComment($value) { $this->comment_[] = $value; }
  public function addAllComment(array $values) { foreach($values as $value) {$this->comment_[] = $value;} }
  
  // optional int64 numTotalEntries = 2;

  protected $numTotalEntries_;
  public function resetNumTotalEntries() { unset($this->numTotalEntries_); }
  public function clearNumTotalEntries() { unset($this->numTotalEntries_); }
  public function hasNumTotalEntries() { return isset($this->numTotalEntries_); }
  public function getNumTotalEntries() { return $this->numTotalEntries_; }
  public function setNumTotalEntries($value) { $this->numTotalEntries_ = (string)$value; }
  
  // optional .ExternalCommentProto selfComment = 3;

  protected $selfComment_;
  public function resetSelfComment() { unset($this->selfComment_); }
  public function clearSelfComment() { unset($this->selfComment_); }
  public function hasSelfComment() { return isset($this->selfComment_); }
  public function getSelfComment() { return $this->selfComment_; }
  public function setSelfComment(ExternalCommentProto $value) { $this->selfComment_ = $value; }
  
  // @@protoc_insertion_point(class_scope:CommentsResponseProto)
}


// group ContentSyncRequestProto.AssetInstallState
class ContentSyncRequestProto_AssetInstallState {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("ContentSyncRequestProto_AssetInstallState: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 2:
          ASSERT('$wire == 4');
          break 2;
        case 3:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->assetId_ = $tmp;
          $limit-=$len;
          break;
        case 4:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->assetState_ = $tmp;
          
          break;
        case 5:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->installTime_ = $tmp;
          
          break;
        case 6:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->uninstallTime_ = $tmp;
          
          break;
        case 7:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->packageName_ = $tmp;
          $limit-=$len;
          break;
        case 8:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->versionCode_ = $tmp;
          
          break;
        case 9:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->assetReferrer_ = $tmp;
          $limit-=$len;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->assetId_)) {
      fwrite($fp, "\x1a");
      Protobuf::write_varint($fp, strlen((string)$this->assetId_));
      fwrite($fp, (string)$this->assetId_);
    }
    if (!is_null($this->assetState_)) {
      fwrite($fp, " ");
      Protobuf::write_varint($fp, (int)$this->assetState_);
    }
    if (!is_null($this->installTime_)) {
      fwrite($fp, "(");
      Protobuf::write_varint($fp, (int)$this->installTime_);
    }
    if (!is_null($this->uninstallTime_)) {
      fwrite($fp, "0");
      Protobuf::write_varint($fp, (int)$this->uninstallTime_);
    }
    if (!is_null($this->packageName_)) {
      fwrite($fp, ":");
      Protobuf::write_varint($fp, strlen((string)$this->packageName_));
      fwrite($fp, (string)$this->packageName_);
    }
    if (!is_null($this->versionCode_)) {
      fwrite($fp, "@");
      Protobuf::write_varint($fp, (int)$this->versionCode_);
    }
    if (!is_null($this->assetReferrer_)) {
      fwrite($fp, "J");
      Protobuf::write_varint($fp, strlen((string)$this->assetReferrer_));
      fwrite($fp, (string)$this->assetReferrer_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->assetId_)) {
      $l = strlen((string)$this->assetId_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->assetState_)) {
      $size += 1 + Protobuf::size_varint($this->assetState_);
    }
    if (!is_null($this->installTime_)) {
      $size += 1 + Protobuf::size_varint($this->installTime_);
    }
    if (!is_null($this->uninstallTime_)) {
      $size += 1 + Protobuf::size_varint($this->uninstallTime_);
    }
    if (!is_null($this->packageName_)) {
      $l = strlen((string)$this->packageName_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->versionCode_)) {
      $size += 1 + Protobuf::size_varint($this->versionCode_);
    }
    if (!is_null($this->assetReferrer_)) {
      $l = strlen((string)$this->assetReferrer_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('assetId_', $this->assetId_)
         . Protobuf::toString('assetState_', $this->assetState_)
         . Protobuf::toString('installTime_', $this->installTime_)
         . Protobuf::toString('uninstallTime_', $this->uninstallTime_)
         . Protobuf::toString('packageName_', $this->packageName_)
         . Protobuf::toString('versionCode_', $this->versionCode_)
         . Protobuf::toString('assetReferrer_', $this->assetReferrer_);
  }
  
  // optional string assetId = 3;

  protected $assetId_;
  public function resetAssetId() { unset($this->assetId_); }
  public function clearAssetId() { unset($this->assetId_); }
  public function hasAssetId() { return isset($this->assetId_); }
  public function getAssetId() { return $this->assetId_; }
  public function setAssetId($value) { $this->assetId_ = (string)$value; }
  
  // optional int32 assetState = 4;

  protected $assetState_;
  public function resetAssetState() { unset($this->assetState_); }
  public function clearAssetState() { unset($this->assetState_); }
  public function hasAssetState() { return isset($this->assetState_); }
  public function getAssetState() { return $this->assetState_; }
  public function setAssetState($value) { $this->assetState_ = (string)$value; }
  
  // optional int64 installTime = 5;

  protected $installTime_;
  public function resetInstallTime() { unset($this->installTime_); }
  public function clearInstallTime() { unset($this->installTime_); }
  public function hasInstallTime() { return isset($this->installTime_); }
  public function getInstallTime() { return $this->installTime_; }
  public function setInstallTime($value) { $this->installTime_ = (string)$value; }
  
  // optional int64 uninstallTime = 6;

  protected $uninstallTime_;
  public function resetUninstallTime() { unset($this->uninstallTime_); }
  public function clearUninstallTime() { unset($this->uninstallTime_); }
  public function hasUninstallTime() { return isset($this->uninstallTime_); }
  public function getUninstallTime() { return $this->uninstallTime_; }
  public function setUninstallTime($value) { $this->uninstallTime_ = (string)$value; }
  
  // optional string packageName = 7;

  protected $packageName_;
  public function resetPackageName() { unset($this->packageName_); }
  public function clearPackageName() { unset($this->packageName_); }
  public function hasPackageName() { return isset($this->packageName_); }
  public function getPackageName() { return $this->packageName_; }
  public function setPackageName($value) { $this->packageName_ = (string)$value; }
  
  // optional int32 versionCode = 8;

  protected $versionCode_;
  public function resetVersionCode() { unset($this->versionCode_); }
  public function clearVersionCode() { unset($this->versionCode_); }
  public function hasVersionCode() { return isset($this->versionCode_); }
  public function getVersionCode() { return $this->versionCode_; }
  public function setVersionCode($value) { $this->versionCode_ = (string)$value; }
  
  // optional string assetReferrer = 9;

  protected $assetReferrer_;
  public function resetAssetReferrer() { unset($this->assetReferrer_); }
  public function clearAssetReferrer() { unset($this->assetReferrer_); }
  public function hasAssetReferrer() { return isset($this->assetReferrer_); }
  public function getAssetReferrer() { return $this->assetReferrer_; }
  public function setAssetReferrer($value) { $this->assetReferrer_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:ContentSyncRequestProto.AssetInstallState)
}


// group ContentSyncRequestProto.SystemApp
class ContentSyncRequestProto_SystemApp {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("ContentSyncRequestProto_SystemApp: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 10:
          ASSERT('$wire == 4');
          break 2;
        case 11:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->packageName_ = $tmp;
          $limit-=$len;
          break;
        case 12:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->versionCode_ = $tmp;
          
          break;
        case 13:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->certificateHash_[] = $tmp;
          $limit-=$len;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->packageName_)) {
      fwrite($fp, "Z");
      Protobuf::write_varint($fp, strlen((string)$this->packageName_));
      fwrite($fp, (string)$this->packageName_);
    }
    if (!is_null($this->versionCode_)) {
      fwrite($fp, "`");
      Protobuf::write_varint($fp, (int)$this->versionCode_);
    }
    if (!is_null($this->certificateHash_))
      foreach($this->certificateHash_ as $v) {
        fwrite($fp, "j");
        Protobuf::write_varint($fp, strlen((string)$v));
        fwrite($fp, (string)$v);
      }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->packageName_)) {
      $l = strlen((string)$this->packageName_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->versionCode_)) {
      $size += 1 + Protobuf::size_varint($this->versionCode_);
    }
    if (!is_null($this->certificateHash_))
      foreach($this->certificateHash_ as $v) {
        $l = strlen((string)$v);
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('packageName_', $this->packageName_)
         . Protobuf::toString('versionCode_', $this->versionCode_)
         . Protobuf::toString('certificateHash_', $this->certificateHash_);
  }
  
  // optional string packageName = 11;

  protected $packageName_;
  public function resetPackageName() { unset($this->packageName_); }
  public function clearPackageName() { unset($this->packageName_); }
  public function hasPackageName() { return isset($this->packageName_); }
  public function getPackageName() { return $this->packageName_; }
  public function setPackageName($value) { $this->packageName_ = (string)$value; }
  
  // optional int32 versionCode = 12;

  protected $versionCode_;
  public function resetVersionCode() { unset($this->versionCode_); }
  public function clearVersionCode() { unset($this->versionCode_); }
  public function hasVersionCode() { return isset($this->versionCode_); }
  public function getVersionCode() { return $this->versionCode_; }
  public function setVersionCode($value) { $this->versionCode_ = (string)$value; }
  
  // repeated string certificateHash = 13;

  protected $certificateHash_ = array();
  public function clearCertificateHash() { $this->certificateHash_ = array(); }
  public function getCertificateHashCount() { return count($this->certificateHash_); }
  public function hasCertificateHash() { return (count($this->certificateHash_) > 0); }
  public function indexOfCertificateHash($value) { return array_search($value,$this->certificateHash_);}
  public function removeCertificateHash($index) { unset($this->certificateHash_[$index]); }
  public function removeValCertificateHash($value) { $idx = array_search($value,$this->certificateHash_); if($idx !== FALSE){unset($this->certificateHash_[$idx]); }}
  public function removeValsCertificateHash($values) { foreach($values as $value){$idx = array_search($value,$this->certificateHash_); if($idx !== FALSE){unset($this->certificateHash_[$idx]); }}}
  public function pushCertificateHash($newvar) { return array_push($this->certificateHash_,(string)$newvar); }
  public function popCertificateHash() { return array_pop($this->certificateHash_); }
  public function shiftCertificateHash() { return array_shift($this->certificateHash_); }
  public function unshiftCertificateHash($newvar) { return array_unshift($this->certificateHash_,(string)$newvar); }
  public function getCertificateHash($index) { return $this->certificateHash_[$index]; }
  public function getCertificateHashArray() { return $this->certificateHash_; }
  public function setCertificateHash($index, $value) {$this->certificateHash_[$index] = (string)$value;	}
  public function addCertificateHash($value) { $this->certificateHash_[] = (string)$value; }
  public function addAllCertificateHash(array $values) { foreach($values as $value) {$this->certificateHash_[] = (string)$value;} }
  
  // @@protoc_insertion_point(class_scope:ContentSyncRequestProto.SystemApp)
}

// message ContentSyncRequestProto
class ContentSyncRequestProto {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("ContentSyncRequestProto: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->incremental_ = $tmp > 0 ? true : false;
          break;
        case 2:
          ASSERT('$wire == 3');
          $this->assetinstallstate_[] = new ContentSyncRequestProto_AssetInstallState($fp, $limit);
          break;
        case 10:
          ASSERT('$wire == 3');
          $this->systemapp_[] = new ContentSyncRequestProto_SystemApp($fp, $limit);
          break;
        case 14:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->sideloadedAppCount_ = $tmp;
          
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->incremental_)) {
      fwrite($fp, "\x08");
      Protobuf::write_varint($fp, (int)$this->incremental_ ? 1 : 0);
    }
    if (!is_null($this->assetinstallstate_))
      foreach($this->assetinstallstate_ as $v) {
        fwrite($fp, "\x13");
        $v->write($fp); // group
        fwrite($fp, "\x14");
      }
    if (!is_null($this->systemapp_))
      foreach($this->systemapp_ as $v) {
        fwrite($fp, "S");
        $v->write($fp); // group
        fwrite($fp, "T");
      }
    if (!is_null($this->sideloadedAppCount_)) {
      fwrite($fp, "p");
      Protobuf::write_varint($fp, (int)$this->sideloadedAppCount_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->incremental_)) {
      $size += 2;
    }
    if (!is_null($this->assetinstallstate_))
      foreach($this->assetinstallstate_ as $v) {
        $size += 2 + $v->size();
      }
    if (!is_null($this->systemapp_))
      foreach($this->systemapp_ as $v) {
        $size += 2 + $v->size();
      }
    if (!is_null($this->sideloadedAppCount_)) {
      $size += 1 + Protobuf::size_varint($this->sideloadedAppCount_);
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('incremental_', $this->incremental_)
         . Protobuf::toString('assetinstallstate_', $this->assetinstallstate_)
         . Protobuf::toString('systemapp_', $this->systemapp_)
         . Protobuf::toString('sideloadedAppCount_', $this->sideloadedAppCount_);
  }
  
  // optional bool incremental = 1;

  protected $incremental_;
  public function resetIncremental() { unset($this->incremental_); }
  public function clearIncremental() { unset($this->incremental_); }
  public function hasIncremental() { return isset($this->incremental_); }
  public function getIncremental() { return $this->incremental_; }
  public function setIncremental($value) { $this->incremental_ = (bool)$value; }
  
  // repeated group AssetInstallState = 2
  protected $assetinstallstate_ = array();
  public function clearAssetinstallstate() { $this->assetinstallstate_ = array(); }
  public function getAssetinstallstateCount() { return count($this->assetinstallstate_); }
  public function hasAssetinstallstate() { return (count($this->assetinstallstate_) > 0); }
  public function indexOfAssetinstallstate($value) { return array_search($value,$this->assetinstallstate_);}
  public function removeAssetinstallstate($index) { unset($this->assetinstallstate_[$index]); }
  public function removeValAssetinstallstate($value) { $idx = array_search($value,$this->assetinstallstate_); if($idx !== FALSE){unset($this->assetinstallstate_[$idx]); }}
  public function removeValsAssetinstallstate($values) { foreach($values as $value){$idx = array_search($value,$this->assetinstallstate_); if($idx !== FALSE){unset($this->assetinstallstate_[$idx]); }}}
  public function pushAssetinstallstate($newvar) { return array_push($this->assetinstallstate_,$newvar); }
  public function popAssetinstallstate() { return array_pop($this->assetinstallstate_); }
  public function shiftAssetinstallstate() { return array_shift($this->assetinstallstate_); }
  public function unshiftAssetinstallstate($newvar) { return array_unshift($this->assetinstallstate_,$newvar); }
  public function getAssetinstallstate($index) { return $this->assetinstallstate_[$index]; }
  public function getAssetinstallstateArray() { return $this->assetinstallstate_; }
  public function setAssetinstallstate($index, $value) {$this->assetinstallstate_[$index] = $value;	}
  public function addAssetinstallstate($value) { $this->assetinstallstate_[] = $value; }
  public function addAllAssetinstallstate(array $values) { foreach($values as $value) {$this->assetinstallstate_[] = $value;} }
  
  // repeated group SystemApp = 10
  protected $systemapp_ = array();
  public function clearSystemapp() { $this->systemapp_ = array(); }
  public function getSystemappCount() { return count($this->systemapp_); }
  public function hasSystemapp() { return (count($this->systemapp_) > 0); }
  public function indexOfSystemapp($value) { return array_search($value,$this->systemapp_);}
  public function removeSystemapp($index) { unset($this->systemapp_[$index]); }
  public function removeValSystemapp($value) { $idx = array_search($value,$this->systemapp_); if($idx !== FALSE){unset($this->systemapp_[$idx]); }}
  public function removeValsSystemapp($values) { foreach($values as $value){$idx = array_search($value,$this->systemapp_); if($idx !== FALSE){unset($this->systemapp_[$idx]); }}}
  public function pushSystemapp($newvar) { return array_push($this->systemapp_,$newvar); }
  public function popSystemapp() { return array_pop($this->systemapp_); }
  public function shiftSystemapp() { return array_shift($this->systemapp_); }
  public function unshiftSystemapp($newvar) { return array_unshift($this->systemapp_,$newvar); }
  public function getSystemapp($index) { return $this->systemapp_[$index]; }
  public function getSystemappArray() { return $this->systemapp_; }
  public function setSystemapp($index, $value) {$this->systemapp_[$index] = $value;	}
  public function addSystemapp($value) { $this->systemapp_[] = $value; }
  public function addAllSystemapp(array $values) { foreach($values as $value) {$this->systemapp_[] = $value;} }
  
  // optional int32 sideloadedAppCount = 14;

  protected $sideloadedAppCount_;
  public function resetSideloadedAppCount() { unset($this->sideloadedAppCount_); }
  public function clearSideloadedAppCount() { unset($this->sideloadedAppCount_); }
  public function hasSideloadedAppCount() { return isset($this->sideloadedAppCount_); }
  public function getSideloadedAppCount() { return $this->sideloadedAppCount_; }
  public function setSideloadedAppCount($value) { $this->sideloadedAppCount_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:ContentSyncRequestProto)
}

// message ContentSyncResponseProto
class ContentSyncResponseProto {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("ContentSyncResponseProto: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->numUpdatesAvailable_ = $tmp;
          
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->numUpdatesAvailable_)) {
      fwrite($fp, "\x08");
      Protobuf::write_varint($fp, (int)$this->numUpdatesAvailable_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->numUpdatesAvailable_)) {
      $size += 1 + Protobuf::size_varint($this->numUpdatesAvailable_);
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('numUpdatesAvailable_', $this->numUpdatesAvailable_);
  }
  
  // optional int32 numUpdatesAvailable = 1;

  protected $numUpdatesAvailable_;
  public function resetNumUpdatesAvailable() { unset($this->numUpdatesAvailable_); }
  public function clearNumUpdatesAvailable() { unset($this->numUpdatesAvailable_); }
  public function hasNumUpdatesAvailable() { return isset($this->numUpdatesAvailable_); }
  public function getNumUpdatesAvailable() { return $this->numUpdatesAvailable_; }
  public function setNumUpdatesAvailable($value) { $this->numUpdatesAvailable_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:ContentSyncResponseProto)
}

// message DataMessageProto
class DataMessageProto {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("DataMessageProto: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->category_ = $tmp;
          $limit-=$len;
          break;
        case 3:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->appData_[] = new AppDataProto($fp, $len);
          ASSERT('$len == 0');
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->category_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, strlen((string)$this->category_));
      fwrite($fp, (string)$this->category_);
    }
    if (!is_null($this->appData_))
      foreach($this->appData_ as $v) {
        fwrite($fp, "\x1a");
        Protobuf::write_varint($fp, $v->size()); // message
        $v->write($fp);
      }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->category_)) {
      $l = strlen((string)$this->category_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->appData_))
      foreach($this->appData_ as $v) {
        $l = $v->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('category_', $this->category_)
         . Protobuf::toString('appData_', $this->appData_);
  }
  
  // optional string category = 1;

  protected $category_;
  public function resetCategory() { unset($this->category_); }
  public function clearCategory() { unset($this->category_); }
  public function hasCategory() { return isset($this->category_); }
  public function getCategory() { return $this->category_; }
  public function setCategory($value) { $this->category_ = (string)$value; }
  
  // repeated .AppDataProto appData = 3;

  protected $appData_ = array();
  public function clearAppData() { $this->appData_ = array(); }
  public function getAppDataCount() { return count($this->appData_); }
  public function hasAppData() { return (count($this->appData_) > 0); }
  public function indexOfAppData($value) { return array_search($value,$this->appData_);}
  public function removeAppData($index) { unset($this->appData_[$index]); }
  public function removeValAppData($value) { $idx = array_search($value,$this->appData_); if($idx !== FALSE){unset($this->appData_[$idx]); }}
  public function removeValsAppData($values) { foreach($values as $value){$idx = array_search($value,$this->appData_); if($idx !== FALSE){unset($this->appData_[$idx]); }}}
  public function pushAppData($newvar) { return array_push($this->appData_,$newvar); }
  public function popAppData() { return array_pop($this->appData_); }
  public function shiftAppData() { return array_shift($this->appData_); }
  public function unshiftAppData($newvar) { return array_unshift($this->appData_,$newvar); }
  public function getAppData($index) { return $this->appData_[$index]; }
  public function getAppDataArray() { return $this->appData_; }
  public function setAppData($index, $value) {$this->appData_[$index] = $value;	}
  public function addAppData($value) { $this->appData_[] = $value; }
  public function addAllAppData(array $values) { foreach($values as $value) {$this->appData_[] = $value;} }
  
  // @@protoc_insertion_point(class_scope:DataMessageProto)
}

// message DownloadInfoProto
class DownloadInfoProto {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("DownloadInfoProto: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->apkSize_ = $tmp;
          
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->additionalFile_[] = new FileMetadataProto($fp, $len);
          ASSERT('$len == 0');
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->apkSize_)) {
      fwrite($fp, "\x08");
      Protobuf::write_varint($fp, (int)$this->apkSize_);
    }
    if (!is_null($this->additionalFile_))
      foreach($this->additionalFile_ as $v) {
        fwrite($fp, "\x12");
        Protobuf::write_varint($fp, $v->size()); // message
        $v->write($fp);
      }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->apkSize_)) {
      $size += 1 + Protobuf::size_varint($this->apkSize_);
    }
    if (!is_null($this->additionalFile_))
      foreach($this->additionalFile_ as $v) {
        $l = $v->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('apkSize_', $this->apkSize_)
         . Protobuf::toString('additionalFile_', $this->additionalFile_);
  }
  
  // optional int64 apkSize = 1;

  protected $apkSize_;
  public function resetApkSize() { unset($this->apkSize_); }
  public function clearApkSize() { unset($this->apkSize_); }
  public function hasApkSize() { return isset($this->apkSize_); }
  public function getApkSize() { return $this->apkSize_; }
  public function setApkSize($value) { $this->apkSize_ = (string)$value; }
  
  // repeated .FileMetadataProto additionalFile = 2;

  protected $additionalFile_ = array();
  public function clearAdditionalFile() { $this->additionalFile_ = array(); }
  public function getAdditionalFileCount() { return count($this->additionalFile_); }
  public function hasAdditionalFile() { return (count($this->additionalFile_) > 0); }
  public function indexOfAdditionalFile($value) { return array_search($value,$this->additionalFile_);}
  public function removeAdditionalFile($index) { unset($this->additionalFile_[$index]); }
  public function removeValAdditionalFile($value) { $idx = array_search($value,$this->additionalFile_); if($idx !== FALSE){unset($this->additionalFile_[$idx]); }}
  public function removeValsAdditionalFile($values) { foreach($values as $value){$idx = array_search($value,$this->additionalFile_); if($idx !== FALSE){unset($this->additionalFile_[$idx]); }}}
  public function pushAdditionalFile($newvar) { return array_push($this->additionalFile_,$newvar); }
  public function popAdditionalFile() { return array_pop($this->additionalFile_); }
  public function shiftAdditionalFile() { return array_shift($this->additionalFile_); }
  public function unshiftAdditionalFile($newvar) { return array_unshift($this->additionalFile_,$newvar); }
  public function getAdditionalFile($index) { return $this->additionalFile_[$index]; }
  public function getAdditionalFileArray() { return $this->additionalFile_; }
  public function setAdditionalFile($index, $value) {$this->additionalFile_[$index] = $value;	}
  public function addAdditionalFile($value) { $this->additionalFile_[] = $value; }
  public function addAllAdditionalFile(array $values) { foreach($values as $value) {$this->additionalFile_[] = $value;} }
  
  // @@protoc_insertion_point(class_scope:DownloadInfoProto)
}


// group ExternalAssetProto.PurchaseInformation
class ExternalAssetProto_PurchaseInformation {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("ExternalAssetProto_PurchaseInformation: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 9:
          ASSERT('$wire == 4');
          break 2;
        case 10:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->purchaseTime_ = $tmp;
          
          break;
        case 11:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->refundTimeoutTime_ = $tmp;
          
          break;
        case 45:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->refundStartPolicy_ = $tmp;
          
          break;
        case 46:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->refundWindowDuration_ = $tmp;
          
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->purchaseTime_)) {
      fwrite($fp, "P");
      Protobuf::write_varint($fp, (int)$this->purchaseTime_);
    }
    if (!is_null($this->refundTimeoutTime_)) {
      fwrite($fp, "X");
      Protobuf::write_varint($fp, (int)$this->refundTimeoutTime_);
    }
    if (!is_null($this->refundStartPolicy_)) {
      fwrite($fp, "\xe8\x02");
      Protobuf::write_varint($fp, (int)$this->refundStartPolicy_);
    }
    if (!is_null($this->refundWindowDuration_)) {
      fwrite($fp, "\xf0\x02");
      Protobuf::write_varint($fp, (int)$this->refundWindowDuration_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->purchaseTime_)) {
      $size += 1 + Protobuf::size_varint($this->purchaseTime_);
    }
    if (!is_null($this->refundTimeoutTime_)) {
      $size += 1 + Protobuf::size_varint($this->refundTimeoutTime_);
    }
    if (!is_null($this->refundStartPolicy_)) {
      $size += 2 + Protobuf::size_varint($this->refundStartPolicy_);
    }
    if (!is_null($this->refundWindowDuration_)) {
      $size += 2 + Protobuf::size_varint($this->refundWindowDuration_);
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('purchaseTime_', $this->purchaseTime_)
         . Protobuf::toString('refundTimeoutTime_', $this->refundTimeoutTime_)
         . Protobuf::toString('refundStartPolicy_', $this->refundStartPolicy_)
         . Protobuf::toString('refundWindowDuration_', $this->refundWindowDuration_);
  }
  
  // optional int64 purchaseTime = 10;

  protected $purchaseTime_;
  public function resetPurchaseTime() { unset($this->purchaseTime_); }
  public function clearPurchaseTime() { unset($this->purchaseTime_); }
  public function hasPurchaseTime() { return isset($this->purchaseTime_); }
  public function getPurchaseTime() { return $this->purchaseTime_; }
  public function setPurchaseTime($value) { $this->purchaseTime_ = (string)$value; }
  
  // optional int64 refundTimeoutTime = 11;

  protected $refundTimeoutTime_;
  public function resetRefundTimeoutTime() { unset($this->refundTimeoutTime_); }
  public function clearRefundTimeoutTime() { unset($this->refundTimeoutTime_); }
  public function hasRefundTimeoutTime() { return isset($this->refundTimeoutTime_); }
  public function getRefundTimeoutTime() { return $this->refundTimeoutTime_; }
  public function setRefundTimeoutTime($value) { $this->refundTimeoutTime_ = (string)$value; }
  
  // optional int32 refundStartPolicy = 45;

  protected $refundStartPolicy_;
  public function resetRefundStartPolicy() { unset($this->refundStartPolicy_); }
  public function clearRefundStartPolicy() { unset($this->refundStartPolicy_); }
  public function hasRefundStartPolicy() { return isset($this->refundStartPolicy_); }
  public function getRefundStartPolicy() { return $this->refundStartPolicy_; }
  public function setRefundStartPolicy($value) { $this->refundStartPolicy_ = (string)$value; }
  
  // optional int64 refundWindowDuration = 46;

  protected $refundWindowDuration_;
  public function resetRefundWindowDuration() { unset($this->refundWindowDuration_); }
  public function clearRefundWindowDuration() { unset($this->refundWindowDuration_); }
  public function hasRefundWindowDuration() { return isset($this->refundWindowDuration_); }
  public function getRefundWindowDuration() { return $this->refundWindowDuration_; }
  public function setRefundWindowDuration($value) { $this->refundWindowDuration_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:ExternalAssetProto.PurchaseInformation)
}



// group ExternalAssetProto.ExtendedInfo.PackageDependency
class ExternalAssetProto_ExtendedInfo_PackageDependency {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("ExternalAssetProto_ExtendedInfo_PackageDependency: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 39:
          ASSERT('$wire == 4');
          break 2;
        case 41:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->packageName_ = $tmp;
          $limit-=$len;
          break;
        case 42:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->skipPermissions_ = $tmp > 0 ? true : false;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->packageName_)) {
      fwrite($fp, "\xca\x02");
      Protobuf::write_varint($fp, strlen((string)$this->packageName_));
      fwrite($fp, (string)$this->packageName_);
    }
    if (!is_null($this->skipPermissions_)) {
      fwrite($fp, "\xd0\x02");
      Protobuf::write_varint($fp, (int)$this->skipPermissions_ ? 1 : 0);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->packageName_)) {
      $l = strlen((string)$this->packageName_);
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->skipPermissions_)) {
      $size += 3;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('packageName_', $this->packageName_)
         . Protobuf::toString('skipPermissions_', $this->skipPermissions_);
  }
  
  // optional string packageName = 41;

  protected $packageName_;
  public function resetPackageName() { unset($this->packageName_); }
  public function clearPackageName() { unset($this->packageName_); }
  public function hasPackageName() { return isset($this->packageName_); }
  public function getPackageName() { return $this->packageName_; }
  public function setPackageName($value) { $this->packageName_ = (string)$value; }
  
  // optional bool skipPermissions = 42;

  protected $skipPermissions_;
  public function resetSkipPermissions() { unset($this->skipPermissions_); }
  public function clearSkipPermissions() { unset($this->skipPermissions_); }
  public function hasSkipPermissions() { return isset($this->skipPermissions_); }
  public function getSkipPermissions() { return $this->skipPermissions_; }
  public function setSkipPermissions($value) { $this->skipPermissions_ = (bool)$value; }
  
  // @@protoc_insertion_point(class_scope:ExternalAssetProto.ExtendedInfo.PackageDependency)
}

// group ExternalAssetProto.ExtendedInfo
class ExternalAssetProto_ExtendedInfo {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("ExternalAssetProto_ExtendedInfo: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 12:
          ASSERT('$wire == 4');
          break 2;
        case 13:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->description_ = $tmp;
          $limit-=$len;
          break;
        case 14:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->downloadCount_ = $tmp;
          
          break;
        case 15:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->applicationPermissionId_[] = $tmp;
          $limit-=$len;
          break;
        case 16:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->requiredInstallationSize_ = $tmp;
          
          break;
        case 17:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->packageName_ = $tmp;
          $limit-=$len;
          break;
        case 18:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->category_ = $tmp;
          $limit-=$len;
          break;
        case 19:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->forwardLocked_ = $tmp > 0 ? true : false;
          break;
        case 20:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->contactEmail_ = $tmp;
          $limit-=$len;
          break;
        case 21:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->everInstalledByUser_ = $tmp > 0 ? true : false;
          break;
        case 23:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->downloadCountString_ = $tmp;
          $limit-=$len;
          break;
        case 26:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->contactPhone_ = $tmp;
          $limit-=$len;
          break;
        case 27:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->contactWebsite_ = $tmp;
          $limit-=$len;
          break;
        case 28:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->nextPurchaseRefundable_ = $tmp > 0 ? true : false;
          break;
        case 30:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->numScreenshots_ = $tmp;
          
          break;
        case 31:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->promotionalDescription_ = $tmp;
          $limit-=$len;
          break;
        case 34:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->serverAssetState_ = $tmp;
          
          break;
        case 36:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->contentRatingLevel_ = $tmp;
          
          break;
        case 37:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->contentRatingString_ = $tmp;
          $limit-=$len;
          break;
        case 38:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->recentChanges_ = $tmp;
          $limit-=$len;
          break;
        case 39:
          ASSERT('$wire == 3');
          $this->packagedependency_[] = new ExternalAssetProto_ExtendedInfo_PackageDependency($fp, $limit);
          break;
        case 43:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->videoLink_ = $tmp;
          $limit-=$len;
          break;
        case 49:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->downloadInfo_ = new DownloadInfoProto($fp, $len);
          ASSERT('$len == 0');
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->description_)) {
      fwrite($fp, "j");
      Protobuf::write_varint($fp, strlen((string)$this->description_));
      fwrite($fp, (string)$this->description_);
    }
    if (!is_null($this->downloadCount_)) {
      fwrite($fp, "p");
      Protobuf::write_varint($fp, (int)$this->downloadCount_);
    }
    if (!is_null($this->applicationPermissionId_))
      foreach($this->applicationPermissionId_ as $v) {
        fwrite($fp, "z");
        Protobuf::write_varint($fp, strlen((string)$v));
        fwrite($fp, (string)$v);
      }
    if (!is_null($this->requiredInstallationSize_)) {
      fwrite($fp, "\x80\x01");
      Protobuf::write_varint($fp, (int)$this->requiredInstallationSize_);
    }
    if (!is_null($this->packageName_)) {
      fwrite($fp, "\x8a\x01");
      Protobuf::write_varint($fp, strlen((string)$this->packageName_));
      fwrite($fp, (string)$this->packageName_);
    }
    if (!is_null($this->category_)) {
      fwrite($fp, "\x92\x01");
      Protobuf::write_varint($fp, strlen((string)$this->category_));
      fwrite($fp, (string)$this->category_);
    }
    if (!is_null($this->forwardLocked_)) {
      fwrite($fp, "\x98\x01");
      Protobuf::write_varint($fp, (int)$this->forwardLocked_ ? 1 : 0);
    }
    if (!is_null($this->contactEmail_)) {
      fwrite($fp, "\xa2\x01");
      Protobuf::write_varint($fp, strlen((string)$this->contactEmail_));
      fwrite($fp, (string)$this->contactEmail_);
    }
    if (!is_null($this->everInstalledByUser_)) {
      fwrite($fp, "\xa8\x01");
      Protobuf::write_varint($fp, (int)$this->everInstalledByUser_ ? 1 : 0);
    }
    if (!is_null($this->downloadCountString_)) {
      fwrite($fp, "\xba\x01");
      Protobuf::write_varint($fp, strlen((string)$this->downloadCountString_));
      fwrite($fp, (string)$this->downloadCountString_);
    }
    if (!is_null($this->contactPhone_)) {
      fwrite($fp, "\xd2\x01");
      Protobuf::write_varint($fp, strlen((string)$this->contactPhone_));
      fwrite($fp, (string)$this->contactPhone_);
    }
    if (!is_null($this->contactWebsite_)) {
      fwrite($fp, "\xda\x01");
      Protobuf::write_varint($fp, strlen((string)$this->contactWebsite_));
      fwrite($fp, (string)$this->contactWebsite_);
    }
    if (!is_null($this->nextPurchaseRefundable_)) {
      fwrite($fp, "\xe0\x01");
      Protobuf::write_varint($fp, (int)$this->nextPurchaseRefundable_ ? 1 : 0);
    }
    if (!is_null($this->numScreenshots_)) {
      fwrite($fp, "\xf0\x01");
      Protobuf::write_varint($fp, (int)$this->numScreenshots_);
    }
    if (!is_null($this->promotionalDescription_)) {
      fwrite($fp, "\xfa\x01");
      Protobuf::write_varint($fp, strlen((string)$this->promotionalDescription_));
      fwrite($fp, (string)$this->promotionalDescription_);
    }
    if (!is_null($this->serverAssetState_)) {
      fwrite($fp, "\x90\x02");
      Protobuf::write_varint($fp, (int)$this->serverAssetState_);
    }
    if (!is_null($this->contentRatingLevel_)) {
      fwrite($fp, "\xa0\x02");
      Protobuf::write_varint($fp, (int)$this->contentRatingLevel_);
    }
    if (!is_null($this->contentRatingString_)) {
      fwrite($fp, "\xaa\x02");
      Protobuf::write_varint($fp, strlen((string)$this->contentRatingString_));
      fwrite($fp, (string)$this->contentRatingString_);
    }
    if (!is_null($this->recentChanges_)) {
      fwrite($fp, "\xb2\x02");
      Protobuf::write_varint($fp, strlen((string)$this->recentChanges_));
      fwrite($fp, (string)$this->recentChanges_);
    }
    if (!is_null($this->packagedependency_))
      foreach($this->packagedependency_ as $v) {
        fwrite($fp, "\xbb\x02");
        $v->write($fp); // group
        fwrite($fp, "\xbc\x02");
      }
    if (!is_null($this->videoLink_)) {
      fwrite($fp, "\xda\x02");
      Protobuf::write_varint($fp, strlen((string)$this->videoLink_));
      fwrite($fp, (string)$this->videoLink_);
    }
    if (!is_null($this->downloadInfo_)) {
      fwrite($fp, "\x8a\x03");
      Protobuf::write_varint($fp, $this->downloadInfo_->size()); // message
      $this->downloadInfo_->write($fp);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->description_)) {
      $l = strlen((string)$this->description_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->downloadCount_)) {
      $size += 1 + Protobuf::size_varint($this->downloadCount_);
    }
    if (!is_null($this->applicationPermissionId_))
      foreach($this->applicationPermissionId_ as $v) {
        $l = strlen((string)$v);
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
    if (!is_null($this->requiredInstallationSize_)) {
      $size += 2 + Protobuf::size_varint($this->requiredInstallationSize_);
    }
    if (!is_null($this->packageName_)) {
      $l = strlen((string)$this->packageName_);
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->category_)) {
      $l = strlen((string)$this->category_);
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->forwardLocked_)) {
      $size += 3;
    }
    if (!is_null($this->contactEmail_)) {
      $l = strlen((string)$this->contactEmail_);
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->everInstalledByUser_)) {
      $size += 3;
    }
    if (!is_null($this->downloadCountString_)) {
      $l = strlen((string)$this->downloadCountString_);
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->contactPhone_)) {
      $l = strlen((string)$this->contactPhone_);
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->contactWebsite_)) {
      $l = strlen((string)$this->contactWebsite_);
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->nextPurchaseRefundable_)) {
      $size += 3;
    }
    if (!is_null($this->numScreenshots_)) {
      $size += 2 + Protobuf::size_varint($this->numScreenshots_);
    }
    if (!is_null($this->promotionalDescription_)) {
      $l = strlen((string)$this->promotionalDescription_);
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->serverAssetState_)) {
      $size += 2 + Protobuf::size_varint($this->serverAssetState_);
    }
    if (!is_null($this->contentRatingLevel_)) {
      $size += 2 + Protobuf::size_varint($this->contentRatingLevel_);
    }
    if (!is_null($this->contentRatingString_)) {
      $l = strlen((string)$this->contentRatingString_);
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->recentChanges_)) {
      $l = strlen((string)$this->recentChanges_);
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->packagedependency_))
      foreach($this->packagedependency_ as $v) {
        $size += 4 + $v->size();
      }
    if (!is_null($this->videoLink_)) {
      $l = strlen((string)$this->videoLink_);
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->downloadInfo_)) {
      $l = $this->downloadInfo_->size();
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('description_', $this->description_)
         . Protobuf::toString('downloadCount_', $this->downloadCount_)
         . Protobuf::toString('applicationPermissionId_', $this->applicationPermissionId_)
         . Protobuf::toString('requiredInstallationSize_', $this->requiredInstallationSize_)
         . Protobuf::toString('packageName_', $this->packageName_)
         . Protobuf::toString('category_', $this->category_)
         . Protobuf::toString('forwardLocked_', $this->forwardLocked_)
         . Protobuf::toString('contactEmail_', $this->contactEmail_)
         . Protobuf::toString('everInstalledByUser_', $this->everInstalledByUser_)
         . Protobuf::toString('downloadCountString_', $this->downloadCountString_)
         . Protobuf::toString('contactPhone_', $this->contactPhone_)
         . Protobuf::toString('contactWebsite_', $this->contactWebsite_)
         . Protobuf::toString('nextPurchaseRefundable_', $this->nextPurchaseRefundable_)
         . Protobuf::toString('numScreenshots_', $this->numScreenshots_)
         . Protobuf::toString('promotionalDescription_', $this->promotionalDescription_)
         . Protobuf::toString('serverAssetState_', $this->serverAssetState_)
         . Protobuf::toString('contentRatingLevel_', $this->contentRatingLevel_)
         . Protobuf::toString('contentRatingString_', $this->contentRatingString_)
         . Protobuf::toString('recentChanges_', $this->recentChanges_)
         . Protobuf::toString('packagedependency_', $this->packagedependency_)
         . Protobuf::toString('videoLink_', $this->videoLink_)
         . Protobuf::toString('downloadInfo_', $this->downloadInfo_);
  }
  
  // optional string description = 13;

  protected $description_;
  public function resetDescription() { unset($this->description_); }
  public function clearDescription() { unset($this->description_); }
  public function hasDescription() { return isset($this->description_); }
  public function getDescription() { return $this->description_; }
  public function setDescription($value) { $this->description_ = (string)$value; }
  
  // optional int64 downloadCount = 14;

  protected $downloadCount_;
  public function resetDownloadCount() { unset($this->downloadCount_); }
  public function clearDownloadCount() { unset($this->downloadCount_); }
  public function hasDownloadCount() { return isset($this->downloadCount_); }
  public function getDownloadCount() { return $this->downloadCount_; }
  public function setDownloadCount($value) { $this->downloadCount_ = (string)$value; }
  
  // repeated string applicationPermissionId = 15;

  protected $applicationPermissionId_ = array();
  public function clearApplicationPermissionId() { $this->applicationPermissionId_ = array(); }
  public function getApplicationPermissionIdCount() { return count($this->applicationPermissionId_); }
  public function hasApplicationPermissionId() { return (count($this->applicationPermissionId_) > 0); }
  public function indexOfApplicationPermissionId($value) { return array_search($value,$this->applicationPermissionId_);}
  public function removeApplicationPermissionId($index) { unset($this->applicationPermissionId_[$index]); }
  public function removeValApplicationPermissionId($value) { $idx = array_search($value,$this->applicationPermissionId_); if($idx !== FALSE){unset($this->applicationPermissionId_[$idx]); }}
  public function removeValsApplicationPermissionId($values) { foreach($values as $value){$idx = array_search($value,$this->applicationPermissionId_); if($idx !== FALSE){unset($this->applicationPermissionId_[$idx]); }}}
  public function pushApplicationPermissionId($newvar) { return array_push($this->applicationPermissionId_,(string)$newvar); }
  public function popApplicationPermissionId() { return array_pop($this->applicationPermissionId_); }
  public function shiftApplicationPermissionId() { return array_shift($this->applicationPermissionId_); }
  public function unshiftApplicationPermissionId($newvar) { return array_unshift($this->applicationPermissionId_,(string)$newvar); }
  public function getApplicationPermissionId($index) { return $this->applicationPermissionId_[$index]; }
  public function getApplicationPermissionIdArray() { return $this->applicationPermissionId_; }
  public function setApplicationPermissionId($index, $value) {$this->applicationPermissionId_[$index] = (string)$value;	}
  public function addApplicationPermissionId($value) { $this->applicationPermissionId_[] = (string)$value; }
  public function addAllApplicationPermissionId(array $values) { foreach($values as $value) {$this->applicationPermissionId_[] = (string)$value;} }
  
  // optional int64 requiredInstallationSize = 16;

  protected $requiredInstallationSize_;
  public function resetRequiredInstallationSize() { unset($this->requiredInstallationSize_); }
  public function clearRequiredInstallationSize() { unset($this->requiredInstallationSize_); }
  public function hasRequiredInstallationSize() { return isset($this->requiredInstallationSize_); }
  public function getRequiredInstallationSize() { return $this->requiredInstallationSize_; }
  public function setRequiredInstallationSize($value) { $this->requiredInstallationSize_ = (string)$value; }
  
  // optional string packageName = 17;

  protected $packageName_;
  public function resetPackageName() { unset($this->packageName_); }
  public function clearPackageName() { unset($this->packageName_); }
  public function hasPackageName() { return isset($this->packageName_); }
  public function getPackageName() { return $this->packageName_; }
  public function setPackageName($value) { $this->packageName_ = (string)$value; }
  
  // optional string category = 18;

  protected $category_;
  public function resetCategory() { unset($this->category_); }
  public function clearCategory() { unset($this->category_); }
  public function hasCategory() { return isset($this->category_); }
  public function getCategory() { return $this->category_; }
  public function setCategory($value) { $this->category_ = (string)$value; }
  
  // optional bool forwardLocked = 19;

  protected $forwardLocked_;
  public function resetForwardLocked() { unset($this->forwardLocked_); }
  public function clearForwardLocked() { unset($this->forwardLocked_); }
  public function hasForwardLocked() { return isset($this->forwardLocked_); }
  public function getForwardLocked() { return $this->forwardLocked_; }
  public function setForwardLocked($value) { $this->forwardLocked_ = (bool)$value; }
  
  // optional string contactEmail = 20;

  protected $contactEmail_;
  public function resetContactEmail() { unset($this->contactEmail_); }
  public function clearContactEmail() { unset($this->contactEmail_); }
  public function hasContactEmail() { return isset($this->contactEmail_); }
  public function getContactEmail() { return $this->contactEmail_; }
  public function setContactEmail($value) { $this->contactEmail_ = (string)$value; }
  
  // optional bool everInstalledByUser = 21;

  protected $everInstalledByUser_;
  public function resetEverInstalledByUser() { unset($this->everInstalledByUser_); }
  public function clearEverInstalledByUser() { unset($this->everInstalledByUser_); }
  public function hasEverInstalledByUser() { return isset($this->everInstalledByUser_); }
  public function getEverInstalledByUser() { return $this->everInstalledByUser_; }
  public function setEverInstalledByUser($value) { $this->everInstalledByUser_ = (bool)$value; }
  
  // optional string downloadCountString = 23;

  protected $downloadCountString_;
  public function resetDownloadCountString() { unset($this->downloadCountString_); }
  public function clearDownloadCountString() { unset($this->downloadCountString_); }
  public function hasDownloadCountString() { return isset($this->downloadCountString_); }
  public function getDownloadCountString() { return $this->downloadCountString_; }
  public function setDownloadCountString($value) { $this->downloadCountString_ = (string)$value; }
  
  // optional string contactPhone = 26;

  protected $contactPhone_;
  public function resetContactPhone() { unset($this->contactPhone_); }
  public function clearContactPhone() { unset($this->contactPhone_); }
  public function hasContactPhone() { return isset($this->contactPhone_); }
  public function getContactPhone() { return $this->contactPhone_; }
  public function setContactPhone($value) { $this->contactPhone_ = (string)$value; }
  
  // optional string contactWebsite = 27;

  protected $contactWebsite_;
  public function resetContactWebsite() { unset($this->contactWebsite_); }
  public function clearContactWebsite() { unset($this->contactWebsite_); }
  public function hasContactWebsite() { return isset($this->contactWebsite_); }
  public function getContactWebsite() { return $this->contactWebsite_; }
  public function setContactWebsite($value) { $this->contactWebsite_ = (string)$value; }
  
  // optional bool nextPurchaseRefundable = 28;

  protected $nextPurchaseRefundable_;
  public function resetNextPurchaseRefundable() { unset($this->nextPurchaseRefundable_); }
  public function clearNextPurchaseRefundable() { unset($this->nextPurchaseRefundable_); }
  public function hasNextPurchaseRefundable() { return isset($this->nextPurchaseRefundable_); }
  public function getNextPurchaseRefundable() { return $this->nextPurchaseRefundable_; }
  public function setNextPurchaseRefundable($value) { $this->nextPurchaseRefundable_ = (bool)$value; }
  
  // optional int32 numScreenshots = 30;

  protected $numScreenshots_;
  public function resetNumScreenshots() { unset($this->numScreenshots_); }
  public function clearNumScreenshots() { unset($this->numScreenshots_); }
  public function hasNumScreenshots() { return isset($this->numScreenshots_); }
  public function getNumScreenshots() { return $this->numScreenshots_; }
  public function setNumScreenshots($value) { $this->numScreenshots_ = (string)$value; }
  
  // optional string promotionalDescription = 31;

  protected $promotionalDescription_;
  public function resetPromotionalDescription() { unset($this->promotionalDescription_); }
  public function clearPromotionalDescription() { unset($this->promotionalDescription_); }
  public function hasPromotionalDescription() { return isset($this->promotionalDescription_); }
  public function getPromotionalDescription() { return $this->promotionalDescription_; }
  public function setPromotionalDescription($value) { $this->promotionalDescription_ = (string)$value; }
  
  // optional int32 serverAssetState = 34;

  protected $serverAssetState_;
  public function resetServerAssetState() { unset($this->serverAssetState_); }
  public function clearServerAssetState() { unset($this->serverAssetState_); }
  public function hasServerAssetState() { return isset($this->serverAssetState_); }
  public function getServerAssetState() { return $this->serverAssetState_; }
  public function setServerAssetState($value) { $this->serverAssetState_ = (string)$value; }
  
  // optional int32 contentRatingLevel = 36;

  protected $contentRatingLevel_;
  public function resetContentRatingLevel() { unset($this->contentRatingLevel_); }
  public function clearContentRatingLevel() { unset($this->contentRatingLevel_); }
  public function hasContentRatingLevel() { return isset($this->contentRatingLevel_); }
  public function getContentRatingLevel() { return $this->contentRatingLevel_; }
  public function setContentRatingLevel($value) { $this->contentRatingLevel_ = (string)$value; }
  
  // optional string contentRatingString = 37;

  protected $contentRatingString_;
  public function resetContentRatingString() { unset($this->contentRatingString_); }
  public function clearContentRatingString() { unset($this->contentRatingString_); }
  public function hasContentRatingString() { return isset($this->contentRatingString_); }
  public function getContentRatingString() { return $this->contentRatingString_; }
  public function setContentRatingString($value) { $this->contentRatingString_ = (string)$value; }
  
  // optional string recentChanges = 38;

  protected $recentChanges_;
  public function resetRecentChanges() { unset($this->recentChanges_); }
  public function clearRecentChanges() { unset($this->recentChanges_); }
  public function hasRecentChanges() { return isset($this->recentChanges_); }
  public function getRecentChanges() { return $this->recentChanges_; }
  public function setRecentChanges($value) { $this->recentChanges_ = (string)$value; }
  
  // repeated group PackageDependency = 39
  protected $packagedependency_ = array();
  public function clearPackagedependency() { $this->packagedependency_ = array(); }
  public function getPackagedependencyCount() { return count($this->packagedependency_); }
  public function hasPackagedependency() { return (count($this->packagedependency_) > 0); }
  public function indexOfPackagedependency($value) { return array_search($value,$this->packagedependency_);}
  public function removePackagedependency($index) { unset($this->packagedependency_[$index]); }
  public function removeValPackagedependency($value) { $idx = array_search($value,$this->packagedependency_); if($idx !== FALSE){unset($this->packagedependency_[$idx]); }}
  public function removeValsPackagedependency($values) { foreach($values as $value){$idx = array_search($value,$this->packagedependency_); if($idx !== FALSE){unset($this->packagedependency_[$idx]); }}}
  public function pushPackagedependency($newvar) { return array_push($this->packagedependency_,$newvar); }
  public function popPackagedependency() { return array_pop($this->packagedependency_); }
  public function shiftPackagedependency() { return array_shift($this->packagedependency_); }
  public function unshiftPackagedependency($newvar) { return array_unshift($this->packagedependency_,$newvar); }
  public function getPackagedependency($index) { return $this->packagedependency_[$index]; }
  public function getPackagedependencyArray() { return $this->packagedependency_; }
  public function setPackagedependency($index, $value) {$this->packagedependency_[$index] = $value;	}
  public function addPackagedependency($value) { $this->packagedependency_[] = $value; }
  public function addAllPackagedependency(array $values) { foreach($values as $value) {$this->packagedependency_[] = $value;} }
  
  // optional string videoLink = 43;

  protected $videoLink_;
  public function resetVideoLink() { unset($this->videoLink_); }
  public function clearVideoLink() { unset($this->videoLink_); }
  public function hasVideoLink() { return isset($this->videoLink_); }
  public function getVideoLink() { return $this->videoLink_; }
  public function setVideoLink($value) { $this->videoLink_ = (string)$value; }
  
  // optional .DownloadInfoProto downloadInfo = 49;

  protected $downloadInfo_;
  public function resetDownloadInfo() { unset($this->downloadInfo_); }
  public function clearDownloadInfo() { unset($this->downloadInfo_); }
  public function hasDownloadInfo() { return isset($this->downloadInfo_); }
  public function getDownloadInfo() { return $this->downloadInfo_; }
  public function setDownloadInfo(DownloadInfoProto $value) { $this->downloadInfo_ = $value; }
  
  // @@protoc_insertion_point(class_scope:ExternalAssetProto.ExtendedInfo)
}

// message ExternalAssetProto
class ExternalAssetProto {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("ExternalAssetProto: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->id_ = $tmp;
          $limit-=$len;
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->title_ = $tmp;
          $limit-=$len;
          break;
        case 3:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->assetType_ = $tmp;
          
          break;
        case 4:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->owner_ = $tmp;
          $limit-=$len;
          break;
        case 5:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->version_ = $tmp;
          $limit-=$len;
          break;
        case 6:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->price_ = $tmp;
          $limit-=$len;
          break;
        case 7:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->averageRating_ = $tmp;
          $limit-=$len;
          break;
        case 8:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->numRatings_ = $tmp;
          
          break;
        case 9:
          ASSERT('$wire == 3');
          $this->purchaseinformation_ = new ExternalAssetProto_PurchaseInformation($fp, $limit);
          break;
        case 12:
          ASSERT('$wire == 3');
          $this->extendedinfo_ = new ExternalAssetProto_ExtendedInfo($fp, $limit);
          break;
        case 22:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->ownerId_ = $tmp;
          $limit-=$len;
          break;
        case 24:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->packageName_ = $tmp;
          $limit-=$len;
          break;
        case 25:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->versionCode_ = $tmp;
          
          break;
        case 29:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->bundledAsset_ = $tmp > 0 ? true : false;
          break;
        case 32:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->priceCurrency_ = $tmp;
          $limit-=$len;
          break;
        case 33:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->priceMicros_ = $tmp;
          
          break;
        case 35:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->filterReason_ = $tmp;
          $limit-=$len;
          break;
        case 40:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->actualSellerPrice_ = $tmp;
          $limit-=$len;
          break;
        case 47:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->appBadge_[] = new ExternalBadgeProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 48:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->ownerBadge_[] = new ExternalBadgeProto($fp, $len);
          ASSERT('$len == 0');
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->id_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, strlen((string)$this->id_));
      fwrite($fp, (string)$this->id_);
    }
    if (!is_null($this->title_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, strlen((string)$this->title_));
      fwrite($fp, (string)$this->title_);
    }
    if (!is_null($this->assetType_)) {
      fwrite($fp, "\x18");
      Protobuf::write_varint($fp, (int)$this->assetType_);
    }
    if (!is_null($this->owner_)) {
      fwrite($fp, "\"");
      Protobuf::write_varint($fp, strlen((string)$this->owner_));
      fwrite($fp, (string)$this->owner_);
    }
    if (!is_null($this->version_)) {
      fwrite($fp, "*");
      Protobuf::write_varint($fp, strlen((string)$this->version_));
      fwrite($fp, (string)$this->version_);
    }
    if (!is_null($this->price_)) {
      fwrite($fp, "2");
      Protobuf::write_varint($fp, strlen((string)$this->price_));
      fwrite($fp, (string)$this->price_);
    }
    if (!is_null($this->averageRating_)) {
      fwrite($fp, ":");
      Protobuf::write_varint($fp, strlen((string)$this->averageRating_));
      fwrite($fp, (string)$this->averageRating_);
    }
    if (!is_null($this->numRatings_)) {
      fwrite($fp, "@");
      Protobuf::write_varint($fp, (int)$this->numRatings_);
    }
    if (!is_null($this->purchaseinformation_)) {
      fwrite($fp, "K");
      $this->purchaseinformation_->write($fp); // group
      fwrite($fp, "L");
    }
    if (!is_null($this->extendedinfo_)) {
      fwrite($fp, "c");
      $this->extendedinfo_->write($fp); // group
      fwrite($fp, "d");
    }
    if (!is_null($this->ownerId_)) {
      fwrite($fp, "\xb2\x01");
      Protobuf::write_varint($fp, strlen((string)$this->ownerId_));
      fwrite($fp, (string)$this->ownerId_);
    }
    if (!is_null($this->packageName_)) {
      fwrite($fp, "\xc2\x01");
      Protobuf::write_varint($fp, strlen((string)$this->packageName_));
      fwrite($fp, (string)$this->packageName_);
    }
    if (!is_null($this->versionCode_)) {
      fwrite($fp, "\xc8\x01");
      Protobuf::write_varint($fp, (int)$this->versionCode_);
    }
    if (!is_null($this->bundledAsset_)) {
      fwrite($fp, "\xe8\x01");
      Protobuf::write_varint($fp, (int)$this->bundledAsset_ ? 1 : 0);
    }
    if (!is_null($this->priceCurrency_)) {
      fwrite($fp, "\x82\x02");
      Protobuf::write_varint($fp, strlen((string)$this->priceCurrency_));
      fwrite($fp, (string)$this->priceCurrency_);
    }
    if (!is_null($this->priceMicros_)) {
      fwrite($fp, "\x88\x02");
      Protobuf::write_varint($fp, (int)$this->priceMicros_);
    }
    if (!is_null($this->filterReason_)) {
      fwrite($fp, "\x9a\x02");
      Protobuf::write_varint($fp, strlen((string)$this->filterReason_));
      fwrite($fp, (string)$this->filterReason_);
    }
    if (!is_null($this->actualSellerPrice_)) {
      fwrite($fp, "\xc2\x02");
      Protobuf::write_varint($fp, strlen((string)$this->actualSellerPrice_));
      fwrite($fp, (string)$this->actualSellerPrice_);
    }
    if (!is_null($this->appBadge_))
      foreach($this->appBadge_ as $v) {
        fwrite($fp, "\xfa\x02");
        Protobuf::write_varint($fp, $v->size()); // message
        $v->write($fp);
      }
    if (!is_null($this->ownerBadge_))
      foreach($this->ownerBadge_ as $v) {
        fwrite($fp, "\x82\x03");
        Protobuf::write_varint($fp, $v->size()); // message
        $v->write($fp);
      }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->id_)) {
      $l = strlen((string)$this->id_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->title_)) {
      $l = strlen((string)$this->title_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->assetType_)) {
      $size += 1 + Protobuf::size_varint($this->assetType_);
    }
    if (!is_null($this->owner_)) {
      $l = strlen((string)$this->owner_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->version_)) {
      $l = strlen((string)$this->version_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->price_)) {
      $l = strlen((string)$this->price_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->averageRating_)) {
      $l = strlen((string)$this->averageRating_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->numRatings_)) {
      $size += 1 + Protobuf::size_varint($this->numRatings_);
    }
    if (!is_null($this->purchaseinformation_)) {
      $size += 2 + $this->purchaseinformation_->size();
    }
    if (!is_null($this->extendedinfo_)) {
      $size += 2 + $this->extendedinfo_->size();
    }
    if (!is_null($this->ownerId_)) {
      $l = strlen((string)$this->ownerId_);
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->packageName_)) {
      $l = strlen((string)$this->packageName_);
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->versionCode_)) {
      $size += 2 + Protobuf::size_varint($this->versionCode_);
    }
    if (!is_null($this->bundledAsset_)) {
      $size += 3;
    }
    if (!is_null($this->priceCurrency_)) {
      $l = strlen((string)$this->priceCurrency_);
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->priceMicros_)) {
      $size += 2 + Protobuf::size_varint($this->priceMicros_);
    }
    if (!is_null($this->filterReason_)) {
      $l = strlen((string)$this->filterReason_);
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->actualSellerPrice_)) {
      $l = strlen((string)$this->actualSellerPrice_);
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->appBadge_))
      foreach($this->appBadge_ as $v) {
        $l = $v->size();
        $size += 2 + Protobuf::size_varint($l) + $l;
      }
    if (!is_null($this->ownerBadge_))
      foreach($this->ownerBadge_ as $v) {
        $l = $v->size();
        $size += 2 + Protobuf::size_varint($l) + $l;
      }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('id_', $this->id_)
         . Protobuf::toString('title_', $this->title_)
         . Protobuf::toString('assetType_', $this->assetType_)
         . Protobuf::toString('owner_', $this->owner_)
         . Protobuf::toString('version_', $this->version_)
         . Protobuf::toString('price_', $this->price_)
         . Protobuf::toString('averageRating_', $this->averageRating_)
         . Protobuf::toString('numRatings_', $this->numRatings_)
         . Protobuf::toString('purchaseinformation_', $this->purchaseinformation_)
         . Protobuf::toString('extendedinfo_', $this->extendedinfo_)
         . Protobuf::toString('ownerId_', $this->ownerId_)
         . Protobuf::toString('packageName_', $this->packageName_)
         . Protobuf::toString('versionCode_', $this->versionCode_)
         . Protobuf::toString('bundledAsset_', $this->bundledAsset_)
         . Protobuf::toString('priceCurrency_', $this->priceCurrency_)
         . Protobuf::toString('priceMicros_', $this->priceMicros_)
         . Protobuf::toString('filterReason_', $this->filterReason_)
         . Protobuf::toString('actualSellerPrice_', $this->actualSellerPrice_)
         . Protobuf::toString('appBadge_', $this->appBadge_)
         . Protobuf::toString('ownerBadge_', $this->ownerBadge_);
  }
  
  // optional string id = 1;

  protected $id_;
  public function resetId() { unset($this->id_); }
  public function clearId() { unset($this->id_); }
  public function hasId() { return isset($this->id_); }
  public function getId() { return $this->id_; }
  public function setId($value) { $this->id_ = (string)$value; }
  
  // optional string title = 2;

  protected $title_;
  public function resetTitle() { unset($this->title_); }
  public function clearTitle() { unset($this->title_); }
  public function hasTitle() { return isset($this->title_); }
  public function getTitle() { return $this->title_; }
  public function setTitle($value) { $this->title_ = (string)$value; }
  
  // optional int32 assetType = 3;

  protected $assetType_;
  public function resetAssetType() { unset($this->assetType_); }
  public function clearAssetType() { unset($this->assetType_); }
  public function hasAssetType() { return isset($this->assetType_); }
  public function getAssetType() { return $this->assetType_; }
  public function setAssetType($value) { $this->assetType_ = (string)$value; }
  
  // optional string owner = 4;

  protected $owner_;
  public function resetOwner() { unset($this->owner_); }
  public function clearOwner() { unset($this->owner_); }
  public function hasOwner() { return isset($this->owner_); }
  public function getOwner() { return $this->owner_; }
  public function setOwner($value) { $this->owner_ = (string)$value; }
  
  // optional string version = 5;

  protected $version_;
  public function resetVersion() { unset($this->version_); }
  public function clearVersion() { unset($this->version_); }
  public function hasVersion() { return isset($this->version_); }
  public function getVersion() { return $this->version_; }
  public function setVersion($value) { $this->version_ = (string)$value; }
  
  // optional string price = 6;

  protected $price_;
  public function resetPrice() { unset($this->price_); }
  public function clearPrice() { unset($this->price_); }
  public function hasPrice() { return isset($this->price_); }
  public function getPrice() { return $this->price_; }
  public function setPrice($value) { $this->price_ = (string)$value; }
  
  // optional string averageRating = 7;

  protected $averageRating_;
  public function resetAverageRating() { unset($this->averageRating_); }
  public function clearAverageRating() { unset($this->averageRating_); }
  public function hasAverageRating() { return isset($this->averageRating_); }
  public function getAverageRating() { return $this->averageRating_; }
  public function setAverageRating($value) { $this->averageRating_ = (string)$value; }
  
  // optional int64 numRatings = 8;

  protected $numRatings_;
  public function resetNumRatings() { unset($this->numRatings_); }
  public function clearNumRatings() { unset($this->numRatings_); }
  public function hasNumRatings() { return isset($this->numRatings_); }
  public function getNumRatings() { return $this->numRatings_; }
  public function setNumRatings($value) { $this->numRatings_ = (string)$value; }
  
  // optional group PurchaseInformation = 9
  protected $purchaseinformation_;
  public function resetPurchaseinformation() { unset($this->purchaseinformation_); }
  public function clearPurchaseinformation() { unset($this->purchaseinformation_); }
  public function hasPurchaseinformation() { return isset($this->purchaseinformation_); }
  public function getPurchaseinformation() { return $this->purchaseinformation_; }
  public function setPurchaseinformation(ExternalAssetProto_PurchaseInformation $value) { $this->purchaseinformation_ = $value; }
  
  // optional group ExtendedInfo = 12
  protected $extendedinfo_;
  public function resetExtendedinfo() { unset($this->extendedinfo_); }
  public function clearExtendedinfo() { unset($this->extendedinfo_); }
  public function hasExtendedinfo() { return isset($this->extendedinfo_); }
  public function getExtendedinfo() { return $this->extendedinfo_; }
  public function setExtendedinfo(ExternalAssetProto_ExtendedInfo $value) { $this->extendedinfo_ = $value; }
  
  // optional string ownerId = 22;

  protected $ownerId_;
  public function resetOwnerId() { unset($this->ownerId_); }
  public function clearOwnerId() { unset($this->ownerId_); }
  public function hasOwnerId() { return isset($this->ownerId_); }
  public function getOwnerId() { return $this->ownerId_; }
  public function setOwnerId($value) { $this->ownerId_ = (string)$value; }
  
  // optional string packageName = 24;

  protected $packageName_;
  public function resetPackageName() { unset($this->packageName_); }
  public function clearPackageName() { unset($this->packageName_); }
  public function hasPackageName() { return isset($this->packageName_); }
  public function getPackageName() { return $this->packageName_; }
  public function setPackageName($value) { $this->packageName_ = (string)$value; }
  
  // optional int32 versionCode = 25;

  protected $versionCode_;
  public function resetVersionCode() { unset($this->versionCode_); }
  public function clearVersionCode() { unset($this->versionCode_); }
  public function hasVersionCode() { return isset($this->versionCode_); }
  public function getVersionCode() { return $this->versionCode_; }
  public function setVersionCode($value) { $this->versionCode_ = (string)$value; }
  
  // optional bool bundledAsset = 29;

  protected $bundledAsset_;
  public function resetBundledAsset() { unset($this->bundledAsset_); }
  public function clearBundledAsset() { unset($this->bundledAsset_); }
  public function hasBundledAsset() { return isset($this->bundledAsset_); }
  public function getBundledAsset() { return $this->bundledAsset_; }
  public function setBundledAsset($value) { $this->bundledAsset_ = (bool)$value; }
  
  // optional string priceCurrency = 32;

  protected $priceCurrency_;
  public function resetPriceCurrency() { unset($this->priceCurrency_); }
  public function clearPriceCurrency() { unset($this->priceCurrency_); }
  public function hasPriceCurrency() { return isset($this->priceCurrency_); }
  public function getPriceCurrency() { return $this->priceCurrency_; }
  public function setPriceCurrency($value) { $this->priceCurrency_ = (string)$value; }
  
  // optional int64 priceMicros = 33;

  protected $priceMicros_;
  public function resetPriceMicros() { unset($this->priceMicros_); }
  public function clearPriceMicros() { unset($this->priceMicros_); }
  public function hasPriceMicros() { return isset($this->priceMicros_); }
  public function getPriceMicros() { return $this->priceMicros_; }
  public function setPriceMicros($value) { $this->priceMicros_ = (string)$value; }
  
  // optional string filterReason = 35;

  protected $filterReason_;
  public function resetFilterReason() { unset($this->filterReason_); }
  public function clearFilterReason() { unset($this->filterReason_); }
  public function hasFilterReason() { return isset($this->filterReason_); }
  public function getFilterReason() { return $this->filterReason_; }
  public function setFilterReason($value) { $this->filterReason_ = (string)$value; }
  
  // optional string actualSellerPrice = 40;

  protected $actualSellerPrice_;
  public function resetActualSellerPrice() { unset($this->actualSellerPrice_); }
  public function clearActualSellerPrice() { unset($this->actualSellerPrice_); }
  public function hasActualSellerPrice() { return isset($this->actualSellerPrice_); }
  public function getActualSellerPrice() { return $this->actualSellerPrice_; }
  public function setActualSellerPrice($value) { $this->actualSellerPrice_ = (string)$value; }
  
  // repeated .ExternalBadgeProto appBadge = 47;

  protected $appBadge_ = array();
  public function clearAppBadge() { $this->appBadge_ = array(); }
  public function getAppBadgeCount() { return count($this->appBadge_); }
  public function hasAppBadge() { return (count($this->appBadge_) > 0); }
  public function indexOfAppBadge($value) { return array_search($value,$this->appBadge_);}
  public function removeAppBadge($index) { unset($this->appBadge_[$index]); }
  public function removeValAppBadge($value) { $idx = array_search($value,$this->appBadge_); if($idx !== FALSE){unset($this->appBadge_[$idx]); }}
  public function removeValsAppBadge($values) { foreach($values as $value){$idx = array_search($value,$this->appBadge_); if($idx !== FALSE){unset($this->appBadge_[$idx]); }}}
  public function pushAppBadge($newvar) { return array_push($this->appBadge_,$newvar); }
  public function popAppBadge() { return array_pop($this->appBadge_); }
  public function shiftAppBadge() { return array_shift($this->appBadge_); }
  public function unshiftAppBadge($newvar) { return array_unshift($this->appBadge_,$newvar); }
  public function getAppBadge($index) { return $this->appBadge_[$index]; }
  public function getAppBadgeArray() { return $this->appBadge_; }
  public function setAppBadge($index, $value) {$this->appBadge_[$index] = $value;	}
  public function addAppBadge($value) { $this->appBadge_[] = $value; }
  public function addAllAppBadge(array $values) { foreach($values as $value) {$this->appBadge_[] = $value;} }
  
  // repeated .ExternalBadgeProto ownerBadge = 48;

  protected $ownerBadge_ = array();
  public function clearOwnerBadge() { $this->ownerBadge_ = array(); }
  public function getOwnerBadgeCount() { return count($this->ownerBadge_); }
  public function hasOwnerBadge() { return (count($this->ownerBadge_) > 0); }
  public function indexOfOwnerBadge($value) { return array_search($value,$this->ownerBadge_);}
  public function removeOwnerBadge($index) { unset($this->ownerBadge_[$index]); }
  public function removeValOwnerBadge($value) { $idx = array_search($value,$this->ownerBadge_); if($idx !== FALSE){unset($this->ownerBadge_[$idx]); }}
  public function removeValsOwnerBadge($values) { foreach($values as $value){$idx = array_search($value,$this->ownerBadge_); if($idx !== FALSE){unset($this->ownerBadge_[$idx]); }}}
  public function pushOwnerBadge($newvar) { return array_push($this->ownerBadge_,$newvar); }
  public function popOwnerBadge() { return array_pop($this->ownerBadge_); }
  public function shiftOwnerBadge() { return array_shift($this->ownerBadge_); }
  public function unshiftOwnerBadge($newvar) { return array_unshift($this->ownerBadge_,$newvar); }
  public function getOwnerBadge($index) { return $this->ownerBadge_[$index]; }
  public function getOwnerBadgeArray() { return $this->ownerBadge_; }
  public function setOwnerBadge($index, $value) {$this->ownerBadge_[$index] = $value;	}
  public function addOwnerBadge($value) { $this->ownerBadge_[] = $value; }
  public function addAllOwnerBadge(array $values) { foreach($values as $value) {$this->ownerBadge_[] = $value;} }
  
  // @@protoc_insertion_point(class_scope:ExternalAssetProto)
}

// message ExternalBadgeImageProto
class ExternalBadgeImageProto {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("ExternalBadgeImageProto: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->usage_ = $tmp;
          
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->url_ = $tmp;
          $limit-=$len;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->usage_)) {
      fwrite($fp, "\x08");
      Protobuf::write_varint($fp, (int)$this->usage_);
    }
    if (!is_null($this->url_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, strlen((string)$this->url_));
      fwrite($fp, (string)$this->url_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->usage_)) {
      $size += 1 + Protobuf::size_varint($this->usage_);
    }
    if (!is_null($this->url_)) {
      $l = strlen((string)$this->url_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('usage_', $this->usage_)
         . Protobuf::toString('url_', $this->url_);
  }
  
  // optional int32 usage = 1;

  protected $usage_;
  public function resetUsage() { unset($this->usage_); }
  public function clearUsage() { unset($this->usage_); }
  public function hasUsage() { return isset($this->usage_); }
  public function getUsage() { return $this->usage_; }
  public function setUsage($value) { $this->usage_ = (string)$value; }
  
  // optional string url = 2;

  protected $url_;
  public function resetUrl() { unset($this->url_); }
  public function clearUrl() { unset($this->url_); }
  public function hasUrl() { return isset($this->url_); }
  public function getUrl() { return $this->url_; }
  public function setUrl($value) { $this->url_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:ExternalBadgeImageProto)
}

// message ExternalBadgeProto
class ExternalBadgeProto {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("ExternalBadgeProto: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->localizedTitle_ = $tmp;
          $limit-=$len;
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->localizedDescription_ = $tmp;
          $limit-=$len;
          break;
        case 3:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->badgeImage_[] = new ExternalBadgeImageProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 4:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->searchId_ = $tmp;
          $limit-=$len;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->localizedTitle_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, strlen((string)$this->localizedTitle_));
      fwrite($fp, (string)$this->localizedTitle_);
    }
    if (!is_null($this->localizedDescription_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, strlen((string)$this->localizedDescription_));
      fwrite($fp, (string)$this->localizedDescription_);
    }
    if (!is_null($this->badgeImage_))
      foreach($this->badgeImage_ as $v) {
        fwrite($fp, "\x1a");
        Protobuf::write_varint($fp, $v->size()); // message
        $v->write($fp);
      }
    if (!is_null($this->searchId_)) {
      fwrite($fp, "\"");
      Protobuf::write_varint($fp, strlen((string)$this->searchId_));
      fwrite($fp, (string)$this->searchId_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->localizedTitle_)) {
      $l = strlen((string)$this->localizedTitle_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->localizedDescription_)) {
      $l = strlen((string)$this->localizedDescription_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->badgeImage_))
      foreach($this->badgeImage_ as $v) {
        $l = $v->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
    if (!is_null($this->searchId_)) {
      $l = strlen((string)$this->searchId_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('localizedTitle_', $this->localizedTitle_)
         . Protobuf::toString('localizedDescription_', $this->localizedDescription_)
         . Protobuf::toString('badgeImage_', $this->badgeImage_)
         . Protobuf::toString('searchId_', $this->searchId_);
  }
  
  // optional string localizedTitle = 1;

  protected $localizedTitle_;
  public function resetLocalizedTitle() { unset($this->localizedTitle_); }
  public function clearLocalizedTitle() { unset($this->localizedTitle_); }
  public function hasLocalizedTitle() { return isset($this->localizedTitle_); }
  public function getLocalizedTitle() { return $this->localizedTitle_; }
  public function setLocalizedTitle($value) { $this->localizedTitle_ = (string)$value; }
  
  // optional string localizedDescription = 2;

  protected $localizedDescription_;
  public function resetLocalizedDescription() { unset($this->localizedDescription_); }
  public function clearLocalizedDescription() { unset($this->localizedDescription_); }
  public function hasLocalizedDescription() { return isset($this->localizedDescription_); }
  public function getLocalizedDescription() { return $this->localizedDescription_; }
  public function setLocalizedDescription($value) { $this->localizedDescription_ = (string)$value; }
  
  // repeated .ExternalBadgeImageProto badgeImage = 3;

  protected $badgeImage_ = array();
  public function clearBadgeImage() { $this->badgeImage_ = array(); }
  public function getBadgeImageCount() { return count($this->badgeImage_); }
  public function hasBadgeImage() { return (count($this->badgeImage_) > 0); }
  public function indexOfBadgeImage($value) { return array_search($value,$this->badgeImage_);}
  public function removeBadgeImage($index) { unset($this->badgeImage_[$index]); }
  public function removeValBadgeImage($value) { $idx = array_search($value,$this->badgeImage_); if($idx !== FALSE){unset($this->badgeImage_[$idx]); }}
  public function removeValsBadgeImage($values) { foreach($values as $value){$idx = array_search($value,$this->badgeImage_); if($idx !== FALSE){unset($this->badgeImage_[$idx]); }}}
  public function pushBadgeImage($newvar) { return array_push($this->badgeImage_,$newvar); }
  public function popBadgeImage() { return array_pop($this->badgeImage_); }
  public function shiftBadgeImage() { return array_shift($this->badgeImage_); }
  public function unshiftBadgeImage($newvar) { return array_unshift($this->badgeImage_,$newvar); }
  public function getBadgeImage($index) { return $this->badgeImage_[$index]; }
  public function getBadgeImageArray() { return $this->badgeImage_; }
  public function setBadgeImage($index, $value) {$this->badgeImage_[$index] = $value;	}
  public function addBadgeImage($value) { $this->badgeImage_[] = $value; }
  public function addAllBadgeImage(array $values) { foreach($values as $value) {$this->badgeImage_[] = $value;} }
  
  // optional string searchId = 4;

  protected $searchId_;
  public function resetSearchId() { unset($this->searchId_); }
  public function clearSearchId() { unset($this->searchId_); }
  public function hasSearchId() { return isset($this->searchId_); }
  public function getSearchId() { return $this->searchId_; }
  public function setSearchId($value) { $this->searchId_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:ExternalBadgeProto)
}

// message ExternalCarrierBillingInstrumentProto
class ExternalCarrierBillingInstrumentProto {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("ExternalCarrierBillingInstrumentProto: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->instrumentKey_ = $tmp;
          $limit-=$len;
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->subscriberIdentifier_ = $tmp;
          $limit-=$len;
          break;
        case 3:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->accountType_ = $tmp;
          $limit-=$len;
          break;
        case 4:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->subscriberCurrency_ = $tmp;
          $limit-=$len;
          break;
        case 5:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->transactionLimit_ = $tmp;
          
          break;
        case 6:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->subscriberName_ = $tmp;
          $limit-=$len;
          break;
        case 7:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->address1_ = $tmp;
          $limit-=$len;
          break;
        case 8:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->address2_ = $tmp;
          $limit-=$len;
          break;
        case 9:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->city_ = $tmp;
          $limit-=$len;
          break;
        case 10:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->state_ = $tmp;
          $limit-=$len;
          break;
        case 11:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->postalCode_ = $tmp;
          $limit-=$len;
          break;
        case 12:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->country_ = $tmp;
          $limit-=$len;
          break;
        case 13:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->encryptedSubscriberInfo_ = new EncryptedSubscriberInfo($fp, $len);
          ASSERT('$len == 0');
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->instrumentKey_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, strlen((string)$this->instrumentKey_));
      fwrite($fp, (string)$this->instrumentKey_);
    }
    if (!is_null($this->subscriberIdentifier_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, strlen((string)$this->subscriberIdentifier_));
      fwrite($fp, (string)$this->subscriberIdentifier_);
    }
    if (!is_null($this->accountType_)) {
      fwrite($fp, "\x1a");
      Protobuf::write_varint($fp, strlen((string)$this->accountType_));
      fwrite($fp, (string)$this->accountType_);
    }
    if (!is_null($this->subscriberCurrency_)) {
      fwrite($fp, "\"");
      Protobuf::write_varint($fp, strlen((string)$this->subscriberCurrency_));
      fwrite($fp, (string)$this->subscriberCurrency_);
    }
    if (!is_null($this->transactionLimit_)) {
      fwrite($fp, "(");
      Protobuf::write_varint($fp, (int)$this->transactionLimit_);
    }
    if (!is_null($this->subscriberName_)) {
      fwrite($fp, "2");
      Protobuf::write_varint($fp, strlen((string)$this->subscriberName_));
      fwrite($fp, (string)$this->subscriberName_);
    }
    if (!is_null($this->address1_)) {
      fwrite($fp, ":");
      Protobuf::write_varint($fp, strlen((string)$this->address1_));
      fwrite($fp, (string)$this->address1_);
    }
    if (!is_null($this->address2_)) {
      fwrite($fp, "B");
      Protobuf::write_varint($fp, strlen((string)$this->address2_));
      fwrite($fp, (string)$this->address2_);
    }
    if (!is_null($this->city_)) {
      fwrite($fp, "J");
      Protobuf::write_varint($fp, strlen((string)$this->city_));
      fwrite($fp, (string)$this->city_);
    }
    if (!is_null($this->state_)) {
      fwrite($fp, "R");
      Protobuf::write_varint($fp, strlen((string)$this->state_));
      fwrite($fp, (string)$this->state_);
    }
    if (!is_null($this->postalCode_)) {
      fwrite($fp, "Z");
      Protobuf::write_varint($fp, strlen((string)$this->postalCode_));
      fwrite($fp, (string)$this->postalCode_);
    }
    if (!is_null($this->country_)) {
      fwrite($fp, "b");
      Protobuf::write_varint($fp, strlen((string)$this->country_));
      fwrite($fp, (string)$this->country_);
    }
    if (!is_null($this->encryptedSubscriberInfo_)) {
      fwrite($fp, "j");
      Protobuf::write_varint($fp, $this->encryptedSubscriberInfo_->size()); // message
      $this->encryptedSubscriberInfo_->write($fp);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->instrumentKey_)) {
      $l = strlen((string)$this->instrumentKey_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->subscriberIdentifier_)) {
      $l = strlen((string)$this->subscriberIdentifier_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->accountType_)) {
      $l = strlen((string)$this->accountType_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->subscriberCurrency_)) {
      $l = strlen((string)$this->subscriberCurrency_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->transactionLimit_)) {
      $size += 1 + Protobuf::size_varint($this->transactionLimit_);
    }
    if (!is_null($this->subscriberName_)) {
      $l = strlen((string)$this->subscriberName_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->address1_)) {
      $l = strlen((string)$this->address1_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->address2_)) {
      $l = strlen((string)$this->address2_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->city_)) {
      $l = strlen((string)$this->city_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->state_)) {
      $l = strlen((string)$this->state_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->postalCode_)) {
      $l = strlen((string)$this->postalCode_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->country_)) {
      $l = strlen((string)$this->country_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->encryptedSubscriberInfo_)) {
      $l = $this->encryptedSubscriberInfo_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('instrumentKey_', $this->instrumentKey_)
         . Protobuf::toString('subscriberIdentifier_', $this->subscriberIdentifier_)
         . Protobuf::toString('accountType_', $this->accountType_)
         . Protobuf::toString('subscriberCurrency_', $this->subscriberCurrency_)
         . Protobuf::toString('transactionLimit_', $this->transactionLimit_)
         . Protobuf::toString('subscriberName_', $this->subscriberName_)
         . Protobuf::toString('address1_', $this->address1_)
         . Protobuf::toString('address2_', $this->address2_)
         . Protobuf::toString('city_', $this->city_)
         . Protobuf::toString('state_', $this->state_)
         . Protobuf::toString('postalCode_', $this->postalCode_)
         . Protobuf::toString('country_', $this->country_)
         . Protobuf::toString('encryptedSubscriberInfo_', $this->encryptedSubscriberInfo_);
  }
  
  // optional string instrumentKey = 1;

  protected $instrumentKey_;
  public function resetInstrumentKey() { unset($this->instrumentKey_); }
  public function clearInstrumentKey() { unset($this->instrumentKey_); }
  public function hasInstrumentKey() { return isset($this->instrumentKey_); }
  public function getInstrumentKey() { return $this->instrumentKey_; }
  public function setInstrumentKey($value) { $this->instrumentKey_ = (string)$value; }
  
  // optional string subscriberIdentifier = 2;

  protected $subscriberIdentifier_;
  public function resetSubscriberIdentifier() { unset($this->subscriberIdentifier_); }
  public function clearSubscriberIdentifier() { unset($this->subscriberIdentifier_); }
  public function hasSubscriberIdentifier() { return isset($this->subscriberIdentifier_); }
  public function getSubscriberIdentifier() { return $this->subscriberIdentifier_; }
  public function setSubscriberIdentifier($value) { $this->subscriberIdentifier_ = (string)$value; }
  
  // optional string accountType = 3;

  protected $accountType_;
  public function resetAccountType() { unset($this->accountType_); }
  public function clearAccountType() { unset($this->accountType_); }
  public function hasAccountType() { return isset($this->accountType_); }
  public function getAccountType() { return $this->accountType_; }
  public function setAccountType($value) { $this->accountType_ = (string)$value; }
  
  // optional string subscriberCurrency = 4;

  protected $subscriberCurrency_;
  public function resetSubscriberCurrency() { unset($this->subscriberCurrency_); }
  public function clearSubscriberCurrency() { unset($this->subscriberCurrency_); }
  public function hasSubscriberCurrency() { return isset($this->subscriberCurrency_); }
  public function getSubscriberCurrency() { return $this->subscriberCurrency_; }
  public function setSubscriberCurrency($value) { $this->subscriberCurrency_ = (string)$value; }
  
  // optional uint64 transactionLimit = 5;

  protected $transactionLimit_;
  public function resetTransactionLimit() { unset($this->transactionLimit_); }
  public function clearTransactionLimit() { unset($this->transactionLimit_); }
  public function hasTransactionLimit() { return isset($this->transactionLimit_); }
  public function getTransactionLimit() { return $this->transactionLimit_; }
  public function setTransactionLimit($value) { $this->transactionLimit_ = (string)$value; }
  
  // optional string subscriberName = 6;

  protected $subscriberName_;
  public function resetSubscriberName() { unset($this->subscriberName_); }
  public function clearSubscriberName() { unset($this->subscriberName_); }
  public function hasSubscriberName() { return isset($this->subscriberName_); }
  public function getSubscriberName() { return $this->subscriberName_; }
  public function setSubscriberName($value) { $this->subscriberName_ = (string)$value; }
  
  // optional string address1 = 7;

  protected $address1_;
  public function resetAddress1() { unset($this->address1_); }
  public function clearAddress1() { unset($this->address1_); }
  public function hasAddress1() { return isset($this->address1_); }
  public function getAddress1() { return $this->address1_; }
  public function setAddress1($value) { $this->address1_ = (string)$value; }
  
  // optional string address2 = 8;

  protected $address2_;
  public function resetAddress2() { unset($this->address2_); }
  public function clearAddress2() { unset($this->address2_); }
  public function hasAddress2() { return isset($this->address2_); }
  public function getAddress2() { return $this->address2_; }
  public function setAddress2($value) { $this->address2_ = (string)$value; }
  
  // optional string city = 9;

  protected $city_;
  public function resetCity() { unset($this->city_); }
  public function clearCity() { unset($this->city_); }
  public function hasCity() { return isset($this->city_); }
  public function getCity() { return $this->city_; }
  public function setCity($value) { $this->city_ = (string)$value; }
  
  // optional string state = 10;

  protected $state_;
  public function resetState() { unset($this->state_); }
  public function clearState() { unset($this->state_); }
  public function hasState() { return isset($this->state_); }
  public function getState() { return $this->state_; }
  public function setState($value) { $this->state_ = (string)$value; }
  
  // optional string postalCode = 11;

  protected $postalCode_;
  public function resetPostalCode() { unset($this->postalCode_); }
  public function clearPostalCode() { unset($this->postalCode_); }
  public function hasPostalCode() { return isset($this->postalCode_); }
  public function getPostalCode() { return $this->postalCode_; }
  public function setPostalCode($value) { $this->postalCode_ = (string)$value; }
  
  // optional string country = 12;

  protected $country_;
  public function resetCountry() { unset($this->country_); }
  public function clearCountry() { unset($this->country_); }
  public function hasCountry() { return isset($this->country_); }
  public function getCountry() { return $this->country_; }
  public function setCountry($value) { $this->country_ = (string)$value; }
  
  // optional .EncryptedSubscriberInfo encryptedSubscriberInfo = 13;

  protected $encryptedSubscriberInfo_;
  public function resetEncryptedSubscriberInfo() { unset($this->encryptedSubscriberInfo_); }
  public function clearEncryptedSubscriberInfo() { unset($this->encryptedSubscriberInfo_); }
  public function hasEncryptedSubscriberInfo() { return isset($this->encryptedSubscriberInfo_); }
  public function getEncryptedSubscriberInfo() { return $this->encryptedSubscriberInfo_; }
  public function setEncryptedSubscriberInfo(EncryptedSubscriberInfo $value) { $this->encryptedSubscriberInfo_ = $value; }
  
  // @@protoc_insertion_point(class_scope:ExternalCarrierBillingInstrumentProto)
}

// message ExternalCommentProto
class ExternalCommentProto {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("ExternalCommentProto: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->body_ = $tmp;
          $limit-=$len;
          break;
        case 2:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->rating_ = $tmp;
          
          break;
        case 3:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->creatorName_ = $tmp;
          $limit-=$len;
          break;
        case 4:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->creationTime_ = $tmp;
          
          break;
        case 5:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->creatorId_ = $tmp;
          $limit-=$len;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->body_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, strlen((string)$this->body_));
      fwrite($fp, (string)$this->body_);
    }
    if (!is_null($this->rating_)) {
      fwrite($fp, "\x10");
      Protobuf::write_varint($fp, (int)$this->rating_);
    }
    if (!is_null($this->creatorName_)) {
      fwrite($fp, "\x1a");
      Protobuf::write_varint($fp, strlen((string)$this->creatorName_));
      fwrite($fp, (string)$this->creatorName_);
    }
    if (!is_null($this->creationTime_)) {
      fwrite($fp, " ");
      Protobuf::write_varint($fp, (int)$this->creationTime_);
    }
    if (!is_null($this->creatorId_)) {
      fwrite($fp, "*");
      Protobuf::write_varint($fp, strlen((string)$this->creatorId_));
      fwrite($fp, (string)$this->creatorId_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->body_)) {
      $l = strlen((string)$this->body_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->rating_)) {
      $size += 1 + Protobuf::size_varint($this->rating_);
    }
    if (!is_null($this->creatorName_)) {
      $l = strlen((string)$this->creatorName_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->creationTime_)) {
      $size += 1 + Protobuf::size_varint($this->creationTime_);
    }
    if (!is_null($this->creatorId_)) {
      $l = strlen((string)$this->creatorId_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('body_', $this->body_)
         . Protobuf::toString('rating_', $this->rating_)
         . Protobuf::toString('creatorName_', $this->creatorName_)
         . Protobuf::toString('creationTime_', $this->creationTime_)
         . Protobuf::toString('creatorId_', $this->creatorId_);
  }
  
  // optional string body = 1;

  protected $body_;
  public function resetBody() { unset($this->body_); }
  public function clearBody() { unset($this->body_); }
  public function hasBody() { return isset($this->body_); }
  public function getBody() { return $this->body_; }
  public function setBody($value) { $this->body_ = (string)$value; }
  
  // optional int32 rating = 2;

  protected $rating_;
  public function resetRating() { unset($this->rating_); }
  public function clearRating() { unset($this->rating_); }
  public function hasRating() { return isset($this->rating_); }
  public function getRating() { return $this->rating_; }
  public function setRating($value) { $this->rating_ = (string)$value; }
  
  // optional string creatorName = 3;

  protected $creatorName_;
  public function resetCreatorName() { unset($this->creatorName_); }
  public function clearCreatorName() { unset($this->creatorName_); }
  public function hasCreatorName() { return isset($this->creatorName_); }
  public function getCreatorName() { return $this->creatorName_; }
  public function setCreatorName($value) { $this->creatorName_ = (string)$value; }
  
  // optional int64 creationTime = 4;

  protected $creationTime_;
  public function resetCreationTime() { unset($this->creationTime_); }
  public function clearCreationTime() { unset($this->creationTime_); }
  public function hasCreationTime() { return isset($this->creationTime_); }
  public function getCreationTime() { return $this->creationTime_; }
  public function setCreationTime($value) { $this->creationTime_ = (string)$value; }
  
  // optional string creatorId = 5;

  protected $creatorId_;
  public function resetCreatorId() { unset($this->creatorId_); }
  public function clearCreatorId() { unset($this->creatorId_); }
  public function hasCreatorId() { return isset($this->creatorId_); }
  public function getCreatorId() { return $this->creatorId_; }
  public function setCreatorId($value) { $this->creatorId_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:ExternalCommentProto)
}

// message ExternalCreditCard
class ExternalCreditCard {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("ExternalCreditCard: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->type_ = $tmp;
          $limit-=$len;
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->lastDigits_ = $tmp;
          $limit-=$len;
          break;
        case 3:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->expYear_ = $tmp;
          
          break;
        case 4:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->expMonth_ = $tmp;
          
          break;
        case 5:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->personName_ = $tmp;
          $limit-=$len;
          break;
        case 6:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->countryCode_ = $tmp;
          $limit-=$len;
          break;
        case 7:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->postalCode_ = $tmp;
          $limit-=$len;
          break;
        case 8:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->makeDefault_ = $tmp > 0 ? true : false;
          break;
        case 9:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->address1_ = $tmp;
          $limit-=$len;
          break;
        case 10:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->address2_ = $tmp;
          $limit-=$len;
          break;
        case 11:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->city_ = $tmp;
          $limit-=$len;
          break;
        case 12:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->state_ = $tmp;
          $limit-=$len;
          break;
        case 13:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->phone_ = $tmp;
          $limit-=$len;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->type_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, strlen((string)$this->type_));
      fwrite($fp, (string)$this->type_);
    }
    if (!is_null($this->lastDigits_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, strlen((string)$this->lastDigits_));
      fwrite($fp, (string)$this->lastDigits_);
    }
    if (!is_null($this->expYear_)) {
      fwrite($fp, "\x18");
      Protobuf::write_varint($fp, (int)$this->expYear_);
    }
    if (!is_null($this->expMonth_)) {
      fwrite($fp, " ");
      Protobuf::write_varint($fp, (int)$this->expMonth_);
    }
    if (!is_null($this->personName_)) {
      fwrite($fp, "*");
      Protobuf::write_varint($fp, strlen((string)$this->personName_));
      fwrite($fp, (string)$this->personName_);
    }
    if (!is_null($this->countryCode_)) {
      fwrite($fp, "2");
      Protobuf::write_varint($fp, strlen((string)$this->countryCode_));
      fwrite($fp, (string)$this->countryCode_);
    }
    if (!is_null($this->postalCode_)) {
      fwrite($fp, ":");
      Protobuf::write_varint($fp, strlen((string)$this->postalCode_));
      fwrite($fp, (string)$this->postalCode_);
    }
    if (!is_null($this->makeDefault_)) {
      fwrite($fp, "@");
      Protobuf::write_varint($fp, (int)$this->makeDefault_ ? 1 : 0);
    }
    if (!is_null($this->address1_)) {
      fwrite($fp, "J");
      Protobuf::write_varint($fp, strlen((string)$this->address1_));
      fwrite($fp, (string)$this->address1_);
    }
    if (!is_null($this->address2_)) {
      fwrite($fp, "R");
      Protobuf::write_varint($fp, strlen((string)$this->address2_));
      fwrite($fp, (string)$this->address2_);
    }
    if (!is_null($this->city_)) {
      fwrite($fp, "Z");
      Protobuf::write_varint($fp, strlen((string)$this->city_));
      fwrite($fp, (string)$this->city_);
    }
    if (!is_null($this->state_)) {
      fwrite($fp, "b");
      Protobuf::write_varint($fp, strlen((string)$this->state_));
      fwrite($fp, (string)$this->state_);
    }
    if (!is_null($this->phone_)) {
      fwrite($fp, "j");
      Protobuf::write_varint($fp, strlen((string)$this->phone_));
      fwrite($fp, (string)$this->phone_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->type_)) {
      $l = strlen((string)$this->type_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->lastDigits_)) {
      $l = strlen((string)$this->lastDigits_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->expYear_)) {
      $size += 1 + Protobuf::size_varint($this->expYear_);
    }
    if (!is_null($this->expMonth_)) {
      $size += 1 + Protobuf::size_varint($this->expMonth_);
    }
    if (!is_null($this->personName_)) {
      $l = strlen((string)$this->personName_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->countryCode_)) {
      $l = strlen((string)$this->countryCode_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->postalCode_)) {
      $l = strlen((string)$this->postalCode_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->makeDefault_)) {
      $size += 2;
    }
    if (!is_null($this->address1_)) {
      $l = strlen((string)$this->address1_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->address2_)) {
      $l = strlen((string)$this->address2_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->city_)) {
      $l = strlen((string)$this->city_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->state_)) {
      $l = strlen((string)$this->state_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->phone_)) {
      $l = strlen((string)$this->phone_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('type_', $this->type_)
         . Protobuf::toString('lastDigits_', $this->lastDigits_)
         . Protobuf::toString('expYear_', $this->expYear_)
         . Protobuf::toString('expMonth_', $this->expMonth_)
         . Protobuf::toString('personName_', $this->personName_)
         . Protobuf::toString('countryCode_', $this->countryCode_)
         . Protobuf::toString('postalCode_', $this->postalCode_)
         . Protobuf::toString('makeDefault_', $this->makeDefault_)
         . Protobuf::toString('address1_', $this->address1_)
         . Protobuf::toString('address2_', $this->address2_)
         . Protobuf::toString('city_', $this->city_)
         . Protobuf::toString('state_', $this->state_)
         . Protobuf::toString('phone_', $this->phone_);
  }
  
  // optional string type = 1;

  protected $type_;
  public function resetType() { unset($this->type_); }
  public function clearType() { unset($this->type_); }
  public function hasType() { return isset($this->type_); }
  public function getType() { return $this->type_; }
  public function setType($value) { $this->type_ = (string)$value; }
  
  // optional string lastDigits = 2;

  protected $lastDigits_;
  public function resetLastDigits() { unset($this->lastDigits_); }
  public function clearLastDigits() { unset($this->lastDigits_); }
  public function hasLastDigits() { return isset($this->lastDigits_); }
  public function getLastDigits() { return $this->lastDigits_; }
  public function setLastDigits($value) { $this->lastDigits_ = (string)$value; }
  
  // optional int32 expYear = 3;

  protected $expYear_;
  public function resetExpYear() { unset($this->expYear_); }
  public function clearExpYear() { unset($this->expYear_); }
  public function hasExpYear() { return isset($this->expYear_); }
  public function getExpYear() { return $this->expYear_; }
  public function setExpYear($value) { $this->expYear_ = (string)$value; }
  
  // optional int32 expMonth = 4;

  protected $expMonth_;
  public function resetExpMonth() { unset($this->expMonth_); }
  public function clearExpMonth() { unset($this->expMonth_); }
  public function hasExpMonth() { return isset($this->expMonth_); }
  public function getExpMonth() { return $this->expMonth_; }
  public function setExpMonth($value) { $this->expMonth_ = (string)$value; }
  
  // optional string personName = 5;

  protected $personName_;
  public function resetPersonName() { unset($this->personName_); }
  public function clearPersonName() { unset($this->personName_); }
  public function hasPersonName() { return isset($this->personName_); }
  public function getPersonName() { return $this->personName_; }
  public function setPersonName($value) { $this->personName_ = (string)$value; }
  
  // optional string countryCode = 6;

  protected $countryCode_;
  public function resetCountryCode() { unset($this->countryCode_); }
  public function clearCountryCode() { unset($this->countryCode_); }
  public function hasCountryCode() { return isset($this->countryCode_); }
  public function getCountryCode() { return $this->countryCode_; }
  public function setCountryCode($value) { $this->countryCode_ = (string)$value; }
  
  // optional string postalCode = 7;

  protected $postalCode_;
  public function resetPostalCode() { unset($this->postalCode_); }
  public function clearPostalCode() { unset($this->postalCode_); }
  public function hasPostalCode() { return isset($this->postalCode_); }
  public function getPostalCode() { return $this->postalCode_; }
  public function setPostalCode($value) { $this->postalCode_ = (string)$value; }
  
  // optional bool makeDefault = 8;

  protected $makeDefault_;
  public function resetMakeDefault() { unset($this->makeDefault_); }
  public function clearMakeDefault() { unset($this->makeDefault_); }
  public function hasMakeDefault() { return isset($this->makeDefault_); }
  public function getMakeDefault() { return $this->makeDefault_; }
  public function setMakeDefault($value) { $this->makeDefault_ = (bool)$value; }
  
  // optional string address1 = 9;

  protected $address1_;
  public function resetAddress1() { unset($this->address1_); }
  public function clearAddress1() { unset($this->address1_); }
  public function hasAddress1() { return isset($this->address1_); }
  public function getAddress1() { return $this->address1_; }
  public function setAddress1($value) { $this->address1_ = (string)$value; }
  
  // optional string address2 = 10;

  protected $address2_;
  public function resetAddress2() { unset($this->address2_); }
  public function clearAddress2() { unset($this->address2_); }
  public function hasAddress2() { return isset($this->address2_); }
  public function getAddress2() { return $this->address2_; }
  public function setAddress2($value) { $this->address2_ = (string)$value; }
  
  // optional string city = 11;

  protected $city_;
  public function resetCity() { unset($this->city_); }
  public function clearCity() { unset($this->city_); }
  public function hasCity() { return isset($this->city_); }
  public function getCity() { return $this->city_; }
  public function setCity($value) { $this->city_ = (string)$value; }
  
  // optional string state = 12;

  protected $state_;
  public function resetState() { unset($this->state_); }
  public function clearState() { unset($this->state_); }
  public function hasState() { return isset($this->state_); }
  public function getState() { return $this->state_; }
  public function setState($value) { $this->state_ = (string)$value; }
  
  // optional string phone = 13;

  protected $phone_;
  public function resetPhone() { unset($this->phone_); }
  public function clearPhone() { unset($this->phone_); }
  public function hasPhone() { return isset($this->phone_); }
  public function getPhone() { return $this->phone_; }
  public function setPhone($value) { $this->phone_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:ExternalCreditCard)
}

// message ExternalPaypalInstrumentProto
class ExternalPaypalInstrumentProto {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("ExternalPaypalInstrumentProto: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->instrumentKey_ = $tmp;
          $limit-=$len;
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->preapprovalKey_ = $tmp;
          $limit-=$len;
          break;
        case 3:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->paypalEmail_ = $tmp;
          $limit-=$len;
          break;
        case 4:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->paypalAddress_ = new AddressProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 5:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->multiplePaypalInstrumentsSupported_ = $tmp > 0 ? true : false;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->instrumentKey_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, strlen((string)$this->instrumentKey_));
      fwrite($fp, (string)$this->instrumentKey_);
    }
    if (!is_null($this->preapprovalKey_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, strlen((string)$this->preapprovalKey_));
      fwrite($fp, (string)$this->preapprovalKey_);
    }
    if (!is_null($this->paypalEmail_)) {
      fwrite($fp, "\x1a");
      Protobuf::write_varint($fp, strlen((string)$this->paypalEmail_));
      fwrite($fp, (string)$this->paypalEmail_);
    }
    if (!is_null($this->paypalAddress_)) {
      fwrite($fp, "\"");
      Protobuf::write_varint($fp, $this->paypalAddress_->size()); // message
      $this->paypalAddress_->write($fp);
    }
    if (!is_null($this->multiplePaypalInstrumentsSupported_)) {
      fwrite($fp, "(");
      Protobuf::write_varint($fp, (int)$this->multiplePaypalInstrumentsSupported_ ? 1 : 0);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->instrumentKey_)) {
      $l = strlen((string)$this->instrumentKey_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->preapprovalKey_)) {
      $l = strlen((string)$this->preapprovalKey_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->paypalEmail_)) {
      $l = strlen((string)$this->paypalEmail_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->paypalAddress_)) {
      $l = $this->paypalAddress_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->multiplePaypalInstrumentsSupported_)) {
      $size += 2;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('instrumentKey_', $this->instrumentKey_)
         . Protobuf::toString('preapprovalKey_', $this->preapprovalKey_)
         . Protobuf::toString('paypalEmail_', $this->paypalEmail_)
         . Protobuf::toString('paypalAddress_', $this->paypalAddress_)
         . Protobuf::toString('multiplePaypalInstrumentsSupported_', $this->multiplePaypalInstrumentsSupported_);
  }
  
  // optional string instrumentKey = 1;

  protected $instrumentKey_;
  public function resetInstrumentKey() { unset($this->instrumentKey_); }
  public function clearInstrumentKey() { unset($this->instrumentKey_); }
  public function hasInstrumentKey() { return isset($this->instrumentKey_); }
  public function getInstrumentKey() { return $this->instrumentKey_; }
  public function setInstrumentKey($value) { $this->instrumentKey_ = (string)$value; }
  
  // optional string preapprovalKey = 2;

  protected $preapprovalKey_;
  public function resetPreapprovalKey() { unset($this->preapprovalKey_); }
  public function clearPreapprovalKey() { unset($this->preapprovalKey_); }
  public function hasPreapprovalKey() { return isset($this->preapprovalKey_); }
  public function getPreapprovalKey() { return $this->preapprovalKey_; }
  public function setPreapprovalKey($value) { $this->preapprovalKey_ = (string)$value; }
  
  // optional string paypalEmail = 3;

  protected $paypalEmail_;
  public function resetPaypalEmail() { unset($this->paypalEmail_); }
  public function clearPaypalEmail() { unset($this->paypalEmail_); }
  public function hasPaypalEmail() { return isset($this->paypalEmail_); }
  public function getPaypalEmail() { return $this->paypalEmail_; }
  public function setPaypalEmail($value) { $this->paypalEmail_ = (string)$value; }
  
  // optional .AddressProto paypalAddress = 4;

  protected $paypalAddress_;
  public function resetPaypalAddress() { unset($this->paypalAddress_); }
  public function clearPaypalAddress() { unset($this->paypalAddress_); }
  public function hasPaypalAddress() { return isset($this->paypalAddress_); }
  public function getPaypalAddress() { return $this->paypalAddress_; }
  public function setPaypalAddress(AddressProto $value) { $this->paypalAddress_ = $value; }
  
  // optional bool multiplePaypalInstrumentsSupported = 5;

  protected $multiplePaypalInstrumentsSupported_;
  public function resetMultiplePaypalInstrumentsSupported() { unset($this->multiplePaypalInstrumentsSupported_); }
  public function clearMultiplePaypalInstrumentsSupported() { unset($this->multiplePaypalInstrumentsSupported_); }
  public function hasMultiplePaypalInstrumentsSupported() { return isset($this->multiplePaypalInstrumentsSupported_); }
  public function getMultiplePaypalInstrumentsSupported() { return $this->multiplePaypalInstrumentsSupported_; }
  public function setMultiplePaypalInstrumentsSupported($value) { $this->multiplePaypalInstrumentsSupported_ = (bool)$value; }
  
  // @@protoc_insertion_point(class_scope:ExternalPaypalInstrumentProto)
}

// message FileMetadataProto
class FileMetadataProto {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("FileMetadataProto: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->fileType_ = $tmp;
          
          break;
        case 2:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->versionCode_ = $tmp;
          
          break;
        case 3:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->size_ = $tmp;
          
          break;
        case 4:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->downloadUrl_ = $tmp;
          $limit-=$len;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->fileType_)) {
      fwrite($fp, "\x08");
      Protobuf::write_varint($fp, (int)$this->fileType_);
    }
    if (!is_null($this->versionCode_)) {
      fwrite($fp, "\x10");
      Protobuf::write_varint($fp, (int)$this->versionCode_);
    }
    if (!is_null($this->size_)) {
      fwrite($fp, "\x18");
      Protobuf::write_varint($fp, (int)$this->size_);
    }
    if (!is_null($this->downloadUrl_)) {
      fwrite($fp, "\"");
      Protobuf::write_varint($fp, strlen((string)$this->downloadUrl_));
      fwrite($fp, (string)$this->downloadUrl_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->fileType_)) {
      $size += 1 + Protobuf::size_varint($this->fileType_);
    }
    if (!is_null($this->versionCode_)) {
      $size += 1 + Protobuf::size_varint($this->versionCode_);
    }
    if (!is_null($this->size_)) {
      $size += 1 + Protobuf::size_varint($this->size_);
    }
    if (!is_null($this->downloadUrl_)) {
      $l = strlen((string)$this->downloadUrl_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('fileType_', $this->fileType_)
         . Protobuf::toString('versionCode_', $this->versionCode_)
         . Protobuf::toString('size_', $this->size_)
         . Protobuf::toString('downloadUrl_', $this->downloadUrl_);
  }
  
  // optional int32 fileType = 1;

  protected $fileType_;
  public function resetFileType() { unset($this->fileType_); }
  public function clearFileType() { unset($this->fileType_); }
  public function hasFileType() { return isset($this->fileType_); }
  public function getFileType() { return $this->fileType_; }
  public function setFileType($value) { $this->fileType_ = (string)$value; }
  
  // optional int32 versionCode = 2;

  protected $versionCode_;
  public function resetVersionCode() { unset($this->versionCode_); }
  public function clearVersionCode() { unset($this->versionCode_); }
  public function hasVersionCode() { return isset($this->versionCode_); }
  public function getVersionCode() { return $this->versionCode_; }
  public function setVersionCode($value) { $this->versionCode_ = (string)$value; }
  
  // optional int64 size = 3;

  protected $size_;
  public function resetSize() { unset($this->size_); }
  public function clearSize() { unset($this->size_); }
  public function hasSize() { return isset($this->size_); }
  public function getSize() { return $this->size_; }
  public function setSize($value) { $this->size_ = (string)$value; }
  
  // optional string downloadUrl = 4;

  protected $downloadUrl_;
  public function resetDownloadUrl() { unset($this->downloadUrl_); }
  public function clearDownloadUrl() { unset($this->downloadUrl_); }
  public function hasDownloadUrl() { return isset($this->downloadUrl_); }
  public function getDownloadUrl() { return $this->downloadUrl_; }
  public function setDownloadUrl($value) { $this->downloadUrl_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:FileMetadataProto)
}

// message GetAddressSnippetRequestProto
class GetAddressSnippetRequestProto {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("GetAddressSnippetRequestProto: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->encryptedSubscriberInfo_ = new EncryptedSubscriberInfo($fp, $len);
          ASSERT('$len == 0');
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->encryptedSubscriberInfo_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, $this->encryptedSubscriberInfo_->size()); // message
      $this->encryptedSubscriberInfo_->write($fp);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->encryptedSubscriberInfo_)) {
      $l = $this->encryptedSubscriberInfo_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('encryptedSubscriberInfo_', $this->encryptedSubscriberInfo_);
  }
  
  // optional .EncryptedSubscriberInfo encryptedSubscriberInfo = 1;

  protected $encryptedSubscriberInfo_;
  public function resetEncryptedSubscriberInfo() { unset($this->encryptedSubscriberInfo_); }
  public function clearEncryptedSubscriberInfo() { unset($this->encryptedSubscriberInfo_); }
  public function hasEncryptedSubscriberInfo() { return isset($this->encryptedSubscriberInfo_); }
  public function getEncryptedSubscriberInfo() { return $this->encryptedSubscriberInfo_; }
  public function setEncryptedSubscriberInfo(EncryptedSubscriberInfo $value) { $this->encryptedSubscriberInfo_ = $value; }
  
  // @@protoc_insertion_point(class_scope:GetAddressSnippetRequestProto)
}

// message GetAddressSnippetResponseProto
class GetAddressSnippetResponseProto {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("GetAddressSnippetResponseProto: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->addressSnippet_ = $tmp;
          $limit-=$len;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->addressSnippet_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, strlen((string)$this->addressSnippet_));
      fwrite($fp, (string)$this->addressSnippet_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->addressSnippet_)) {
      $l = strlen((string)$this->addressSnippet_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('addressSnippet_', $this->addressSnippet_);
  }
  
  // optional string addressSnippet = 1;

  protected $addressSnippet_;
  public function resetAddressSnippet() { unset($this->addressSnippet_); }
  public function clearAddressSnippet() { unset($this->addressSnippet_); }
  public function hasAddressSnippet() { return isset($this->addressSnippet_); }
  public function getAddressSnippet() { return $this->addressSnippet_; }
  public function setAddressSnippet($value) { $this->addressSnippet_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:GetAddressSnippetResponseProto)
}

// message GetAssetRequestProto
class GetAssetRequestProto {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("GetAssetRequestProto: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->assetId_ = $tmp;
          $limit-=$len;
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->directDownloadKey_ = $tmp;
          $limit-=$len;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->assetId_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, strlen((string)$this->assetId_));
      fwrite($fp, (string)$this->assetId_);
    }
    if (!is_null($this->directDownloadKey_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, strlen((string)$this->directDownloadKey_));
      fwrite($fp, (string)$this->directDownloadKey_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->assetId_)) {
      $l = strlen((string)$this->assetId_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->directDownloadKey_)) {
      $l = strlen((string)$this->directDownloadKey_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('assetId_', $this->assetId_)
         . Protobuf::toString('directDownloadKey_', $this->directDownloadKey_);
  }
  
  // optional string assetId = 1;

  protected $assetId_;
  public function resetAssetId() { unset($this->assetId_); }
  public function clearAssetId() { unset($this->assetId_); }
  public function hasAssetId() { return isset($this->assetId_); }
  public function getAssetId() { return $this->assetId_; }
  public function setAssetId($value) { $this->assetId_ = (string)$value; }
  
  // optional string directDownloadKey = 2;

  protected $directDownloadKey_;
  public function resetDirectDownloadKey() { unset($this->directDownloadKey_); }
  public function clearDirectDownloadKey() { unset($this->directDownloadKey_); }
  public function hasDirectDownloadKey() { return isset($this->directDownloadKey_); }
  public function getDirectDownloadKey() { return $this->directDownloadKey_; }
  public function setDirectDownloadKey($value) { $this->directDownloadKey_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:GetAssetRequestProto)
}


// group GetAssetResponseProto.InstallAsset
class GetAssetResponseProto_InstallAsset {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("GetAssetResponseProto_InstallAsset: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 4');
          break 2;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->assetId_ = $tmp;
          $limit-=$len;
          break;
        case 3:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->assetName_ = $tmp;
          $limit-=$len;
          break;
        case 4:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->assetType_ = $tmp;
          $limit-=$len;
          break;
        case 5:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->assetPackage_ = $tmp;
          $limit-=$len;
          break;
        case 6:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->blobUrl_ = $tmp;
          $limit-=$len;
          break;
        case 7:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->assetSignature_ = $tmp;
          $limit-=$len;
          break;
        case 8:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->assetSize_ = $tmp;
          
          break;
        case 9:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->refundTimeoutMillis_ = $tmp;
          
          break;
        case 10:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->forwardLocked_ = $tmp > 0 ? true : false;
          break;
        case 11:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->secured_ = $tmp > 0 ? true : false;
          break;
        case 12:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->versionCode_ = $tmp;
          
          break;
        case 13:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->downloadAuthCookieName_ = $tmp;
          $limit-=$len;
          break;
        case 14:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->downloadAuthCookieValue_ = $tmp;
          $limit-=$len;
          break;
        case 16:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->postInstallRefundWindowMillis_ = $tmp;
          
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->assetId_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, strlen((string)$this->assetId_));
      fwrite($fp, (string)$this->assetId_);
    }
    if (!is_null($this->assetName_)) {
      fwrite($fp, "\x1a");
      Protobuf::write_varint($fp, strlen((string)$this->assetName_));
      fwrite($fp, (string)$this->assetName_);
    }
    if (!is_null($this->assetType_)) {
      fwrite($fp, "\"");
      Protobuf::write_varint($fp, strlen((string)$this->assetType_));
      fwrite($fp, (string)$this->assetType_);
    }
    if (!is_null($this->assetPackage_)) {
      fwrite($fp, "*");
      Protobuf::write_varint($fp, strlen((string)$this->assetPackage_));
      fwrite($fp, (string)$this->assetPackage_);
    }
    if (!is_null($this->blobUrl_)) {
      fwrite($fp, "2");
      Protobuf::write_varint($fp, strlen((string)$this->blobUrl_));
      fwrite($fp, (string)$this->blobUrl_);
    }
    if (!is_null($this->assetSignature_)) {
      fwrite($fp, ":");
      Protobuf::write_varint($fp, strlen((string)$this->assetSignature_));
      fwrite($fp, (string)$this->assetSignature_);
    }
    if (!is_null($this->assetSize_)) {
      fwrite($fp, "@");
      Protobuf::write_varint($fp, (int)$this->assetSize_);
    }
    if (!is_null($this->refundTimeoutMillis_)) {
      fwrite($fp, "H");
      Protobuf::write_varint($fp, (int)$this->refundTimeoutMillis_);
    }
    if (!is_null($this->forwardLocked_)) {
      fwrite($fp, "P");
      Protobuf::write_varint($fp, (int)$this->forwardLocked_ ? 1 : 0);
    }
    if (!is_null($this->secured_)) {
      fwrite($fp, "X");
      Protobuf::write_varint($fp, (int)$this->secured_ ? 1 : 0);
    }
    if (!is_null($this->versionCode_)) {
      fwrite($fp, "`");
      Protobuf::write_varint($fp, (int)$this->versionCode_);
    }
    if (!is_null($this->downloadAuthCookieName_)) {
      fwrite($fp, "j");
      Protobuf::write_varint($fp, strlen((string)$this->downloadAuthCookieName_));
      fwrite($fp, (string)$this->downloadAuthCookieName_);
    }
    if (!is_null($this->downloadAuthCookieValue_)) {
      fwrite($fp, "r");
      Protobuf::write_varint($fp, strlen((string)$this->downloadAuthCookieValue_));
      fwrite($fp, (string)$this->downloadAuthCookieValue_);
    }
    if (!is_null($this->postInstallRefundWindowMillis_)) {
      fwrite($fp, "\x80\x01");
      Protobuf::write_varint($fp, (int)$this->postInstallRefundWindowMillis_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->assetId_)) {
      $l = strlen((string)$this->assetId_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->assetName_)) {
      $l = strlen((string)$this->assetName_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->assetType_)) {
      $l = strlen((string)$this->assetType_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->assetPackage_)) {
      $l = strlen((string)$this->assetPackage_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->blobUrl_)) {
      $l = strlen((string)$this->blobUrl_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->assetSignature_)) {
      $l = strlen((string)$this->assetSignature_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->assetSize_)) {
      $size += 1 + Protobuf::size_varint($this->assetSize_);
    }
    if (!is_null($this->refundTimeoutMillis_)) {
      $size += 1 + Protobuf::size_varint($this->refundTimeoutMillis_);
    }
    if (!is_null($this->forwardLocked_)) {
      $size += 2;
    }
    if (!is_null($this->secured_)) {
      $size += 2;
    }
    if (!is_null($this->versionCode_)) {
      $size += 1 + Protobuf::size_varint($this->versionCode_);
    }
    if (!is_null($this->downloadAuthCookieName_)) {
      $l = strlen((string)$this->downloadAuthCookieName_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->downloadAuthCookieValue_)) {
      $l = strlen((string)$this->downloadAuthCookieValue_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->postInstallRefundWindowMillis_)) {
      $size += 2 + Protobuf::size_varint($this->postInstallRefundWindowMillis_);
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('assetId_', $this->assetId_)
         . Protobuf::toString('assetName_', $this->assetName_)
         . Protobuf::toString('assetType_', $this->assetType_)
         . Protobuf::toString('assetPackage_', $this->assetPackage_)
         . Protobuf::toString('blobUrl_', $this->blobUrl_)
         . Protobuf::toString('assetSignature_', $this->assetSignature_)
         . Protobuf::toString('assetSize_', $this->assetSize_)
         . Protobuf::toString('refundTimeoutMillis_', $this->refundTimeoutMillis_)
         . Protobuf::toString('forwardLocked_', $this->forwardLocked_)
         . Protobuf::toString('secured_', $this->secured_)
         . Protobuf::toString('versionCode_', $this->versionCode_)
         . Protobuf::toString('downloadAuthCookieName_', $this->downloadAuthCookieName_)
         . Protobuf::toString('downloadAuthCookieValue_', $this->downloadAuthCookieValue_)
         . Protobuf::toString('postInstallRefundWindowMillis_', $this->postInstallRefundWindowMillis_);
  }
  
  // optional string assetId = 2;

  protected $assetId_;
  public function resetAssetId() { unset($this->assetId_); }
  public function clearAssetId() { unset($this->assetId_); }
  public function hasAssetId() { return isset($this->assetId_); }
  public function getAssetId() { return $this->assetId_; }
  public function setAssetId($value) { $this->assetId_ = (string)$value; }
  
  // optional string assetName = 3;

  protected $assetName_;
  public function resetAssetName() { unset($this->assetName_); }
  public function clearAssetName() { unset($this->assetName_); }
  public function hasAssetName() { return isset($this->assetName_); }
  public function getAssetName() { return $this->assetName_; }
  public function setAssetName($value) { $this->assetName_ = (string)$value; }
  
  // optional string assetType = 4;

  protected $assetType_;
  public function resetAssetType() { unset($this->assetType_); }
  public function clearAssetType() { unset($this->assetType_); }
  public function hasAssetType() { return isset($this->assetType_); }
  public function getAssetType() { return $this->assetType_; }
  public function setAssetType($value) { $this->assetType_ = (string)$value; }
  
  // optional string assetPackage = 5;

  protected $assetPackage_;
  public function resetAssetPackage() { unset($this->assetPackage_); }
  public function clearAssetPackage() { unset($this->assetPackage_); }
  public function hasAssetPackage() { return isset($this->assetPackage_); }
  public function getAssetPackage() { return $this->assetPackage_; }
  public function setAssetPackage($value) { $this->assetPackage_ = (string)$value; }
  
  // optional string blobUrl = 6;

  protected $blobUrl_;
  public function resetBlobUrl() { unset($this->blobUrl_); }
  public function clearBlobUrl() { unset($this->blobUrl_); }
  public function hasBlobUrl() { return isset($this->blobUrl_); }
  public function getBlobUrl() { return $this->blobUrl_; }
  public function setBlobUrl($value) { $this->blobUrl_ = (string)$value; }
  
  // optional string assetSignature = 7;

  protected $assetSignature_;
  public function resetAssetSignature() { unset($this->assetSignature_); }
  public function clearAssetSignature() { unset($this->assetSignature_); }
  public function hasAssetSignature() { return isset($this->assetSignature_); }
  public function getAssetSignature() { return $this->assetSignature_; }
  public function setAssetSignature($value) { $this->assetSignature_ = (string)$value; }
  
  // optional int64 assetSize = 8;

  protected $assetSize_;
  public function resetAssetSize() { unset($this->assetSize_); }
  public function clearAssetSize() { unset($this->assetSize_); }
  public function hasAssetSize() { return isset($this->assetSize_); }
  public function getAssetSize() { return $this->assetSize_; }
  public function setAssetSize($value) { $this->assetSize_ = (string)$value; }
  
  // optional int64 refundTimeoutMillis = 9;

  protected $refundTimeoutMillis_;
  public function resetRefundTimeoutMillis() { unset($this->refundTimeoutMillis_); }
  public function clearRefundTimeoutMillis() { unset($this->refundTimeoutMillis_); }
  public function hasRefundTimeoutMillis() { return isset($this->refundTimeoutMillis_); }
  public function getRefundTimeoutMillis() { return $this->refundTimeoutMillis_; }
  public function setRefundTimeoutMillis($value) { $this->refundTimeoutMillis_ = (string)$value; }
  
  // optional bool forwardLocked = 10;

  protected $forwardLocked_;
  public function resetForwardLocked() { unset($this->forwardLocked_); }
  public function clearForwardLocked() { unset($this->forwardLocked_); }
  public function hasForwardLocked() { return isset($this->forwardLocked_); }
  public function getForwardLocked() { return $this->forwardLocked_; }
  public function setForwardLocked($value) { $this->forwardLocked_ = (bool)$value; }
  
  // optional bool secured = 11;

  protected $secured_;
  public function resetSecured() { unset($this->secured_); }
  public function clearSecured() { unset($this->secured_); }
  public function hasSecured() { return isset($this->secured_); }
  public function getSecured() { return $this->secured_; }
  public function setSecured($value) { $this->secured_ = (bool)$value; }
  
  // optional int32 versionCode = 12;

  protected $versionCode_;
  public function resetVersionCode() { unset($this->versionCode_); }
  public function clearVersionCode() { unset($this->versionCode_); }
  public function hasVersionCode() { return isset($this->versionCode_); }
  public function getVersionCode() { return $this->versionCode_; }
  public function setVersionCode($value) { $this->versionCode_ = (string)$value; }
  
  // optional string downloadAuthCookieName = 13;

  protected $downloadAuthCookieName_;
  public function resetDownloadAuthCookieName() { unset($this->downloadAuthCookieName_); }
  public function clearDownloadAuthCookieName() { unset($this->downloadAuthCookieName_); }
  public function hasDownloadAuthCookieName() { return isset($this->downloadAuthCookieName_); }
  public function getDownloadAuthCookieName() { return $this->downloadAuthCookieName_; }
  public function setDownloadAuthCookieName($value) { $this->downloadAuthCookieName_ = (string)$value; }
  
  // optional string downloadAuthCookieValue = 14;

  protected $downloadAuthCookieValue_;
  public function resetDownloadAuthCookieValue() { unset($this->downloadAuthCookieValue_); }
  public function clearDownloadAuthCookieValue() { unset($this->downloadAuthCookieValue_); }
  public function hasDownloadAuthCookieValue() { return isset($this->downloadAuthCookieValue_); }
  public function getDownloadAuthCookieValue() { return $this->downloadAuthCookieValue_; }
  public function setDownloadAuthCookieValue($value) { $this->downloadAuthCookieValue_ = (string)$value; }
  
  // optional int64 postInstallRefundWindowMillis = 16;

  protected $postInstallRefundWindowMillis_;
  public function resetPostInstallRefundWindowMillis() { unset($this->postInstallRefundWindowMillis_); }
  public function clearPostInstallRefundWindowMillis() { unset($this->postInstallRefundWindowMillis_); }
  public function hasPostInstallRefundWindowMillis() { return isset($this->postInstallRefundWindowMillis_); }
  public function getPostInstallRefundWindowMillis() { return $this->postInstallRefundWindowMillis_; }
  public function setPostInstallRefundWindowMillis($value) { $this->postInstallRefundWindowMillis_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:GetAssetResponseProto.InstallAsset)
}

// message GetAssetResponseProto
class GetAssetResponseProto {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("GetAssetResponseProto: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 3');
          $this->installasset_ = new GetAssetResponseProto_InstallAsset($fp, $limit);
          break;
        case 15:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->additionalFile_[] = new FileMetadataProto($fp, $len);
          ASSERT('$len == 0');
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->installasset_)) {
      fwrite($fp, "\x0b");
      $this->installasset_->write($fp); // group
      fwrite($fp, "\x0c");
    }
    if (!is_null($this->additionalFile_))
      foreach($this->additionalFile_ as $v) {
        fwrite($fp, "z");
        Protobuf::write_varint($fp, $v->size()); // message
        $v->write($fp);
      }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->installasset_)) {
      $size += 2 + $this->installasset_->size();
    }
    if (!is_null($this->additionalFile_))
      foreach($this->additionalFile_ as $v) {
        $l = $v->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('installasset_', $this->installasset_)
         . Protobuf::toString('additionalFile_', $this->additionalFile_);
  }
  
  // optional group InstallAsset = 1
  protected $installasset_;
  public function resetInstallasset() { unset($this->installasset_); }
  public function clearInstallasset() { unset($this->installasset_); }
  public function hasInstallasset() { return isset($this->installasset_); }
  public function getInstallasset() { return $this->installasset_; }
  public function setInstallasset(GetAssetResponseProto_InstallAsset $value) { $this->installasset_ = $value; }
  
  // repeated .FileMetadataProto additionalFile = 15;

  protected $additionalFile_ = array();
  public function clearAdditionalFile() { $this->additionalFile_ = array(); }
  public function getAdditionalFileCount() { return count($this->additionalFile_); }
  public function hasAdditionalFile() { return (count($this->additionalFile_) > 0); }
  public function indexOfAdditionalFile($value) { return array_search($value,$this->additionalFile_);}
  public function removeAdditionalFile($index) { unset($this->additionalFile_[$index]); }
  public function removeValAdditionalFile($value) { $idx = array_search($value,$this->additionalFile_); if($idx !== FALSE){unset($this->additionalFile_[$idx]); }}
  public function removeValsAdditionalFile($values) { foreach($values as $value){$idx = array_search($value,$this->additionalFile_); if($idx !== FALSE){unset($this->additionalFile_[$idx]); }}}
  public function pushAdditionalFile($newvar) { return array_push($this->additionalFile_,$newvar); }
  public function popAdditionalFile() { return array_pop($this->additionalFile_); }
  public function shiftAdditionalFile() { return array_shift($this->additionalFile_); }
  public function unshiftAdditionalFile($newvar) { return array_unshift($this->additionalFile_,$newvar); }
  public function getAdditionalFile($index) { return $this->additionalFile_[$index]; }
  public function getAdditionalFileArray() { return $this->additionalFile_; }
  public function setAdditionalFile($index, $value) {$this->additionalFile_[$index] = $value;	}
  public function addAdditionalFile($value) { $this->additionalFile_[] = $value; }
  public function addAllAdditionalFile(array $values) { foreach($values as $value) {$this->additionalFile_[] = $value;} }
  
  // @@protoc_insertion_point(class_scope:GetAssetResponseProto)
}

// message GetCarrierInfoRequestProto
class GetCarrierInfoRequestProto {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("GetCarrierInfoRequestProto: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  public function size() {
    $size = 0;
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown);
  }
  
  // @@protoc_insertion_point(class_scope:GetCarrierInfoRequestProto)
}

// message GetCarrierInfoResponseProto
class GetCarrierInfoResponseProto {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("GetCarrierInfoResponseProto: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->carrierChannelEnabled_ = $tmp > 0 ? true : false;
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->carrierLogoIcon_ = $tmp;
          $limit-=$len;
          break;
        case 3:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->carrierBanner_ = $tmp;
          $limit-=$len;
          break;
        case 4:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->carrierSubtitle_ = $tmp;
          $limit-=$len;
          break;
        case 5:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->carrierTitle_ = $tmp;
          $limit-=$len;
          break;
        case 6:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->carrierImageDensity_ = $tmp;
          
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->carrierChannelEnabled_)) {
      fwrite($fp, "\x08");
      Protobuf::write_varint($fp, (int)$this->carrierChannelEnabled_ ? 1 : 0);
    }
    if (!is_null($this->carrierLogoIcon_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, strlen((string)$this->carrierLogoIcon_));
      fwrite($fp, (string)$this->carrierLogoIcon_);
    }
    if (!is_null($this->carrierBanner_)) {
      fwrite($fp, "\x1a");
      Protobuf::write_varint($fp, strlen((string)$this->carrierBanner_));
      fwrite($fp, (string)$this->carrierBanner_);
    }
    if (!is_null($this->carrierSubtitle_)) {
      fwrite($fp, "\"");
      Protobuf::write_varint($fp, strlen((string)$this->carrierSubtitle_));
      fwrite($fp, (string)$this->carrierSubtitle_);
    }
    if (!is_null($this->carrierTitle_)) {
      fwrite($fp, "*");
      Protobuf::write_varint($fp, strlen((string)$this->carrierTitle_));
      fwrite($fp, (string)$this->carrierTitle_);
    }
    if (!is_null($this->carrierImageDensity_)) {
      fwrite($fp, "0");
      Protobuf::write_varint($fp, (int)$this->carrierImageDensity_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->carrierChannelEnabled_)) {
      $size += 2;
    }
    if (!is_null($this->carrierLogoIcon_)) {
      $l = strlen((string)$this->carrierLogoIcon_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->carrierBanner_)) {
      $l = strlen((string)$this->carrierBanner_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->carrierSubtitle_)) {
      $l = strlen((string)$this->carrierSubtitle_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->carrierTitle_)) {
      $l = strlen((string)$this->carrierTitle_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->carrierImageDensity_)) {
      $size += 1 + Protobuf::size_varint($this->carrierImageDensity_);
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('carrierChannelEnabled_', $this->carrierChannelEnabled_)
         . Protobuf::toString('carrierLogoIcon_', $this->carrierLogoIcon_)
         . Protobuf::toString('carrierBanner_', $this->carrierBanner_)
         . Protobuf::toString('carrierSubtitle_', $this->carrierSubtitle_)
         . Protobuf::toString('carrierTitle_', $this->carrierTitle_)
         . Protobuf::toString('carrierImageDensity_', $this->carrierImageDensity_);
  }
  
  // optional bool carrierChannelEnabled = 1;

  protected $carrierChannelEnabled_;
  public function resetCarrierChannelEnabled() { unset($this->carrierChannelEnabled_); }
  public function clearCarrierChannelEnabled() { unset($this->carrierChannelEnabled_); }
  public function hasCarrierChannelEnabled() { return isset($this->carrierChannelEnabled_); }
  public function getCarrierChannelEnabled() { return $this->carrierChannelEnabled_; }
  public function setCarrierChannelEnabled($value) { $this->carrierChannelEnabled_ = (bool)$value; }
  
  // optional bytes carrierLogoIcon = 2;

  protected $carrierLogoIcon_;
  public function resetCarrierLogoIcon() { unset($this->carrierLogoIcon_); }
  public function clearCarrierLogoIcon() { unset($this->carrierLogoIcon_); }
  public function hasCarrierLogoIcon() { return isset($this->carrierLogoIcon_); }
  public function getCarrierLogoIcon() { return $this->carrierLogoIcon_; }
  public function setCarrierLogoIcon($value) { $this->carrierLogoIcon_ = (string)$value; }
  
  // optional bytes carrierBanner = 3;

  protected $carrierBanner_;
  public function resetCarrierBanner() { unset($this->carrierBanner_); }
  public function clearCarrierBanner() { unset($this->carrierBanner_); }
  public function hasCarrierBanner() { return isset($this->carrierBanner_); }
  public function getCarrierBanner() { return $this->carrierBanner_; }
  public function setCarrierBanner($value) { $this->carrierBanner_ = (string)$value; }
  
  // optional string carrierSubtitle = 4;

  protected $carrierSubtitle_;
  public function resetCarrierSubtitle() { unset($this->carrierSubtitle_); }
  public function clearCarrierSubtitle() { unset($this->carrierSubtitle_); }
  public function hasCarrierSubtitle() { return isset($this->carrierSubtitle_); }
  public function getCarrierSubtitle() { return $this->carrierSubtitle_; }
  public function setCarrierSubtitle($value) { $this->carrierSubtitle_ = (string)$value; }
  
  // optional string carrierTitle = 5;

  protected $carrierTitle_;
  public function resetCarrierTitle() { unset($this->carrierTitle_); }
  public function clearCarrierTitle() { unset($this->carrierTitle_); }
  public function hasCarrierTitle() { return isset($this->carrierTitle_); }
  public function getCarrierTitle() { return $this->carrierTitle_; }
  public function setCarrierTitle($value) { $this->carrierTitle_ = (string)$value; }
  
  // optional int32 carrierImageDensity = 6;

  protected $carrierImageDensity_;
  public function resetCarrierImageDensity() { unset($this->carrierImageDensity_); }
  public function clearCarrierImageDensity() { unset($this->carrierImageDensity_); }
  public function hasCarrierImageDensity() { return isset($this->carrierImageDensity_); }
  public function getCarrierImageDensity() { return $this->carrierImageDensity_; }
  public function setCarrierImageDensity($value) { $this->carrierImageDensity_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:GetCarrierInfoResponseProto)
}

// message GetCategoriesRequestProto
class GetCategoriesRequestProto {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("GetCategoriesRequestProto: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->prefetchPromoData_ = $tmp > 0 ? true : false;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->prefetchPromoData_)) {
      fwrite($fp, "\x08");
      Protobuf::write_varint($fp, (int)$this->prefetchPromoData_ ? 1 : 0);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->prefetchPromoData_)) {
      $size += 2;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('prefetchPromoData_', $this->prefetchPromoData_);
  }
  
  // optional bool prefetchPromoData = 1;

  protected $prefetchPromoData_;
  public function resetPrefetchPromoData() { unset($this->prefetchPromoData_); }
  public function clearPrefetchPromoData() { unset($this->prefetchPromoData_); }
  public function hasPrefetchPromoData() { return isset($this->prefetchPromoData_); }
  public function getPrefetchPromoData() { return $this->prefetchPromoData_; }
  public function setPrefetchPromoData($value) { $this->prefetchPromoData_ = (bool)$value; }
  
  // @@protoc_insertion_point(class_scope:GetCategoriesRequestProto)
}

// message GetCategoriesResponseProto
class GetCategoriesResponseProto {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("GetCategoriesResponseProto: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->categories_[] = new CategoryProto($fp, $len);
          ASSERT('$len == 0');
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->categories_))
      foreach($this->categories_ as $v) {
        fwrite($fp, "\x0a");
        Protobuf::write_varint($fp, $v->size()); // message
        $v->write($fp);
      }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->categories_))
      foreach($this->categories_ as $v) {
        $l = $v->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('categories_', $this->categories_);
  }
  
  // repeated .CategoryProto categories = 1;

  protected $categories_ = array();
  public function clearCategories() { $this->categories_ = array(); }
  public function getCategoriesCount() { return count($this->categories_); }
  public function hasCategories() { return (count($this->categories_) > 0); }
  public function indexOfCategories($value) { return array_search($value,$this->categories_);}
  public function removeCategories($index) { unset($this->categories_[$index]); }
  public function removeValCategories($value) { $idx = array_search($value,$this->categories_); if($idx !== FALSE){unset($this->categories_[$idx]); }}
  public function removeValsCategories($values) { foreach($values as $value){$idx = array_search($value,$this->categories_); if($idx !== FALSE){unset($this->categories_[$idx]); }}}
  public function pushCategories($newvar) { return array_push($this->categories_,$newvar); }
  public function popCategories() { return array_pop($this->categories_); }
  public function shiftCategories() { return array_shift($this->categories_); }
  public function unshiftCategories($newvar) { return array_unshift($this->categories_,$newvar); }
  public function getCategories($index) { return $this->categories_[$index]; }
  public function getCategoriesArray() { return $this->categories_; }
  public function setCategories($index, $value) {$this->categories_[$index] = $value;	}
  public function addCategories($value) { $this->categories_[] = $value; }
  public function addAllCategories(array $values) { foreach($values as $value) {$this->categories_[] = $value;} }
  
  // @@protoc_insertion_point(class_scope:GetCategoriesResponseProto)
}

// message GetImageRequestProto
class GetImageRequestProto {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("GetImageRequestProto: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->assetId_ = $tmp;
          $limit-=$len;
          break;
        case 3:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->imageUsage_ = $tmp;
          
          break;
        case 4:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->imageId_ = $tmp;
          $limit-=$len;
          break;
        case 5:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->screenPropertyWidth_ = $tmp;
          
          break;
        case 6:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->screenPropertyHeight_ = $tmp;
          
          break;
        case 7:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->screenPropertyDensity_ = $tmp;
          
          break;
        case 8:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->productType_ = $tmp;
          
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->assetId_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, strlen((string)$this->assetId_));
      fwrite($fp, (string)$this->assetId_);
    }
    if (!is_null($this->imageUsage_)) {
      fwrite($fp, "\x18");
      Protobuf::write_varint($fp, (int)$this->imageUsage_);
    }
    if (!is_null($this->imageId_)) {
      fwrite($fp, "\"");
      Protobuf::write_varint($fp, strlen((string)$this->imageId_));
      fwrite($fp, (string)$this->imageId_);
    }
    if (!is_null($this->screenPropertyWidth_)) {
      fwrite($fp, "(");
      Protobuf::write_varint($fp, (int)$this->screenPropertyWidth_);
    }
    if (!is_null($this->screenPropertyHeight_)) {
      fwrite($fp, "0");
      Protobuf::write_varint($fp, (int)$this->screenPropertyHeight_);
    }
    if (!is_null($this->screenPropertyDensity_)) {
      fwrite($fp, "8");
      Protobuf::write_varint($fp, (int)$this->screenPropertyDensity_);
    }
    if (!is_null($this->productType_)) {
      fwrite($fp, "@");
      Protobuf::write_varint($fp, (int)$this->productType_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->assetId_)) {
      $l = strlen((string)$this->assetId_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->imageUsage_)) {
      $size += 1 + Protobuf::size_varint($this->imageUsage_);
    }
    if (!is_null($this->imageId_)) {
      $l = strlen((string)$this->imageId_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->screenPropertyWidth_)) {
      $size += 1 + Protobuf::size_varint($this->screenPropertyWidth_);
    }
    if (!is_null($this->screenPropertyHeight_)) {
      $size += 1 + Protobuf::size_varint($this->screenPropertyHeight_);
    }
    if (!is_null($this->screenPropertyDensity_)) {
      $size += 1 + Protobuf::size_varint($this->screenPropertyDensity_);
    }
    if (!is_null($this->productType_)) {
      $size += 1 + Protobuf::size_varint($this->productType_);
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('assetId_', $this->assetId_)
         . Protobuf::toString('imageUsage_', $this->imageUsage_)
         . Protobuf::toString('imageId_', $this->imageId_)
         . Protobuf::toString('screenPropertyWidth_', $this->screenPropertyWidth_)
         . Protobuf::toString('screenPropertyHeight_', $this->screenPropertyHeight_)
         . Protobuf::toString('screenPropertyDensity_', $this->screenPropertyDensity_)
         . Protobuf::toString('productType_', $this->productType_);
  }
  
  // optional string assetId = 1;

  protected $assetId_;
  public function resetAssetId() { unset($this->assetId_); }
  public function clearAssetId() { unset($this->assetId_); }
  public function hasAssetId() { return isset($this->assetId_); }
  public function getAssetId() { return $this->assetId_; }
  public function setAssetId($value) { $this->assetId_ = (string)$value; }
  
  // optional int32 imageUsage = 3;

  protected $imageUsage_;
  public function resetImageUsage() { unset($this->imageUsage_); }
  public function clearImageUsage() { unset($this->imageUsage_); }
  public function hasImageUsage() { return isset($this->imageUsage_); }
  public function getImageUsage() { return $this->imageUsage_; }
  public function setImageUsage($value) { $this->imageUsage_ = (string)$value; }
  
  // optional string imageId = 4;

  protected $imageId_;
  public function resetImageId() { unset($this->imageId_); }
  public function clearImageId() { unset($this->imageId_); }
  public function hasImageId() { return isset($this->imageId_); }
  public function getImageId() { return $this->imageId_; }
  public function setImageId($value) { $this->imageId_ = (string)$value; }
  
  // optional int32 screenPropertyWidth = 5;

  protected $screenPropertyWidth_;
  public function resetScreenPropertyWidth() { unset($this->screenPropertyWidth_); }
  public function clearScreenPropertyWidth() { unset($this->screenPropertyWidth_); }
  public function hasScreenPropertyWidth() { return isset($this->screenPropertyWidth_); }
  public function getScreenPropertyWidth() { return $this->screenPropertyWidth_; }
  public function setScreenPropertyWidth($value) { $this->screenPropertyWidth_ = (string)$value; }
  
  // optional int32 screenPropertyHeight = 6;

  protected $screenPropertyHeight_;
  public function resetScreenPropertyHeight() { unset($this->screenPropertyHeight_); }
  public function clearScreenPropertyHeight() { unset($this->screenPropertyHeight_); }
  public function hasScreenPropertyHeight() { return isset($this->screenPropertyHeight_); }
  public function getScreenPropertyHeight() { return $this->screenPropertyHeight_; }
  public function setScreenPropertyHeight($value) { $this->screenPropertyHeight_ = (string)$value; }
  
  // optional int32 screenPropertyDensity = 7;

  protected $screenPropertyDensity_;
  public function resetScreenPropertyDensity() { unset($this->screenPropertyDensity_); }
  public function clearScreenPropertyDensity() { unset($this->screenPropertyDensity_); }
  public function hasScreenPropertyDensity() { return isset($this->screenPropertyDensity_); }
  public function getScreenPropertyDensity() { return $this->screenPropertyDensity_; }
  public function setScreenPropertyDensity($value) { $this->screenPropertyDensity_ = (string)$value; }
  
  // optional int32 productType = 8;

  protected $productType_;
  public function resetProductType() { unset($this->productType_); }
  public function clearProductType() { unset($this->productType_); }
  public function hasProductType() { return isset($this->productType_); }
  public function getProductType() { return $this->productType_; }
  public function setProductType($value) { $this->productType_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:GetImageRequestProto)
}

// message GetImageResponseProto
class GetImageResponseProto {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("GetImageResponseProto: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->imageData_ = $tmp;
          $limit-=$len;
          break;
        case 2:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->imageDensity_ = $tmp;
          
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->imageData_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, strlen((string)$this->imageData_));
      fwrite($fp, (string)$this->imageData_);
    }
    if (!is_null($this->imageDensity_)) {
      fwrite($fp, "\x10");
      Protobuf::write_varint($fp, (int)$this->imageDensity_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->imageData_)) {
      $l = strlen((string)$this->imageData_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->imageDensity_)) {
      $size += 1 + Protobuf::size_varint($this->imageDensity_);
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('imageData_', $this->imageData_)
         . Protobuf::toString('imageDensity_', $this->imageDensity_);
  }
  
  // optional bytes imageData = 1;

  protected $imageData_;
  public function resetImageData() { unset($this->imageData_); }
  public function clearImageData() { unset($this->imageData_); }
  public function hasImageData() { return isset($this->imageData_); }
  public function getImageData() { return $this->imageData_; }
  public function setImageData($value) { $this->imageData_ = (string)$value; }
  
  // optional int32 imageDensity = 2;

  protected $imageDensity_;
  public function resetImageDensity() { unset($this->imageDensity_); }
  public function clearImageDensity() { unset($this->imageDensity_); }
  public function hasImageDensity() { return isset($this->imageDensity_); }
  public function getImageDensity() { return $this->imageDensity_; }
  public function setImageDensity($value) { $this->imageDensity_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:GetImageResponseProto)
}

// message GetMarketMetadataRequestProto
class GetMarketMetadataRequestProto {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("GetMarketMetadataRequestProto: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->lastRequestTime_ = $tmp;
          
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->deviceConfiguration_ = new DeviceConfigurationProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 3:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->deviceRoaming_ = $tmp > 0 ? true : false;
          break;
        case 4:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->marketSignatureHash_[] = $tmp;
          $limit-=$len;
          break;
        case 5:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->contentRating_ = $tmp;
          
          break;
        case 6:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->deviceModelName_ = $tmp;
          $limit-=$len;
          break;
        case 7:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->deviceManufacturerName_ = $tmp;
          $limit-=$len;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->lastRequestTime_)) {
      fwrite($fp, "\x08");
      Protobuf::write_varint($fp, (int)$this->lastRequestTime_);
    }
    if (!is_null($this->deviceConfiguration_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, $this->deviceConfiguration_->size()); // message
      $this->deviceConfiguration_->write($fp);
    }
    if (!is_null($this->deviceRoaming_)) {
      fwrite($fp, "\x18");
      Protobuf::write_varint($fp, (int)$this->deviceRoaming_ ? 1 : 0);
    }
    if (!is_null($this->marketSignatureHash_))
      foreach($this->marketSignatureHash_ as $v) {
        fwrite($fp, "\"");
        Protobuf::write_varint($fp, strlen((string)$v));
        fwrite($fp, (string)$v);
      }
    if (!is_null($this->contentRating_)) {
      fwrite($fp, "(");
      Protobuf::write_varint($fp, (int)$this->contentRating_);
    }
    if (!is_null($this->deviceModelName_)) {
      fwrite($fp, "2");
      Protobuf::write_varint($fp, strlen((string)$this->deviceModelName_));
      fwrite($fp, (string)$this->deviceModelName_);
    }
    if (!is_null($this->deviceManufacturerName_)) {
      fwrite($fp, ":");
      Protobuf::write_varint($fp, strlen((string)$this->deviceManufacturerName_));
      fwrite($fp, (string)$this->deviceManufacturerName_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->lastRequestTime_)) {
      $size += 1 + Protobuf::size_varint($this->lastRequestTime_);
    }
    if (!is_null($this->deviceConfiguration_)) {
      $l = $this->deviceConfiguration_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->deviceRoaming_)) {
      $size += 2;
    }
    if (!is_null($this->marketSignatureHash_))
      foreach($this->marketSignatureHash_ as $v) {
        $l = strlen((string)$v);
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
    if (!is_null($this->contentRating_)) {
      $size += 1 + Protobuf::size_varint($this->contentRating_);
    }
    if (!is_null($this->deviceModelName_)) {
      $l = strlen((string)$this->deviceModelName_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->deviceManufacturerName_)) {
      $l = strlen((string)$this->deviceManufacturerName_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('lastRequestTime_', $this->lastRequestTime_)
         . Protobuf::toString('deviceConfiguration_', $this->deviceConfiguration_)
         . Protobuf::toString('deviceRoaming_', $this->deviceRoaming_)
         . Protobuf::toString('marketSignatureHash_', $this->marketSignatureHash_)
         . Protobuf::toString('contentRating_', $this->contentRating_)
         . Protobuf::toString('deviceModelName_', $this->deviceModelName_)
         . Protobuf::toString('deviceManufacturerName_', $this->deviceManufacturerName_);
  }
  
  // optional int64 lastRequestTime = 1;

  protected $lastRequestTime_;
  public function resetLastRequestTime() { unset($this->lastRequestTime_); }
  public function clearLastRequestTime() { unset($this->lastRequestTime_); }
  public function hasLastRequestTime() { return isset($this->lastRequestTime_); }
  public function getLastRequestTime() { return $this->lastRequestTime_; }
  public function setLastRequestTime($value) { $this->lastRequestTime_ = (string)$value; }
  
  // optional .DeviceConfigurationProto deviceConfiguration = 2;

  protected $deviceConfiguration_;
  public function resetDeviceConfiguration() { unset($this->deviceConfiguration_); }
  public function clearDeviceConfiguration() { unset($this->deviceConfiguration_); }
  public function hasDeviceConfiguration() { return isset($this->deviceConfiguration_); }
  public function getDeviceConfiguration() { return $this->deviceConfiguration_; }
  public function setDeviceConfiguration(DeviceConfigurationProto $value) { $this->deviceConfiguration_ = $value; }
  
  // optional bool deviceRoaming = 3;

  protected $deviceRoaming_;
  public function resetDeviceRoaming() { unset($this->deviceRoaming_); }
  public function clearDeviceRoaming() { unset($this->deviceRoaming_); }
  public function hasDeviceRoaming() { return isset($this->deviceRoaming_); }
  public function getDeviceRoaming() { return $this->deviceRoaming_; }
  public function setDeviceRoaming($value) { $this->deviceRoaming_ = (bool)$value; }
  
  // repeated string marketSignatureHash = 4;

  protected $marketSignatureHash_ = array();
  public function clearMarketSignatureHash() { $this->marketSignatureHash_ = array(); }
  public function getMarketSignatureHashCount() { return count($this->marketSignatureHash_); }
  public function hasMarketSignatureHash() { return (count($this->marketSignatureHash_) > 0); }
  public function indexOfMarketSignatureHash($value) { return array_search($value,$this->marketSignatureHash_);}
  public function removeMarketSignatureHash($index) { unset($this->marketSignatureHash_[$index]); }
  public function removeValMarketSignatureHash($value) { $idx = array_search($value,$this->marketSignatureHash_); if($idx !== FALSE){unset($this->marketSignatureHash_[$idx]); }}
  public function removeValsMarketSignatureHash($values) { foreach($values as $value){$idx = array_search($value,$this->marketSignatureHash_); if($idx !== FALSE){unset($this->marketSignatureHash_[$idx]); }}}
  public function pushMarketSignatureHash($newvar) { return array_push($this->marketSignatureHash_,(string)$newvar); }
  public function popMarketSignatureHash() { return array_pop($this->marketSignatureHash_); }
  public function shiftMarketSignatureHash() { return array_shift($this->marketSignatureHash_); }
  public function unshiftMarketSignatureHash($newvar) { return array_unshift($this->marketSignatureHash_,(string)$newvar); }
  public function getMarketSignatureHash($index) { return $this->marketSignatureHash_[$index]; }
  public function getMarketSignatureHashArray() { return $this->marketSignatureHash_; }
  public function setMarketSignatureHash($index, $value) {$this->marketSignatureHash_[$index] = (string)$value;	}
  public function addMarketSignatureHash($value) { $this->marketSignatureHash_[] = (string)$value; }
  public function addAllMarketSignatureHash(array $values) { foreach($values as $value) {$this->marketSignatureHash_[] = (string)$value;} }
  
  // optional int32 contentRating = 5;

  protected $contentRating_;
  public function resetContentRating() { unset($this->contentRating_); }
  public function clearContentRating() { unset($this->contentRating_); }
  public function hasContentRating() { return isset($this->contentRating_); }
  public function getContentRating() { return $this->contentRating_; }
  public function setContentRating($value) { $this->contentRating_ = (string)$value; }
  
  // optional string deviceModelName = 6;

  protected $deviceModelName_;
  public function resetDeviceModelName() { unset($this->deviceModelName_); }
  public function clearDeviceModelName() { unset($this->deviceModelName_); }
  public function hasDeviceModelName() { return isset($this->deviceModelName_); }
  public function getDeviceModelName() { return $this->deviceModelName_; }
  public function setDeviceModelName($value) { $this->deviceModelName_ = (string)$value; }
  
  // optional string deviceManufacturerName = 7;

  protected $deviceManufacturerName_;
  public function resetDeviceManufacturerName() { unset($this->deviceManufacturerName_); }
  public function clearDeviceManufacturerName() { unset($this->deviceManufacturerName_); }
  public function hasDeviceManufacturerName() { return isset($this->deviceManufacturerName_); }
  public function getDeviceManufacturerName() { return $this->deviceManufacturerName_; }
  public function setDeviceManufacturerName($value) { $this->deviceManufacturerName_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:GetMarketMetadataRequestProto)
}

// message GetMarketMetadataResponseProto
class GetMarketMetadataResponseProto {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("GetMarketMetadataResponseProto: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->latestClientVersionCode_ = $tmp;
          
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->latestClientUrl_ = $tmp;
          $limit-=$len;
          break;
        case 3:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->paidAppsEnabled_ = $tmp > 0 ? true : false;
          break;
        case 4:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->billingParameter_[] = new BillingParameterProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 5:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->commentPostEnabled_ = $tmp > 0 ? true : false;
          break;
        case 6:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->billingEventsEnabled_ = $tmp > 0 ? true : false;
          break;
        case 7:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->warningMessage_ = $tmp;
          $limit-=$len;
          break;
        case 8:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->inAppBillingEnabled_ = $tmp > 0 ? true : false;
          break;
        case 9:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->inAppBillingMaxApiVersion_ = $tmp;
          
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->latestClientVersionCode_)) {
      fwrite($fp, "\x08");
      Protobuf::write_varint($fp, (int)$this->latestClientVersionCode_);
    }
    if (!is_null($this->latestClientUrl_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, strlen((string)$this->latestClientUrl_));
      fwrite($fp, (string)$this->latestClientUrl_);
    }
    if (!is_null($this->paidAppsEnabled_)) {
      fwrite($fp, "\x18");
      Protobuf::write_varint($fp, (int)$this->paidAppsEnabled_ ? 1 : 0);
    }
    if (!is_null($this->billingParameter_))
      foreach($this->billingParameter_ as $v) {
        fwrite($fp, "\"");
        Protobuf::write_varint($fp, $v->size()); // message
        $v->write($fp);
      }
    if (!is_null($this->commentPostEnabled_)) {
      fwrite($fp, "(");
      Protobuf::write_varint($fp, (int)$this->commentPostEnabled_ ? 1 : 0);
    }
    if (!is_null($this->billingEventsEnabled_)) {
      fwrite($fp, "0");
      Protobuf::write_varint($fp, (int)$this->billingEventsEnabled_ ? 1 : 0);
    }
    if (!is_null($this->warningMessage_)) {
      fwrite($fp, ":");
      Protobuf::write_varint($fp, strlen((string)$this->warningMessage_));
      fwrite($fp, (string)$this->warningMessage_);
    }
    if (!is_null($this->inAppBillingEnabled_)) {
      fwrite($fp, "@");
      Protobuf::write_varint($fp, (int)$this->inAppBillingEnabled_ ? 1 : 0);
    }
    if (!is_null($this->inAppBillingMaxApiVersion_)) {
      fwrite($fp, "H");
      Protobuf::write_varint($fp, (int)$this->inAppBillingMaxApiVersion_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->latestClientVersionCode_)) {
      $size += 1 + Protobuf::size_varint($this->latestClientVersionCode_);
    }
    if (!is_null($this->latestClientUrl_)) {
      $l = strlen((string)$this->latestClientUrl_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->paidAppsEnabled_)) {
      $size += 2;
    }
    if (!is_null($this->billingParameter_))
      foreach($this->billingParameter_ as $v) {
        $l = $v->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
    if (!is_null($this->commentPostEnabled_)) {
      $size += 2;
    }
    if (!is_null($this->billingEventsEnabled_)) {
      $size += 2;
    }
    if (!is_null($this->warningMessage_)) {
      $l = strlen((string)$this->warningMessage_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->inAppBillingEnabled_)) {
      $size += 2;
    }
    if (!is_null($this->inAppBillingMaxApiVersion_)) {
      $size += 1 + Protobuf::size_varint($this->inAppBillingMaxApiVersion_);
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('latestClientVersionCode_', $this->latestClientVersionCode_)
         . Protobuf::toString('latestClientUrl_', $this->latestClientUrl_)
         . Protobuf::toString('paidAppsEnabled_', $this->paidAppsEnabled_)
         . Protobuf::toString('billingParameter_', $this->billingParameter_)
         . Protobuf::toString('commentPostEnabled_', $this->commentPostEnabled_)
         . Protobuf::toString('billingEventsEnabled_', $this->billingEventsEnabled_)
         . Protobuf::toString('warningMessage_', $this->warningMessage_)
         . Protobuf::toString('inAppBillingEnabled_', $this->inAppBillingEnabled_)
         . Protobuf::toString('inAppBillingMaxApiVersion_', $this->inAppBillingMaxApiVersion_);
  }
  
  // optional int32 latestClientVersionCode = 1;

  protected $latestClientVersionCode_;
  public function resetLatestClientVersionCode() { unset($this->latestClientVersionCode_); }
  public function clearLatestClientVersionCode() { unset($this->latestClientVersionCode_); }
  public function hasLatestClientVersionCode() { return isset($this->latestClientVersionCode_); }
  public function getLatestClientVersionCode() { return $this->latestClientVersionCode_; }
  public function setLatestClientVersionCode($value) { $this->latestClientVersionCode_ = (string)$value; }
  
  // optional string latestClientUrl = 2;

  protected $latestClientUrl_;
  public function resetLatestClientUrl() { unset($this->latestClientUrl_); }
  public function clearLatestClientUrl() { unset($this->latestClientUrl_); }
  public function hasLatestClientUrl() { return isset($this->latestClientUrl_); }
  public function getLatestClientUrl() { return $this->latestClientUrl_; }
  public function setLatestClientUrl($value) { $this->latestClientUrl_ = (string)$value; }
  
  // optional bool paidAppsEnabled = 3;

  protected $paidAppsEnabled_;
  public function resetPaidAppsEnabled() { unset($this->paidAppsEnabled_); }
  public function clearPaidAppsEnabled() { unset($this->paidAppsEnabled_); }
  public function hasPaidAppsEnabled() { return isset($this->paidAppsEnabled_); }
  public function getPaidAppsEnabled() { return $this->paidAppsEnabled_; }
  public function setPaidAppsEnabled($value) { $this->paidAppsEnabled_ = (bool)$value; }
  
  // repeated .BillingParameterProto billingParameter = 4;

  protected $billingParameter_ = array();
  public function clearBillingParameter() { $this->billingParameter_ = array(); }
  public function getBillingParameterCount() { return count($this->billingParameter_); }
  public function hasBillingParameter() { return (count($this->billingParameter_) > 0); }
  public function indexOfBillingParameter($value) { return array_search($value,$this->billingParameter_);}
  public function removeBillingParameter($index) { unset($this->billingParameter_[$index]); }
  public function removeValBillingParameter($value) { $idx = array_search($value,$this->billingParameter_); if($idx !== FALSE){unset($this->billingParameter_[$idx]); }}
  public function removeValsBillingParameter($values) { foreach($values as $value){$idx = array_search($value,$this->billingParameter_); if($idx !== FALSE){unset($this->billingParameter_[$idx]); }}}
  public function pushBillingParameter($newvar) { return array_push($this->billingParameter_,$newvar); }
  public function popBillingParameter() { return array_pop($this->billingParameter_); }
  public function shiftBillingParameter() { return array_shift($this->billingParameter_); }
  public function unshiftBillingParameter($newvar) { return array_unshift($this->billingParameter_,$newvar); }
  public function getBillingParameter($index) { return $this->billingParameter_[$index]; }
  public function getBillingParameterArray() { return $this->billingParameter_; }
  public function setBillingParameter($index, $value) {$this->billingParameter_[$index] = $value;	}
  public function addBillingParameter($value) { $this->billingParameter_[] = $value; }
  public function addAllBillingParameter(array $values) { foreach($values as $value) {$this->billingParameter_[] = $value;} }
  
  // optional bool commentPostEnabled = 5;

  protected $commentPostEnabled_;
  public function resetCommentPostEnabled() { unset($this->commentPostEnabled_); }
  public function clearCommentPostEnabled() { unset($this->commentPostEnabled_); }
  public function hasCommentPostEnabled() { return isset($this->commentPostEnabled_); }
  public function getCommentPostEnabled() { return $this->commentPostEnabled_; }
  public function setCommentPostEnabled($value) { $this->commentPostEnabled_ = (bool)$value; }
  
  // optional bool billingEventsEnabled = 6;

  protected $billingEventsEnabled_;
  public function resetBillingEventsEnabled() { unset($this->billingEventsEnabled_); }
  public function clearBillingEventsEnabled() { unset($this->billingEventsEnabled_); }
  public function hasBillingEventsEnabled() { return isset($this->billingEventsEnabled_); }
  public function getBillingEventsEnabled() { return $this->billingEventsEnabled_; }
  public function setBillingEventsEnabled($value) { $this->billingEventsEnabled_ = (bool)$value; }
  
  // optional string warningMessage = 7;

  protected $warningMessage_;
  public function resetWarningMessage() { unset($this->warningMessage_); }
  public function clearWarningMessage() { unset($this->warningMessage_); }
  public function hasWarningMessage() { return isset($this->warningMessage_); }
  public function getWarningMessage() { return $this->warningMessage_; }
  public function setWarningMessage($value) { $this->warningMessage_ = (string)$value; }
  
  // optional bool inAppBillingEnabled = 8;

  protected $inAppBillingEnabled_;
  public function resetInAppBillingEnabled() { unset($this->inAppBillingEnabled_); }
  public function clearInAppBillingEnabled() { unset($this->inAppBillingEnabled_); }
  public function hasInAppBillingEnabled() { return isset($this->inAppBillingEnabled_); }
  public function getInAppBillingEnabled() { return $this->inAppBillingEnabled_; }
  public function setInAppBillingEnabled($value) { $this->inAppBillingEnabled_ = (bool)$value; }
  
  // optional int32 inAppBillingMaxApiVersion = 9;

  protected $inAppBillingMaxApiVersion_;
  public function resetInAppBillingMaxApiVersion() { unset($this->inAppBillingMaxApiVersion_); }
  public function clearInAppBillingMaxApiVersion() { unset($this->inAppBillingMaxApiVersion_); }
  public function hasInAppBillingMaxApiVersion() { return isset($this->inAppBillingMaxApiVersion_); }
  public function getInAppBillingMaxApiVersion() { return $this->inAppBillingMaxApiVersion_; }
  public function setInAppBillingMaxApiVersion($value) { $this->inAppBillingMaxApiVersion_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:GetMarketMetadataResponseProto)
}

// message GetSubCategoriesRequestProto
class GetSubCategoriesRequestProto {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("GetSubCategoriesRequestProto: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->assetType_ = $tmp;
          
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->assetType_)) {
      fwrite($fp, "\x08");
      Protobuf::write_varint($fp, (int)$this->assetType_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->assetType_)) {
      $size += 1 + Protobuf::size_varint($this->assetType_);
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('assetType_', $this->assetType_);
  }
  
  // optional int32 assetType = 1;

  protected $assetType_;
  public function resetAssetType() { unset($this->assetType_); }
  public function clearAssetType() { unset($this->assetType_); }
  public function hasAssetType() { return isset($this->assetType_); }
  public function getAssetType() { return $this->assetType_; }
  public function setAssetType($value) { $this->assetType_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:GetSubCategoriesRequestProto)
}


// group GetSubCategoriesResponseProto.SubCategory
class GetSubCategoriesResponseProto_SubCategory {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("GetSubCategoriesResponseProto_SubCategory: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 4');
          break 2;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->subCategoryDisplay_ = $tmp;
          $limit-=$len;
          break;
        case 3:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->subCategoryId_ = $tmp;
          $limit-=$len;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->subCategoryDisplay_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, strlen((string)$this->subCategoryDisplay_));
      fwrite($fp, (string)$this->subCategoryDisplay_);
    }
    if (!is_null($this->subCategoryId_)) {
      fwrite($fp, "\x1a");
      Protobuf::write_varint($fp, strlen((string)$this->subCategoryId_));
      fwrite($fp, (string)$this->subCategoryId_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->subCategoryDisplay_)) {
      $l = strlen((string)$this->subCategoryDisplay_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->subCategoryId_)) {
      $l = strlen((string)$this->subCategoryId_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('subCategoryDisplay_', $this->subCategoryDisplay_)
         . Protobuf::toString('subCategoryId_', $this->subCategoryId_);
  }
  
  // optional string subCategoryDisplay = 2;

  protected $subCategoryDisplay_;
  public function resetSubCategoryDisplay() { unset($this->subCategoryDisplay_); }
  public function clearSubCategoryDisplay() { unset($this->subCategoryDisplay_); }
  public function hasSubCategoryDisplay() { return isset($this->subCategoryDisplay_); }
  public function getSubCategoryDisplay() { return $this->subCategoryDisplay_; }
  public function setSubCategoryDisplay($value) { $this->subCategoryDisplay_ = (string)$value; }
  
  // optional string subCategoryId = 3;

  protected $subCategoryId_;
  public function resetSubCategoryId() { unset($this->subCategoryId_); }
  public function clearSubCategoryId() { unset($this->subCategoryId_); }
  public function hasSubCategoryId() { return isset($this->subCategoryId_); }
  public function getSubCategoryId() { return $this->subCategoryId_; }
  public function setSubCategoryId($value) { $this->subCategoryId_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:GetSubCategoriesResponseProto.SubCategory)
}

// message GetSubCategoriesResponseProto
class GetSubCategoriesResponseProto {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("GetSubCategoriesResponseProto: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 3');
          $this->subcategory_[] = new GetSubCategoriesResponseProto_SubCategory($fp, $limit);
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->subcategory_))
      foreach($this->subcategory_ as $v) {
        fwrite($fp, "\x0b");
        $v->write($fp); // group
        fwrite($fp, "\x0c");
      }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->subcategory_))
      foreach($this->subcategory_ as $v) {
        $size += 2 + $v->size();
      }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('subcategory_', $this->subcategory_);
  }
  
  // repeated group SubCategory = 1
  protected $subcategory_ = array();
  public function clearSubcategory() { $this->subcategory_ = array(); }
  public function getSubcategoryCount() { return count($this->subcategory_); }
  public function hasSubcategory() { return (count($this->subcategory_) > 0); }
  public function indexOfSubcategory($value) { return array_search($value,$this->subcategory_);}
  public function removeSubcategory($index) { unset($this->subcategory_[$index]); }
  public function removeValSubcategory($value) { $idx = array_search($value,$this->subcategory_); if($idx !== FALSE){unset($this->subcategory_[$idx]); }}
  public function removeValsSubcategory($values) { foreach($values as $value){$idx = array_search($value,$this->subcategory_); if($idx !== FALSE){unset($this->subcategory_[$idx]); }}}
  public function pushSubcategory($newvar) { return array_push($this->subcategory_,$newvar); }
  public function popSubcategory() { return array_pop($this->subcategory_); }
  public function shiftSubcategory() { return array_shift($this->subcategory_); }
  public function unshiftSubcategory($newvar) { return array_unshift($this->subcategory_,$newvar); }
  public function getSubcategory($index) { return $this->subcategory_[$index]; }
  public function getSubcategoryArray() { return $this->subcategory_; }
  public function setSubcategory($index, $value) {$this->subcategory_[$index] = $value;	}
  public function addSubcategory($value) { $this->subcategory_[] = $value; }
  public function addAllSubcategory(array $values) { foreach($values as $value) {$this->subcategory_[] = $value;} }
  
  // @@protoc_insertion_point(class_scope:GetSubCategoriesResponseProto)
}

// message InAppPurchaseInformationRequestProto
class InAppPurchaseInformationRequestProto {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("InAppPurchaseInformationRequestProto: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->signatureHash_ = new SignatureHashProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 2:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->nonce_ = $tmp;
          
          break;
        case 3:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->notificationId_[] = $tmp;
          $limit-=$len;
          break;
        case 4:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->signatureAlgorithm_ = $tmp;
          $limit-=$len;
          break;
        case 5:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->billingApiVersion_ = $tmp;
          
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->signatureHash_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, $this->signatureHash_->size()); // message
      $this->signatureHash_->write($fp);
    }
    if (!is_null($this->nonce_)) {
      fwrite($fp, "\x10");
      Protobuf::write_varint($fp, (int)$this->nonce_);
    }
    if (!is_null($this->notificationId_))
      foreach($this->notificationId_ as $v) {
        fwrite($fp, "\x1a");
        Protobuf::write_varint($fp, strlen((string)$v));
        fwrite($fp, (string)$v);
      }
    if (!is_null($this->signatureAlgorithm_)) {
      fwrite($fp, "\"");
      Protobuf::write_varint($fp, strlen((string)$this->signatureAlgorithm_));
      fwrite($fp, (string)$this->signatureAlgorithm_);
    }
    if (!is_null($this->billingApiVersion_)) {
      fwrite($fp, "(");
      Protobuf::write_varint($fp, (int)$this->billingApiVersion_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->signatureHash_)) {
      $l = $this->signatureHash_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->nonce_)) {
      $size += 1 + Protobuf::size_varint($this->nonce_);
    }
    if (!is_null($this->notificationId_))
      foreach($this->notificationId_ as $v) {
        $l = strlen((string)$v);
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
    if (!is_null($this->signatureAlgorithm_)) {
      $l = strlen((string)$this->signatureAlgorithm_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->billingApiVersion_)) {
      $size += 1 + Protobuf::size_varint($this->billingApiVersion_);
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('signatureHash_', $this->signatureHash_)
         . Protobuf::toString('nonce_', $this->nonce_)
         . Protobuf::toString('notificationId_', $this->notificationId_)
         . Protobuf::toString('signatureAlgorithm_', $this->signatureAlgorithm_)
         . Protobuf::toString('billingApiVersion_', $this->billingApiVersion_);
  }
  
  // optional .SignatureHashProto signatureHash = 1;

  protected $signatureHash_;
  public function resetSignatureHash() { unset($this->signatureHash_); }
  public function clearSignatureHash() { unset($this->signatureHash_); }
  public function hasSignatureHash() { return isset($this->signatureHash_); }
  public function getSignatureHash() { return $this->signatureHash_; }
  public function setSignatureHash(SignatureHashProto $value) { $this->signatureHash_ = $value; }
  
  // optional int64 nonce = 2;

  protected $nonce_;
  public function resetNonce() { unset($this->nonce_); }
  public function clearNonce() { unset($this->nonce_); }
  public function hasNonce() { return isset($this->nonce_); }
  public function getNonce() { return $this->nonce_; }
  public function setNonce($value) { $this->nonce_ = (string)$value; }
  
  // repeated string notificationId = 3;

  protected $notificationId_ = array();
  public function clearNotificationId() { $this->notificationId_ = array(); }
  public function getNotificationIdCount() { return count($this->notificationId_); }
  public function hasNotificationId() { return (count($this->notificationId_) > 0); }
  public function indexOfNotificationId($value) { return array_search($value,$this->notificationId_);}
  public function removeNotificationId($index) { unset($this->notificationId_[$index]); }
  public function removeValNotificationId($value) { $idx = array_search($value,$this->notificationId_); if($idx !== FALSE){unset($this->notificationId_[$idx]); }}
  public function removeValsNotificationId($values) { foreach($values as $value){$idx = array_search($value,$this->notificationId_); if($idx !== FALSE){unset($this->notificationId_[$idx]); }}}
  public function pushNotificationId($newvar) { return array_push($this->notificationId_,(string)$newvar); }
  public function popNotificationId() { return array_pop($this->notificationId_); }
  public function shiftNotificationId() { return array_shift($this->notificationId_); }
  public function unshiftNotificationId($newvar) { return array_unshift($this->notificationId_,(string)$newvar); }
  public function getNotificationId($index) { return $this->notificationId_[$index]; }
  public function getNotificationIdArray() { return $this->notificationId_; }
  public function setNotificationId($index, $value) {$this->notificationId_[$index] = (string)$value;	}
  public function addNotificationId($value) { $this->notificationId_[] = (string)$value; }
  public function addAllNotificationId(array $values) { foreach($values as $value) {$this->notificationId_[] = (string)$value;} }
  
  // optional string signatureAlgorithm = 4;

  protected $signatureAlgorithm_;
  public function resetSignatureAlgorithm() { unset($this->signatureAlgorithm_); }
  public function clearSignatureAlgorithm() { unset($this->signatureAlgorithm_); }
  public function hasSignatureAlgorithm() { return isset($this->signatureAlgorithm_); }
  public function getSignatureAlgorithm() { return $this->signatureAlgorithm_; }
  public function setSignatureAlgorithm($value) { $this->signatureAlgorithm_ = (string)$value; }
  
  // optional int32 billingApiVersion = 5;

  protected $billingApiVersion_;
  public function resetBillingApiVersion() { unset($this->billingApiVersion_); }
  public function clearBillingApiVersion() { unset($this->billingApiVersion_); }
  public function hasBillingApiVersion() { return isset($this->billingApiVersion_); }
  public function getBillingApiVersion() { return $this->billingApiVersion_; }
  public function setBillingApiVersion($value) { $this->billingApiVersion_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:InAppPurchaseInformationRequestProto)
}

// message InAppPurchaseInformationResponseProto
class InAppPurchaseInformationResponseProto {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("InAppPurchaseInformationResponseProto: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->signedResponse_ = new SignedDataProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->statusBarNotification_[] = new StatusBarNotificationProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 3:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->purchaseResult_ = new PurchaseResultProto($fp, $len);
          ASSERT('$len == 0');
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->signedResponse_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, $this->signedResponse_->size()); // message
      $this->signedResponse_->write($fp);
    }
    if (!is_null($this->statusBarNotification_))
      foreach($this->statusBarNotification_ as $v) {
        fwrite($fp, "\x12");
        Protobuf::write_varint($fp, $v->size()); // message
        $v->write($fp);
      }
    if (!is_null($this->purchaseResult_)) {
      fwrite($fp, "\x1a");
      Protobuf::write_varint($fp, $this->purchaseResult_->size()); // message
      $this->purchaseResult_->write($fp);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->signedResponse_)) {
      $l = $this->signedResponse_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->statusBarNotification_))
      foreach($this->statusBarNotification_ as $v) {
        $l = $v->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
    if (!is_null($this->purchaseResult_)) {
      $l = $this->purchaseResult_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('signedResponse_', $this->signedResponse_)
         . Protobuf::toString('statusBarNotification_', $this->statusBarNotification_)
         . Protobuf::toString('purchaseResult_', $this->purchaseResult_);
  }
  
  // optional .SignedDataProto signedResponse = 1;

  protected $signedResponse_;
  public function resetSignedResponse() { unset($this->signedResponse_); }
  public function clearSignedResponse() { unset($this->signedResponse_); }
  public function hasSignedResponse() { return isset($this->signedResponse_); }
  public function getSignedResponse() { return $this->signedResponse_; }
  public function setSignedResponse(SignedDataProto $value) { $this->signedResponse_ = $value; }
  
  // repeated .StatusBarNotificationProto statusBarNotification = 2;

  protected $statusBarNotification_ = array();
  public function clearStatusBarNotification() { $this->statusBarNotification_ = array(); }
  public function getStatusBarNotificationCount() { return count($this->statusBarNotification_); }
  public function hasStatusBarNotification() { return (count($this->statusBarNotification_) > 0); }
  public function indexOfStatusBarNotification($value) { return array_search($value,$this->statusBarNotification_);}
  public function removeStatusBarNotification($index) { unset($this->statusBarNotification_[$index]); }
  public function removeValStatusBarNotification($value) { $idx = array_search($value,$this->statusBarNotification_); if($idx !== FALSE){unset($this->statusBarNotification_[$idx]); }}
  public function removeValsStatusBarNotification($values) { foreach($values as $value){$idx = array_search($value,$this->statusBarNotification_); if($idx !== FALSE){unset($this->statusBarNotification_[$idx]); }}}
  public function pushStatusBarNotification($newvar) { return array_push($this->statusBarNotification_,$newvar); }
  public function popStatusBarNotification() { return array_pop($this->statusBarNotification_); }
  public function shiftStatusBarNotification() { return array_shift($this->statusBarNotification_); }
  public function unshiftStatusBarNotification($newvar) { return array_unshift($this->statusBarNotification_,$newvar); }
  public function getStatusBarNotification($index) { return $this->statusBarNotification_[$index]; }
  public function getStatusBarNotificationArray() { return $this->statusBarNotification_; }
  public function setStatusBarNotification($index, $value) {$this->statusBarNotification_[$index] = $value;	}
  public function addStatusBarNotification($value) { $this->statusBarNotification_[] = $value; }
  public function addAllStatusBarNotification(array $values) { foreach($values as $value) {$this->statusBarNotification_[] = $value;} }
  
  // optional .PurchaseResultProto purchaseResult = 3;

  protected $purchaseResult_;
  public function resetPurchaseResult() { unset($this->purchaseResult_); }
  public function clearPurchaseResult() { unset($this->purchaseResult_); }
  public function hasPurchaseResult() { return isset($this->purchaseResult_); }
  public function getPurchaseResult() { return $this->purchaseResult_; }
  public function setPurchaseResult(PurchaseResultProto $value) { $this->purchaseResult_ = $value; }
  
  // @@protoc_insertion_point(class_scope:InAppPurchaseInformationResponseProto)
}

// message InAppRestoreTransactionsRequestProto
class InAppRestoreTransactionsRequestProto {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("InAppRestoreTransactionsRequestProto: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->signatureHash_ = new SignatureHashProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 2:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->nonce_ = $tmp;
          
          break;
        case 3:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->signatureAlgorithm_ = $tmp;
          $limit-=$len;
          break;
        case 4:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->billingApiVersion_ = $tmp;
          
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->signatureHash_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, $this->signatureHash_->size()); // message
      $this->signatureHash_->write($fp);
    }
    if (!is_null($this->nonce_)) {
      fwrite($fp, "\x10");
      Protobuf::write_varint($fp, (int)$this->nonce_);
    }
    if (!is_null($this->signatureAlgorithm_)) {
      fwrite($fp, "\x1a");
      Protobuf::write_varint($fp, strlen((string)$this->signatureAlgorithm_));
      fwrite($fp, (string)$this->signatureAlgorithm_);
    }
    if (!is_null($this->billingApiVersion_)) {
      fwrite($fp, " ");
      Protobuf::write_varint($fp, (int)$this->billingApiVersion_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->signatureHash_)) {
      $l = $this->signatureHash_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->nonce_)) {
      $size += 1 + Protobuf::size_varint($this->nonce_);
    }
    if (!is_null($this->signatureAlgorithm_)) {
      $l = strlen((string)$this->signatureAlgorithm_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->billingApiVersion_)) {
      $size += 1 + Protobuf::size_varint($this->billingApiVersion_);
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('signatureHash_', $this->signatureHash_)
         . Protobuf::toString('nonce_', $this->nonce_)
         . Protobuf::toString('signatureAlgorithm_', $this->signatureAlgorithm_)
         . Protobuf::toString('billingApiVersion_', $this->billingApiVersion_);
  }
  
  // optional .SignatureHashProto signatureHash = 1;

  protected $signatureHash_;
  public function resetSignatureHash() { unset($this->signatureHash_); }
  public function clearSignatureHash() { unset($this->signatureHash_); }
  public function hasSignatureHash() { return isset($this->signatureHash_); }
  public function getSignatureHash() { return $this->signatureHash_; }
  public function setSignatureHash(SignatureHashProto $value) { $this->signatureHash_ = $value; }
  
  // optional int64 nonce = 2;

  protected $nonce_;
  public function resetNonce() { unset($this->nonce_); }
  public function clearNonce() { unset($this->nonce_); }
  public function hasNonce() { return isset($this->nonce_); }
  public function getNonce() { return $this->nonce_; }
  public function setNonce($value) { $this->nonce_ = (string)$value; }
  
  // optional string signatureAlgorithm = 3;

  protected $signatureAlgorithm_;
  public function resetSignatureAlgorithm() { unset($this->signatureAlgorithm_); }
  public function clearSignatureAlgorithm() { unset($this->signatureAlgorithm_); }
  public function hasSignatureAlgorithm() { return isset($this->signatureAlgorithm_); }
  public function getSignatureAlgorithm() { return $this->signatureAlgorithm_; }
  public function setSignatureAlgorithm($value) { $this->signatureAlgorithm_ = (string)$value; }
  
  // optional int32 billingApiVersion = 4;

  protected $billingApiVersion_;
  public function resetBillingApiVersion() { unset($this->billingApiVersion_); }
  public function clearBillingApiVersion() { unset($this->billingApiVersion_); }
  public function hasBillingApiVersion() { return isset($this->billingApiVersion_); }
  public function getBillingApiVersion() { return $this->billingApiVersion_; }
  public function setBillingApiVersion($value) { $this->billingApiVersion_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:InAppRestoreTransactionsRequestProto)
}

// message InAppRestoreTransactionsResponseProto
class InAppRestoreTransactionsResponseProto {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("InAppRestoreTransactionsResponseProto: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->signedResponse_ = new SignedDataProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->purchaseResult_ = new PurchaseResultProto($fp, $len);
          ASSERT('$len == 0');
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->signedResponse_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, $this->signedResponse_->size()); // message
      $this->signedResponse_->write($fp);
    }
    if (!is_null($this->purchaseResult_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, $this->purchaseResult_->size()); // message
      $this->purchaseResult_->write($fp);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->signedResponse_)) {
      $l = $this->signedResponse_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->purchaseResult_)) {
      $l = $this->purchaseResult_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('signedResponse_', $this->signedResponse_)
         . Protobuf::toString('purchaseResult_', $this->purchaseResult_);
  }
  
  // optional .SignedDataProto signedResponse = 1;

  protected $signedResponse_;
  public function resetSignedResponse() { unset($this->signedResponse_); }
  public function clearSignedResponse() { unset($this->signedResponse_); }
  public function hasSignedResponse() { return isset($this->signedResponse_); }
  public function getSignedResponse() { return $this->signedResponse_; }
  public function setSignedResponse(SignedDataProto $value) { $this->signedResponse_ = $value; }
  
  // optional .PurchaseResultProto purchaseResult = 2;

  protected $purchaseResult_;
  public function resetPurchaseResult() { unset($this->purchaseResult_); }
  public function clearPurchaseResult() { unset($this->purchaseResult_); }
  public function hasPurchaseResult() { return isset($this->purchaseResult_); }
  public function getPurchaseResult() { return $this->purchaseResult_; }
  public function setPurchaseResult(PurchaseResultProto $value) { $this->purchaseResult_ = $value; }
  
  // @@protoc_insertion_point(class_scope:InAppRestoreTransactionsResponseProto)
}

// message ModifyCommentRequestProto
class ModifyCommentRequestProto {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("ModifyCommentRequestProto: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->assetId_ = $tmp;
          $limit-=$len;
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->comment_ = new ExternalCommentProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 3:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->deleteComment_ = $tmp > 0 ? true : false;
          break;
        case 4:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->flagAsset_ = $tmp > 0 ? true : false;
          break;
        case 5:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->flagType_ = $tmp;
          
          break;
        case 6:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->flagMessage_ = $tmp;
          $limit-=$len;
          break;
        case 7:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->nonFlagFlow_ = $tmp > 0 ? true : false;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->assetId_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, strlen((string)$this->assetId_));
      fwrite($fp, (string)$this->assetId_);
    }
    if (!is_null($this->comment_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, $this->comment_->size()); // message
      $this->comment_->write($fp);
    }
    if (!is_null($this->deleteComment_)) {
      fwrite($fp, "\x18");
      Protobuf::write_varint($fp, (int)$this->deleteComment_ ? 1 : 0);
    }
    if (!is_null($this->flagAsset_)) {
      fwrite($fp, " ");
      Protobuf::write_varint($fp, (int)$this->flagAsset_ ? 1 : 0);
    }
    if (!is_null($this->flagType_)) {
      fwrite($fp, "(");
      Protobuf::write_varint($fp, (int)$this->flagType_);
    }
    if (!is_null($this->flagMessage_)) {
      fwrite($fp, "2");
      Protobuf::write_varint($fp, strlen((string)$this->flagMessage_));
      fwrite($fp, (string)$this->flagMessage_);
    }
    if (!is_null($this->nonFlagFlow_)) {
      fwrite($fp, "8");
      Protobuf::write_varint($fp, (int)$this->nonFlagFlow_ ? 1 : 0);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->assetId_)) {
      $l = strlen((string)$this->assetId_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->comment_)) {
      $l = $this->comment_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->deleteComment_)) {
      $size += 2;
    }
    if (!is_null($this->flagAsset_)) {
      $size += 2;
    }
    if (!is_null($this->flagType_)) {
      $size += 1 + Protobuf::size_varint($this->flagType_);
    }
    if (!is_null($this->flagMessage_)) {
      $l = strlen((string)$this->flagMessage_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->nonFlagFlow_)) {
      $size += 2;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('assetId_', $this->assetId_)
         . Protobuf::toString('comment_', $this->comment_)
         . Protobuf::toString('deleteComment_', $this->deleteComment_)
         . Protobuf::toString('flagAsset_', $this->flagAsset_)
         . Protobuf::toString('flagType_', $this->flagType_)
         . Protobuf::toString('flagMessage_', $this->flagMessage_)
         . Protobuf::toString('nonFlagFlow_', $this->nonFlagFlow_);
  }
  
  // optional string assetId = 1;

  protected $assetId_;
  public function resetAssetId() { unset($this->assetId_); }
  public function clearAssetId() { unset($this->assetId_); }
  public function hasAssetId() { return isset($this->assetId_); }
  public function getAssetId() { return $this->assetId_; }
  public function setAssetId($value) { $this->assetId_ = (string)$value; }
  
  // optional .ExternalCommentProto comment = 2;

  protected $comment_;
  public function resetComment() { unset($this->comment_); }
  public function clearComment() { unset($this->comment_); }
  public function hasComment() { return isset($this->comment_); }
  public function getComment() { return $this->comment_; }
  public function setComment(ExternalCommentProto $value) { $this->comment_ = $value; }
  
  // optional bool deleteComment = 3;

  protected $deleteComment_;
  public function resetDeleteComment() { unset($this->deleteComment_); }
  public function clearDeleteComment() { unset($this->deleteComment_); }
  public function hasDeleteComment() { return isset($this->deleteComment_); }
  public function getDeleteComment() { return $this->deleteComment_; }
  public function setDeleteComment($value) { $this->deleteComment_ = (bool)$value; }
  
  // optional bool flagAsset = 4;

  protected $flagAsset_;
  public function resetFlagAsset() { unset($this->flagAsset_); }
  public function clearFlagAsset() { unset($this->flagAsset_); }
  public function hasFlagAsset() { return isset($this->flagAsset_); }
  public function getFlagAsset() { return $this->flagAsset_; }
  public function setFlagAsset($value) { $this->flagAsset_ = (bool)$value; }
  
  // optional int32 flagType = 5;

  protected $flagType_;
  public function resetFlagType() { unset($this->flagType_); }
  public function clearFlagType() { unset($this->flagType_); }
  public function hasFlagType() { return isset($this->flagType_); }
  public function getFlagType() { return $this->flagType_; }
  public function setFlagType($value) { $this->flagType_ = (string)$value; }
  
  // optional string flagMessage = 6;

  protected $flagMessage_;
  public function resetFlagMessage() { unset($this->flagMessage_); }
  public function clearFlagMessage() { unset($this->flagMessage_); }
  public function hasFlagMessage() { return isset($this->flagMessage_); }
  public function getFlagMessage() { return $this->flagMessage_; }
  public function setFlagMessage($value) { $this->flagMessage_ = (string)$value; }
  
  // optional bool nonFlagFlow = 7;

  protected $nonFlagFlow_;
  public function resetNonFlagFlow() { unset($this->nonFlagFlow_); }
  public function clearNonFlagFlow() { unset($this->nonFlagFlow_); }
  public function hasNonFlagFlow() { return isset($this->nonFlagFlow_); }
  public function getNonFlagFlow() { return $this->nonFlagFlow_; }
  public function setNonFlagFlow($value) { $this->nonFlagFlow_ = (bool)$value; }
  
  // @@protoc_insertion_point(class_scope:ModifyCommentRequestProto)
}

// message ModifyCommentResponseProto
class ModifyCommentResponseProto {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("ModifyCommentResponseProto: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  public function size() {
    $size = 0;
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown);
  }
  
  // @@protoc_insertion_point(class_scope:ModifyCommentResponseProto)
}

// message PaypalCountryInfoProto
class PaypalCountryInfoProto {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("PaypalCountryInfoProto: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->birthDateRequired_ = $tmp > 0 ? true : false;
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->tosText_ = $tmp;
          $limit-=$len;
          break;
        case 3:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->billingAgreementText_ = $tmp;
          $limit-=$len;
          break;
        case 4:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->preTosText_ = $tmp;
          $limit-=$len;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->birthDateRequired_)) {
      fwrite($fp, "\x08");
      Protobuf::write_varint($fp, (int)$this->birthDateRequired_ ? 1 : 0);
    }
    if (!is_null($this->tosText_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, strlen((string)$this->tosText_));
      fwrite($fp, (string)$this->tosText_);
    }
    if (!is_null($this->billingAgreementText_)) {
      fwrite($fp, "\x1a");
      Protobuf::write_varint($fp, strlen((string)$this->billingAgreementText_));
      fwrite($fp, (string)$this->billingAgreementText_);
    }
    if (!is_null($this->preTosText_)) {
      fwrite($fp, "\"");
      Protobuf::write_varint($fp, strlen((string)$this->preTosText_));
      fwrite($fp, (string)$this->preTosText_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->birthDateRequired_)) {
      $size += 2;
    }
    if (!is_null($this->tosText_)) {
      $l = strlen((string)$this->tosText_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->billingAgreementText_)) {
      $l = strlen((string)$this->billingAgreementText_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->preTosText_)) {
      $l = strlen((string)$this->preTosText_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('birthDateRequired_', $this->birthDateRequired_)
         . Protobuf::toString('tosText_', $this->tosText_)
         . Protobuf::toString('billingAgreementText_', $this->billingAgreementText_)
         . Protobuf::toString('preTosText_', $this->preTosText_);
  }
  
  // optional bool birthDateRequired = 1;

  protected $birthDateRequired_;
  public function resetBirthDateRequired() { unset($this->birthDateRequired_); }
  public function clearBirthDateRequired() { unset($this->birthDateRequired_); }
  public function hasBirthDateRequired() { return isset($this->birthDateRequired_); }
  public function getBirthDateRequired() { return $this->birthDateRequired_; }
  public function setBirthDateRequired($value) { $this->birthDateRequired_ = (bool)$value; }
  
  // optional string tosText = 2;

  protected $tosText_;
  public function resetTosText() { unset($this->tosText_); }
  public function clearTosText() { unset($this->tosText_); }
  public function hasTosText() { return isset($this->tosText_); }
  public function getTosText() { return $this->tosText_; }
  public function setTosText($value) { $this->tosText_ = (string)$value; }
  
  // optional string billingAgreementText = 3;

  protected $billingAgreementText_;
  public function resetBillingAgreementText() { unset($this->billingAgreementText_); }
  public function clearBillingAgreementText() { unset($this->billingAgreementText_); }
  public function hasBillingAgreementText() { return isset($this->billingAgreementText_); }
  public function getBillingAgreementText() { return $this->billingAgreementText_; }
  public function setBillingAgreementText($value) { $this->billingAgreementText_ = (string)$value; }
  
  // optional string preTosText = 4;

  protected $preTosText_;
  public function resetPreTosText() { unset($this->preTosText_); }
  public function clearPreTosText() { unset($this->preTosText_); }
  public function hasPreTosText() { return isset($this->preTosText_); }
  public function getPreTosText() { return $this->preTosText_; }
  public function setPreTosText($value) { $this->preTosText_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:PaypalCountryInfoProto)
}

// message PaypalCreateAccountRequestProto
class PaypalCreateAccountRequestProto {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("PaypalCreateAccountRequestProto: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->firstName_ = $tmp;
          $limit-=$len;
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->lastName_ = $tmp;
          $limit-=$len;
          break;
        case 3:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->address_ = new AddressProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 4:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->birthDate_ = $tmp;
          $limit-=$len;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->firstName_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, strlen((string)$this->firstName_));
      fwrite($fp, (string)$this->firstName_);
    }
    if (!is_null($this->lastName_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, strlen((string)$this->lastName_));
      fwrite($fp, (string)$this->lastName_);
    }
    if (!is_null($this->address_)) {
      fwrite($fp, "\x1a");
      Protobuf::write_varint($fp, $this->address_->size()); // message
      $this->address_->write($fp);
    }
    if (!is_null($this->birthDate_)) {
      fwrite($fp, "\"");
      Protobuf::write_varint($fp, strlen((string)$this->birthDate_));
      fwrite($fp, (string)$this->birthDate_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->firstName_)) {
      $l = strlen((string)$this->firstName_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->lastName_)) {
      $l = strlen((string)$this->lastName_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->address_)) {
      $l = $this->address_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->birthDate_)) {
      $l = strlen((string)$this->birthDate_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('firstName_', $this->firstName_)
         . Protobuf::toString('lastName_', $this->lastName_)
         . Protobuf::toString('address_', $this->address_)
         . Protobuf::toString('birthDate_', $this->birthDate_);
  }
  
  // optional string firstName = 1;

  protected $firstName_;
  public function resetFirstName() { unset($this->firstName_); }
  public function clearFirstName() { unset($this->firstName_); }
  public function hasFirstName() { return isset($this->firstName_); }
  public function getFirstName() { return $this->firstName_; }
  public function setFirstName($value) { $this->firstName_ = (string)$value; }
  
  // optional string lastName = 2;

  protected $lastName_;
  public function resetLastName() { unset($this->lastName_); }
  public function clearLastName() { unset($this->lastName_); }
  public function hasLastName() { return isset($this->lastName_); }
  public function getLastName() { return $this->lastName_; }
  public function setLastName($value) { $this->lastName_ = (string)$value; }
  
  // optional .AddressProto address = 3;

  protected $address_;
  public function resetAddress() { unset($this->address_); }
  public function clearAddress() { unset($this->address_); }
  public function hasAddress() { return isset($this->address_); }
  public function getAddress() { return $this->address_; }
  public function setAddress(AddressProto $value) { $this->address_ = $value; }
  
  // optional string birthDate = 4;

  protected $birthDate_;
  public function resetBirthDate() { unset($this->birthDate_); }
  public function clearBirthDate() { unset($this->birthDate_); }
  public function hasBirthDate() { return isset($this->birthDate_); }
  public function getBirthDate() { return $this->birthDate_; }
  public function setBirthDate($value) { $this->birthDate_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:PaypalCreateAccountRequestProto)
}

// message PaypalCreateAccountResponseProto
class PaypalCreateAccountResponseProto {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("PaypalCreateAccountResponseProto: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->createAccountKey_ = $tmp;
          $limit-=$len;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->createAccountKey_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, strlen((string)$this->createAccountKey_));
      fwrite($fp, (string)$this->createAccountKey_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->createAccountKey_)) {
      $l = strlen((string)$this->createAccountKey_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('createAccountKey_', $this->createAccountKey_);
  }
  
  // optional string createAccountKey = 1;

  protected $createAccountKey_;
  public function resetCreateAccountKey() { unset($this->createAccountKey_); }
  public function clearCreateAccountKey() { unset($this->createAccountKey_); }
  public function hasCreateAccountKey() { return isset($this->createAccountKey_); }
  public function getCreateAccountKey() { return $this->createAccountKey_; }
  public function setCreateAccountKey($value) { $this->createAccountKey_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:PaypalCreateAccountResponseProto)
}

// message PaypalCredentialsProto
class PaypalCredentialsProto {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("PaypalCredentialsProto: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->preapprovalKey_ = $tmp;
          $limit-=$len;
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->paypalEmail_ = $tmp;
          $limit-=$len;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->preapprovalKey_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, strlen((string)$this->preapprovalKey_));
      fwrite($fp, (string)$this->preapprovalKey_);
    }
    if (!is_null($this->paypalEmail_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, strlen((string)$this->paypalEmail_));
      fwrite($fp, (string)$this->paypalEmail_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->preapprovalKey_)) {
      $l = strlen((string)$this->preapprovalKey_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->paypalEmail_)) {
      $l = strlen((string)$this->paypalEmail_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('preapprovalKey_', $this->preapprovalKey_)
         . Protobuf::toString('paypalEmail_', $this->paypalEmail_);
  }
  
  // optional string preapprovalKey = 1;

  protected $preapprovalKey_;
  public function resetPreapprovalKey() { unset($this->preapprovalKey_); }
  public function clearPreapprovalKey() { unset($this->preapprovalKey_); }
  public function hasPreapprovalKey() { return isset($this->preapprovalKey_); }
  public function getPreapprovalKey() { return $this->preapprovalKey_; }
  public function setPreapprovalKey($value) { $this->preapprovalKey_ = (string)$value; }
  
  // optional string paypalEmail = 2;

  protected $paypalEmail_;
  public function resetPaypalEmail() { unset($this->paypalEmail_); }
  public function clearPaypalEmail() { unset($this->paypalEmail_); }
  public function hasPaypalEmail() { return isset($this->paypalEmail_); }
  public function getPaypalEmail() { return $this->paypalEmail_; }
  public function setPaypalEmail($value) { $this->paypalEmail_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:PaypalCredentialsProto)
}

// message PaypalMassageAddressRequestProto
class PaypalMassageAddressRequestProto {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("PaypalMassageAddressRequestProto: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->address_ = new AddressProto($fp, $len);
          ASSERT('$len == 0');
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->address_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, $this->address_->size()); // message
      $this->address_->write($fp);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->address_)) {
      $l = $this->address_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('address_', $this->address_);
  }
  
  // optional .AddressProto address = 1;

  protected $address_;
  public function resetAddress() { unset($this->address_); }
  public function clearAddress() { unset($this->address_); }
  public function hasAddress() { return isset($this->address_); }
  public function getAddress() { return $this->address_; }
  public function setAddress(AddressProto $value) { $this->address_ = $value; }
  
  // @@protoc_insertion_point(class_scope:PaypalMassageAddressRequestProto)
}

// message PaypalMassageAddressResponseProto
class PaypalMassageAddressResponseProto {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("PaypalMassageAddressResponseProto: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->address_ = new AddressProto($fp, $len);
          ASSERT('$len == 0');
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->address_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, $this->address_->size()); // message
      $this->address_->write($fp);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->address_)) {
      $l = $this->address_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('address_', $this->address_);
  }
  
  // optional .AddressProto address = 1;

  protected $address_;
  public function resetAddress() { unset($this->address_); }
  public function clearAddress() { unset($this->address_); }
  public function hasAddress() { return isset($this->address_); }
  public function getAddress() { return $this->address_; }
  public function setAddress(AddressProto $value) { $this->address_ = $value; }
  
  // @@protoc_insertion_point(class_scope:PaypalMassageAddressResponseProto)
}

// message PaypalPreapprovalCredentialsRequestProto
class PaypalPreapprovalCredentialsRequestProto {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("PaypalPreapprovalCredentialsRequestProto: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->gaiaAuthToken_ = $tmp;
          $limit-=$len;
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->billingInstrumentId_ = $tmp;
          $limit-=$len;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->gaiaAuthToken_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, strlen((string)$this->gaiaAuthToken_));
      fwrite($fp, (string)$this->gaiaAuthToken_);
    }
    if (!is_null($this->billingInstrumentId_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, strlen((string)$this->billingInstrumentId_));
      fwrite($fp, (string)$this->billingInstrumentId_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->gaiaAuthToken_)) {
      $l = strlen((string)$this->gaiaAuthToken_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->billingInstrumentId_)) {
      $l = strlen((string)$this->billingInstrumentId_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('gaiaAuthToken_', $this->gaiaAuthToken_)
         . Protobuf::toString('billingInstrumentId_', $this->billingInstrumentId_);
  }
  
  // optional string gaiaAuthToken = 1;

  protected $gaiaAuthToken_;
  public function resetGaiaAuthToken() { unset($this->gaiaAuthToken_); }
  public function clearGaiaAuthToken() { unset($this->gaiaAuthToken_); }
  public function hasGaiaAuthToken() { return isset($this->gaiaAuthToken_); }
  public function getGaiaAuthToken() { return $this->gaiaAuthToken_; }
  public function setGaiaAuthToken($value) { $this->gaiaAuthToken_ = (string)$value; }
  
  // optional string billingInstrumentId = 2;

  protected $billingInstrumentId_;
  public function resetBillingInstrumentId() { unset($this->billingInstrumentId_); }
  public function clearBillingInstrumentId() { unset($this->billingInstrumentId_); }
  public function hasBillingInstrumentId() { return isset($this->billingInstrumentId_); }
  public function getBillingInstrumentId() { return $this->billingInstrumentId_; }
  public function setBillingInstrumentId($value) { $this->billingInstrumentId_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:PaypalPreapprovalCredentialsRequestProto)
}

// message PaypalPreapprovalCredentialsResponseProto
class PaypalPreapprovalCredentialsResponseProto {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("PaypalPreapprovalCredentialsResponseProto: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->resultCode_ = $tmp;
          
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->paypalAccountKey_ = $tmp;
          $limit-=$len;
          break;
        case 3:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->paypalEmail_ = $tmp;
          $limit-=$len;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->resultCode_)) {
      fwrite($fp, "\x08");
      Protobuf::write_varint($fp, (int)$this->resultCode_);
    }
    if (!is_null($this->paypalAccountKey_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, strlen((string)$this->paypalAccountKey_));
      fwrite($fp, (string)$this->paypalAccountKey_);
    }
    if (!is_null($this->paypalEmail_)) {
      fwrite($fp, "\x1a");
      Protobuf::write_varint($fp, strlen((string)$this->paypalEmail_));
      fwrite($fp, (string)$this->paypalEmail_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->resultCode_)) {
      $size += 1 + Protobuf::size_varint($this->resultCode_);
    }
    if (!is_null($this->paypalAccountKey_)) {
      $l = strlen((string)$this->paypalAccountKey_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->paypalEmail_)) {
      $l = strlen((string)$this->paypalEmail_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('resultCode_', $this->resultCode_)
         . Protobuf::toString('paypalAccountKey_', $this->paypalAccountKey_)
         . Protobuf::toString('paypalEmail_', $this->paypalEmail_);
  }
  
  // optional int32 resultCode = 1;

  protected $resultCode_;
  public function resetResultCode() { unset($this->resultCode_); }
  public function clearResultCode() { unset($this->resultCode_); }
  public function hasResultCode() { return isset($this->resultCode_); }
  public function getResultCode() { return $this->resultCode_; }
  public function setResultCode($value) { $this->resultCode_ = (string)$value; }
  
  // optional string paypalAccountKey = 2;

  protected $paypalAccountKey_;
  public function resetPaypalAccountKey() { unset($this->paypalAccountKey_); }
  public function clearPaypalAccountKey() { unset($this->paypalAccountKey_); }
  public function hasPaypalAccountKey() { return isset($this->paypalAccountKey_); }
  public function getPaypalAccountKey() { return $this->paypalAccountKey_; }
  public function setPaypalAccountKey($value) { $this->paypalAccountKey_ = (string)$value; }
  
  // optional string paypalEmail = 3;

  protected $paypalEmail_;
  public function resetPaypalEmail() { unset($this->paypalEmail_); }
  public function clearPaypalEmail() { unset($this->paypalEmail_); }
  public function hasPaypalEmail() { return isset($this->paypalEmail_); }
  public function getPaypalEmail() { return $this->paypalEmail_; }
  public function setPaypalEmail($value) { $this->paypalEmail_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:PaypalPreapprovalCredentialsResponseProto)
}

// message PaypalPreapprovalDetailsRequestProto
class PaypalPreapprovalDetailsRequestProto {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("PaypalPreapprovalDetailsRequestProto: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->getAddress_ = $tmp > 0 ? true : false;
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->preapprovalKey_ = $tmp;
          $limit-=$len;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->getAddress_)) {
      fwrite($fp, "\x08");
      Protobuf::write_varint($fp, (int)$this->getAddress_ ? 1 : 0);
    }
    if (!is_null($this->preapprovalKey_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, strlen((string)$this->preapprovalKey_));
      fwrite($fp, (string)$this->preapprovalKey_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->getAddress_)) {
      $size += 2;
    }
    if (!is_null($this->preapprovalKey_)) {
      $l = strlen((string)$this->preapprovalKey_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('getAddress_', $this->getAddress_)
         . Protobuf::toString('preapprovalKey_', $this->preapprovalKey_);
  }
  
  // optional bool getAddress = 1;

  protected $getAddress_;
  public function resetGetAddress() { unset($this->getAddress_); }
  public function clearGetAddress() { unset($this->getAddress_); }
  public function hasGetAddress() { return isset($this->getAddress_); }
  public function getGetAddress() { return $this->getAddress_; }
  public function setGetAddress($value) { $this->getAddress_ = (bool)$value; }
  
  // optional string preapprovalKey = 2;

  protected $preapprovalKey_;
  public function resetPreapprovalKey() { unset($this->preapprovalKey_); }
  public function clearPreapprovalKey() { unset($this->preapprovalKey_); }
  public function hasPreapprovalKey() { return isset($this->preapprovalKey_); }
  public function getPreapprovalKey() { return $this->preapprovalKey_; }
  public function setPreapprovalKey($value) { $this->preapprovalKey_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:PaypalPreapprovalDetailsRequestProto)
}

// message PaypalPreapprovalDetailsResponseProto
class PaypalPreapprovalDetailsResponseProto {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("PaypalPreapprovalDetailsResponseProto: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->paypalEmail_ = $tmp;
          $limit-=$len;
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->address_ = new AddressProto($fp, $len);
          ASSERT('$len == 0');
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->paypalEmail_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, strlen((string)$this->paypalEmail_));
      fwrite($fp, (string)$this->paypalEmail_);
    }
    if (!is_null($this->address_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, $this->address_->size()); // message
      $this->address_->write($fp);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->paypalEmail_)) {
      $l = strlen((string)$this->paypalEmail_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->address_)) {
      $l = $this->address_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('paypalEmail_', $this->paypalEmail_)
         . Protobuf::toString('address_', $this->address_);
  }
  
  // optional string paypalEmail = 1;

  protected $paypalEmail_;
  public function resetPaypalEmail() { unset($this->paypalEmail_); }
  public function clearPaypalEmail() { unset($this->paypalEmail_); }
  public function hasPaypalEmail() { return isset($this->paypalEmail_); }
  public function getPaypalEmail() { return $this->paypalEmail_; }
  public function setPaypalEmail($value) { $this->paypalEmail_ = (string)$value; }
  
  // optional .AddressProto address = 2;

  protected $address_;
  public function resetAddress() { unset($this->address_); }
  public function clearAddress() { unset($this->address_); }
  public function hasAddress() { return isset($this->address_); }
  public function getAddress() { return $this->address_; }
  public function setAddress(AddressProto $value) { $this->address_ = $value; }
  
  // @@protoc_insertion_point(class_scope:PaypalPreapprovalDetailsResponseProto)
}

// message PaypalPreapprovalRequestProto
class PaypalPreapprovalRequestProto {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("PaypalPreapprovalRequestProto: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  public function size() {
    $size = 0;
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown);
  }
  
  // @@protoc_insertion_point(class_scope:PaypalPreapprovalRequestProto)
}

// message PaypalPreapprovalResponseProto
class PaypalPreapprovalResponseProto {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("PaypalPreapprovalResponseProto: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->preapprovalKey_ = $tmp;
          $limit-=$len;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->preapprovalKey_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, strlen((string)$this->preapprovalKey_));
      fwrite($fp, (string)$this->preapprovalKey_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->preapprovalKey_)) {
      $l = strlen((string)$this->preapprovalKey_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('preapprovalKey_', $this->preapprovalKey_);
  }
  
  // optional string preapprovalKey = 1;

  protected $preapprovalKey_;
  public function resetPreapprovalKey() { unset($this->preapprovalKey_); }
  public function clearPreapprovalKey() { unset($this->preapprovalKey_); }
  public function hasPreapprovalKey() { return isset($this->preapprovalKey_); }
  public function getPreapprovalKey() { return $this->preapprovalKey_; }
  public function setPreapprovalKey($value) { $this->preapprovalKey_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:PaypalPreapprovalResponseProto)
}

// message PendingNotificationsProto
class PendingNotificationsProto {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("PendingNotificationsProto: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->notification_[] = new DataMessageProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 2:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->nextCheckMillis_ = $tmp;
          
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->notification_))
      foreach($this->notification_ as $v) {
        fwrite($fp, "\x0a");
        Protobuf::write_varint($fp, $v->size()); // message
        $v->write($fp);
      }
    if (!is_null($this->nextCheckMillis_)) {
      fwrite($fp, "\x10");
      Protobuf::write_varint($fp, (int)$this->nextCheckMillis_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->notification_))
      foreach($this->notification_ as $v) {
        $l = $v->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
    if (!is_null($this->nextCheckMillis_)) {
      $size += 1 + Protobuf::size_varint($this->nextCheckMillis_);
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('notification_', $this->notification_)
         . Protobuf::toString('nextCheckMillis_', $this->nextCheckMillis_);
  }
  
  // repeated .DataMessageProto notification = 1;

  protected $notification_ = array();
  public function clearNotification() { $this->notification_ = array(); }
  public function getNotificationCount() { return count($this->notification_); }
  public function hasNotification() { return (count($this->notification_) > 0); }
  public function indexOfNotification($value) { return array_search($value,$this->notification_);}
  public function removeNotification($index) { unset($this->notification_[$index]); }
  public function removeValNotification($value) { $idx = array_search($value,$this->notification_); if($idx !== FALSE){unset($this->notification_[$idx]); }}
  public function removeValsNotification($values) { foreach($values as $value){$idx = array_search($value,$this->notification_); if($idx !== FALSE){unset($this->notification_[$idx]); }}}
  public function pushNotification($newvar) { return array_push($this->notification_,$newvar); }
  public function popNotification() { return array_pop($this->notification_); }
  public function shiftNotification() { return array_shift($this->notification_); }
  public function unshiftNotification($newvar) { return array_unshift($this->notification_,$newvar); }
  public function getNotification($index) { return $this->notification_[$index]; }
  public function getNotificationArray() { return $this->notification_; }
  public function setNotification($index, $value) {$this->notification_[$index] = $value;	}
  public function addNotification($value) { $this->notification_[] = $value; }
  public function addAllNotification(array $values) { foreach($values as $value) {$this->notification_[] = $value;} }
  
  // optional int64 nextCheckMillis = 2;

  protected $nextCheckMillis_;
  public function resetNextCheckMillis() { unset($this->nextCheckMillis_); }
  public function clearNextCheckMillis() { unset($this->nextCheckMillis_); }
  public function hasNextCheckMillis() { return isset($this->nextCheckMillis_); }
  public function getNextCheckMillis() { return $this->nextCheckMillis_; }
  public function setNextCheckMillis($value) { $this->nextCheckMillis_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:PendingNotificationsProto)
}

// message PrefetchedBundleProto
class PrefetchedBundleProto {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("PrefetchedBundleProto: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->request_ = new SingleRequestProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->response_ = new SingleResponseProto($fp, $len);
          ASSERT('$len == 0');
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->request_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, $this->request_->size()); // message
      $this->request_->write($fp);
    }
    if (!is_null($this->response_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, $this->response_->size()); // message
      $this->response_->write($fp);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->request_)) {
      $l = $this->request_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->response_)) {
      $l = $this->response_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('request_', $this->request_)
         . Protobuf::toString('response_', $this->response_);
  }
  
  // optional .SingleRequestProto request = 1;

  protected $request_;
  public function resetRequest() { unset($this->request_); }
  public function clearRequest() { unset($this->request_); }
  public function hasRequest() { return isset($this->request_); }
  public function getRequest() { return $this->request_; }
  public function setRequest(SingleRequestProto $value) { $this->request_ = $value; }
  
  // optional .SingleResponseProto response = 2;

  protected $response_;
  public function resetResponse() { unset($this->response_); }
  public function clearResponse() { unset($this->response_); }
  public function hasResponse() { return isset($this->response_); }
  public function getResponse() { return $this->response_; }
  public function setResponse(SingleResponseProto $value) { $this->response_ = $value; }
  
  // @@protoc_insertion_point(class_scope:PrefetchedBundleProto)
}

// message PurchaseCartInfoProto
class PurchaseCartInfoProto {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("PurchaseCartInfoProto: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->itemPrice_ = $tmp;
          $limit-=$len;
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->taxInclusive_ = $tmp;
          $limit-=$len;
          break;
        case 3:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->taxExclusive_ = $tmp;
          $limit-=$len;
          break;
        case 4:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->total_ = $tmp;
          $limit-=$len;
          break;
        case 5:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->taxMessage_ = $tmp;
          $limit-=$len;
          break;
        case 6:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->footerMessage_ = $tmp;
          $limit-=$len;
          break;
        case 7:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->priceCurrency_ = $tmp;
          $limit-=$len;
          break;
        case 8:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->priceMicros_ = $tmp;
          
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->itemPrice_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, strlen((string)$this->itemPrice_));
      fwrite($fp, (string)$this->itemPrice_);
    }
    if (!is_null($this->taxInclusive_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, strlen((string)$this->taxInclusive_));
      fwrite($fp, (string)$this->taxInclusive_);
    }
    if (!is_null($this->taxExclusive_)) {
      fwrite($fp, "\x1a");
      Protobuf::write_varint($fp, strlen((string)$this->taxExclusive_));
      fwrite($fp, (string)$this->taxExclusive_);
    }
    if (!is_null($this->total_)) {
      fwrite($fp, "\"");
      Protobuf::write_varint($fp, strlen((string)$this->total_));
      fwrite($fp, (string)$this->total_);
    }
    if (!is_null($this->taxMessage_)) {
      fwrite($fp, "*");
      Protobuf::write_varint($fp, strlen((string)$this->taxMessage_));
      fwrite($fp, (string)$this->taxMessage_);
    }
    if (!is_null($this->footerMessage_)) {
      fwrite($fp, "2");
      Protobuf::write_varint($fp, strlen((string)$this->footerMessage_));
      fwrite($fp, (string)$this->footerMessage_);
    }
    if (!is_null($this->priceCurrency_)) {
      fwrite($fp, ":");
      Protobuf::write_varint($fp, strlen((string)$this->priceCurrency_));
      fwrite($fp, (string)$this->priceCurrency_);
    }
    if (!is_null($this->priceMicros_)) {
      fwrite($fp, "@");
      Protobuf::write_varint($fp, (int)$this->priceMicros_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->itemPrice_)) {
      $l = strlen((string)$this->itemPrice_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->taxInclusive_)) {
      $l = strlen((string)$this->taxInclusive_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->taxExclusive_)) {
      $l = strlen((string)$this->taxExclusive_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->total_)) {
      $l = strlen((string)$this->total_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->taxMessage_)) {
      $l = strlen((string)$this->taxMessage_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->footerMessage_)) {
      $l = strlen((string)$this->footerMessage_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->priceCurrency_)) {
      $l = strlen((string)$this->priceCurrency_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->priceMicros_)) {
      $size += 1 + Protobuf::size_varint($this->priceMicros_);
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('itemPrice_', $this->itemPrice_)
         . Protobuf::toString('taxInclusive_', $this->taxInclusive_)
         . Protobuf::toString('taxExclusive_', $this->taxExclusive_)
         . Protobuf::toString('total_', $this->total_)
         . Protobuf::toString('taxMessage_', $this->taxMessage_)
         . Protobuf::toString('footerMessage_', $this->footerMessage_)
         . Protobuf::toString('priceCurrency_', $this->priceCurrency_)
         . Protobuf::toString('priceMicros_', $this->priceMicros_);
  }
  
  // optional string itemPrice = 1;

  protected $itemPrice_;
  public function resetItemPrice() { unset($this->itemPrice_); }
  public function clearItemPrice() { unset($this->itemPrice_); }
  public function hasItemPrice() { return isset($this->itemPrice_); }
  public function getItemPrice() { return $this->itemPrice_; }
  public function setItemPrice($value) { $this->itemPrice_ = (string)$value; }
  
  // optional string taxInclusive = 2;

  protected $taxInclusive_;
  public function resetTaxInclusive() { unset($this->taxInclusive_); }
  public function clearTaxInclusive() { unset($this->taxInclusive_); }
  public function hasTaxInclusive() { return isset($this->taxInclusive_); }
  public function getTaxInclusive() { return $this->taxInclusive_; }
  public function setTaxInclusive($value) { $this->taxInclusive_ = (string)$value; }
  
  // optional string taxExclusive = 3;

  protected $taxExclusive_;
  public function resetTaxExclusive() { unset($this->taxExclusive_); }
  public function clearTaxExclusive() { unset($this->taxExclusive_); }
  public function hasTaxExclusive() { return isset($this->taxExclusive_); }
  public function getTaxExclusive() { return $this->taxExclusive_; }
  public function setTaxExclusive($value) { $this->taxExclusive_ = (string)$value; }
  
  // optional string total = 4;

  protected $total_;
  public function resetTotal() { unset($this->total_); }
  public function clearTotal() { unset($this->total_); }
  public function hasTotal() { return isset($this->total_); }
  public function getTotal() { return $this->total_; }
  public function setTotal($value) { $this->total_ = (string)$value; }
  
  // optional string taxMessage = 5;

  protected $taxMessage_;
  public function resetTaxMessage() { unset($this->taxMessage_); }
  public function clearTaxMessage() { unset($this->taxMessage_); }
  public function hasTaxMessage() { return isset($this->taxMessage_); }
  public function getTaxMessage() { return $this->taxMessage_; }
  public function setTaxMessage($value) { $this->taxMessage_ = (string)$value; }
  
  // optional string footerMessage = 6;

  protected $footerMessage_;
  public function resetFooterMessage() { unset($this->footerMessage_); }
  public function clearFooterMessage() { unset($this->footerMessage_); }
  public function hasFooterMessage() { return isset($this->footerMessage_); }
  public function getFooterMessage() { return $this->footerMessage_; }
  public function setFooterMessage($value) { $this->footerMessage_ = (string)$value; }
  
  // optional string priceCurrency = 7;

  protected $priceCurrency_;
  public function resetPriceCurrency() { unset($this->priceCurrency_); }
  public function clearPriceCurrency() { unset($this->priceCurrency_); }
  public function hasPriceCurrency() { return isset($this->priceCurrency_); }
  public function getPriceCurrency() { return $this->priceCurrency_; }
  public function setPriceCurrency($value) { $this->priceCurrency_ = (string)$value; }
  
  // optional int64 priceMicros = 8;

  protected $priceMicros_;
  public function resetPriceMicros() { unset($this->priceMicros_); }
  public function clearPriceMicros() { unset($this->priceMicros_); }
  public function hasPriceMicros() { return isset($this->priceMicros_); }
  public function getPriceMicros() { return $this->priceMicros_; }
  public function setPriceMicros($value) { $this->priceMicros_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:PurchaseCartInfoProto)
}



// group PurchaseInfoProto.BillingInstruments.BillingInstrument
class PurchaseInfoProto_BillingInstruments_BillingInstrument {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("PurchaseInfoProto_BillingInstruments_BillingInstrument: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 4:
          ASSERT('$wire == 4');
          break 2;
        case 5:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->id_ = $tmp;
          $limit-=$len;
          break;
        case 6:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->name_ = $tmp;
          $limit-=$len;
          break;
        case 7:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->isInvalid_ = $tmp > 0 ? true : false;
          break;
        case 11:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->instrumentType_ = $tmp;
          
          break;
        case 14:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->instrumentStatus_ = $tmp;
          
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->id_)) {
      fwrite($fp, "*");
      Protobuf::write_varint($fp, strlen((string)$this->id_));
      fwrite($fp, (string)$this->id_);
    }
    if (!is_null($this->name_)) {
      fwrite($fp, "2");
      Protobuf::write_varint($fp, strlen((string)$this->name_));
      fwrite($fp, (string)$this->name_);
    }
    if (!is_null($this->isInvalid_)) {
      fwrite($fp, "8");
      Protobuf::write_varint($fp, (int)$this->isInvalid_ ? 1 : 0);
    }
    if (!is_null($this->instrumentType_)) {
      fwrite($fp, "X");
      Protobuf::write_varint($fp, (int)$this->instrumentType_);
    }
    if (!is_null($this->instrumentStatus_)) {
      fwrite($fp, "p");
      Protobuf::write_varint($fp, (int)$this->instrumentStatus_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->id_)) {
      $l = strlen((string)$this->id_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->name_)) {
      $l = strlen((string)$this->name_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->isInvalid_)) {
      $size += 2;
    }
    if (!is_null($this->instrumentType_)) {
      $size += 1 + Protobuf::size_varint($this->instrumentType_);
    }
    if (!is_null($this->instrumentStatus_)) {
      $size += 1 + Protobuf::size_varint($this->instrumentStatus_);
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('id_', $this->id_)
         . Protobuf::toString('name_', $this->name_)
         . Protobuf::toString('isInvalid_', $this->isInvalid_)
         . Protobuf::toString('instrumentType_', $this->instrumentType_)
         . Protobuf::toString('instrumentStatus_', $this->instrumentStatus_);
  }
  
  // optional string id = 5;

  protected $id_;
  public function resetId() { unset($this->id_); }
  public function clearId() { unset($this->id_); }
  public function hasId() { return isset($this->id_); }
  public function getId() { return $this->id_; }
  public function setId($value) { $this->id_ = (string)$value; }
  
  // optional string name = 6;

  protected $name_;
  public function resetName() { unset($this->name_); }
  public function clearName() { unset($this->name_); }
  public function hasName() { return isset($this->name_); }
  public function getName() { return $this->name_; }
  public function setName($value) { $this->name_ = (string)$value; }
  
  // optional bool isInvalid = 7;

  protected $isInvalid_;
  public function resetIsInvalid() { unset($this->isInvalid_); }
  public function clearIsInvalid() { unset($this->isInvalid_); }
  public function hasIsInvalid() { return isset($this->isInvalid_); }
  public function getIsInvalid() { return $this->isInvalid_; }
  public function setIsInvalid($value) { $this->isInvalid_ = (bool)$value; }
  
  // optional int32 instrumentType = 11;

  protected $instrumentType_;
  public function resetInstrumentType() { unset($this->instrumentType_); }
  public function clearInstrumentType() { unset($this->instrumentType_); }
  public function hasInstrumentType() { return isset($this->instrumentType_); }
  public function getInstrumentType() { return $this->instrumentType_; }
  public function setInstrumentType($value) { $this->instrumentType_ = (string)$value; }
  
  // optional int32 instrumentStatus = 14;

  protected $instrumentStatus_;
  public function resetInstrumentStatus() { unset($this->instrumentStatus_); }
  public function clearInstrumentStatus() { unset($this->instrumentStatus_); }
  public function hasInstrumentStatus() { return isset($this->instrumentStatus_); }
  public function getInstrumentStatus() { return $this->instrumentStatus_; }
  public function setInstrumentStatus($value) { $this->instrumentStatus_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:PurchaseInfoProto.BillingInstruments.BillingInstrument)
}

// group PurchaseInfoProto.BillingInstruments
class PurchaseInfoProto_BillingInstruments {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("PurchaseInfoProto_BillingInstruments: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 3:
          ASSERT('$wire == 4');
          break 2;
        case 4:
          ASSERT('$wire == 3');
          $this->billinginstrument_[] = new PurchaseInfoProto_BillingInstruments_BillingInstrument($fp, $limit);
          break;
        case 8:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->defaultBillingInstrumentId_ = $tmp;
          $limit-=$len;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->billinginstrument_))
      foreach($this->billinginstrument_ as $v) {
        fwrite($fp, "#");
        $v->write($fp); // group
        fwrite($fp, "$");
      }
    if (!is_null($this->defaultBillingInstrumentId_)) {
      fwrite($fp, "B");
      Protobuf::write_varint($fp, strlen((string)$this->defaultBillingInstrumentId_));
      fwrite($fp, (string)$this->defaultBillingInstrumentId_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->billinginstrument_))
      foreach($this->billinginstrument_ as $v) {
        $size += 2 + $v->size();
      }
    if (!is_null($this->defaultBillingInstrumentId_)) {
      $l = strlen((string)$this->defaultBillingInstrumentId_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('billinginstrument_', $this->billinginstrument_)
         . Protobuf::toString('defaultBillingInstrumentId_', $this->defaultBillingInstrumentId_);
  }
  
  // repeated group BillingInstrument = 4
  protected $billinginstrument_ = array();
  public function clearBillinginstrument() { $this->billinginstrument_ = array(); }
  public function getBillinginstrumentCount() { return count($this->billinginstrument_); }
  public function hasBillinginstrument() { return (count($this->billinginstrument_) > 0); }
  public function indexOfBillinginstrument($value) { return array_search($value,$this->billinginstrument_);}
  public function removeBillinginstrument($index) { unset($this->billinginstrument_[$index]); }
  public function removeValBillinginstrument($value) { $idx = array_search($value,$this->billinginstrument_); if($idx !== FALSE){unset($this->billinginstrument_[$idx]); }}
  public function removeValsBillinginstrument($values) { foreach($values as $value){$idx = array_search($value,$this->billinginstrument_); if($idx !== FALSE){unset($this->billinginstrument_[$idx]); }}}
  public function pushBillinginstrument($newvar) { return array_push($this->billinginstrument_,$newvar); }
  public function popBillinginstrument() { return array_pop($this->billinginstrument_); }
  public function shiftBillinginstrument() { return array_shift($this->billinginstrument_); }
  public function unshiftBillinginstrument($newvar) { return array_unshift($this->billinginstrument_,$newvar); }
  public function getBillinginstrument($index) { return $this->billinginstrument_[$index]; }
  public function getBillinginstrumentArray() { return $this->billinginstrument_; }
  public function setBillinginstrument($index, $value) {$this->billinginstrument_[$index] = $value;	}
  public function addBillinginstrument($value) { $this->billinginstrument_[] = $value; }
  public function addAllBillinginstrument(array $values) { foreach($values as $value) {$this->billinginstrument_[] = $value;} }
  
  // optional string defaultBillingInstrumentId = 8;

  protected $defaultBillingInstrumentId_;
  public function resetDefaultBillingInstrumentId() { unset($this->defaultBillingInstrumentId_); }
  public function clearDefaultBillingInstrumentId() { unset($this->defaultBillingInstrumentId_); }
  public function hasDefaultBillingInstrumentId() { return isset($this->defaultBillingInstrumentId_); }
  public function getDefaultBillingInstrumentId() { return $this->defaultBillingInstrumentId_; }
  public function setDefaultBillingInstrumentId($value) { $this->defaultBillingInstrumentId_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:PurchaseInfoProto.BillingInstruments)
}

// message PurchaseInfoProto
class PurchaseInfoProto {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("PurchaseInfoProto: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->transactionId_ = $tmp;
          $limit-=$len;
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->cartInfo_ = new PurchaseCartInfoProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 3:
          ASSERT('$wire == 3');
          $this->billinginstruments_ = new PurchaseInfoProto_BillingInstruments($fp, $limit);
          break;
        case 9:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->errorInputFields_[] = $tmp;
          
          break;
        case 10:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->refundPolicy_ = $tmp;
          $limit-=$len;
          break;
        case 12:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->userCanAddGdd_ = $tmp > 0 ? true : false;
          break;
        case 13:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->eligibleInstrumentTypes_[] = $tmp;
          
          break;
        case 15:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->orderId_ = $tmp;
          $limit-=$len;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->transactionId_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, strlen((string)$this->transactionId_));
      fwrite($fp, (string)$this->transactionId_);
    }
    if (!is_null($this->cartInfo_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, $this->cartInfo_->size()); // message
      $this->cartInfo_->write($fp);
    }
    if (!is_null($this->billinginstruments_)) {
      fwrite($fp, "\x1b");
      $this->billinginstruments_->write($fp); // group
      fwrite($fp, "\x1c");
    }
    if (!is_null($this->errorInputFields_))
      foreach($this->errorInputFields_ as $v) {
        fwrite($fp, "H");
        Protobuf::write_varint($fp, (int)$v);
      }
    if (!is_null($this->refundPolicy_)) {
      fwrite($fp, "R");
      Protobuf::write_varint($fp, strlen((string)$this->refundPolicy_));
      fwrite($fp, (string)$this->refundPolicy_);
    }
    if (!is_null($this->userCanAddGdd_)) {
      fwrite($fp, "`");
      Protobuf::write_varint($fp, (int)$this->userCanAddGdd_ ? 1 : 0);
    }
    if (!is_null($this->eligibleInstrumentTypes_))
      foreach($this->eligibleInstrumentTypes_ as $v) {
        fwrite($fp, "h");
        Protobuf::write_varint($fp, (int)$v);
      }
    if (!is_null($this->orderId_)) {
      fwrite($fp, "z");
      Protobuf::write_varint($fp, strlen((string)$this->orderId_));
      fwrite($fp, (string)$this->orderId_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->transactionId_)) {
      $l = strlen((string)$this->transactionId_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->cartInfo_)) {
      $l = $this->cartInfo_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->billinginstruments_)) {
      $size += 2 + $this->billinginstruments_->size();
    }
    if (!is_null($this->errorInputFields_))
      foreach($this->errorInputFields_ as $v) {
        $size += 1 + Protobuf::size_varint($v);
      }
    if (!is_null($this->refundPolicy_)) {
      $l = strlen((string)$this->refundPolicy_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->userCanAddGdd_)) {
      $size += 2;
    }
    if (!is_null($this->eligibleInstrumentTypes_))
      foreach($this->eligibleInstrumentTypes_ as $v) {
        $size += 1 + Protobuf::size_varint($v);
      }
    if (!is_null($this->orderId_)) {
      $l = strlen((string)$this->orderId_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('transactionId_', $this->transactionId_)
         . Protobuf::toString('cartInfo_', $this->cartInfo_)
         . Protobuf::toString('billinginstruments_', $this->billinginstruments_)
         . Protobuf::toString('errorInputFields_', $this->errorInputFields_)
         . Protobuf::toString('refundPolicy_', $this->refundPolicy_)
         . Protobuf::toString('userCanAddGdd_', $this->userCanAddGdd_)
         . Protobuf::toString('eligibleInstrumentTypes_', $this->eligibleInstrumentTypes_)
         . Protobuf::toString('orderId_', $this->orderId_);
  }
  
  // optional string transactionId = 1;

  protected $transactionId_;
  public function resetTransactionId() { unset($this->transactionId_); }
  public function clearTransactionId() { unset($this->transactionId_); }
  public function hasTransactionId() { return isset($this->transactionId_); }
  public function getTransactionId() { return $this->transactionId_; }
  public function setTransactionId($value) { $this->transactionId_ = (string)$value; }
  
  // optional .PurchaseCartInfoProto cartInfo = 2;

  protected $cartInfo_;
  public function resetCartInfo() { unset($this->cartInfo_); }
  public function clearCartInfo() { unset($this->cartInfo_); }
  public function hasCartInfo() { return isset($this->cartInfo_); }
  public function getCartInfo() { return $this->cartInfo_; }
  public function setCartInfo(PurchaseCartInfoProto $value) { $this->cartInfo_ = $value; }
  
  // optional group BillingInstruments = 3
  protected $billinginstruments_;
  public function resetBillinginstruments() { unset($this->billinginstruments_); }
  public function clearBillinginstruments() { unset($this->billinginstruments_); }
  public function hasBillinginstruments() { return isset($this->billinginstruments_); }
  public function getBillinginstruments() { return $this->billinginstruments_; }
  public function setBillinginstruments(PurchaseInfoProto_BillingInstruments $value) { $this->billinginstruments_ = $value; }
  
  // repeated int32 errorInputFields = 9;

  protected $errorInputFields_ = array();
  public function clearErrorInputFields() { $this->errorInputFields_ = array(); }
  public function getErrorInputFieldsCount() { return count($this->errorInputFields_); }
  public function hasErrorInputFields() { return (count($this->errorInputFields_) > 0); }
  public function indexOfErrorInputFields($value) { return array_search($value,$this->errorInputFields_);}
  public function removeErrorInputFields($index) { unset($this->errorInputFields_[$index]); }
  public function removeValErrorInputFields($value) { $idx = array_search($value,$this->errorInputFields_); if($idx !== FALSE){unset($this->errorInputFields_[$idx]); }}
  public function removeValsErrorInputFields($values) { foreach($values as $value){$idx = array_search($value,$this->errorInputFields_); if($idx !== FALSE){unset($this->errorInputFields_[$idx]); }}}
  public function pushErrorInputFields($newvar) { return array_push($this->errorInputFields_,(string)$newvar); }
  public function popErrorInputFields() { return array_pop($this->errorInputFields_); }
  public function shiftErrorInputFields() { return array_shift($this->errorInputFields_); }
  public function unshiftErrorInputFields($newvar) { return array_unshift($this->errorInputFields_,(string)$newvar); }
  public function getErrorInputFields($index) { return $this->errorInputFields_[$index]; }
  public function getErrorInputFieldsArray() { return $this->errorInputFields_; }
  public function setErrorInputFields($index, $value) {$this->errorInputFields_[$index] = (string)$value;	}
  public function addErrorInputFields($value) { $this->errorInputFields_[] = (string)$value; }
  public function addAllErrorInputFields(array $values) { foreach($values as $value) {$this->errorInputFields_[] = (string)$value;} }
  
  // optional string refundPolicy = 10;

  protected $refundPolicy_;
  public function resetRefundPolicy() { unset($this->refundPolicy_); }
  public function clearRefundPolicy() { unset($this->refundPolicy_); }
  public function hasRefundPolicy() { return isset($this->refundPolicy_); }
  public function getRefundPolicy() { return $this->refundPolicy_; }
  public function setRefundPolicy($value) { $this->refundPolicy_ = (string)$value; }
  
  // optional bool userCanAddGdd = 12;

  protected $userCanAddGdd_;
  public function resetUserCanAddGdd() { unset($this->userCanAddGdd_); }
  public function clearUserCanAddGdd() { unset($this->userCanAddGdd_); }
  public function hasUserCanAddGdd() { return isset($this->userCanAddGdd_); }
  public function getUserCanAddGdd() { return $this->userCanAddGdd_; }
  public function setUserCanAddGdd($value) { $this->userCanAddGdd_ = (bool)$value; }
  
  // repeated int32 eligibleInstrumentTypes = 13;

  protected $eligibleInstrumentTypes_ = array();
  public function clearEligibleInstrumentTypes() { $this->eligibleInstrumentTypes_ = array(); }
  public function getEligibleInstrumentTypesCount() { return count($this->eligibleInstrumentTypes_); }
  public function hasEligibleInstrumentTypes() { return (count($this->eligibleInstrumentTypes_) > 0); }
  public function indexOfEligibleInstrumentTypes($value) { return array_search($value,$this->eligibleInstrumentTypes_);}
  public function removeEligibleInstrumentTypes($index) { unset($this->eligibleInstrumentTypes_[$index]); }
  public function removeValEligibleInstrumentTypes($value) { $idx = array_search($value,$this->eligibleInstrumentTypes_); if($idx !== FALSE){unset($this->eligibleInstrumentTypes_[$idx]); }}
  public function removeValsEligibleInstrumentTypes($values) { foreach($values as $value){$idx = array_search($value,$this->eligibleInstrumentTypes_); if($idx !== FALSE){unset($this->eligibleInstrumentTypes_[$idx]); }}}
  public function pushEligibleInstrumentTypes($newvar) { return array_push($this->eligibleInstrumentTypes_,(string)$newvar); }
  public function popEligibleInstrumentTypes() { return array_pop($this->eligibleInstrumentTypes_); }
  public function shiftEligibleInstrumentTypes() { return array_shift($this->eligibleInstrumentTypes_); }
  public function unshiftEligibleInstrumentTypes($newvar) { return array_unshift($this->eligibleInstrumentTypes_,(string)$newvar); }
  public function getEligibleInstrumentTypes($index) { return $this->eligibleInstrumentTypes_[$index]; }
  public function getEligibleInstrumentTypesArray() { return $this->eligibleInstrumentTypes_; }
  public function setEligibleInstrumentTypes($index, $value) {$this->eligibleInstrumentTypes_[$index] = (string)$value;	}
  public function addEligibleInstrumentTypes($value) { $this->eligibleInstrumentTypes_[] = (string)$value; }
  public function addAllEligibleInstrumentTypes(array $values) { foreach($values as $value) {$this->eligibleInstrumentTypes_[] = (string)$value;} }
  
  // optional string orderId = 15;

  protected $orderId_;
  public function resetOrderId() { unset($this->orderId_); }
  public function clearOrderId() { unset($this->orderId_); }
  public function hasOrderId() { return isset($this->orderId_); }
  public function getOrderId() { return $this->orderId_; }
  public function setOrderId($value) { $this->orderId_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:PurchaseInfoProto)
}

// message PurchaseMetadataRequestProto
class PurchaseMetadataRequestProto {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("PurchaseMetadataRequestProto: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->deprecatedRetrieveBillingCountries_ = $tmp > 0 ? true : false;
          break;
        case 2:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->billingInstrumentType_ = $tmp;
          
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->deprecatedRetrieveBillingCountries_)) {
      fwrite($fp, "\x08");
      Protobuf::write_varint($fp, (int)$this->deprecatedRetrieveBillingCountries_ ? 1 : 0);
    }
    if (!is_null($this->billingInstrumentType_)) {
      fwrite($fp, "\x10");
      Protobuf::write_varint($fp, (int)$this->billingInstrumentType_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->deprecatedRetrieveBillingCountries_)) {
      $size += 2;
    }
    if (!is_null($this->billingInstrumentType_)) {
      $size += 1 + Protobuf::size_varint($this->billingInstrumentType_);
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('deprecatedRetrieveBillingCountries_', $this->deprecatedRetrieveBillingCountries_)
         . Protobuf::toString('billingInstrumentType_', $this->billingInstrumentType_);
  }
  
  // optional bool deprecatedRetrieveBillingCountries = 1;

  protected $deprecatedRetrieveBillingCountries_;
  public function resetDeprecatedRetrieveBillingCountries() { unset($this->deprecatedRetrieveBillingCountries_); }
  public function clearDeprecatedRetrieveBillingCountries() { unset($this->deprecatedRetrieveBillingCountries_); }
  public function hasDeprecatedRetrieveBillingCountries() { return isset($this->deprecatedRetrieveBillingCountries_); }
  public function getDeprecatedRetrieveBillingCountries() { return $this->deprecatedRetrieveBillingCountries_; }
  public function setDeprecatedRetrieveBillingCountries($value) { $this->deprecatedRetrieveBillingCountries_ = (bool)$value; }
  
  // optional int32 billingInstrumentType = 2;

  protected $billingInstrumentType_;
  public function resetBillingInstrumentType() { unset($this->billingInstrumentType_); }
  public function clearBillingInstrumentType() { unset($this->billingInstrumentType_); }
  public function hasBillingInstrumentType() { return isset($this->billingInstrumentType_); }
  public function getBillingInstrumentType() { return $this->billingInstrumentType_; }
  public function setBillingInstrumentType($value) { $this->billingInstrumentType_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:PurchaseMetadataRequestProto)
}




// group PurchaseMetadataResponseProto.Countries.Country.InstrumentAddressSpec
class PurchaseMetadataResponseProto_Countries_Country_InstrumentAddressSpec {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("PurchaseMetadataResponseProto_Countries_Country_InstrumentAddressSpec: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 7:
          ASSERT('$wire == 4');
          break 2;
        case 8:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->instrumentFamily_ = $tmp;
          
          break;
        case 9:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->billingAddressSpec_ = new BillingAddressSpec($fp, $len);
          ASSERT('$len == 0');
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->instrumentFamily_)) {
      fwrite($fp, "@");
      Protobuf::write_varint($fp, (int)$this->instrumentFamily_);
    }
    if (!is_null($this->billingAddressSpec_)) {
      fwrite($fp, "J");
      Protobuf::write_varint($fp, $this->billingAddressSpec_->size()); // message
      $this->billingAddressSpec_->write($fp);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->instrumentFamily_)) {
      $size += 1 + Protobuf::size_varint($this->instrumentFamily_);
    }
    if (!is_null($this->billingAddressSpec_)) {
      $l = $this->billingAddressSpec_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('instrumentFamily_', $this->instrumentFamily_)
         . Protobuf::toString('billingAddressSpec_', $this->billingAddressSpec_);
  }
  
  // optional int32 instrumentFamily = 8;

  protected $instrumentFamily_;
  public function resetInstrumentFamily() { unset($this->instrumentFamily_); }
  public function clearInstrumentFamily() { unset($this->instrumentFamily_); }
  public function hasInstrumentFamily() { return isset($this->instrumentFamily_); }
  public function getInstrumentFamily() { return $this->instrumentFamily_; }
  public function setInstrumentFamily($value) { $this->instrumentFamily_ = (string)$value; }
  
  // optional .BillingAddressSpec billingAddressSpec = 9;

  protected $billingAddressSpec_;
  public function resetBillingAddressSpec() { unset($this->billingAddressSpec_); }
  public function clearBillingAddressSpec() { unset($this->billingAddressSpec_); }
  public function hasBillingAddressSpec() { return isset($this->billingAddressSpec_); }
  public function getBillingAddressSpec() { return $this->billingAddressSpec_; }
  public function setBillingAddressSpec(BillingAddressSpec $value) { $this->billingAddressSpec_ = $value; }
  
  // @@protoc_insertion_point(class_scope:PurchaseMetadataResponseProto.Countries.Country.InstrumentAddressSpec)
}

// group PurchaseMetadataResponseProto.Countries.Country
class PurchaseMetadataResponseProto_Countries_Country {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("PurchaseMetadataResponseProto_Countries_Country: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 2:
          ASSERT('$wire == 4');
          break 2;
        case 3:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->countryCode_ = $tmp;
          $limit-=$len;
          break;
        case 4:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->countryName_ = $tmp;
          $limit-=$len;
          break;
        case 5:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->paypalCountryInfo_ = new PaypalCountryInfoProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 6:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->allowsReducedBillingAddress_ = $tmp > 0 ? true : false;
          break;
        case 7:
          ASSERT('$wire == 3');
          $this->instrumentaddressspec_[] = new PurchaseMetadataResponseProto_Countries_Country_InstrumentAddressSpec($fp, $limit);
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->countryCode_)) {
      fwrite($fp, "\x1a");
      Protobuf::write_varint($fp, strlen((string)$this->countryCode_));
      fwrite($fp, (string)$this->countryCode_);
    }
    if (!is_null($this->countryName_)) {
      fwrite($fp, "\"");
      Protobuf::write_varint($fp, strlen((string)$this->countryName_));
      fwrite($fp, (string)$this->countryName_);
    }
    if (!is_null($this->paypalCountryInfo_)) {
      fwrite($fp, "*");
      Protobuf::write_varint($fp, $this->paypalCountryInfo_->size()); // message
      $this->paypalCountryInfo_->write($fp);
    }
    if (!is_null($this->allowsReducedBillingAddress_)) {
      fwrite($fp, "0");
      Protobuf::write_varint($fp, (int)$this->allowsReducedBillingAddress_ ? 1 : 0);
    }
    if (!is_null($this->instrumentaddressspec_))
      foreach($this->instrumentaddressspec_ as $v) {
        fwrite($fp, ";");
        $v->write($fp); // group
        fwrite($fp, "<");
      }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->countryCode_)) {
      $l = strlen((string)$this->countryCode_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->countryName_)) {
      $l = strlen((string)$this->countryName_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->paypalCountryInfo_)) {
      $l = $this->paypalCountryInfo_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->allowsReducedBillingAddress_)) {
      $size += 2;
    }
    if (!is_null($this->instrumentaddressspec_))
      foreach($this->instrumentaddressspec_ as $v) {
        $size += 2 + $v->size();
      }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('countryCode_', $this->countryCode_)
         . Protobuf::toString('countryName_', $this->countryName_)
         . Protobuf::toString('paypalCountryInfo_', $this->paypalCountryInfo_)
         . Protobuf::toString('allowsReducedBillingAddress_', $this->allowsReducedBillingAddress_)
         . Protobuf::toString('instrumentaddressspec_', $this->instrumentaddressspec_);
  }
  
  // optional string countryCode = 3;

  protected $countryCode_;
  public function resetCountryCode() { unset($this->countryCode_); }
  public function clearCountryCode() { unset($this->countryCode_); }
  public function hasCountryCode() { return isset($this->countryCode_); }
  public function getCountryCode() { return $this->countryCode_; }
  public function setCountryCode($value) { $this->countryCode_ = (string)$value; }
  
  // optional string countryName = 4;

  protected $countryName_;
  public function resetCountryName() { unset($this->countryName_); }
  public function clearCountryName() { unset($this->countryName_); }
  public function hasCountryName() { return isset($this->countryName_); }
  public function getCountryName() { return $this->countryName_; }
  public function setCountryName($value) { $this->countryName_ = (string)$value; }
  
  // optional .PaypalCountryInfoProto paypalCountryInfo = 5;

  protected $paypalCountryInfo_;
  public function resetPaypalCountryInfo() { unset($this->paypalCountryInfo_); }
  public function clearPaypalCountryInfo() { unset($this->paypalCountryInfo_); }
  public function hasPaypalCountryInfo() { return isset($this->paypalCountryInfo_); }
  public function getPaypalCountryInfo() { return $this->paypalCountryInfo_; }
  public function setPaypalCountryInfo(PaypalCountryInfoProto $value) { $this->paypalCountryInfo_ = $value; }
  
  // optional bool allowsReducedBillingAddress = 6;

  protected $allowsReducedBillingAddress_;
  public function resetAllowsReducedBillingAddress() { unset($this->allowsReducedBillingAddress_); }
  public function clearAllowsReducedBillingAddress() { unset($this->allowsReducedBillingAddress_); }
  public function hasAllowsReducedBillingAddress() { return isset($this->allowsReducedBillingAddress_); }
  public function getAllowsReducedBillingAddress() { return $this->allowsReducedBillingAddress_; }
  public function setAllowsReducedBillingAddress($value) { $this->allowsReducedBillingAddress_ = (bool)$value; }
  
  // repeated group InstrumentAddressSpec = 7
  protected $instrumentaddressspec_ = array();
  public function clearInstrumentaddressspec() { $this->instrumentaddressspec_ = array(); }
  public function getInstrumentaddressspecCount() { return count($this->instrumentaddressspec_); }
  public function hasInstrumentaddressspec() { return (count($this->instrumentaddressspec_) > 0); }
  public function indexOfInstrumentaddressspec($value) { return array_search($value,$this->instrumentaddressspec_);}
  public function removeInstrumentaddressspec($index) { unset($this->instrumentaddressspec_[$index]); }
  public function removeValInstrumentaddressspec($value) { $idx = array_search($value,$this->instrumentaddressspec_); if($idx !== FALSE){unset($this->instrumentaddressspec_[$idx]); }}
  public function removeValsInstrumentaddressspec($values) { foreach($values as $value){$idx = array_search($value,$this->instrumentaddressspec_); if($idx !== FALSE){unset($this->instrumentaddressspec_[$idx]); }}}
  public function pushInstrumentaddressspec($newvar) { return array_push($this->instrumentaddressspec_,$newvar); }
  public function popInstrumentaddressspec() { return array_pop($this->instrumentaddressspec_); }
  public function shiftInstrumentaddressspec() { return array_shift($this->instrumentaddressspec_); }
  public function unshiftInstrumentaddressspec($newvar) { return array_unshift($this->instrumentaddressspec_,$newvar); }
  public function getInstrumentaddressspec($index) { return $this->instrumentaddressspec_[$index]; }
  public function getInstrumentaddressspecArray() { return $this->instrumentaddressspec_; }
  public function setInstrumentaddressspec($index, $value) {$this->instrumentaddressspec_[$index] = $value;	}
  public function addInstrumentaddressspec($value) { $this->instrumentaddressspec_[] = $value; }
  public function addAllInstrumentaddressspec(array $values) { foreach($values as $value) {$this->instrumentaddressspec_[] = $value;} }
  
  // @@protoc_insertion_point(class_scope:PurchaseMetadataResponseProto.Countries.Country)
}

// group PurchaseMetadataResponseProto.Countries
class PurchaseMetadataResponseProto_Countries {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("PurchaseMetadataResponseProto_Countries: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 4');
          break 2;
        case 2:
          ASSERT('$wire == 3');
          $this->country_[] = new PurchaseMetadataResponseProto_Countries_Country($fp, $limit);
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->country_))
      foreach($this->country_ as $v) {
        fwrite($fp, "\x13");
        $v->write($fp); // group
        fwrite($fp, "\x14");
      }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->country_))
      foreach($this->country_ as $v) {
        $size += 2 + $v->size();
      }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('country_', $this->country_);
  }
  
  // repeated group Country = 2
  protected $country_ = array();
  public function clearCountry() { $this->country_ = array(); }
  public function getCountryCount() { return count($this->country_); }
  public function hasCountry() { return (count($this->country_) > 0); }
  public function indexOfCountry($value) { return array_search($value,$this->country_);}
  public function removeCountry($index) { unset($this->country_[$index]); }
  public function removeValCountry($value) { $idx = array_search($value,$this->country_); if($idx !== FALSE){unset($this->country_[$idx]); }}
  public function removeValsCountry($values) { foreach($values as $value){$idx = array_search($value,$this->country_); if($idx !== FALSE){unset($this->country_[$idx]); }}}
  public function pushCountry($newvar) { return array_push($this->country_,$newvar); }
  public function popCountry() { return array_pop($this->country_); }
  public function shiftCountry() { return array_shift($this->country_); }
  public function unshiftCountry($newvar) { return array_unshift($this->country_,$newvar); }
  public function getCountry($index) { return $this->country_[$index]; }
  public function getCountryArray() { return $this->country_; }
  public function setCountry($index, $value) {$this->country_[$index] = $value;	}
  public function addCountry($value) { $this->country_[] = $value; }
  public function addAllCountry(array $values) { foreach($values as $value) {$this->country_[] = $value;} }
  
  // @@protoc_insertion_point(class_scope:PurchaseMetadataResponseProto.Countries)
}

// message PurchaseMetadataResponseProto
class PurchaseMetadataResponseProto {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("PurchaseMetadataResponseProto: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 3');
          $this->countries_ = new PurchaseMetadataResponseProto_Countries($fp, $limit);
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->countries_)) {
      fwrite($fp, "\x0b");
      $this->countries_->write($fp); // group
      fwrite($fp, "\x0c");
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->countries_)) {
      $size += 2 + $this->countries_->size();
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('countries_', $this->countries_);
  }
  
  // optional group Countries = 1
  protected $countries_;
  public function resetCountries() { unset($this->countries_); }
  public function clearCountries() { unset($this->countries_); }
  public function hasCountries() { return isset($this->countries_); }
  public function getCountries() { return $this->countries_; }
  public function setCountries(PurchaseMetadataResponseProto_Countries $value) { $this->countries_ = $value; }
  
  // @@protoc_insertion_point(class_scope:PurchaseMetadataResponseProto)
}

// message PurchaseOrderRequestProto
class PurchaseOrderRequestProto {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("PurchaseOrderRequestProto: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->gaiaAuthToken_ = $tmp;
          $limit-=$len;
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->assetId_ = $tmp;
          $limit-=$len;
          break;
        case 3:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->transactionId_ = $tmp;
          $limit-=$len;
          break;
        case 4:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->billingInstrumentId_ = $tmp;
          $limit-=$len;
          break;
        case 5:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->tosAccepted_ = $tmp > 0 ? true : false;
          break;
        case 6:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->carrierBillingCredentials_ = new CarrierBillingCredentialsProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 7:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->existingOrderId_ = $tmp;
          $limit-=$len;
          break;
        case 8:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->billingInstrumentType_ = $tmp;
          
          break;
        case 9:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->billingParametersId_ = $tmp;
          $limit-=$len;
          break;
        case 10:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->paypalCredentials_ = new PaypalCredentialsProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 11:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->riskHeaderInfo_ = new RiskHeaderInfoProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 12:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->productType_ = $tmp;
          
          break;
        case 13:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->signatureHash_ = new SignatureHashProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 14:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->developerPayload_ = $tmp;
          $limit-=$len;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->gaiaAuthToken_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, strlen((string)$this->gaiaAuthToken_));
      fwrite($fp, (string)$this->gaiaAuthToken_);
    }
    if (!is_null($this->assetId_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, strlen((string)$this->assetId_));
      fwrite($fp, (string)$this->assetId_);
    }
    if (!is_null($this->transactionId_)) {
      fwrite($fp, "\x1a");
      Protobuf::write_varint($fp, strlen((string)$this->transactionId_));
      fwrite($fp, (string)$this->transactionId_);
    }
    if (!is_null($this->billingInstrumentId_)) {
      fwrite($fp, "\"");
      Protobuf::write_varint($fp, strlen((string)$this->billingInstrumentId_));
      fwrite($fp, (string)$this->billingInstrumentId_);
    }
    if (!is_null($this->tosAccepted_)) {
      fwrite($fp, "(");
      Protobuf::write_varint($fp, (int)$this->tosAccepted_ ? 1 : 0);
    }
    if (!is_null($this->carrierBillingCredentials_)) {
      fwrite($fp, "2");
      Protobuf::write_varint($fp, $this->carrierBillingCredentials_->size()); // message
      $this->carrierBillingCredentials_->write($fp);
    }
    if (!is_null($this->existingOrderId_)) {
      fwrite($fp, ":");
      Protobuf::write_varint($fp, strlen((string)$this->existingOrderId_));
      fwrite($fp, (string)$this->existingOrderId_);
    }
    if (!is_null($this->billingInstrumentType_)) {
      fwrite($fp, "@");
      Protobuf::write_varint($fp, (int)$this->billingInstrumentType_);
    }
    if (!is_null($this->billingParametersId_)) {
      fwrite($fp, "J");
      Protobuf::write_varint($fp, strlen((string)$this->billingParametersId_));
      fwrite($fp, (string)$this->billingParametersId_);
    }
    if (!is_null($this->paypalCredentials_)) {
      fwrite($fp, "R");
      Protobuf::write_varint($fp, $this->paypalCredentials_->size()); // message
      $this->paypalCredentials_->write($fp);
    }
    if (!is_null($this->riskHeaderInfo_)) {
      fwrite($fp, "Z");
      Protobuf::write_varint($fp, $this->riskHeaderInfo_->size()); // message
      $this->riskHeaderInfo_->write($fp);
    }
    if (!is_null($this->productType_)) {
      fwrite($fp, "`");
      Protobuf::write_varint($fp, (int)$this->productType_);
    }
    if (!is_null($this->signatureHash_)) {
      fwrite($fp, "j");
      Protobuf::write_varint($fp, $this->signatureHash_->size()); // message
      $this->signatureHash_->write($fp);
    }
    if (!is_null($this->developerPayload_)) {
      fwrite($fp, "r");
      Protobuf::write_varint($fp, strlen((string)$this->developerPayload_));
      fwrite($fp, (string)$this->developerPayload_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->gaiaAuthToken_)) {
      $l = strlen((string)$this->gaiaAuthToken_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->assetId_)) {
      $l = strlen((string)$this->assetId_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->transactionId_)) {
      $l = strlen((string)$this->transactionId_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->billingInstrumentId_)) {
      $l = strlen((string)$this->billingInstrumentId_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->tosAccepted_)) {
      $size += 2;
    }
    if (!is_null($this->carrierBillingCredentials_)) {
      $l = $this->carrierBillingCredentials_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->existingOrderId_)) {
      $l = strlen((string)$this->existingOrderId_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->billingInstrumentType_)) {
      $size += 1 + Protobuf::size_varint($this->billingInstrumentType_);
    }
    if (!is_null($this->billingParametersId_)) {
      $l = strlen((string)$this->billingParametersId_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->paypalCredentials_)) {
      $l = $this->paypalCredentials_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->riskHeaderInfo_)) {
      $l = $this->riskHeaderInfo_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->productType_)) {
      $size += 1 + Protobuf::size_varint($this->productType_);
    }
    if (!is_null($this->signatureHash_)) {
      $l = $this->signatureHash_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->developerPayload_)) {
      $l = strlen((string)$this->developerPayload_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('gaiaAuthToken_', $this->gaiaAuthToken_)
         . Protobuf::toString('assetId_', $this->assetId_)
         . Protobuf::toString('transactionId_', $this->transactionId_)
         . Protobuf::toString('billingInstrumentId_', $this->billingInstrumentId_)
         . Protobuf::toString('tosAccepted_', $this->tosAccepted_)
         . Protobuf::toString('carrierBillingCredentials_', $this->carrierBillingCredentials_)
         . Protobuf::toString('existingOrderId_', $this->existingOrderId_)
         . Protobuf::toString('billingInstrumentType_', $this->billingInstrumentType_)
         . Protobuf::toString('billingParametersId_', $this->billingParametersId_)
         . Protobuf::toString('paypalCredentials_', $this->paypalCredentials_)
         . Protobuf::toString('riskHeaderInfo_', $this->riskHeaderInfo_)
         . Protobuf::toString('productType_', $this->productType_)
         . Protobuf::toString('signatureHash_', $this->signatureHash_)
         . Protobuf::toString('developerPayload_', $this->developerPayload_);
  }
  
  // optional string gaiaAuthToken = 1;

  protected $gaiaAuthToken_;
  public function resetGaiaAuthToken() { unset($this->gaiaAuthToken_); }
  public function clearGaiaAuthToken() { unset($this->gaiaAuthToken_); }
  public function hasGaiaAuthToken() { return isset($this->gaiaAuthToken_); }
  public function getGaiaAuthToken() { return $this->gaiaAuthToken_; }
  public function setGaiaAuthToken($value) { $this->gaiaAuthToken_ = (string)$value; }
  
  // optional string assetId = 2;

  protected $assetId_;
  public function resetAssetId() { unset($this->assetId_); }
  public function clearAssetId() { unset($this->assetId_); }
  public function hasAssetId() { return isset($this->assetId_); }
  public function getAssetId() { return $this->assetId_; }
  public function setAssetId($value) { $this->assetId_ = (string)$value; }
  
  // optional string transactionId = 3;

  protected $transactionId_;
  public function resetTransactionId() { unset($this->transactionId_); }
  public function clearTransactionId() { unset($this->transactionId_); }
  public function hasTransactionId() { return isset($this->transactionId_); }
  public function getTransactionId() { return $this->transactionId_; }
  public function setTransactionId($value) { $this->transactionId_ = (string)$value; }
  
  // optional string billingInstrumentId = 4;

  protected $billingInstrumentId_;
  public function resetBillingInstrumentId() { unset($this->billingInstrumentId_); }
  public function clearBillingInstrumentId() { unset($this->billingInstrumentId_); }
  public function hasBillingInstrumentId() { return isset($this->billingInstrumentId_); }
  public function getBillingInstrumentId() { return $this->billingInstrumentId_; }
  public function setBillingInstrumentId($value) { $this->billingInstrumentId_ = (string)$value; }
  
  // optional bool tosAccepted = 5;

  protected $tosAccepted_;
  public function resetTosAccepted() { unset($this->tosAccepted_); }
  public function clearTosAccepted() { unset($this->tosAccepted_); }
  public function hasTosAccepted() { return isset($this->tosAccepted_); }
  public function getTosAccepted() { return $this->tosAccepted_; }
  public function setTosAccepted($value) { $this->tosAccepted_ = (bool)$value; }
  
  // optional .CarrierBillingCredentialsProto carrierBillingCredentials = 6;

  protected $carrierBillingCredentials_;
  public function resetCarrierBillingCredentials() { unset($this->carrierBillingCredentials_); }
  public function clearCarrierBillingCredentials() { unset($this->carrierBillingCredentials_); }
  public function hasCarrierBillingCredentials() { return isset($this->carrierBillingCredentials_); }
  public function getCarrierBillingCredentials() { return $this->carrierBillingCredentials_; }
  public function setCarrierBillingCredentials(CarrierBillingCredentialsProto $value) { $this->carrierBillingCredentials_ = $value; }
  
  // optional string existingOrderId = 7;

  protected $existingOrderId_;
  public function resetExistingOrderId() { unset($this->existingOrderId_); }
  public function clearExistingOrderId() { unset($this->existingOrderId_); }
  public function hasExistingOrderId() { return isset($this->existingOrderId_); }
  public function getExistingOrderId() { return $this->existingOrderId_; }
  public function setExistingOrderId($value) { $this->existingOrderId_ = (string)$value; }
  
  // optional int32 billingInstrumentType = 8;

  protected $billingInstrumentType_;
  public function resetBillingInstrumentType() { unset($this->billingInstrumentType_); }
  public function clearBillingInstrumentType() { unset($this->billingInstrumentType_); }
  public function hasBillingInstrumentType() { return isset($this->billingInstrumentType_); }
  public function getBillingInstrumentType() { return $this->billingInstrumentType_; }
  public function setBillingInstrumentType($value) { $this->billingInstrumentType_ = (string)$value; }
  
  // optional string billingParametersId = 9;

  protected $billingParametersId_;
  public function resetBillingParametersId() { unset($this->billingParametersId_); }
  public function clearBillingParametersId() { unset($this->billingParametersId_); }
  public function hasBillingParametersId() { return isset($this->billingParametersId_); }
  public function getBillingParametersId() { return $this->billingParametersId_; }
  public function setBillingParametersId($value) { $this->billingParametersId_ = (string)$value; }
  
  // optional .PaypalCredentialsProto paypalCredentials = 10;

  protected $paypalCredentials_;
  public function resetPaypalCredentials() { unset($this->paypalCredentials_); }
  public function clearPaypalCredentials() { unset($this->paypalCredentials_); }
  public function hasPaypalCredentials() { return isset($this->paypalCredentials_); }
  public function getPaypalCredentials() { return $this->paypalCredentials_; }
  public function setPaypalCredentials(PaypalCredentialsProto $value) { $this->paypalCredentials_ = $value; }
  
  // optional .RiskHeaderInfoProto riskHeaderInfo = 11;

  protected $riskHeaderInfo_;
  public function resetRiskHeaderInfo() { unset($this->riskHeaderInfo_); }
  public function clearRiskHeaderInfo() { unset($this->riskHeaderInfo_); }
  public function hasRiskHeaderInfo() { return isset($this->riskHeaderInfo_); }
  public function getRiskHeaderInfo() { return $this->riskHeaderInfo_; }
  public function setRiskHeaderInfo(RiskHeaderInfoProto $value) { $this->riskHeaderInfo_ = $value; }
  
  // optional int32 productType = 12;

  protected $productType_;
  public function resetProductType() { unset($this->productType_); }
  public function clearProductType() { unset($this->productType_); }
  public function hasProductType() { return isset($this->productType_); }
  public function getProductType() { return $this->productType_; }
  public function setProductType($value) { $this->productType_ = (string)$value; }
  
  // optional .SignatureHashProto signatureHash = 13;

  protected $signatureHash_;
  public function resetSignatureHash() { unset($this->signatureHash_); }
  public function clearSignatureHash() { unset($this->signatureHash_); }
  public function hasSignatureHash() { return isset($this->signatureHash_); }
  public function getSignatureHash() { return $this->signatureHash_; }
  public function setSignatureHash(SignatureHashProto $value) { $this->signatureHash_ = $value; }
  
  // optional string developerPayload = 14;

  protected $developerPayload_;
  public function resetDeveloperPayload() { unset($this->developerPayload_); }
  public function clearDeveloperPayload() { unset($this->developerPayload_); }
  public function hasDeveloperPayload() { return isset($this->developerPayload_); }
  public function getDeveloperPayload() { return $this->developerPayload_; }
  public function setDeveloperPayload($value) { $this->developerPayload_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:PurchaseOrderRequestProto)
}

// message PurchaseOrderResponseProto
class PurchaseOrderResponseProto {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("PurchaseOrderResponseProto: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->deprecatedResultCode_ = $tmp;
          
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->purchaseInfo_ = new PurchaseInfoProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 3:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->asset_ = new ExternalAssetProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 4:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->purchaseResult_ = new PurchaseResultProto($fp, $len);
          ASSERT('$len == 0');
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->deprecatedResultCode_)) {
      fwrite($fp, "\x08");
      Protobuf::write_varint($fp, (int)$this->deprecatedResultCode_);
    }
    if (!is_null($this->purchaseInfo_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, $this->purchaseInfo_->size()); // message
      $this->purchaseInfo_->write($fp);
    }
    if (!is_null($this->asset_)) {
      fwrite($fp, "\x1a");
      Protobuf::write_varint($fp, $this->asset_->size()); // message
      $this->asset_->write($fp);
    }
    if (!is_null($this->purchaseResult_)) {
      fwrite($fp, "\"");
      Protobuf::write_varint($fp, $this->purchaseResult_->size()); // message
      $this->purchaseResult_->write($fp);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->deprecatedResultCode_)) {
      $size += 1 + Protobuf::size_varint($this->deprecatedResultCode_);
    }
    if (!is_null($this->purchaseInfo_)) {
      $l = $this->purchaseInfo_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->asset_)) {
      $l = $this->asset_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->purchaseResult_)) {
      $l = $this->purchaseResult_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('deprecatedResultCode_', $this->deprecatedResultCode_)
         . Protobuf::toString('purchaseInfo_', $this->purchaseInfo_)
         . Protobuf::toString('asset_', $this->asset_)
         . Protobuf::toString('purchaseResult_', $this->purchaseResult_);
  }
  
  // optional int32 deprecatedResultCode = 1;

  protected $deprecatedResultCode_;
  public function resetDeprecatedResultCode() { unset($this->deprecatedResultCode_); }
  public function clearDeprecatedResultCode() { unset($this->deprecatedResultCode_); }
  public function hasDeprecatedResultCode() { return isset($this->deprecatedResultCode_); }
  public function getDeprecatedResultCode() { return $this->deprecatedResultCode_; }
  public function setDeprecatedResultCode($value) { $this->deprecatedResultCode_ = (string)$value; }
  
  // optional .PurchaseInfoProto purchaseInfo = 2;

  protected $purchaseInfo_;
  public function resetPurchaseInfo() { unset($this->purchaseInfo_); }
  public function clearPurchaseInfo() { unset($this->purchaseInfo_); }
  public function hasPurchaseInfo() { return isset($this->purchaseInfo_); }
  public function getPurchaseInfo() { return $this->purchaseInfo_; }
  public function setPurchaseInfo(PurchaseInfoProto $value) { $this->purchaseInfo_ = $value; }
  
  // optional .ExternalAssetProto asset = 3;

  protected $asset_;
  public function resetAsset() { unset($this->asset_); }
  public function clearAsset() { unset($this->asset_); }
  public function hasAsset() { return isset($this->asset_); }
  public function getAsset() { return $this->asset_; }
  public function setAsset(ExternalAssetProto $value) { $this->asset_ = $value; }
  
  // optional .PurchaseResultProto purchaseResult = 4;

  protected $purchaseResult_;
  public function resetPurchaseResult() { unset($this->purchaseResult_); }
  public function clearPurchaseResult() { unset($this->purchaseResult_); }
  public function hasPurchaseResult() { return isset($this->purchaseResult_); }
  public function getPurchaseResult() { return $this->purchaseResult_; }
  public function setPurchaseResult(PurchaseResultProto $value) { $this->purchaseResult_ = $value; }
  
  // @@protoc_insertion_point(class_scope:PurchaseOrderResponseProto)
}


// group PurchasePostRequestProto.BillingInstrumentInfo
class PurchasePostRequestProto_BillingInstrumentInfo {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("PurchasePostRequestProto_BillingInstrumentInfo: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 4:
          ASSERT('$wire == 4');
          break 2;
        case 5:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->billingInstrumentId_ = $tmp;
          $limit-=$len;
          break;
        case 6:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->creditCard_ = new ExternalCreditCard($fp, $len);
          ASSERT('$len == 0');
          break;
        case 9:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->carrierInstrument_ = new ExternalCarrierBillingInstrumentProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 10:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->paypalInstrument_ = new ExternalPaypalInstrumentProto($fp, $len);
          ASSERT('$len == 0');
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->billingInstrumentId_)) {
      fwrite($fp, "*");
      Protobuf::write_varint($fp, strlen((string)$this->billingInstrumentId_));
      fwrite($fp, (string)$this->billingInstrumentId_);
    }
    if (!is_null($this->creditCard_)) {
      fwrite($fp, "2");
      Protobuf::write_varint($fp, $this->creditCard_->size()); // message
      $this->creditCard_->write($fp);
    }
    if (!is_null($this->carrierInstrument_)) {
      fwrite($fp, "J");
      Protobuf::write_varint($fp, $this->carrierInstrument_->size()); // message
      $this->carrierInstrument_->write($fp);
    }
    if (!is_null($this->paypalInstrument_)) {
      fwrite($fp, "R");
      Protobuf::write_varint($fp, $this->paypalInstrument_->size()); // message
      $this->paypalInstrument_->write($fp);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->billingInstrumentId_)) {
      $l = strlen((string)$this->billingInstrumentId_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->creditCard_)) {
      $l = $this->creditCard_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->carrierInstrument_)) {
      $l = $this->carrierInstrument_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->paypalInstrument_)) {
      $l = $this->paypalInstrument_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('billingInstrumentId_', $this->billingInstrumentId_)
         . Protobuf::toString('creditCard_', $this->creditCard_)
         . Protobuf::toString('carrierInstrument_', $this->carrierInstrument_)
         . Protobuf::toString('paypalInstrument_', $this->paypalInstrument_);
  }
  
  // optional string billingInstrumentId = 5;

  protected $billingInstrumentId_;
  public function resetBillingInstrumentId() { unset($this->billingInstrumentId_); }
  public function clearBillingInstrumentId() { unset($this->billingInstrumentId_); }
  public function hasBillingInstrumentId() { return isset($this->billingInstrumentId_); }
  public function getBillingInstrumentId() { return $this->billingInstrumentId_; }
  public function setBillingInstrumentId($value) { $this->billingInstrumentId_ = (string)$value; }
  
  // optional .ExternalCreditCard creditCard = 6;

  protected $creditCard_;
  public function resetCreditCard() { unset($this->creditCard_); }
  public function clearCreditCard() { unset($this->creditCard_); }
  public function hasCreditCard() { return isset($this->creditCard_); }
  public function getCreditCard() { return $this->creditCard_; }
  public function setCreditCard(ExternalCreditCard $value) { $this->creditCard_ = $value; }
  
  // optional .ExternalCarrierBillingInstrumentProto carrierInstrument = 9;

  protected $carrierInstrument_;
  public function resetCarrierInstrument() { unset($this->carrierInstrument_); }
  public function clearCarrierInstrument() { unset($this->carrierInstrument_); }
  public function hasCarrierInstrument() { return isset($this->carrierInstrument_); }
  public function getCarrierInstrument() { return $this->carrierInstrument_; }
  public function setCarrierInstrument(ExternalCarrierBillingInstrumentProto $value) { $this->carrierInstrument_ = $value; }
  
  // optional .ExternalPaypalInstrumentProto paypalInstrument = 10;

  protected $paypalInstrument_;
  public function resetPaypalInstrument() { unset($this->paypalInstrument_); }
  public function clearPaypalInstrument() { unset($this->paypalInstrument_); }
  public function hasPaypalInstrument() { return isset($this->paypalInstrument_); }
  public function getPaypalInstrument() { return $this->paypalInstrument_; }
  public function setPaypalInstrument(ExternalPaypalInstrumentProto $value) { $this->paypalInstrument_ = $value; }
  
  // @@protoc_insertion_point(class_scope:PurchasePostRequestProto.BillingInstrumentInfo)
}

// message PurchasePostRequestProto
class PurchasePostRequestProto {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("PurchasePostRequestProto: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->gaiaAuthToken_ = $tmp;
          $limit-=$len;
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->assetId_ = $tmp;
          $limit-=$len;
          break;
        case 3:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->transactionId_ = $tmp;
          $limit-=$len;
          break;
        case 4:
          ASSERT('$wire == 3');
          $this->billinginstrumentinfo_ = new PurchasePostRequestProto_BillingInstrumentInfo($fp, $limit);
          break;
        case 7:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->tosAccepted_ = $tmp > 0 ? true : false;
          break;
        case 8:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->cbInstrumentKey_ = $tmp;
          $limit-=$len;
          break;
        case 11:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->paypalAuthConfirmed_ = $tmp > 0 ? true : false;
          break;
        case 12:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->productType_ = $tmp;
          
          break;
        case 13:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->signatureHash_ = new SignatureHashProto($fp, $len);
          ASSERT('$len == 0');
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->gaiaAuthToken_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, strlen((string)$this->gaiaAuthToken_));
      fwrite($fp, (string)$this->gaiaAuthToken_);
    }
    if (!is_null($this->assetId_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, strlen((string)$this->assetId_));
      fwrite($fp, (string)$this->assetId_);
    }
    if (!is_null($this->transactionId_)) {
      fwrite($fp, "\x1a");
      Protobuf::write_varint($fp, strlen((string)$this->transactionId_));
      fwrite($fp, (string)$this->transactionId_);
    }
    if (!is_null($this->billinginstrumentinfo_)) {
      fwrite($fp, "#");
      $this->billinginstrumentinfo_->write($fp); // group
      fwrite($fp, "$");
    }
    if (!is_null($this->tosAccepted_)) {
      fwrite($fp, "8");
      Protobuf::write_varint($fp, (int)$this->tosAccepted_ ? 1 : 0);
    }
    if (!is_null($this->cbInstrumentKey_)) {
      fwrite($fp, "B");
      Protobuf::write_varint($fp, strlen((string)$this->cbInstrumentKey_));
      fwrite($fp, (string)$this->cbInstrumentKey_);
    }
    if (!is_null($this->paypalAuthConfirmed_)) {
      fwrite($fp, "X");
      Protobuf::write_varint($fp, (int)$this->paypalAuthConfirmed_ ? 1 : 0);
    }
    if (!is_null($this->productType_)) {
      fwrite($fp, "`");
      Protobuf::write_varint($fp, (int)$this->productType_);
    }
    if (!is_null($this->signatureHash_)) {
      fwrite($fp, "j");
      Protobuf::write_varint($fp, $this->signatureHash_->size()); // message
      $this->signatureHash_->write($fp);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->gaiaAuthToken_)) {
      $l = strlen((string)$this->gaiaAuthToken_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->assetId_)) {
      $l = strlen((string)$this->assetId_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->transactionId_)) {
      $l = strlen((string)$this->transactionId_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->billinginstrumentinfo_)) {
      $size += 2 + $this->billinginstrumentinfo_->size();
    }
    if (!is_null($this->tosAccepted_)) {
      $size += 2;
    }
    if (!is_null($this->cbInstrumentKey_)) {
      $l = strlen((string)$this->cbInstrumentKey_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->paypalAuthConfirmed_)) {
      $size += 2;
    }
    if (!is_null($this->productType_)) {
      $size += 1 + Protobuf::size_varint($this->productType_);
    }
    if (!is_null($this->signatureHash_)) {
      $l = $this->signatureHash_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('gaiaAuthToken_', $this->gaiaAuthToken_)
         . Protobuf::toString('assetId_', $this->assetId_)
         . Protobuf::toString('transactionId_', $this->transactionId_)
         . Protobuf::toString('billinginstrumentinfo_', $this->billinginstrumentinfo_)
         . Protobuf::toString('tosAccepted_', $this->tosAccepted_)
         . Protobuf::toString('cbInstrumentKey_', $this->cbInstrumentKey_)
         . Protobuf::toString('paypalAuthConfirmed_', $this->paypalAuthConfirmed_)
         . Protobuf::toString('productType_', $this->productType_)
         . Protobuf::toString('signatureHash_', $this->signatureHash_);
  }
  
  // optional string gaiaAuthToken = 1;

  protected $gaiaAuthToken_;
  public function resetGaiaAuthToken() { unset($this->gaiaAuthToken_); }
  public function clearGaiaAuthToken() { unset($this->gaiaAuthToken_); }
  public function hasGaiaAuthToken() { return isset($this->gaiaAuthToken_); }
  public function getGaiaAuthToken() { return $this->gaiaAuthToken_; }
  public function setGaiaAuthToken($value) { $this->gaiaAuthToken_ = (string)$value; }
  
  // optional string assetId = 2;

  protected $assetId_;
  public function resetAssetId() { unset($this->assetId_); }
  public function clearAssetId() { unset($this->assetId_); }
  public function hasAssetId() { return isset($this->assetId_); }
  public function getAssetId() { return $this->assetId_; }
  public function setAssetId($value) { $this->assetId_ = (string)$value; }
  
  // optional string transactionId = 3;

  protected $transactionId_;
  public function resetTransactionId() { unset($this->transactionId_); }
  public function clearTransactionId() { unset($this->transactionId_); }
  public function hasTransactionId() { return isset($this->transactionId_); }
  public function getTransactionId() { return $this->transactionId_; }
  public function setTransactionId($value) { $this->transactionId_ = (string)$value; }
  
  // optional group BillingInstrumentInfo = 4
  protected $billinginstrumentinfo_;
  public function resetBillinginstrumentinfo() { unset($this->billinginstrumentinfo_); }
  public function clearBillinginstrumentinfo() { unset($this->billinginstrumentinfo_); }
  public function hasBillinginstrumentinfo() { return isset($this->billinginstrumentinfo_); }
  public function getBillinginstrumentinfo() { return $this->billinginstrumentinfo_; }
  public function setBillinginstrumentinfo(PurchasePostRequestProto_BillingInstrumentInfo $value) { $this->billinginstrumentinfo_ = $value; }
  
  // optional bool tosAccepted = 7;

  protected $tosAccepted_;
  public function resetTosAccepted() { unset($this->tosAccepted_); }
  public function clearTosAccepted() { unset($this->tosAccepted_); }
  public function hasTosAccepted() { return isset($this->tosAccepted_); }
  public function getTosAccepted() { return $this->tosAccepted_; }
  public function setTosAccepted($value) { $this->tosAccepted_ = (bool)$value; }
  
  // optional string cbInstrumentKey = 8;

  protected $cbInstrumentKey_;
  public function resetCbInstrumentKey() { unset($this->cbInstrumentKey_); }
  public function clearCbInstrumentKey() { unset($this->cbInstrumentKey_); }
  public function hasCbInstrumentKey() { return isset($this->cbInstrumentKey_); }
  public function getCbInstrumentKey() { return $this->cbInstrumentKey_; }
  public function setCbInstrumentKey($value) { $this->cbInstrumentKey_ = (string)$value; }
  
  // optional bool paypalAuthConfirmed = 11;

  protected $paypalAuthConfirmed_;
  public function resetPaypalAuthConfirmed() { unset($this->paypalAuthConfirmed_); }
  public function clearPaypalAuthConfirmed() { unset($this->paypalAuthConfirmed_); }
  public function hasPaypalAuthConfirmed() { return isset($this->paypalAuthConfirmed_); }
  public function getPaypalAuthConfirmed() { return $this->paypalAuthConfirmed_; }
  public function setPaypalAuthConfirmed($value) { $this->paypalAuthConfirmed_ = (bool)$value; }
  
  // optional int32 productType = 12;

  protected $productType_;
  public function resetProductType() { unset($this->productType_); }
  public function clearProductType() { unset($this->productType_); }
  public function hasProductType() { return isset($this->productType_); }
  public function getProductType() { return $this->productType_; }
  public function setProductType($value) { $this->productType_ = (string)$value; }
  
  // optional .SignatureHashProto signatureHash = 13;

  protected $signatureHash_;
  public function resetSignatureHash() { unset($this->signatureHash_); }
  public function clearSignatureHash() { unset($this->signatureHash_); }
  public function hasSignatureHash() { return isset($this->signatureHash_); }
  public function getSignatureHash() { return $this->signatureHash_; }
  public function setSignatureHash(SignatureHashProto $value) { $this->signatureHash_ = $value; }
  
  // @@protoc_insertion_point(class_scope:PurchasePostRequestProto)
}

// message PurchasePostResponseProto
class PurchasePostResponseProto {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("PurchasePostResponseProto: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->deprecatedResultCode_ = $tmp;
          
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->purchaseInfo_ = new PurchaseInfoProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 3:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->termsOfServiceUrl_ = $tmp;
          $limit-=$len;
          break;
        case 4:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->termsOfServiceText_ = $tmp;
          $limit-=$len;
          break;
        case 5:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->termsOfServiceName_ = $tmp;
          $limit-=$len;
          break;
        case 6:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->termsOfServiceCheckboxText_ = $tmp;
          $limit-=$len;
          break;
        case 7:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->termsOfServiceHeaderText_ = $tmp;
          $limit-=$len;
          break;
        case 8:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->purchaseResult_ = new PurchaseResultProto($fp, $len);
          ASSERT('$len == 0');
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->deprecatedResultCode_)) {
      fwrite($fp, "\x08");
      Protobuf::write_varint($fp, (int)$this->deprecatedResultCode_);
    }
    if (!is_null($this->purchaseInfo_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, $this->purchaseInfo_->size()); // message
      $this->purchaseInfo_->write($fp);
    }
    if (!is_null($this->termsOfServiceUrl_)) {
      fwrite($fp, "\x1a");
      Protobuf::write_varint($fp, strlen((string)$this->termsOfServiceUrl_));
      fwrite($fp, (string)$this->termsOfServiceUrl_);
    }
    if (!is_null($this->termsOfServiceText_)) {
      fwrite($fp, "\"");
      Protobuf::write_varint($fp, strlen((string)$this->termsOfServiceText_));
      fwrite($fp, (string)$this->termsOfServiceText_);
    }
    if (!is_null($this->termsOfServiceName_)) {
      fwrite($fp, "*");
      Protobuf::write_varint($fp, strlen((string)$this->termsOfServiceName_));
      fwrite($fp, (string)$this->termsOfServiceName_);
    }
    if (!is_null($this->termsOfServiceCheckboxText_)) {
      fwrite($fp, "2");
      Protobuf::write_varint($fp, strlen((string)$this->termsOfServiceCheckboxText_));
      fwrite($fp, (string)$this->termsOfServiceCheckboxText_);
    }
    if (!is_null($this->termsOfServiceHeaderText_)) {
      fwrite($fp, ":");
      Protobuf::write_varint($fp, strlen((string)$this->termsOfServiceHeaderText_));
      fwrite($fp, (string)$this->termsOfServiceHeaderText_);
    }
    if (!is_null($this->purchaseResult_)) {
      fwrite($fp, "B");
      Protobuf::write_varint($fp, $this->purchaseResult_->size()); // message
      $this->purchaseResult_->write($fp);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->deprecatedResultCode_)) {
      $size += 1 + Protobuf::size_varint($this->deprecatedResultCode_);
    }
    if (!is_null($this->purchaseInfo_)) {
      $l = $this->purchaseInfo_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->termsOfServiceUrl_)) {
      $l = strlen((string)$this->termsOfServiceUrl_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->termsOfServiceText_)) {
      $l = strlen((string)$this->termsOfServiceText_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->termsOfServiceName_)) {
      $l = strlen((string)$this->termsOfServiceName_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->termsOfServiceCheckboxText_)) {
      $l = strlen((string)$this->termsOfServiceCheckboxText_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->termsOfServiceHeaderText_)) {
      $l = strlen((string)$this->termsOfServiceHeaderText_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->purchaseResult_)) {
      $l = $this->purchaseResult_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('deprecatedResultCode_', $this->deprecatedResultCode_)
         . Protobuf::toString('purchaseInfo_', $this->purchaseInfo_)
         . Protobuf::toString('termsOfServiceUrl_', $this->termsOfServiceUrl_)
         . Protobuf::toString('termsOfServiceText_', $this->termsOfServiceText_)
         . Protobuf::toString('termsOfServiceName_', $this->termsOfServiceName_)
         . Protobuf::toString('termsOfServiceCheckboxText_', $this->termsOfServiceCheckboxText_)
         . Protobuf::toString('termsOfServiceHeaderText_', $this->termsOfServiceHeaderText_)
         . Protobuf::toString('purchaseResult_', $this->purchaseResult_);
  }
  
  // optional int32 deprecatedResultCode = 1;

  protected $deprecatedResultCode_;
  public function resetDeprecatedResultCode() { unset($this->deprecatedResultCode_); }
  public function clearDeprecatedResultCode() { unset($this->deprecatedResultCode_); }
  public function hasDeprecatedResultCode() { return isset($this->deprecatedResultCode_); }
  public function getDeprecatedResultCode() { return $this->deprecatedResultCode_; }
  public function setDeprecatedResultCode($value) { $this->deprecatedResultCode_ = (string)$value; }
  
  // optional .PurchaseInfoProto purchaseInfo = 2;

  protected $purchaseInfo_;
  public function resetPurchaseInfo() { unset($this->purchaseInfo_); }
  public function clearPurchaseInfo() { unset($this->purchaseInfo_); }
  public function hasPurchaseInfo() { return isset($this->purchaseInfo_); }
  public function getPurchaseInfo() { return $this->purchaseInfo_; }
  public function setPurchaseInfo(PurchaseInfoProto $value) { $this->purchaseInfo_ = $value; }
  
  // optional string termsOfServiceUrl = 3;

  protected $termsOfServiceUrl_;
  public function resetTermsOfServiceUrl() { unset($this->termsOfServiceUrl_); }
  public function clearTermsOfServiceUrl() { unset($this->termsOfServiceUrl_); }
  public function hasTermsOfServiceUrl() { return isset($this->termsOfServiceUrl_); }
  public function getTermsOfServiceUrl() { return $this->termsOfServiceUrl_; }
  public function setTermsOfServiceUrl($value) { $this->termsOfServiceUrl_ = (string)$value; }
  
  // optional string termsOfServiceText = 4;

  protected $termsOfServiceText_;
  public function resetTermsOfServiceText() { unset($this->termsOfServiceText_); }
  public function clearTermsOfServiceText() { unset($this->termsOfServiceText_); }
  public function hasTermsOfServiceText() { return isset($this->termsOfServiceText_); }
  public function getTermsOfServiceText() { return $this->termsOfServiceText_; }
  public function setTermsOfServiceText($value) { $this->termsOfServiceText_ = (string)$value; }
  
  // optional string termsOfServiceName = 5;

  protected $termsOfServiceName_;
  public function resetTermsOfServiceName() { unset($this->termsOfServiceName_); }
  public function clearTermsOfServiceName() { unset($this->termsOfServiceName_); }
  public function hasTermsOfServiceName() { return isset($this->termsOfServiceName_); }
  public function getTermsOfServiceName() { return $this->termsOfServiceName_; }
  public function setTermsOfServiceName($value) { $this->termsOfServiceName_ = (string)$value; }
  
  // optional string termsOfServiceCheckboxText = 6;

  protected $termsOfServiceCheckboxText_;
  public function resetTermsOfServiceCheckboxText() { unset($this->termsOfServiceCheckboxText_); }
  public function clearTermsOfServiceCheckboxText() { unset($this->termsOfServiceCheckboxText_); }
  public function hasTermsOfServiceCheckboxText() { return isset($this->termsOfServiceCheckboxText_); }
  public function getTermsOfServiceCheckboxText() { return $this->termsOfServiceCheckboxText_; }
  public function setTermsOfServiceCheckboxText($value) { $this->termsOfServiceCheckboxText_ = (string)$value; }
  
  // optional string termsOfServiceHeaderText = 7;

  protected $termsOfServiceHeaderText_;
  public function resetTermsOfServiceHeaderText() { unset($this->termsOfServiceHeaderText_); }
  public function clearTermsOfServiceHeaderText() { unset($this->termsOfServiceHeaderText_); }
  public function hasTermsOfServiceHeaderText() { return isset($this->termsOfServiceHeaderText_); }
  public function getTermsOfServiceHeaderText() { return $this->termsOfServiceHeaderText_; }
  public function setTermsOfServiceHeaderText($value) { $this->termsOfServiceHeaderText_ = (string)$value; }
  
  // optional .PurchaseResultProto purchaseResult = 8;

  protected $purchaseResult_;
  public function resetPurchaseResult() { unset($this->purchaseResult_); }
  public function clearPurchaseResult() { unset($this->purchaseResult_); }
  public function hasPurchaseResult() { return isset($this->purchaseResult_); }
  public function getPurchaseResult() { return $this->purchaseResult_; }
  public function setPurchaseResult(PurchaseResultProto $value) { $this->purchaseResult_ = $value; }
  
  // @@protoc_insertion_point(class_scope:PurchasePostResponseProto)
}

// message PurchaseProductRequestProto
class PurchaseProductRequestProto {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("PurchaseProductRequestProto: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->productType_ = $tmp;
          
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->productId_ = $tmp;
          $limit-=$len;
          break;
        case 3:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->signatureHash_ = new SignatureHashProto($fp, $len);
          ASSERT('$len == 0');
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->productType_)) {
      fwrite($fp, "\x08");
      Protobuf::write_varint($fp, (int)$this->productType_);
    }
    if (!is_null($this->productId_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, strlen((string)$this->productId_));
      fwrite($fp, (string)$this->productId_);
    }
    if (!is_null($this->signatureHash_)) {
      fwrite($fp, "\x1a");
      Protobuf::write_varint($fp, $this->signatureHash_->size()); // message
      $this->signatureHash_->write($fp);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->productType_)) {
      $size += 1 + Protobuf::size_varint($this->productType_);
    }
    if (!is_null($this->productId_)) {
      $l = strlen((string)$this->productId_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->signatureHash_)) {
      $l = $this->signatureHash_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('productType_', $this->productType_)
         . Protobuf::toString('productId_', $this->productId_)
         . Protobuf::toString('signatureHash_', $this->signatureHash_);
  }
  
  // optional int32 productType = 1;

  protected $productType_;
  public function resetProductType() { unset($this->productType_); }
  public function clearProductType() { unset($this->productType_); }
  public function hasProductType() { return isset($this->productType_); }
  public function getProductType() { return $this->productType_; }
  public function setProductType($value) { $this->productType_ = (string)$value; }
  
  // optional string productId = 2;

  protected $productId_;
  public function resetProductId() { unset($this->productId_); }
  public function clearProductId() { unset($this->productId_); }
  public function hasProductId() { return isset($this->productId_); }
  public function getProductId() { return $this->productId_; }
  public function setProductId($value) { $this->productId_ = (string)$value; }
  
  // optional .SignatureHashProto signatureHash = 3;

  protected $signatureHash_;
  public function resetSignatureHash() { unset($this->signatureHash_); }
  public function clearSignatureHash() { unset($this->signatureHash_); }
  public function hasSignatureHash() { return isset($this->signatureHash_); }
  public function getSignatureHash() { return $this->signatureHash_; }
  public function setSignatureHash(SignatureHashProto $value) { $this->signatureHash_ = $value; }
  
  // @@protoc_insertion_point(class_scope:PurchaseProductRequestProto)
}

// message PurchaseProductResponseProto
class PurchaseProductResponseProto {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("PurchaseProductResponseProto: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->title_ = $tmp;
          $limit-=$len;
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->itemTitle_ = $tmp;
          $limit-=$len;
          break;
        case 3:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->itemDescription_ = $tmp;
          $limit-=$len;
          break;
        case 4:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->merchantField_ = $tmp;
          $limit-=$len;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->title_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, strlen((string)$this->title_));
      fwrite($fp, (string)$this->title_);
    }
    if (!is_null($this->itemTitle_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, strlen((string)$this->itemTitle_));
      fwrite($fp, (string)$this->itemTitle_);
    }
    if (!is_null($this->itemDescription_)) {
      fwrite($fp, "\x1a");
      Protobuf::write_varint($fp, strlen((string)$this->itemDescription_));
      fwrite($fp, (string)$this->itemDescription_);
    }
    if (!is_null($this->merchantField_)) {
      fwrite($fp, "\"");
      Protobuf::write_varint($fp, strlen((string)$this->merchantField_));
      fwrite($fp, (string)$this->merchantField_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->title_)) {
      $l = strlen((string)$this->title_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->itemTitle_)) {
      $l = strlen((string)$this->itemTitle_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->itemDescription_)) {
      $l = strlen((string)$this->itemDescription_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->merchantField_)) {
      $l = strlen((string)$this->merchantField_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('title_', $this->title_)
         . Protobuf::toString('itemTitle_', $this->itemTitle_)
         . Protobuf::toString('itemDescription_', $this->itemDescription_)
         . Protobuf::toString('merchantField_', $this->merchantField_);
  }
  
  // optional string title = 1;

  protected $title_;
  public function resetTitle() { unset($this->title_); }
  public function clearTitle() { unset($this->title_); }
  public function hasTitle() { return isset($this->title_); }
  public function getTitle() { return $this->title_; }
  public function setTitle($value) { $this->title_ = (string)$value; }
  
  // optional string itemTitle = 2;

  protected $itemTitle_;
  public function resetItemTitle() { unset($this->itemTitle_); }
  public function clearItemTitle() { unset($this->itemTitle_); }
  public function hasItemTitle() { return isset($this->itemTitle_); }
  public function getItemTitle() { return $this->itemTitle_; }
  public function setItemTitle($value) { $this->itemTitle_ = (string)$value; }
  
  // optional string itemDescription = 3;

  protected $itemDescription_;
  public function resetItemDescription() { unset($this->itemDescription_); }
  public function clearItemDescription() { unset($this->itemDescription_); }
  public function hasItemDescription() { return isset($this->itemDescription_); }
  public function getItemDescription() { return $this->itemDescription_; }
  public function setItemDescription($value) { $this->itemDescription_ = (string)$value; }
  
  // optional string merchantField = 4;

  protected $merchantField_;
  public function resetMerchantField() { unset($this->merchantField_); }
  public function clearMerchantField() { unset($this->merchantField_); }
  public function hasMerchantField() { return isset($this->merchantField_); }
  public function getMerchantField() { return $this->merchantField_; }
  public function setMerchantField($value) { $this->merchantField_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:PurchaseProductResponseProto)
}

// message PurchaseResultProto
class PurchaseResultProto {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("PurchaseResultProto: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->resultCode_ = $tmp;
          
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->resultCodeMessage_ = $tmp;
          $limit-=$len;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->resultCode_)) {
      fwrite($fp, "\x08");
      Protobuf::write_varint($fp, (int)$this->resultCode_);
    }
    if (!is_null($this->resultCodeMessage_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, strlen((string)$this->resultCodeMessage_));
      fwrite($fp, (string)$this->resultCodeMessage_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->resultCode_)) {
      $size += 1 + Protobuf::size_varint($this->resultCode_);
    }
    if (!is_null($this->resultCodeMessage_)) {
      $l = strlen((string)$this->resultCodeMessage_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('resultCode_', $this->resultCode_)
         . Protobuf::toString('resultCodeMessage_', $this->resultCodeMessage_);
  }
  
  // optional int32 resultCode = 1;

  protected $resultCode_;
  public function resetResultCode() { unset($this->resultCode_); }
  public function clearResultCode() { unset($this->resultCode_); }
  public function hasResultCode() { return isset($this->resultCode_); }
  public function getResultCode() { return $this->resultCode_; }
  public function setResultCode($value) { $this->resultCode_ = (string)$value; }
  
  // optional string resultCodeMessage = 2;

  protected $resultCodeMessage_;
  public function resetResultCodeMessage() { unset($this->resultCodeMessage_); }
  public function clearResultCodeMessage() { unset($this->resultCodeMessage_); }
  public function hasResultCodeMessage() { return isset($this->resultCodeMessage_); }
  public function getResultCodeMessage() { return $this->resultCodeMessage_; }
  public function setResultCodeMessage($value) { $this->resultCodeMessage_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:PurchaseResultProto)
}

// message QuerySuggestionProto
class QuerySuggestionProto {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("QuerySuggestionProto: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->query_ = $tmp;
          $limit-=$len;
          break;
        case 2:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->estimatedNumResults_ = $tmp;
          
          break;
        case 3:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->queryWeight_ = $tmp;
          
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->query_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, strlen((string)$this->query_));
      fwrite($fp, (string)$this->query_);
    }
    if (!is_null($this->estimatedNumResults_)) {
      fwrite($fp, "\x10");
      Protobuf::write_varint($fp, (int)$this->estimatedNumResults_);
    }
    if (!is_null($this->queryWeight_)) {
      fwrite($fp, "\x18");
      Protobuf::write_varint($fp, (int)$this->queryWeight_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->query_)) {
      $l = strlen((string)$this->query_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->estimatedNumResults_)) {
      $size += 1 + Protobuf::size_varint($this->estimatedNumResults_);
    }
    if (!is_null($this->queryWeight_)) {
      $size += 1 + Protobuf::size_varint($this->queryWeight_);
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('query_', $this->query_)
         . Protobuf::toString('estimatedNumResults_', $this->estimatedNumResults_)
         . Protobuf::toString('queryWeight_', $this->queryWeight_);
  }
  
  // optional string query = 1;

  protected $query_;
  public function resetQuery() { unset($this->query_); }
  public function clearQuery() { unset($this->query_); }
  public function hasQuery() { return isset($this->query_); }
  public function getQuery() { return $this->query_; }
  public function setQuery($value) { $this->query_ = (string)$value; }
  
  // optional int32 estimatedNumResults = 2;

  protected $estimatedNumResults_;
  public function resetEstimatedNumResults() { unset($this->estimatedNumResults_); }
  public function clearEstimatedNumResults() { unset($this->estimatedNumResults_); }
  public function hasEstimatedNumResults() { return isset($this->estimatedNumResults_); }
  public function getEstimatedNumResults() { return $this->estimatedNumResults_; }
  public function setEstimatedNumResults($value) { $this->estimatedNumResults_ = (string)$value; }
  
  // optional int32 queryWeight = 3;

  protected $queryWeight_;
  public function resetQueryWeight() { unset($this->queryWeight_); }
  public function clearQueryWeight() { unset($this->queryWeight_); }
  public function hasQueryWeight() { return isset($this->queryWeight_); }
  public function getQueryWeight() { return $this->queryWeight_; }
  public function setQueryWeight($value) { $this->queryWeight_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:QuerySuggestionProto)
}

// message QuerySuggestionRequestProto
class QuerySuggestionRequestProto {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("QuerySuggestionRequestProto: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->query_ = $tmp;
          $limit-=$len;
          break;
        case 2:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->requestType_ = $tmp;
          
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->query_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, strlen((string)$this->query_));
      fwrite($fp, (string)$this->query_);
    }
    if (!is_null($this->requestType_)) {
      fwrite($fp, "\x10");
      Protobuf::write_varint($fp, (int)$this->requestType_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->query_)) {
      $l = strlen((string)$this->query_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->requestType_)) {
      $size += 1 + Protobuf::size_varint($this->requestType_);
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('query_', $this->query_)
         . Protobuf::toString('requestType_', $this->requestType_);
  }
  
  // optional string query = 1;

  protected $query_;
  public function resetQuery() { unset($this->query_); }
  public function clearQuery() { unset($this->query_); }
  public function hasQuery() { return isset($this->query_); }
  public function getQuery() { return $this->query_; }
  public function setQuery($value) { $this->query_ = (string)$value; }
  
  // optional int32 requestType = 2;

  protected $requestType_;
  public function resetRequestType() { unset($this->requestType_); }
  public function clearRequestType() { unset($this->requestType_); }
  public function hasRequestType() { return isset($this->requestType_); }
  public function getRequestType() { return $this->requestType_; }
  public function setRequestType($value) { $this->requestType_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:QuerySuggestionRequestProto)
}


// group QuerySuggestionResponseProto.Suggestion
class QuerySuggestionResponseProto_Suggestion {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("QuerySuggestionResponseProto_Suggestion: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 4');
          break 2;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->appSuggestion_ = new AppSuggestionProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 3:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->querySuggestion_ = new QuerySuggestionProto($fp, $len);
          ASSERT('$len == 0');
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->appSuggestion_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, $this->appSuggestion_->size()); // message
      $this->appSuggestion_->write($fp);
    }
    if (!is_null($this->querySuggestion_)) {
      fwrite($fp, "\x1a");
      Protobuf::write_varint($fp, $this->querySuggestion_->size()); // message
      $this->querySuggestion_->write($fp);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->appSuggestion_)) {
      $l = $this->appSuggestion_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->querySuggestion_)) {
      $l = $this->querySuggestion_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('appSuggestion_', $this->appSuggestion_)
         . Protobuf::toString('querySuggestion_', $this->querySuggestion_);
  }
  
  // optional .AppSuggestionProto appSuggestion = 2;

  protected $appSuggestion_;
  public function resetAppSuggestion() { unset($this->appSuggestion_); }
  public function clearAppSuggestion() { unset($this->appSuggestion_); }
  public function hasAppSuggestion() { return isset($this->appSuggestion_); }
  public function getAppSuggestion() { return $this->appSuggestion_; }
  public function setAppSuggestion(AppSuggestionProto $value) { $this->appSuggestion_ = $value; }
  
  // optional .QuerySuggestionProto querySuggestion = 3;

  protected $querySuggestion_;
  public function resetQuerySuggestion() { unset($this->querySuggestion_); }
  public function clearQuerySuggestion() { unset($this->querySuggestion_); }
  public function hasQuerySuggestion() { return isset($this->querySuggestion_); }
  public function getQuerySuggestion() { return $this->querySuggestion_; }
  public function setQuerySuggestion(QuerySuggestionProto $value) { $this->querySuggestion_ = $value; }
  
  // @@protoc_insertion_point(class_scope:QuerySuggestionResponseProto.Suggestion)
}

// message QuerySuggestionResponseProto
class QuerySuggestionResponseProto {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("QuerySuggestionResponseProto: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 3');
          $this->suggestion_[] = new QuerySuggestionResponseProto_Suggestion($fp, $limit);
          break;
        case 4:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->estimatedNumAppSuggestions_ = $tmp;
          
          break;
        case 5:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->estimatedNumQuerySuggestions_ = $tmp;
          
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->suggestion_))
      foreach($this->suggestion_ as $v) {
        fwrite($fp, "\x0b");
        $v->write($fp); // group
        fwrite($fp, "\x0c");
      }
    if (!is_null($this->estimatedNumAppSuggestions_)) {
      fwrite($fp, " ");
      Protobuf::write_varint($fp, (int)$this->estimatedNumAppSuggestions_);
    }
    if (!is_null($this->estimatedNumQuerySuggestions_)) {
      fwrite($fp, "(");
      Protobuf::write_varint($fp, (int)$this->estimatedNumQuerySuggestions_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->suggestion_))
      foreach($this->suggestion_ as $v) {
        $size += 2 + $v->size();
      }
    if (!is_null($this->estimatedNumAppSuggestions_)) {
      $size += 1 + Protobuf::size_varint($this->estimatedNumAppSuggestions_);
    }
    if (!is_null($this->estimatedNumQuerySuggestions_)) {
      $size += 1 + Protobuf::size_varint($this->estimatedNumQuerySuggestions_);
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('suggestion_', $this->suggestion_)
         . Protobuf::toString('estimatedNumAppSuggestions_', $this->estimatedNumAppSuggestions_)
         . Protobuf::toString('estimatedNumQuerySuggestions_', $this->estimatedNumQuerySuggestions_);
  }
  
  // repeated group Suggestion = 1
  protected $suggestion_ = array();
  public function clearSuggestion() { $this->suggestion_ = array(); }
  public function getSuggestionCount() { return count($this->suggestion_); }
  public function hasSuggestion() { return (count($this->suggestion_) > 0); }
  public function indexOfSuggestion($value) { return array_search($value,$this->suggestion_);}
  public function removeSuggestion($index) { unset($this->suggestion_[$index]); }
  public function removeValSuggestion($value) { $idx = array_search($value,$this->suggestion_); if($idx !== FALSE){unset($this->suggestion_[$idx]); }}
  public function removeValsSuggestion($values) { foreach($values as $value){$idx = array_search($value,$this->suggestion_); if($idx !== FALSE){unset($this->suggestion_[$idx]); }}}
  public function pushSuggestion($newvar) { return array_push($this->suggestion_,$newvar); }
  public function popSuggestion() { return array_pop($this->suggestion_); }
  public function shiftSuggestion() { return array_shift($this->suggestion_); }
  public function unshiftSuggestion($newvar) { return array_unshift($this->suggestion_,$newvar); }
  public function getSuggestion($index) { return $this->suggestion_[$index]; }
  public function getSuggestionArray() { return $this->suggestion_; }
  public function setSuggestion($index, $value) {$this->suggestion_[$index] = $value;	}
  public function addSuggestion($value) { $this->suggestion_[] = $value; }
  public function addAllSuggestion(array $values) { foreach($values as $value) {$this->suggestion_[] = $value;} }
  
  // optional int32 estimatedNumAppSuggestions = 4;

  protected $estimatedNumAppSuggestions_;
  public function resetEstimatedNumAppSuggestions() { unset($this->estimatedNumAppSuggestions_); }
  public function clearEstimatedNumAppSuggestions() { unset($this->estimatedNumAppSuggestions_); }
  public function hasEstimatedNumAppSuggestions() { return isset($this->estimatedNumAppSuggestions_); }
  public function getEstimatedNumAppSuggestions() { return $this->estimatedNumAppSuggestions_; }
  public function setEstimatedNumAppSuggestions($value) { $this->estimatedNumAppSuggestions_ = (string)$value; }
  
  // optional int32 estimatedNumQuerySuggestions = 5;

  protected $estimatedNumQuerySuggestions_;
  public function resetEstimatedNumQuerySuggestions() { unset($this->estimatedNumQuerySuggestions_); }
  public function clearEstimatedNumQuerySuggestions() { unset($this->estimatedNumQuerySuggestions_); }
  public function hasEstimatedNumQuerySuggestions() { return isset($this->estimatedNumQuerySuggestions_); }
  public function getEstimatedNumQuerySuggestions() { return $this->estimatedNumQuerySuggestions_; }
  public function setEstimatedNumQuerySuggestions($value) { $this->estimatedNumQuerySuggestions_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:QuerySuggestionResponseProto)
}

// message RateCommentRequestProto
class RateCommentRequestProto {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("RateCommentRequestProto: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->assetId_ = $tmp;
          $limit-=$len;
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->creatorId_ = $tmp;
          $limit-=$len;
          break;
        case 3:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->commentRating_ = $tmp;
          
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->assetId_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, strlen((string)$this->assetId_));
      fwrite($fp, (string)$this->assetId_);
    }
    if (!is_null($this->creatorId_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, strlen((string)$this->creatorId_));
      fwrite($fp, (string)$this->creatorId_);
    }
    if (!is_null($this->commentRating_)) {
      fwrite($fp, "\x18");
      Protobuf::write_varint($fp, (int)$this->commentRating_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->assetId_)) {
      $l = strlen((string)$this->assetId_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->creatorId_)) {
      $l = strlen((string)$this->creatorId_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->commentRating_)) {
      $size += 1 + Protobuf::size_varint($this->commentRating_);
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('assetId_', $this->assetId_)
         . Protobuf::toString('creatorId_', $this->creatorId_)
         . Protobuf::toString('commentRating_', $this->commentRating_);
  }
  
  // optional string assetId = 1;

  protected $assetId_;
  public function resetAssetId() { unset($this->assetId_); }
  public function clearAssetId() { unset($this->assetId_); }
  public function hasAssetId() { return isset($this->assetId_); }
  public function getAssetId() { return $this->assetId_; }
  public function setAssetId($value) { $this->assetId_ = (string)$value; }
  
  // optional string creatorId = 2;

  protected $creatorId_;
  public function resetCreatorId() { unset($this->creatorId_); }
  public function clearCreatorId() { unset($this->creatorId_); }
  public function hasCreatorId() { return isset($this->creatorId_); }
  public function getCreatorId() { return $this->creatorId_; }
  public function setCreatorId($value) { $this->creatorId_ = (string)$value; }
  
  // optional int32 commentRating = 3;

  protected $commentRating_;
  public function resetCommentRating() { unset($this->commentRating_); }
  public function clearCommentRating() { unset($this->commentRating_); }
  public function hasCommentRating() { return isset($this->commentRating_); }
  public function getCommentRating() { return $this->commentRating_; }
  public function setCommentRating($value) { $this->commentRating_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:RateCommentRequestProto)
}

// message RateCommentResponseProto
class RateCommentResponseProto {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("RateCommentResponseProto: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  public function size() {
    $size = 0;
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown);
  }
  
  // @@protoc_insertion_point(class_scope:RateCommentResponseProto)
}

// message ReconstructDatabaseRequestProto
class ReconstructDatabaseRequestProto {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("ReconstructDatabaseRequestProto: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->retrieveFullHistory_ = $tmp > 0 ? true : false;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->retrieveFullHistory_)) {
      fwrite($fp, "\x08");
      Protobuf::write_varint($fp, (int)$this->retrieveFullHistory_ ? 1 : 0);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->retrieveFullHistory_)) {
      $size += 2;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('retrieveFullHistory_', $this->retrieveFullHistory_);
  }
  
  // optional bool retrieveFullHistory = 1;

  protected $retrieveFullHistory_;
  public function resetRetrieveFullHistory() { unset($this->retrieveFullHistory_); }
  public function clearRetrieveFullHistory() { unset($this->retrieveFullHistory_); }
  public function hasRetrieveFullHistory() { return isset($this->retrieveFullHistory_); }
  public function getRetrieveFullHistory() { return $this->retrieveFullHistory_; }
  public function setRetrieveFullHistory($value) { $this->retrieveFullHistory_ = (bool)$value; }
  
  // @@protoc_insertion_point(class_scope:ReconstructDatabaseRequestProto)
}

// message ReconstructDatabaseResponseProto
class ReconstructDatabaseResponseProto {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("ReconstructDatabaseResponseProto: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->asset_[] = new AssetIdentifierProto($fp, $len);
          ASSERT('$len == 0');
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->asset_))
      foreach($this->asset_ as $v) {
        fwrite($fp, "\x0a");
        Protobuf::write_varint($fp, $v->size()); // message
        $v->write($fp);
      }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->asset_))
      foreach($this->asset_ as $v) {
        $l = $v->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('asset_', $this->asset_);
  }
  
  // repeated .AssetIdentifierProto asset = 1;

  protected $asset_ = array();
  public function clearAsset() { $this->asset_ = array(); }
  public function getAssetCount() { return count($this->asset_); }
  public function hasAsset() { return (count($this->asset_) > 0); }
  public function indexOfAsset($value) { return array_search($value,$this->asset_);}
  public function removeAsset($index) { unset($this->asset_[$index]); }
  public function removeValAsset($value) { $idx = array_search($value,$this->asset_); if($idx !== FALSE){unset($this->asset_[$idx]); }}
  public function removeValsAsset($values) { foreach($values as $value){$idx = array_search($value,$this->asset_); if($idx !== FALSE){unset($this->asset_[$idx]); }}}
  public function pushAsset($newvar) { return array_push($this->asset_,$newvar); }
  public function popAsset() { return array_pop($this->asset_); }
  public function shiftAsset() { return array_shift($this->asset_); }
  public function unshiftAsset($newvar) { return array_unshift($this->asset_,$newvar); }
  public function getAsset($index) { return $this->asset_[$index]; }
  public function getAssetArray() { return $this->asset_; }
  public function setAsset($index, $value) {$this->asset_[$index] = $value;	}
  public function addAsset($value) { $this->asset_[] = $value; }
  public function addAllAsset(array $values) { foreach($values as $value) {$this->asset_[] = $value;} }
  
  // @@protoc_insertion_point(class_scope:ReconstructDatabaseResponseProto)
}

// message RefundRequestProto
class RefundRequestProto {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("RefundRequestProto: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->assetId_ = $tmp;
          $limit-=$len;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->assetId_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, strlen((string)$this->assetId_));
      fwrite($fp, (string)$this->assetId_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->assetId_)) {
      $l = strlen((string)$this->assetId_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('assetId_', $this->assetId_);
  }
  
  // optional string assetId = 1;

  protected $assetId_;
  public function resetAssetId() { unset($this->assetId_); }
  public function clearAssetId() { unset($this->assetId_); }
  public function hasAssetId() { return isset($this->assetId_); }
  public function getAssetId() { return $this->assetId_; }
  public function setAssetId($value) { $this->assetId_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:RefundRequestProto)
}

// message RefundResponseProto
class RefundResponseProto {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("RefundResponseProto: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->result_ = $tmp;
          
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->asset_ = new ExternalAssetProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 3:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->resultDetail_ = $tmp;
          $limit-=$len;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->result_)) {
      fwrite($fp, "\x08");
      Protobuf::write_varint($fp, (int)$this->result_);
    }
    if (!is_null($this->asset_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, $this->asset_->size()); // message
      $this->asset_->write($fp);
    }
    if (!is_null($this->resultDetail_)) {
      fwrite($fp, "\x1a");
      Protobuf::write_varint($fp, strlen((string)$this->resultDetail_));
      fwrite($fp, (string)$this->resultDetail_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->result_)) {
      $size += 1 + Protobuf::size_varint($this->result_);
    }
    if (!is_null($this->asset_)) {
      $l = $this->asset_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->resultDetail_)) {
      $l = strlen((string)$this->resultDetail_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('result_', $this->result_)
         . Protobuf::toString('asset_', $this->asset_)
         . Protobuf::toString('resultDetail_', $this->resultDetail_);
  }
  
  // optional int32 result = 1;

  protected $result_;
  public function resetResult() { unset($this->result_); }
  public function clearResult() { unset($this->result_); }
  public function hasResult() { return isset($this->result_); }
  public function getResult() { return $this->result_; }
  public function setResult($value) { $this->result_ = (string)$value; }
  
  // optional .ExternalAssetProto asset = 2;

  protected $asset_;
  public function resetAsset() { unset($this->asset_); }
  public function clearAsset() { unset($this->asset_); }
  public function hasAsset() { return isset($this->asset_); }
  public function getAsset() { return $this->asset_; }
  public function setAsset(ExternalAssetProto $value) { $this->asset_ = $value; }
  
  // optional string resultDetail = 3;

  protected $resultDetail_;
  public function resetResultDetail() { unset($this->resultDetail_); }
  public function clearResultDetail() { unset($this->resultDetail_); }
  public function hasResultDetail() { return isset($this->resultDetail_); }
  public function getResultDetail() { return $this->resultDetail_; }
  public function setResultDetail($value) { $this->resultDetail_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:RefundResponseProto)
}

// message RemoveAssetRequestProto
class RemoveAssetRequestProto {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("RemoveAssetRequestProto: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->assetId_ = $tmp;
          $limit-=$len;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->assetId_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, strlen((string)$this->assetId_));
      fwrite($fp, (string)$this->assetId_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->assetId_)) {
      $l = strlen((string)$this->assetId_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('assetId_', $this->assetId_);
  }
  
  // optional string assetId = 1;

  protected $assetId_;
  public function resetAssetId() { unset($this->assetId_); }
  public function clearAssetId() { unset($this->assetId_); }
  public function hasAssetId() { return isset($this->assetId_); }
  public function getAssetId() { return $this->assetId_; }
  public function setAssetId($value) { $this->assetId_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:RemoveAssetRequestProto)
}

// message RequestPropertiesProto
class RequestPropertiesProto {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("RequestPropertiesProto: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->userAuthToken_ = $tmp;
          $limit-=$len;
          break;
        case 2:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->userAuthTokenSecure_ = $tmp > 0 ? true : false;
          break;
        case 3:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->softwareVersion_ = $tmp;
          
          break;
        case 4:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->aid_ = $tmp;
          $limit-=$len;
          break;
        case 5:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->productNameAndVersion_ = $tmp;
          $limit-=$len;
          break;
        case 6:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->userLanguage_ = $tmp;
          $limit-=$len;
          break;
        case 7:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->userCountry_ = $tmp;
          $limit-=$len;
          break;
        case 8:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->operatorName_ = $tmp;
          $limit-=$len;
          break;
        case 9:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->simOperatorName_ = $tmp;
          $limit-=$len;
          break;
        case 10:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->operatorNumericName_ = $tmp;
          $limit-=$len;
          break;
        case 11:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->simOperatorNumericName_ = $tmp;
          $limit-=$len;
          break;
        case 12:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->clientId_ = $tmp;
          $limit-=$len;
          break;
        case 13:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->loggingId_ = $tmp;
          $limit-=$len;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->userAuthToken_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, strlen((string)$this->userAuthToken_));
      fwrite($fp, (string)$this->userAuthToken_);
    }
    if (!is_null($this->userAuthTokenSecure_)) {
      fwrite($fp, "\x10");
      Protobuf::write_varint($fp, (int)$this->userAuthTokenSecure_ ? 1 : 0);
    }
    if (!is_null($this->softwareVersion_)) {
      fwrite($fp, "\x18");
      Protobuf::write_varint($fp, (int)$this->softwareVersion_);
    }
    if (!is_null($this->aid_)) {
      fwrite($fp, "\"");
      Protobuf::write_varint($fp, strlen((string)$this->aid_));
      fwrite($fp, (string)$this->aid_);
    }
    if (!is_null($this->productNameAndVersion_)) {
      fwrite($fp, "*");
      Protobuf::write_varint($fp, strlen((string)$this->productNameAndVersion_));
      fwrite($fp, (string)$this->productNameAndVersion_);
    }
    if (!is_null($this->userLanguage_)) {
      fwrite($fp, "2");
      Protobuf::write_varint($fp, strlen((string)$this->userLanguage_));
      fwrite($fp, (string)$this->userLanguage_);
    }
    if (!is_null($this->userCountry_)) {
      fwrite($fp, ":");
      Protobuf::write_varint($fp, strlen((string)$this->userCountry_));
      fwrite($fp, (string)$this->userCountry_);
    }
    if (!is_null($this->operatorName_)) {
      fwrite($fp, "B");
      Protobuf::write_varint($fp, strlen((string)$this->operatorName_));
      fwrite($fp, (string)$this->operatorName_);
    }
    if (!is_null($this->simOperatorName_)) {
      fwrite($fp, "J");
      Protobuf::write_varint($fp, strlen((string)$this->simOperatorName_));
      fwrite($fp, (string)$this->simOperatorName_);
    }
    if (!is_null($this->operatorNumericName_)) {
      fwrite($fp, "R");
      Protobuf::write_varint($fp, strlen((string)$this->operatorNumericName_));
      fwrite($fp, (string)$this->operatorNumericName_);
    }
    if (!is_null($this->simOperatorNumericName_)) {
      fwrite($fp, "Z");
      Protobuf::write_varint($fp, strlen((string)$this->simOperatorNumericName_));
      fwrite($fp, (string)$this->simOperatorNumericName_);
    }
    if (!is_null($this->clientId_)) {
      fwrite($fp, "b");
      Protobuf::write_varint($fp, strlen((string)$this->clientId_));
      fwrite($fp, (string)$this->clientId_);
    }
    if (!is_null($this->loggingId_)) {
      fwrite($fp, "j");
      Protobuf::write_varint($fp, strlen((string)$this->loggingId_));
      fwrite($fp, (string)$this->loggingId_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->userAuthToken_)) {
      $l = strlen((string)$this->userAuthToken_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->userAuthTokenSecure_)) {
      $size += 2;
    }
    if (!is_null($this->softwareVersion_)) {
      $size += 1 + Protobuf::size_varint($this->softwareVersion_);
    }
    if (!is_null($this->aid_)) {
      $l = strlen((string)$this->aid_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->productNameAndVersion_)) {
      $l = strlen((string)$this->productNameAndVersion_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->userLanguage_)) {
      $l = strlen((string)$this->userLanguage_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->userCountry_)) {
      $l = strlen((string)$this->userCountry_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->operatorName_)) {
      $l = strlen((string)$this->operatorName_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->simOperatorName_)) {
      $l = strlen((string)$this->simOperatorName_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->operatorNumericName_)) {
      $l = strlen((string)$this->operatorNumericName_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->simOperatorNumericName_)) {
      $l = strlen((string)$this->simOperatorNumericName_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->clientId_)) {
      $l = strlen((string)$this->clientId_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->loggingId_)) {
      $l = strlen((string)$this->loggingId_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('userAuthToken_', $this->userAuthToken_)
         . Protobuf::toString('userAuthTokenSecure_', $this->userAuthTokenSecure_)
         . Protobuf::toString('softwareVersion_', $this->softwareVersion_)
         . Protobuf::toString('aid_', $this->aid_)
         . Protobuf::toString('productNameAndVersion_', $this->productNameAndVersion_)
         . Protobuf::toString('userLanguage_', $this->userLanguage_)
         . Protobuf::toString('userCountry_', $this->userCountry_)
         . Protobuf::toString('operatorName_', $this->operatorName_)
         . Protobuf::toString('simOperatorName_', $this->simOperatorName_)
         . Protobuf::toString('operatorNumericName_', $this->operatorNumericName_)
         . Protobuf::toString('simOperatorNumericName_', $this->simOperatorNumericName_)
         . Protobuf::toString('clientId_', $this->clientId_)
         . Protobuf::toString('loggingId_', $this->loggingId_);
  }
  
  // optional string userAuthToken = 1;

  protected $userAuthToken_;
  public function resetUserAuthToken() { unset($this->userAuthToken_); }
  public function clearUserAuthToken() { unset($this->userAuthToken_); }
  public function hasUserAuthToken() { return isset($this->userAuthToken_); }
  public function getUserAuthToken() { return $this->userAuthToken_; }
  public function setUserAuthToken($value) { $this->userAuthToken_ = (string)$value; }
  
  // optional bool userAuthTokenSecure = 2;

  protected $userAuthTokenSecure_;
  public function resetUserAuthTokenSecure() { unset($this->userAuthTokenSecure_); }
  public function clearUserAuthTokenSecure() { unset($this->userAuthTokenSecure_); }
  public function hasUserAuthTokenSecure() { return isset($this->userAuthTokenSecure_); }
  public function getUserAuthTokenSecure() { return $this->userAuthTokenSecure_; }
  public function setUserAuthTokenSecure($value) { $this->userAuthTokenSecure_ = (bool)$value; }
  
  // optional int32 softwareVersion = 3;

  protected $softwareVersion_;
  public function resetSoftwareVersion() { unset($this->softwareVersion_); }
  public function clearSoftwareVersion() { unset($this->softwareVersion_); }
  public function hasSoftwareVersion() { return isset($this->softwareVersion_); }
  public function getSoftwareVersion() { return $this->softwareVersion_; }
  public function setSoftwareVersion($value) { $this->softwareVersion_ = (string)$value; }
  
  // optional string aid = 4;

  protected $aid_;
  public function resetAid() { unset($this->aid_); }
  public function clearAid() { unset($this->aid_); }
  public function hasAid() { return isset($this->aid_); }
  public function getAid() { return $this->aid_; }
  public function setAid($value) { $this->aid_ = (string)$value; }
  
  // optional string productNameAndVersion = 5;

  protected $productNameAndVersion_;
  public function resetProductNameAndVersion() { unset($this->productNameAndVersion_); }
  public function clearProductNameAndVersion() { unset($this->productNameAndVersion_); }
  public function hasProductNameAndVersion() { return isset($this->productNameAndVersion_); }
  public function getProductNameAndVersion() { return $this->productNameAndVersion_; }
  public function setProductNameAndVersion($value) { $this->productNameAndVersion_ = (string)$value; }
  
  // optional string userLanguage = 6;

  protected $userLanguage_;
  public function resetUserLanguage() { unset($this->userLanguage_); }
  public function clearUserLanguage() { unset($this->userLanguage_); }
  public function hasUserLanguage() { return isset($this->userLanguage_); }
  public function getUserLanguage() { return $this->userLanguage_; }
  public function setUserLanguage($value) { $this->userLanguage_ = (string)$value; }
  
  // optional string userCountry = 7;

  protected $userCountry_;
  public function resetUserCountry() { unset($this->userCountry_); }
  public function clearUserCountry() { unset($this->userCountry_); }
  public function hasUserCountry() { return isset($this->userCountry_); }
  public function getUserCountry() { return $this->userCountry_; }
  public function setUserCountry($value) { $this->userCountry_ = (string)$value; }
  
  // optional string operatorName = 8;

  protected $operatorName_;
  public function resetOperatorName() { unset($this->operatorName_); }
  public function clearOperatorName() { unset($this->operatorName_); }
  public function hasOperatorName() { return isset($this->operatorName_); }
  public function getOperatorName() { return $this->operatorName_; }
  public function setOperatorName($value) { $this->operatorName_ = (string)$value; }
  
  // optional string simOperatorName = 9;

  protected $simOperatorName_;
  public function resetSimOperatorName() { unset($this->simOperatorName_); }
  public function clearSimOperatorName() { unset($this->simOperatorName_); }
  public function hasSimOperatorName() { return isset($this->simOperatorName_); }
  public function getSimOperatorName() { return $this->simOperatorName_; }
  public function setSimOperatorName($value) { $this->simOperatorName_ = (string)$value; }
  
  // optional string operatorNumericName = 10;

  protected $operatorNumericName_;
  public function resetOperatorNumericName() { unset($this->operatorNumericName_); }
  public function clearOperatorNumericName() { unset($this->operatorNumericName_); }
  public function hasOperatorNumericName() { return isset($this->operatorNumericName_); }
  public function getOperatorNumericName() { return $this->operatorNumericName_; }
  public function setOperatorNumericName($value) { $this->operatorNumericName_ = (string)$value; }
  
  // optional string simOperatorNumericName = 11;

  protected $simOperatorNumericName_;
  public function resetSimOperatorNumericName() { unset($this->simOperatorNumericName_); }
  public function clearSimOperatorNumericName() { unset($this->simOperatorNumericName_); }
  public function hasSimOperatorNumericName() { return isset($this->simOperatorNumericName_); }
  public function getSimOperatorNumericName() { return $this->simOperatorNumericName_; }
  public function setSimOperatorNumericName($value) { $this->simOperatorNumericName_ = (string)$value; }
  
  // optional string clientId = 12;

  protected $clientId_;
  public function resetClientId() { unset($this->clientId_); }
  public function clearClientId() { unset($this->clientId_); }
  public function hasClientId() { return isset($this->clientId_); }
  public function getClientId() { return $this->clientId_; }
  public function setClientId($value) { $this->clientId_ = (string)$value; }
  
  // optional string loggingId = 13;

  protected $loggingId_;
  public function resetLoggingId() { unset($this->loggingId_); }
  public function clearLoggingId() { unset($this->loggingId_); }
  public function hasLoggingId() { return isset($this->loggingId_); }
  public function getLoggingId() { return $this->loggingId_; }
  public function setLoggingId($value) { $this->loggingId_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:RequestPropertiesProto)
}


// group RequestProto.Request
class RequestProto_Request {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("RequestProto_Request: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 2:
          ASSERT('$wire == 4');
          break 2;
        case 3:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->requestSpecificProperties_ = new RequestSpecificPropertiesProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 4:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->assetRequest_ = new AssetsRequestProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 5:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->commentsRequest_ = new CommentsRequestProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 6:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->modifyCommentRequest_ = new ModifyCommentRequestProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 7:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->purchasePostRequest_ = new PurchasePostRequestProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 8:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->purchaseOrderRequest_ = new PurchaseOrderRequestProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 9:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->contentSyncRequest_ = new ContentSyncRequestProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 10:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->getAssetRequest_ = new GetAssetRequestProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 11:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->getImageRequest_ = new GetImageRequestProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 12:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->refundRequest_ = new RefundRequestProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 13:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->purchaseMetadataRequest_ = new PurchaseMetadataRequestProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 14:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->subCategoriesRequest_ = new GetSubCategoriesRequestProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 16:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->uninstallReasonRequest_ = new UninstallReasonRequestProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 17:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->rateCommentRequest_ = new RateCommentRequestProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 18:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->checkLicenseRequest_ = new CheckLicenseRequestProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 19:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->getMarketMetadataRequest_ = new GetMarketMetadataRequestProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 21:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->getCategoriesRequest_ = new GetCategoriesRequestProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 22:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->getCarrierInfoRequest_ = new GetCarrierInfoRequestProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 23:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->removeAssetRequest_ = new RemoveAssetRequestProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 24:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->restoreApplicationsRequest_ = new RestoreApplicationsRequestProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 25:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->querySuggestionRequest_ = new QuerySuggestionRequestProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 26:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->billingEventRequest_ = new BillingEventRequestProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 27:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->paypalPreapprovalRequest_ = new PaypalPreapprovalRequestProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 28:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->paypalPreapprovalDetailsRequest_ = new PaypalPreapprovalDetailsRequestProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 29:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->paypalCreateAccountRequest_ = new PaypalCreateAccountRequestProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 30:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->paypalPreapprovalCredentialsRequest_ = new PaypalPreapprovalCredentialsRequestProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 31:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->inAppRestoreTransactionsRequest_ = new InAppRestoreTransactionsRequestProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 32:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->inAppPurchaseInformationRequest_ = new InAppPurchaseInformationRequestProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 33:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->checkForNotificationsRequest_ = new CheckForNotificationsRequestProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 34:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->ackNotificationsRequest_ = new AckNotificationsRequestProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 35:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->purchaseProductRequest_ = new PurchaseProductRequestProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 36:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->reconstructDatabaseRequest_ = new ReconstructDatabaseRequestProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 37:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->paypalMassageAddressRequest_ = new PaypalMassageAddressRequestProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 38:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->getAddressSnippetRequest_ = new GetAddressSnippetRequestProto($fp, $len);
          ASSERT('$len == 0');
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->requestSpecificProperties_)) {
      fwrite($fp, "\x1a");
      Protobuf::write_varint($fp, $this->requestSpecificProperties_->size()); // message
      $this->requestSpecificProperties_->write($fp);
    }
    if (!is_null($this->assetRequest_)) {
      fwrite($fp, "\"");
      Protobuf::write_varint($fp, $this->assetRequest_->size()); // message
      $this->assetRequest_->write($fp);
    }
    if (!is_null($this->commentsRequest_)) {
      fwrite($fp, "*");
      Protobuf::write_varint($fp, $this->commentsRequest_->size()); // message
      $this->commentsRequest_->write($fp);
    }
    if (!is_null($this->modifyCommentRequest_)) {
      fwrite($fp, "2");
      Protobuf::write_varint($fp, $this->modifyCommentRequest_->size()); // message
      $this->modifyCommentRequest_->write($fp);
    }
    if (!is_null($this->purchasePostRequest_)) {
      fwrite($fp, ":");
      Protobuf::write_varint($fp, $this->purchasePostRequest_->size()); // message
      $this->purchasePostRequest_->write($fp);
    }
    if (!is_null($this->purchaseOrderRequest_)) {
      fwrite($fp, "B");
      Protobuf::write_varint($fp, $this->purchaseOrderRequest_->size()); // message
      $this->purchaseOrderRequest_->write($fp);
    }
    if (!is_null($this->contentSyncRequest_)) {
      fwrite($fp, "J");
      Protobuf::write_varint($fp, $this->contentSyncRequest_->size()); // message
      $this->contentSyncRequest_->write($fp);
    }
    if (!is_null($this->getAssetRequest_)) {
      fwrite($fp, "R");
      Protobuf::write_varint($fp, $this->getAssetRequest_->size()); // message
      $this->getAssetRequest_->write($fp);
    }
    if (!is_null($this->getImageRequest_)) {
      fwrite($fp, "Z");
      Protobuf::write_varint($fp, $this->getImageRequest_->size()); // message
      $this->getImageRequest_->write($fp);
    }
    if (!is_null($this->refundRequest_)) {
      fwrite($fp, "b");
      Protobuf::write_varint($fp, $this->refundRequest_->size()); // message
      $this->refundRequest_->write($fp);
    }
    if (!is_null($this->purchaseMetadataRequest_)) {
      fwrite($fp, "j");
      Protobuf::write_varint($fp, $this->purchaseMetadataRequest_->size()); // message
      $this->purchaseMetadataRequest_->write($fp);
    }
    if (!is_null($this->subCategoriesRequest_)) {
      fwrite($fp, "r");
      Protobuf::write_varint($fp, $this->subCategoriesRequest_->size()); // message
      $this->subCategoriesRequest_->write($fp);
    }
    if (!is_null($this->uninstallReasonRequest_)) {
      fwrite($fp, "\x82\x01");
      Protobuf::write_varint($fp, $this->uninstallReasonRequest_->size()); // message
      $this->uninstallReasonRequest_->write($fp);
    }
    if (!is_null($this->rateCommentRequest_)) {
      fwrite($fp, "\x8a\x01");
      Protobuf::write_varint($fp, $this->rateCommentRequest_->size()); // message
      $this->rateCommentRequest_->write($fp);
    }
    if (!is_null($this->checkLicenseRequest_)) {
      fwrite($fp, "\x92\x01");
      Protobuf::write_varint($fp, $this->checkLicenseRequest_->size()); // message
      $this->checkLicenseRequest_->write($fp);
    }
    if (!is_null($this->getMarketMetadataRequest_)) {
      fwrite($fp, "\x9a\x01");
      Protobuf::write_varint($fp, $this->getMarketMetadataRequest_->size()); // message
      $this->getMarketMetadataRequest_->write($fp);
    }
    if (!is_null($this->getCategoriesRequest_)) {
      fwrite($fp, "\xaa\x01");
      Protobuf::write_varint($fp, $this->getCategoriesRequest_->size()); // message
      $this->getCategoriesRequest_->write($fp);
    }
    if (!is_null($this->getCarrierInfoRequest_)) {
      fwrite($fp, "\xb2\x01");
      Protobuf::write_varint($fp, $this->getCarrierInfoRequest_->size()); // message
      $this->getCarrierInfoRequest_->write($fp);
    }
    if (!is_null($this->removeAssetRequest_)) {
      fwrite($fp, "\xba\x01");
      Protobuf::write_varint($fp, $this->removeAssetRequest_->size()); // message
      $this->removeAssetRequest_->write($fp);
    }
    if (!is_null($this->restoreApplicationsRequest_)) {
      fwrite($fp, "\xc2\x01");
      Protobuf::write_varint($fp, $this->restoreApplicationsRequest_->size()); // message
      $this->restoreApplicationsRequest_->write($fp);
    }
    if (!is_null($this->querySuggestionRequest_)) {
      fwrite($fp, "\xca\x01");
      Protobuf::write_varint($fp, $this->querySuggestionRequest_->size()); // message
      $this->querySuggestionRequest_->write($fp);
    }
    if (!is_null($this->billingEventRequest_)) {
      fwrite($fp, "\xd2\x01");
      Protobuf::write_varint($fp, $this->billingEventRequest_->size()); // message
      $this->billingEventRequest_->write($fp);
    }
    if (!is_null($this->paypalPreapprovalRequest_)) {
      fwrite($fp, "\xda\x01");
      Protobuf::write_varint($fp, $this->paypalPreapprovalRequest_->size()); // message
      $this->paypalPreapprovalRequest_->write($fp);
    }
    if (!is_null($this->paypalPreapprovalDetailsRequest_)) {
      fwrite($fp, "\xe2\x01");
      Protobuf::write_varint($fp, $this->paypalPreapprovalDetailsRequest_->size()); // message
      $this->paypalPreapprovalDetailsRequest_->write($fp);
    }
    if (!is_null($this->paypalCreateAccountRequest_)) {
      fwrite($fp, "\xea\x01");
      Protobuf::write_varint($fp, $this->paypalCreateAccountRequest_->size()); // message
      $this->paypalCreateAccountRequest_->write($fp);
    }
    if (!is_null($this->paypalPreapprovalCredentialsRequest_)) {
      fwrite($fp, "\xf2\x01");
      Protobuf::write_varint($fp, $this->paypalPreapprovalCredentialsRequest_->size()); // message
      $this->paypalPreapprovalCredentialsRequest_->write($fp);
    }
    if (!is_null($this->inAppRestoreTransactionsRequest_)) {
      fwrite($fp, "\xfa\x01");
      Protobuf::write_varint($fp, $this->inAppRestoreTransactionsRequest_->size()); // message
      $this->inAppRestoreTransactionsRequest_->write($fp);
    }
    if (!is_null($this->inAppPurchaseInformationRequest_)) {
      fwrite($fp, "\x82\x02");
      Protobuf::write_varint($fp, $this->inAppPurchaseInformationRequest_->size()); // message
      $this->inAppPurchaseInformationRequest_->write($fp);
    }
    if (!is_null($this->checkForNotificationsRequest_)) {
      fwrite($fp, "\x8a\x02");
      Protobuf::write_varint($fp, $this->checkForNotificationsRequest_->size()); // message
      $this->checkForNotificationsRequest_->write($fp);
    }
    if (!is_null($this->ackNotificationsRequest_)) {
      fwrite($fp, "\x92\x02");
      Protobuf::write_varint($fp, $this->ackNotificationsRequest_->size()); // message
      $this->ackNotificationsRequest_->write($fp);
    }
    if (!is_null($this->purchaseProductRequest_)) {
      fwrite($fp, "\x9a\x02");
      Protobuf::write_varint($fp, $this->purchaseProductRequest_->size()); // message
      $this->purchaseProductRequest_->write($fp);
    }
    if (!is_null($this->reconstructDatabaseRequest_)) {
      fwrite($fp, "\xa2\x02");
      Protobuf::write_varint($fp, $this->reconstructDatabaseRequest_->size()); // message
      $this->reconstructDatabaseRequest_->write($fp);
    }
    if (!is_null($this->paypalMassageAddressRequest_)) {
      fwrite($fp, "\xaa\x02");
      Protobuf::write_varint($fp, $this->paypalMassageAddressRequest_->size()); // message
      $this->paypalMassageAddressRequest_->write($fp);
    }
    if (!is_null($this->getAddressSnippetRequest_)) {
      fwrite($fp, "\xb2\x02");
      Protobuf::write_varint($fp, $this->getAddressSnippetRequest_->size()); // message
      $this->getAddressSnippetRequest_->write($fp);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->requestSpecificProperties_)) {
      $l = $this->requestSpecificProperties_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->assetRequest_)) {
      $l = $this->assetRequest_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->commentsRequest_)) {
      $l = $this->commentsRequest_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->modifyCommentRequest_)) {
      $l = $this->modifyCommentRequest_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->purchasePostRequest_)) {
      $l = $this->purchasePostRequest_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->purchaseOrderRequest_)) {
      $l = $this->purchaseOrderRequest_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->contentSyncRequest_)) {
      $l = $this->contentSyncRequest_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->getAssetRequest_)) {
      $l = $this->getAssetRequest_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->getImageRequest_)) {
      $l = $this->getImageRequest_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->refundRequest_)) {
      $l = $this->refundRequest_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->purchaseMetadataRequest_)) {
      $l = $this->purchaseMetadataRequest_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->subCategoriesRequest_)) {
      $l = $this->subCategoriesRequest_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->uninstallReasonRequest_)) {
      $l = $this->uninstallReasonRequest_->size();
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->rateCommentRequest_)) {
      $l = $this->rateCommentRequest_->size();
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->checkLicenseRequest_)) {
      $l = $this->checkLicenseRequest_->size();
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->getMarketMetadataRequest_)) {
      $l = $this->getMarketMetadataRequest_->size();
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->getCategoriesRequest_)) {
      $l = $this->getCategoriesRequest_->size();
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->getCarrierInfoRequest_)) {
      $l = $this->getCarrierInfoRequest_->size();
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->removeAssetRequest_)) {
      $l = $this->removeAssetRequest_->size();
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->restoreApplicationsRequest_)) {
      $l = $this->restoreApplicationsRequest_->size();
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->querySuggestionRequest_)) {
      $l = $this->querySuggestionRequest_->size();
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->billingEventRequest_)) {
      $l = $this->billingEventRequest_->size();
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->paypalPreapprovalRequest_)) {
      $l = $this->paypalPreapprovalRequest_->size();
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->paypalPreapprovalDetailsRequest_)) {
      $l = $this->paypalPreapprovalDetailsRequest_->size();
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->paypalCreateAccountRequest_)) {
      $l = $this->paypalCreateAccountRequest_->size();
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->paypalPreapprovalCredentialsRequest_)) {
      $l = $this->paypalPreapprovalCredentialsRequest_->size();
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->inAppRestoreTransactionsRequest_)) {
      $l = $this->inAppRestoreTransactionsRequest_->size();
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->inAppPurchaseInformationRequest_)) {
      $l = $this->inAppPurchaseInformationRequest_->size();
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->checkForNotificationsRequest_)) {
      $l = $this->checkForNotificationsRequest_->size();
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->ackNotificationsRequest_)) {
      $l = $this->ackNotificationsRequest_->size();
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->purchaseProductRequest_)) {
      $l = $this->purchaseProductRequest_->size();
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->reconstructDatabaseRequest_)) {
      $l = $this->reconstructDatabaseRequest_->size();
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->paypalMassageAddressRequest_)) {
      $l = $this->paypalMassageAddressRequest_->size();
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->getAddressSnippetRequest_)) {
      $l = $this->getAddressSnippetRequest_->size();
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('requestSpecificProperties_', $this->requestSpecificProperties_)
         . Protobuf::toString('assetRequest_', $this->assetRequest_)
         . Protobuf::toString('commentsRequest_', $this->commentsRequest_)
         . Protobuf::toString('modifyCommentRequest_', $this->modifyCommentRequest_)
         . Protobuf::toString('purchasePostRequest_', $this->purchasePostRequest_)
         . Protobuf::toString('purchaseOrderRequest_', $this->purchaseOrderRequest_)
         . Protobuf::toString('contentSyncRequest_', $this->contentSyncRequest_)
         . Protobuf::toString('getAssetRequest_', $this->getAssetRequest_)
         . Protobuf::toString('getImageRequest_', $this->getImageRequest_)
         . Protobuf::toString('refundRequest_', $this->refundRequest_)
         . Protobuf::toString('purchaseMetadataRequest_', $this->purchaseMetadataRequest_)
         . Protobuf::toString('subCategoriesRequest_', $this->subCategoriesRequest_)
         . Protobuf::toString('uninstallReasonRequest_', $this->uninstallReasonRequest_)
         . Protobuf::toString('rateCommentRequest_', $this->rateCommentRequest_)
         . Protobuf::toString('checkLicenseRequest_', $this->checkLicenseRequest_)
         . Protobuf::toString('getMarketMetadataRequest_', $this->getMarketMetadataRequest_)
         . Protobuf::toString('getCategoriesRequest_', $this->getCategoriesRequest_)
         . Protobuf::toString('getCarrierInfoRequest_', $this->getCarrierInfoRequest_)
         . Protobuf::toString('removeAssetRequest_', $this->removeAssetRequest_)
         . Protobuf::toString('restoreApplicationsRequest_', $this->restoreApplicationsRequest_)
         . Protobuf::toString('querySuggestionRequest_', $this->querySuggestionRequest_)
         . Protobuf::toString('billingEventRequest_', $this->billingEventRequest_)
         . Protobuf::toString('paypalPreapprovalRequest_', $this->paypalPreapprovalRequest_)
         . Protobuf::toString('paypalPreapprovalDetailsRequest_', $this->paypalPreapprovalDetailsRequest_)
         . Protobuf::toString('paypalCreateAccountRequest_', $this->paypalCreateAccountRequest_)
         . Protobuf::toString('paypalPreapprovalCredentialsRequest_', $this->paypalPreapprovalCredentialsRequest_)
         . Protobuf::toString('inAppRestoreTransactionsRequest_', $this->inAppRestoreTransactionsRequest_)
         . Protobuf::toString('inAppPurchaseInformationRequest_', $this->inAppPurchaseInformationRequest_)
         . Protobuf::toString('checkForNotificationsRequest_', $this->checkForNotificationsRequest_)
         . Protobuf::toString('ackNotificationsRequest_', $this->ackNotificationsRequest_)
         . Protobuf::toString('purchaseProductRequest_', $this->purchaseProductRequest_)
         . Protobuf::toString('reconstructDatabaseRequest_', $this->reconstructDatabaseRequest_)
         . Protobuf::toString('paypalMassageAddressRequest_', $this->paypalMassageAddressRequest_)
         . Protobuf::toString('getAddressSnippetRequest_', $this->getAddressSnippetRequest_);
  }
  
  // optional .RequestSpecificPropertiesProto requestSpecificProperties = 3;

  protected $requestSpecificProperties_;
  public function resetRequestSpecificProperties() { unset($this->requestSpecificProperties_); }
  public function clearRequestSpecificProperties() { unset($this->requestSpecificProperties_); }
  public function hasRequestSpecificProperties() { return isset($this->requestSpecificProperties_); }
  public function getRequestSpecificProperties() { return $this->requestSpecificProperties_; }
  public function setRequestSpecificProperties(RequestSpecificPropertiesProto $value) { $this->requestSpecificProperties_ = $value; }
  
  // optional .AssetsRequestProto assetRequest = 4;

  protected $assetRequest_;
  public function resetAssetRequest() { unset($this->assetRequest_); }
  public function clearAssetRequest() { unset($this->assetRequest_); }
  public function hasAssetRequest() { return isset($this->assetRequest_); }
  public function getAssetRequest() { return $this->assetRequest_; }
  public function setAssetRequest(AssetsRequestProto $value) { $this->assetRequest_ = $value; }
  
  // optional .CommentsRequestProto commentsRequest = 5;

  protected $commentsRequest_;
  public function resetCommentsRequest() { unset($this->commentsRequest_); }
  public function clearCommentsRequest() { unset($this->commentsRequest_); }
  public function hasCommentsRequest() { return isset($this->commentsRequest_); }
  public function getCommentsRequest() { return $this->commentsRequest_; }
  public function setCommentsRequest(CommentsRequestProto $value) { $this->commentsRequest_ = $value; }
  
  // optional .ModifyCommentRequestProto modifyCommentRequest = 6;

  protected $modifyCommentRequest_;
  public function resetModifyCommentRequest() { unset($this->modifyCommentRequest_); }
  public function clearModifyCommentRequest() { unset($this->modifyCommentRequest_); }
  public function hasModifyCommentRequest() { return isset($this->modifyCommentRequest_); }
  public function getModifyCommentRequest() { return $this->modifyCommentRequest_; }
  public function setModifyCommentRequest(ModifyCommentRequestProto $value) { $this->modifyCommentRequest_ = $value; }
  
  // optional .PurchasePostRequestProto purchasePostRequest = 7;

  protected $purchasePostRequest_;
  public function resetPurchasePostRequest() { unset($this->purchasePostRequest_); }
  public function clearPurchasePostRequest() { unset($this->purchasePostRequest_); }
  public function hasPurchasePostRequest() { return isset($this->purchasePostRequest_); }
  public function getPurchasePostRequest() { return $this->purchasePostRequest_; }
  public function setPurchasePostRequest(PurchasePostRequestProto $value) { $this->purchasePostRequest_ = $value; }
  
  // optional .PurchaseOrderRequestProto purchaseOrderRequest = 8;

  protected $purchaseOrderRequest_;
  public function resetPurchaseOrderRequest() { unset($this->purchaseOrderRequest_); }
  public function clearPurchaseOrderRequest() { unset($this->purchaseOrderRequest_); }
  public function hasPurchaseOrderRequest() { return isset($this->purchaseOrderRequest_); }
  public function getPurchaseOrderRequest() { return $this->purchaseOrderRequest_; }
  public function setPurchaseOrderRequest(PurchaseOrderRequestProto $value) { $this->purchaseOrderRequest_ = $value; }
  
  // optional .ContentSyncRequestProto contentSyncRequest = 9;

  protected $contentSyncRequest_;
  public function resetContentSyncRequest() { unset($this->contentSyncRequest_); }
  public function clearContentSyncRequest() { unset($this->contentSyncRequest_); }
  public function hasContentSyncRequest() { return isset($this->contentSyncRequest_); }
  public function getContentSyncRequest() { return $this->contentSyncRequest_; }
  public function setContentSyncRequest(ContentSyncRequestProto $value) { $this->contentSyncRequest_ = $value; }
  
  // optional .GetAssetRequestProto getAssetRequest = 10;

  protected $getAssetRequest_;
  public function resetGetAssetRequest() { unset($this->getAssetRequest_); }
  public function clearGetAssetRequest() { unset($this->getAssetRequest_); }
  public function hasGetAssetRequest() { return isset($this->getAssetRequest_); }
  public function getGetAssetRequest() { return $this->getAssetRequest_; }
  public function setGetAssetRequest(GetAssetRequestProto $value) { $this->getAssetRequest_ = $value; }
  
  // optional .GetImageRequestProto getImageRequest = 11;

  protected $getImageRequest_;
  public function resetGetImageRequest() { unset($this->getImageRequest_); }
  public function clearGetImageRequest() { unset($this->getImageRequest_); }
  public function hasGetImageRequest() { return isset($this->getImageRequest_); }
  public function getGetImageRequest() { return $this->getImageRequest_; }
  public function setGetImageRequest(GetImageRequestProto $value) { $this->getImageRequest_ = $value; }
  
  // optional .RefundRequestProto refundRequest = 12;

  protected $refundRequest_;
  public function resetRefundRequest() { unset($this->refundRequest_); }
  public function clearRefundRequest() { unset($this->refundRequest_); }
  public function hasRefundRequest() { return isset($this->refundRequest_); }
  public function getRefundRequest() { return $this->refundRequest_; }
  public function setRefundRequest(RefundRequestProto $value) { $this->refundRequest_ = $value; }
  
  // optional .PurchaseMetadataRequestProto purchaseMetadataRequest = 13;

  protected $purchaseMetadataRequest_;
  public function resetPurchaseMetadataRequest() { unset($this->purchaseMetadataRequest_); }
  public function clearPurchaseMetadataRequest() { unset($this->purchaseMetadataRequest_); }
  public function hasPurchaseMetadataRequest() { return isset($this->purchaseMetadataRequest_); }
  public function getPurchaseMetadataRequest() { return $this->purchaseMetadataRequest_; }
  public function setPurchaseMetadataRequest(PurchaseMetadataRequestProto $value) { $this->purchaseMetadataRequest_ = $value; }
  
  // optional .GetSubCategoriesRequestProto subCategoriesRequest = 14;

  protected $subCategoriesRequest_;
  public function resetSubCategoriesRequest() { unset($this->subCategoriesRequest_); }
  public function clearSubCategoriesRequest() { unset($this->subCategoriesRequest_); }
  public function hasSubCategoriesRequest() { return isset($this->subCategoriesRequest_); }
  public function getSubCategoriesRequest() { return $this->subCategoriesRequest_; }
  public function setSubCategoriesRequest(GetSubCategoriesRequestProto $value) { $this->subCategoriesRequest_ = $value; }
  
  // optional .UninstallReasonRequestProto uninstallReasonRequest = 16;

  protected $uninstallReasonRequest_;
  public function resetUninstallReasonRequest() { unset($this->uninstallReasonRequest_); }
  public function clearUninstallReasonRequest() { unset($this->uninstallReasonRequest_); }
  public function hasUninstallReasonRequest() { return isset($this->uninstallReasonRequest_); }
  public function getUninstallReasonRequest() { return $this->uninstallReasonRequest_; }
  public function setUninstallReasonRequest(UninstallReasonRequestProto $value) { $this->uninstallReasonRequest_ = $value; }
  
  // optional .RateCommentRequestProto rateCommentRequest = 17;

  protected $rateCommentRequest_;
  public function resetRateCommentRequest() { unset($this->rateCommentRequest_); }
  public function clearRateCommentRequest() { unset($this->rateCommentRequest_); }
  public function hasRateCommentRequest() { return isset($this->rateCommentRequest_); }
  public function getRateCommentRequest() { return $this->rateCommentRequest_; }
  public function setRateCommentRequest(RateCommentRequestProto $value) { $this->rateCommentRequest_ = $value; }
  
  // optional .CheckLicenseRequestProto checkLicenseRequest = 18;

  protected $checkLicenseRequest_;
  public function resetCheckLicenseRequest() { unset($this->checkLicenseRequest_); }
  public function clearCheckLicenseRequest() { unset($this->checkLicenseRequest_); }
  public function hasCheckLicenseRequest() { return isset($this->checkLicenseRequest_); }
  public function getCheckLicenseRequest() { return $this->checkLicenseRequest_; }
  public function setCheckLicenseRequest(CheckLicenseRequestProto $value) { $this->checkLicenseRequest_ = $value; }
  
  // optional .GetMarketMetadataRequestProto getMarketMetadataRequest = 19;

  protected $getMarketMetadataRequest_;
  public function resetGetMarketMetadataRequest() { unset($this->getMarketMetadataRequest_); }
  public function clearGetMarketMetadataRequest() { unset($this->getMarketMetadataRequest_); }
  public function hasGetMarketMetadataRequest() { return isset($this->getMarketMetadataRequest_); }
  public function getGetMarketMetadataRequest() { return $this->getMarketMetadataRequest_; }
  public function setGetMarketMetadataRequest(GetMarketMetadataRequestProto $value) { $this->getMarketMetadataRequest_ = $value; }
  
  // optional .GetCategoriesRequestProto getCategoriesRequest = 21;

  protected $getCategoriesRequest_;
  public function resetGetCategoriesRequest() { unset($this->getCategoriesRequest_); }
  public function clearGetCategoriesRequest() { unset($this->getCategoriesRequest_); }
  public function hasGetCategoriesRequest() { return isset($this->getCategoriesRequest_); }
  public function getGetCategoriesRequest() { return $this->getCategoriesRequest_; }
  public function setGetCategoriesRequest(GetCategoriesRequestProto $value) { $this->getCategoriesRequest_ = $value; }
  
  // optional .GetCarrierInfoRequestProto getCarrierInfoRequest = 22;

  protected $getCarrierInfoRequest_;
  public function resetGetCarrierInfoRequest() { unset($this->getCarrierInfoRequest_); }
  public function clearGetCarrierInfoRequest() { unset($this->getCarrierInfoRequest_); }
  public function hasGetCarrierInfoRequest() { return isset($this->getCarrierInfoRequest_); }
  public function getGetCarrierInfoRequest() { return $this->getCarrierInfoRequest_; }
  public function setGetCarrierInfoRequest(GetCarrierInfoRequestProto $value) { $this->getCarrierInfoRequest_ = $value; }
  
  // optional .RemoveAssetRequestProto removeAssetRequest = 23;

  protected $removeAssetRequest_;
  public function resetRemoveAssetRequest() { unset($this->removeAssetRequest_); }
  public function clearRemoveAssetRequest() { unset($this->removeAssetRequest_); }
  public function hasRemoveAssetRequest() { return isset($this->removeAssetRequest_); }
  public function getRemoveAssetRequest() { return $this->removeAssetRequest_; }
  public function setRemoveAssetRequest(RemoveAssetRequestProto $value) { $this->removeAssetRequest_ = $value; }
  
  // optional .RestoreApplicationsRequestProto restoreApplicationsRequest = 24;

  protected $restoreApplicationsRequest_;
  public function resetRestoreApplicationsRequest() { unset($this->restoreApplicationsRequest_); }
  public function clearRestoreApplicationsRequest() { unset($this->restoreApplicationsRequest_); }
  public function hasRestoreApplicationsRequest() { return isset($this->restoreApplicationsRequest_); }
  public function getRestoreApplicationsRequest() { return $this->restoreApplicationsRequest_; }
  public function setRestoreApplicationsRequest(RestoreApplicationsRequestProto $value) { $this->restoreApplicationsRequest_ = $value; }
  
  // optional .QuerySuggestionRequestProto querySuggestionRequest = 25;

  protected $querySuggestionRequest_;
  public function resetQuerySuggestionRequest() { unset($this->querySuggestionRequest_); }
  public function clearQuerySuggestionRequest() { unset($this->querySuggestionRequest_); }
  public function hasQuerySuggestionRequest() { return isset($this->querySuggestionRequest_); }
  public function getQuerySuggestionRequest() { return $this->querySuggestionRequest_; }
  public function setQuerySuggestionRequest(QuerySuggestionRequestProto $value) { $this->querySuggestionRequest_ = $value; }
  
  // optional .BillingEventRequestProto billingEventRequest = 26;

  protected $billingEventRequest_;
  public function resetBillingEventRequest() { unset($this->billingEventRequest_); }
  public function clearBillingEventRequest() { unset($this->billingEventRequest_); }
  public function hasBillingEventRequest() { return isset($this->billingEventRequest_); }
  public function getBillingEventRequest() { return $this->billingEventRequest_; }
  public function setBillingEventRequest(BillingEventRequestProto $value) { $this->billingEventRequest_ = $value; }
  
  // optional .PaypalPreapprovalRequestProto paypalPreapprovalRequest = 27;

  protected $paypalPreapprovalRequest_;
  public function resetPaypalPreapprovalRequest() { unset($this->paypalPreapprovalRequest_); }
  public function clearPaypalPreapprovalRequest() { unset($this->paypalPreapprovalRequest_); }
  public function hasPaypalPreapprovalRequest() { return isset($this->paypalPreapprovalRequest_); }
  public function getPaypalPreapprovalRequest() { return $this->paypalPreapprovalRequest_; }
  public function setPaypalPreapprovalRequest(PaypalPreapprovalRequestProto $value) { $this->paypalPreapprovalRequest_ = $value; }
  
  // optional .PaypalPreapprovalDetailsRequestProto paypalPreapprovalDetailsRequest = 28;

  protected $paypalPreapprovalDetailsRequest_;
  public function resetPaypalPreapprovalDetailsRequest() { unset($this->paypalPreapprovalDetailsRequest_); }
  public function clearPaypalPreapprovalDetailsRequest() { unset($this->paypalPreapprovalDetailsRequest_); }
  public function hasPaypalPreapprovalDetailsRequest() { return isset($this->paypalPreapprovalDetailsRequest_); }
  public function getPaypalPreapprovalDetailsRequest() { return $this->paypalPreapprovalDetailsRequest_; }
  public function setPaypalPreapprovalDetailsRequest(PaypalPreapprovalDetailsRequestProto $value) { $this->paypalPreapprovalDetailsRequest_ = $value; }
  
  // optional .PaypalCreateAccountRequestProto paypalCreateAccountRequest = 29;

  protected $paypalCreateAccountRequest_;
  public function resetPaypalCreateAccountRequest() { unset($this->paypalCreateAccountRequest_); }
  public function clearPaypalCreateAccountRequest() { unset($this->paypalCreateAccountRequest_); }
  public function hasPaypalCreateAccountRequest() { return isset($this->paypalCreateAccountRequest_); }
  public function getPaypalCreateAccountRequest() { return $this->paypalCreateAccountRequest_; }
  public function setPaypalCreateAccountRequest(PaypalCreateAccountRequestProto $value) { $this->paypalCreateAccountRequest_ = $value; }
  
  // optional .PaypalPreapprovalCredentialsRequestProto paypalPreapprovalCredentialsRequest = 30;

  protected $paypalPreapprovalCredentialsRequest_;
  public function resetPaypalPreapprovalCredentialsRequest() { unset($this->paypalPreapprovalCredentialsRequest_); }
  public function clearPaypalPreapprovalCredentialsRequest() { unset($this->paypalPreapprovalCredentialsRequest_); }
  public function hasPaypalPreapprovalCredentialsRequest() { return isset($this->paypalPreapprovalCredentialsRequest_); }
  public function getPaypalPreapprovalCredentialsRequest() { return $this->paypalPreapprovalCredentialsRequest_; }
  public function setPaypalPreapprovalCredentialsRequest(PaypalPreapprovalCredentialsRequestProto $value) { $this->paypalPreapprovalCredentialsRequest_ = $value; }
  
  // optional .InAppRestoreTransactionsRequestProto inAppRestoreTransactionsRequest = 31;

  protected $inAppRestoreTransactionsRequest_;
  public function resetInAppRestoreTransactionsRequest() { unset($this->inAppRestoreTransactionsRequest_); }
  public function clearInAppRestoreTransactionsRequest() { unset($this->inAppRestoreTransactionsRequest_); }
  public function hasInAppRestoreTransactionsRequest() { return isset($this->inAppRestoreTransactionsRequest_); }
  public function getInAppRestoreTransactionsRequest() { return $this->inAppRestoreTransactionsRequest_; }
  public function setInAppRestoreTransactionsRequest(InAppRestoreTransactionsRequestProto $value) { $this->inAppRestoreTransactionsRequest_ = $value; }
  
  // optional .InAppPurchaseInformationRequestProto inAppPurchaseInformationRequest = 32;

  protected $inAppPurchaseInformationRequest_;
  public function resetInAppPurchaseInformationRequest() { unset($this->inAppPurchaseInformationRequest_); }
  public function clearInAppPurchaseInformationRequest() { unset($this->inAppPurchaseInformationRequest_); }
  public function hasInAppPurchaseInformationRequest() { return isset($this->inAppPurchaseInformationRequest_); }
  public function getInAppPurchaseInformationRequest() { return $this->inAppPurchaseInformationRequest_; }
  public function setInAppPurchaseInformationRequest(InAppPurchaseInformationRequestProto $value) { $this->inAppPurchaseInformationRequest_ = $value; }
  
  // optional .CheckForNotificationsRequestProto checkForNotificationsRequest = 33;

  protected $checkForNotificationsRequest_;
  public function resetCheckForNotificationsRequest() { unset($this->checkForNotificationsRequest_); }
  public function clearCheckForNotificationsRequest() { unset($this->checkForNotificationsRequest_); }
  public function hasCheckForNotificationsRequest() { return isset($this->checkForNotificationsRequest_); }
  public function getCheckForNotificationsRequest() { return $this->checkForNotificationsRequest_; }
  public function setCheckForNotificationsRequest(CheckForNotificationsRequestProto $value) { $this->checkForNotificationsRequest_ = $value; }
  
  // optional .AckNotificationsRequestProto ackNotificationsRequest = 34;

  protected $ackNotificationsRequest_;
  public function resetAckNotificationsRequest() { unset($this->ackNotificationsRequest_); }
  public function clearAckNotificationsRequest() { unset($this->ackNotificationsRequest_); }
  public function hasAckNotificationsRequest() { return isset($this->ackNotificationsRequest_); }
  public function getAckNotificationsRequest() { return $this->ackNotificationsRequest_; }
  public function setAckNotificationsRequest(AckNotificationsRequestProto $value) { $this->ackNotificationsRequest_ = $value; }
  
  // optional .PurchaseProductRequestProto purchaseProductRequest = 35;

  protected $purchaseProductRequest_;
  public function resetPurchaseProductRequest() { unset($this->purchaseProductRequest_); }
  public function clearPurchaseProductRequest() { unset($this->purchaseProductRequest_); }
  public function hasPurchaseProductRequest() { return isset($this->purchaseProductRequest_); }
  public function getPurchaseProductRequest() { return $this->purchaseProductRequest_; }
  public function setPurchaseProductRequest(PurchaseProductRequestProto $value) { $this->purchaseProductRequest_ = $value; }
  
  // optional .ReconstructDatabaseRequestProto reconstructDatabaseRequest = 36;

  protected $reconstructDatabaseRequest_;
  public function resetReconstructDatabaseRequest() { unset($this->reconstructDatabaseRequest_); }
  public function clearReconstructDatabaseRequest() { unset($this->reconstructDatabaseRequest_); }
  public function hasReconstructDatabaseRequest() { return isset($this->reconstructDatabaseRequest_); }
  public function getReconstructDatabaseRequest() { return $this->reconstructDatabaseRequest_; }
  public function setReconstructDatabaseRequest(ReconstructDatabaseRequestProto $value) { $this->reconstructDatabaseRequest_ = $value; }
  
  // optional .PaypalMassageAddressRequestProto paypalMassageAddressRequest = 37;

  protected $paypalMassageAddressRequest_;
  public function resetPaypalMassageAddressRequest() { unset($this->paypalMassageAddressRequest_); }
  public function clearPaypalMassageAddressRequest() { unset($this->paypalMassageAddressRequest_); }
  public function hasPaypalMassageAddressRequest() { return isset($this->paypalMassageAddressRequest_); }
  public function getPaypalMassageAddressRequest() { return $this->paypalMassageAddressRequest_; }
  public function setPaypalMassageAddressRequest(PaypalMassageAddressRequestProto $value) { $this->paypalMassageAddressRequest_ = $value; }
  
  // optional .GetAddressSnippetRequestProto getAddressSnippetRequest = 38;

  protected $getAddressSnippetRequest_;
  public function resetGetAddressSnippetRequest() { unset($this->getAddressSnippetRequest_); }
  public function clearGetAddressSnippetRequest() { unset($this->getAddressSnippetRequest_); }
  public function hasGetAddressSnippetRequest() { return isset($this->getAddressSnippetRequest_); }
  public function getGetAddressSnippetRequest() { return $this->getAddressSnippetRequest_; }
  public function setGetAddressSnippetRequest(GetAddressSnippetRequestProto $value) { $this->getAddressSnippetRequest_ = $value; }
  
  // @@protoc_insertion_point(class_scope:RequestProto.Request)
}

// message RequestProto
class RequestProto {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("RequestProto: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->requestProperties_ = new RequestPropertiesProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 2:
          ASSERT('$wire == 3');
          $this->request_[] = new RequestProto_Request($fp, $limit);
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->requestProperties_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, $this->requestProperties_->size()); // message
      $this->requestProperties_->write($fp);
    }
    if (!is_null($this->request_))
      foreach($this->request_ as $v) {
        fwrite($fp, "\x13");
        $v->write($fp); // group
        fwrite($fp, "\x14");
      }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->requestProperties_)) {
      $l = $this->requestProperties_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->request_))
      foreach($this->request_ as $v) {
        $size += 2 + $v->size();
      }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('requestProperties_', $this->requestProperties_)
         . Protobuf::toString('request_', $this->request_);
  }
  
  // optional .RequestPropertiesProto requestProperties = 1;

  protected $requestProperties_;
  public function resetRequestProperties() { unset($this->requestProperties_); }
  public function clearRequestProperties() { unset($this->requestProperties_); }
  public function hasRequestProperties() { return isset($this->requestProperties_); }
  public function getRequestProperties() { return $this->requestProperties_; }
  public function setRequestProperties(RequestPropertiesProto $value) { $this->requestProperties_ = $value; }
  
  // repeated group Request = 2
  protected $request_ = array();
  public function clearRequest() { $this->request_ = array(); }
  public function getRequestCount() { return count($this->request_); }
  public function hasRequest() { return (count($this->request_) > 0); }
  public function indexOfRequest($value) { return array_search($value,$this->request_);}
  public function removeRequest($index) { unset($this->request_[$index]); }
  public function removeValRequest($value) { $idx = array_search($value,$this->request_); if($idx !== FALSE){unset($this->request_[$idx]); }}
  public function removeValsRequest($values) { foreach($values as $value){$idx = array_search($value,$this->request_); if($idx !== FALSE){unset($this->request_[$idx]); }}}
  public function pushRequest($newvar) { return array_push($this->request_,$newvar); }
  public function popRequest() { return array_pop($this->request_); }
  public function shiftRequest() { return array_shift($this->request_); }
  public function unshiftRequest($newvar) { return array_unshift($this->request_,$newvar); }
  public function getRequest($index) { return $this->request_[$index]; }
  public function getRequestArray() { return $this->request_; }
  public function setRequest($index, $value) {$this->request_[$index] = $value;	}
  public function addRequest($value) { $this->request_[] = $value; }
  public function addAllRequest(array $values) { foreach($values as $value) {$this->request_[] = $value;} }
  
  // @@protoc_insertion_point(class_scope:RequestProto)
}

// message RequestSpecificPropertiesProto
class RequestSpecificPropertiesProto {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("RequestSpecificPropertiesProto: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->ifNoneMatch_ = $tmp;
          $limit-=$len;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->ifNoneMatch_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, strlen((string)$this->ifNoneMatch_));
      fwrite($fp, (string)$this->ifNoneMatch_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->ifNoneMatch_)) {
      $l = strlen((string)$this->ifNoneMatch_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('ifNoneMatch_', $this->ifNoneMatch_);
  }
  
  // optional string ifNoneMatch = 1;

  protected $ifNoneMatch_;
  public function resetIfNoneMatch() { unset($this->ifNoneMatch_); }
  public function clearIfNoneMatch() { unset($this->ifNoneMatch_); }
  public function hasIfNoneMatch() { return isset($this->ifNoneMatch_); }
  public function getIfNoneMatch() { return $this->ifNoneMatch_; }
  public function setIfNoneMatch($value) { $this->ifNoneMatch_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:RequestSpecificPropertiesProto)
}

// message ResponsePropertiesProto
class ResponsePropertiesProto {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("ResponsePropertiesProto: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->result_ = $tmp;
          
          break;
        case 2:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->maxAge_ = $tmp;
          
          break;
        case 3:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->etag_ = $tmp;
          $limit-=$len;
          break;
        case 4:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->serverVersion_ = $tmp;
          
          break;
        case 6:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->maxAgeConsumable_ = $tmp;
          
          break;
        case 7:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->errorMessage_ = $tmp;
          $limit-=$len;
          break;
        case 8:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->errorInputField_[] = new InputValidationError($fp, $len);
          ASSERT('$len == 0');
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->result_)) {
      fwrite($fp, "\x08");
      Protobuf::write_varint($fp, (int)$this->result_);
    }
    if (!is_null($this->maxAge_)) {
      fwrite($fp, "\x10");
      Protobuf::write_varint($fp, (int)$this->maxAge_);
    }
    if (!is_null($this->etag_)) {
      fwrite($fp, "\x1a");
      Protobuf::write_varint($fp, strlen((string)$this->etag_));
      fwrite($fp, (string)$this->etag_);
    }
    if (!is_null($this->serverVersion_)) {
      fwrite($fp, " ");
      Protobuf::write_varint($fp, (int)$this->serverVersion_);
    }
    if (!is_null($this->maxAgeConsumable_)) {
      fwrite($fp, "0");
      Protobuf::write_varint($fp, (int)$this->maxAgeConsumable_);
    }
    if (!is_null($this->errorMessage_)) {
      fwrite($fp, ":");
      Protobuf::write_varint($fp, strlen((string)$this->errorMessage_));
      fwrite($fp, (string)$this->errorMessage_);
    }
    if (!is_null($this->errorInputField_))
      foreach($this->errorInputField_ as $v) {
        fwrite($fp, "B");
        Protobuf::write_varint($fp, $v->size()); // message
        $v->write($fp);
      }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->result_)) {
      $size += 1 + Protobuf::size_varint($this->result_);
    }
    if (!is_null($this->maxAge_)) {
      $size += 1 + Protobuf::size_varint($this->maxAge_);
    }
    if (!is_null($this->etag_)) {
      $l = strlen((string)$this->etag_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->serverVersion_)) {
      $size += 1 + Protobuf::size_varint($this->serverVersion_);
    }
    if (!is_null($this->maxAgeConsumable_)) {
      $size += 1 + Protobuf::size_varint($this->maxAgeConsumable_);
    }
    if (!is_null($this->errorMessage_)) {
      $l = strlen((string)$this->errorMessage_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->errorInputField_))
      foreach($this->errorInputField_ as $v) {
        $l = $v->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('result_', $this->result_)
         . Protobuf::toString('maxAge_', $this->maxAge_)
         . Protobuf::toString('etag_', $this->etag_)
         . Protobuf::toString('serverVersion_', $this->serverVersion_)
         . Protobuf::toString('maxAgeConsumable_', $this->maxAgeConsumable_)
         . Protobuf::toString('errorMessage_', $this->errorMessage_)
         . Protobuf::toString('errorInputField_', $this->errorInputField_);
  }
  
  // optional int32 result = 1;

  protected $result_;
  public function resetResult() { unset($this->result_); }
  public function clearResult() { unset($this->result_); }
  public function hasResult() { return isset($this->result_); }
  public function getResult() { return $this->result_; }
  public function setResult($value) { $this->result_ = (string)$value; }
  
  // optional int32 maxAge = 2;

  protected $maxAge_;
  public function resetMaxAge() { unset($this->maxAge_); }
  public function clearMaxAge() { unset($this->maxAge_); }
  public function hasMaxAge() { return isset($this->maxAge_); }
  public function getMaxAge() { return $this->maxAge_; }
  public function setMaxAge($value) { $this->maxAge_ = (string)$value; }
  
  // optional string etag = 3;

  protected $etag_;
  public function resetEtag() { unset($this->etag_); }
  public function clearEtag() { unset($this->etag_); }
  public function hasEtag() { return isset($this->etag_); }
  public function getEtag() { return $this->etag_; }
  public function setEtag($value) { $this->etag_ = (string)$value; }
  
  // optional int32 serverVersion = 4;

  protected $serverVersion_;
  public function resetServerVersion() { unset($this->serverVersion_); }
  public function clearServerVersion() { unset($this->serverVersion_); }
  public function hasServerVersion() { return isset($this->serverVersion_); }
  public function getServerVersion() { return $this->serverVersion_; }
  public function setServerVersion($value) { $this->serverVersion_ = (string)$value; }
  
  // optional int32 maxAgeConsumable = 6;

  protected $maxAgeConsumable_;
  public function resetMaxAgeConsumable() { unset($this->maxAgeConsumable_); }
  public function clearMaxAgeConsumable() { unset($this->maxAgeConsumable_); }
  public function hasMaxAgeConsumable() { return isset($this->maxAgeConsumable_); }
  public function getMaxAgeConsumable() { return $this->maxAgeConsumable_; }
  public function setMaxAgeConsumable($value) { $this->maxAgeConsumable_ = (string)$value; }
  
  // optional string errorMessage = 7;

  protected $errorMessage_;
  public function resetErrorMessage() { unset($this->errorMessage_); }
  public function clearErrorMessage() { unset($this->errorMessage_); }
  public function hasErrorMessage() { return isset($this->errorMessage_); }
  public function getErrorMessage() { return $this->errorMessage_; }
  public function setErrorMessage($value) { $this->errorMessage_ = (string)$value; }
  
  // repeated .InputValidationError errorInputField = 8;

  protected $errorInputField_ = array();
  public function clearErrorInputField() { $this->errorInputField_ = array(); }
  public function getErrorInputFieldCount() { return count($this->errorInputField_); }
  public function hasErrorInputField() { return (count($this->errorInputField_) > 0); }
  public function indexOfErrorInputField($value) { return array_search($value,$this->errorInputField_);}
  public function removeErrorInputField($index) { unset($this->errorInputField_[$index]); }
  public function removeValErrorInputField($value) { $idx = array_search($value,$this->errorInputField_); if($idx !== FALSE){unset($this->errorInputField_[$idx]); }}
  public function removeValsErrorInputField($values) { foreach($values as $value){$idx = array_search($value,$this->errorInputField_); if($idx !== FALSE){unset($this->errorInputField_[$idx]); }}}
  public function pushErrorInputField($newvar) { return array_push($this->errorInputField_,$newvar); }
  public function popErrorInputField() { return array_pop($this->errorInputField_); }
  public function shiftErrorInputField() { return array_shift($this->errorInputField_); }
  public function unshiftErrorInputField($newvar) { return array_unshift($this->errorInputField_,$newvar); }
  public function getErrorInputField($index) { return $this->errorInputField_[$index]; }
  public function getErrorInputFieldArray() { return $this->errorInputField_; }
  public function setErrorInputField($index, $value) {$this->errorInputField_[$index] = $value;	}
  public function addErrorInputField($value) { $this->errorInputField_[] = $value; }
  public function addAllErrorInputField(array $values) { foreach($values as $value) {$this->errorInputField_[] = $value;} }
  
  // @@protoc_insertion_point(class_scope:ResponsePropertiesProto)
}


// group ResponseProto.Response
class ResponseProto_Response {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("ResponseProto_Response: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 4');
          break 2;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->responseProperties_ = new ResponsePropertiesProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 3:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->assetsResponse_ = new AssetsResponseProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 4:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->commentsResponse_ = new CommentsResponseProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 5:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->modifyCommentResponse_ = new ModifyCommentResponseProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 6:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->purchasePostResponse_ = new PurchasePostResponseProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 7:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->purchaseOrderResponse_ = new PurchaseOrderResponseProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 8:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->contentSyncResponse_ = new ContentSyncResponseProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 9:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->getAssetResponse_ = new GetAssetResponseProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 10:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->getImageResponse_ = new GetImageResponseProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 11:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->refundResponse_ = new RefundResponseProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 12:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->purchaseMetadataResponse_ = new PurchaseMetadataResponseProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 13:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->subCategoriesResponse_ = new GetSubCategoriesResponseProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 15:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->uninstallReasonResponse_ = new UninstallReasonResponseProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 16:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->rateCommentResponse_ = new RateCommentResponseProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 17:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->checkLicenseResponse_ = new CheckLicenseResponseProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 18:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->getMarketMetadataResponse_ = new GetMarketMetadataResponseProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 19:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->prefetchedBundle_[] = new PrefetchedBundleProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 20:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->getCategoriesResponse_ = new GetCategoriesResponseProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 21:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->getCarrierInfoResponse_ = new GetCarrierInfoResponseProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 23:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->restoreApplicationResponse_ = new RestoreApplicationsResponseProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 24:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->querySuggestionResponse_ = new QuerySuggestionResponseProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 25:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->billingEventResponse_ = new BillingEventResponseProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 26:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->paypalPreapprovalResponse_ = new PaypalPreapprovalResponseProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 27:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->paypalPreapprovalDetailsResponse_ = new PaypalPreapprovalDetailsResponseProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 28:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->paypalCreateAccountResponse_ = new PaypalCreateAccountResponseProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 29:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->paypalPreapprovalCredentialsResponse_ = new PaypalPreapprovalCredentialsResponseProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 30:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->inAppRestoreTransactionsResponse_ = new InAppRestoreTransactionsResponseProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 31:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->inAppPurchaseInformationResponse_ = new InAppPurchaseInformationResponseProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 32:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->checkForNotificationsResponse_ = new CheckForNotificationsResponseProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 33:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->ackNotificationsResponse_ = new AckNotificationsResponseProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 34:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->purchaseProductResponse_ = new PurchaseProductResponseProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 35:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->reconstructDatabaseResponse_ = new ReconstructDatabaseResponseProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 36:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->paypalMassageAddressResponse_ = new PaypalMassageAddressResponseProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 37:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->getAddressSnippetResponse_ = new GetAddressSnippetResponseProto($fp, $len);
          ASSERT('$len == 0');
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->responseProperties_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, $this->responseProperties_->size()); // message
      $this->responseProperties_->write($fp);
    }
    if (!is_null($this->assetsResponse_)) {
      fwrite($fp, "\x1a");
      Protobuf::write_varint($fp, $this->assetsResponse_->size()); // message
      $this->assetsResponse_->write($fp);
    }
    if (!is_null($this->commentsResponse_)) {
      fwrite($fp, "\"");
      Protobuf::write_varint($fp, $this->commentsResponse_->size()); // message
      $this->commentsResponse_->write($fp);
    }
    if (!is_null($this->modifyCommentResponse_)) {
      fwrite($fp, "*");
      Protobuf::write_varint($fp, $this->modifyCommentResponse_->size()); // message
      $this->modifyCommentResponse_->write($fp);
    }
    if (!is_null($this->purchasePostResponse_)) {
      fwrite($fp, "2");
      Protobuf::write_varint($fp, $this->purchasePostResponse_->size()); // message
      $this->purchasePostResponse_->write($fp);
    }
    if (!is_null($this->purchaseOrderResponse_)) {
      fwrite($fp, ":");
      Protobuf::write_varint($fp, $this->purchaseOrderResponse_->size()); // message
      $this->purchaseOrderResponse_->write($fp);
    }
    if (!is_null($this->contentSyncResponse_)) {
      fwrite($fp, "B");
      Protobuf::write_varint($fp, $this->contentSyncResponse_->size()); // message
      $this->contentSyncResponse_->write($fp);
    }
    if (!is_null($this->getAssetResponse_)) {
      fwrite($fp, "J");
      Protobuf::write_varint($fp, $this->getAssetResponse_->size()); // message
      $this->getAssetResponse_->write($fp);
    }
    if (!is_null($this->getImageResponse_)) {
      fwrite($fp, "R");
      Protobuf::write_varint($fp, $this->getImageResponse_->size()); // message
      $this->getImageResponse_->write($fp);
    }
    if (!is_null($this->refundResponse_)) {
      fwrite($fp, "Z");
      Protobuf::write_varint($fp, $this->refundResponse_->size()); // message
      $this->refundResponse_->write($fp);
    }
    if (!is_null($this->purchaseMetadataResponse_)) {
      fwrite($fp, "b");
      Protobuf::write_varint($fp, $this->purchaseMetadataResponse_->size()); // message
      $this->purchaseMetadataResponse_->write($fp);
    }
    if (!is_null($this->subCategoriesResponse_)) {
      fwrite($fp, "j");
      Protobuf::write_varint($fp, $this->subCategoriesResponse_->size()); // message
      $this->subCategoriesResponse_->write($fp);
    }
    if (!is_null($this->uninstallReasonResponse_)) {
      fwrite($fp, "z");
      Protobuf::write_varint($fp, $this->uninstallReasonResponse_->size()); // message
      $this->uninstallReasonResponse_->write($fp);
    }
    if (!is_null($this->rateCommentResponse_)) {
      fwrite($fp, "\x82\x01");
      Protobuf::write_varint($fp, $this->rateCommentResponse_->size()); // message
      $this->rateCommentResponse_->write($fp);
    }
    if (!is_null($this->checkLicenseResponse_)) {
      fwrite($fp, "\x8a\x01");
      Protobuf::write_varint($fp, $this->checkLicenseResponse_->size()); // message
      $this->checkLicenseResponse_->write($fp);
    }
    if (!is_null($this->getMarketMetadataResponse_)) {
      fwrite($fp, "\x92\x01");
      Protobuf::write_varint($fp, $this->getMarketMetadataResponse_->size()); // message
      $this->getMarketMetadataResponse_->write($fp);
    }
    if (!is_null($this->prefetchedBundle_))
      foreach($this->prefetchedBundle_ as $v) {
        fwrite($fp, "\x9a\x01");
        Protobuf::write_varint($fp, $v->size()); // message
        $v->write($fp);
      }
    if (!is_null($this->getCategoriesResponse_)) {
      fwrite($fp, "\xa2\x01");
      Protobuf::write_varint($fp, $this->getCategoriesResponse_->size()); // message
      $this->getCategoriesResponse_->write($fp);
    }
    if (!is_null($this->getCarrierInfoResponse_)) {
      fwrite($fp, "\xaa\x01");
      Protobuf::write_varint($fp, $this->getCarrierInfoResponse_->size()); // message
      $this->getCarrierInfoResponse_->write($fp);
    }
    if (!is_null($this->restoreApplicationResponse_)) {
      fwrite($fp, "\xba\x01");
      Protobuf::write_varint($fp, $this->restoreApplicationResponse_->size()); // message
      $this->restoreApplicationResponse_->write($fp);
    }
    if (!is_null($this->querySuggestionResponse_)) {
      fwrite($fp, "\xc2\x01");
      Protobuf::write_varint($fp, $this->querySuggestionResponse_->size()); // message
      $this->querySuggestionResponse_->write($fp);
    }
    if (!is_null($this->billingEventResponse_)) {
      fwrite($fp, "\xca\x01");
      Protobuf::write_varint($fp, $this->billingEventResponse_->size()); // message
      $this->billingEventResponse_->write($fp);
    }
    if (!is_null($this->paypalPreapprovalResponse_)) {
      fwrite($fp, "\xd2\x01");
      Protobuf::write_varint($fp, $this->paypalPreapprovalResponse_->size()); // message
      $this->paypalPreapprovalResponse_->write($fp);
    }
    if (!is_null($this->paypalPreapprovalDetailsResponse_)) {
      fwrite($fp, "\xda\x01");
      Protobuf::write_varint($fp, $this->paypalPreapprovalDetailsResponse_->size()); // message
      $this->paypalPreapprovalDetailsResponse_->write($fp);
    }
    if (!is_null($this->paypalCreateAccountResponse_)) {
      fwrite($fp, "\xe2\x01");
      Protobuf::write_varint($fp, $this->paypalCreateAccountResponse_->size()); // message
      $this->paypalCreateAccountResponse_->write($fp);
    }
    if (!is_null($this->paypalPreapprovalCredentialsResponse_)) {
      fwrite($fp, "\xea\x01");
      Protobuf::write_varint($fp, $this->paypalPreapprovalCredentialsResponse_->size()); // message
      $this->paypalPreapprovalCredentialsResponse_->write($fp);
    }
    if (!is_null($this->inAppRestoreTransactionsResponse_)) {
      fwrite($fp, "\xf2\x01");
      Protobuf::write_varint($fp, $this->inAppRestoreTransactionsResponse_->size()); // message
      $this->inAppRestoreTransactionsResponse_->write($fp);
    }
    if (!is_null($this->inAppPurchaseInformationResponse_)) {
      fwrite($fp, "\xfa\x01");
      Protobuf::write_varint($fp, $this->inAppPurchaseInformationResponse_->size()); // message
      $this->inAppPurchaseInformationResponse_->write($fp);
    }
    if (!is_null($this->checkForNotificationsResponse_)) {
      fwrite($fp, "\x82\x02");
      Protobuf::write_varint($fp, $this->checkForNotificationsResponse_->size()); // message
      $this->checkForNotificationsResponse_->write($fp);
    }
    if (!is_null($this->ackNotificationsResponse_)) {
      fwrite($fp, "\x8a\x02");
      Protobuf::write_varint($fp, $this->ackNotificationsResponse_->size()); // message
      $this->ackNotificationsResponse_->write($fp);
    }
    if (!is_null($this->purchaseProductResponse_)) {
      fwrite($fp, "\x92\x02");
      Protobuf::write_varint($fp, $this->purchaseProductResponse_->size()); // message
      $this->purchaseProductResponse_->write($fp);
    }
    if (!is_null($this->reconstructDatabaseResponse_)) {
      fwrite($fp, "\x9a\x02");
      Protobuf::write_varint($fp, $this->reconstructDatabaseResponse_->size()); // message
      $this->reconstructDatabaseResponse_->write($fp);
    }
    if (!is_null($this->paypalMassageAddressResponse_)) {
      fwrite($fp, "\xa2\x02");
      Protobuf::write_varint($fp, $this->paypalMassageAddressResponse_->size()); // message
      $this->paypalMassageAddressResponse_->write($fp);
    }
    if (!is_null($this->getAddressSnippetResponse_)) {
      fwrite($fp, "\xaa\x02");
      Protobuf::write_varint($fp, $this->getAddressSnippetResponse_->size()); // message
      $this->getAddressSnippetResponse_->write($fp);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->responseProperties_)) {
      $l = $this->responseProperties_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->assetsResponse_)) {
      $l = $this->assetsResponse_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->commentsResponse_)) {
      $l = $this->commentsResponse_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->modifyCommentResponse_)) {
      $l = $this->modifyCommentResponse_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->purchasePostResponse_)) {
      $l = $this->purchasePostResponse_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->purchaseOrderResponse_)) {
      $l = $this->purchaseOrderResponse_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->contentSyncResponse_)) {
      $l = $this->contentSyncResponse_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->getAssetResponse_)) {
      $l = $this->getAssetResponse_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->getImageResponse_)) {
      $l = $this->getImageResponse_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->refundResponse_)) {
      $l = $this->refundResponse_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->purchaseMetadataResponse_)) {
      $l = $this->purchaseMetadataResponse_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->subCategoriesResponse_)) {
      $l = $this->subCategoriesResponse_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->uninstallReasonResponse_)) {
      $l = $this->uninstallReasonResponse_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->rateCommentResponse_)) {
      $l = $this->rateCommentResponse_->size();
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->checkLicenseResponse_)) {
      $l = $this->checkLicenseResponse_->size();
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->getMarketMetadataResponse_)) {
      $l = $this->getMarketMetadataResponse_->size();
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->prefetchedBundle_))
      foreach($this->prefetchedBundle_ as $v) {
        $l = $v->size();
        $size += 2 + Protobuf::size_varint($l) + $l;
      }
    if (!is_null($this->getCategoriesResponse_)) {
      $l = $this->getCategoriesResponse_->size();
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->getCarrierInfoResponse_)) {
      $l = $this->getCarrierInfoResponse_->size();
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->restoreApplicationResponse_)) {
      $l = $this->restoreApplicationResponse_->size();
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->querySuggestionResponse_)) {
      $l = $this->querySuggestionResponse_->size();
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->billingEventResponse_)) {
      $l = $this->billingEventResponse_->size();
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->paypalPreapprovalResponse_)) {
      $l = $this->paypalPreapprovalResponse_->size();
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->paypalPreapprovalDetailsResponse_)) {
      $l = $this->paypalPreapprovalDetailsResponse_->size();
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->paypalCreateAccountResponse_)) {
      $l = $this->paypalCreateAccountResponse_->size();
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->paypalPreapprovalCredentialsResponse_)) {
      $l = $this->paypalPreapprovalCredentialsResponse_->size();
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->inAppRestoreTransactionsResponse_)) {
      $l = $this->inAppRestoreTransactionsResponse_->size();
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->inAppPurchaseInformationResponse_)) {
      $l = $this->inAppPurchaseInformationResponse_->size();
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->checkForNotificationsResponse_)) {
      $l = $this->checkForNotificationsResponse_->size();
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->ackNotificationsResponse_)) {
      $l = $this->ackNotificationsResponse_->size();
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->purchaseProductResponse_)) {
      $l = $this->purchaseProductResponse_->size();
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->reconstructDatabaseResponse_)) {
      $l = $this->reconstructDatabaseResponse_->size();
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->paypalMassageAddressResponse_)) {
      $l = $this->paypalMassageAddressResponse_->size();
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->getAddressSnippetResponse_)) {
      $l = $this->getAddressSnippetResponse_->size();
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('responseProperties_', $this->responseProperties_)
         . Protobuf::toString('assetsResponse_', $this->assetsResponse_)
         . Protobuf::toString('commentsResponse_', $this->commentsResponse_)
         . Protobuf::toString('modifyCommentResponse_', $this->modifyCommentResponse_)
         . Protobuf::toString('purchasePostResponse_', $this->purchasePostResponse_)
         . Protobuf::toString('purchaseOrderResponse_', $this->purchaseOrderResponse_)
         . Protobuf::toString('contentSyncResponse_', $this->contentSyncResponse_)
         . Protobuf::toString('getAssetResponse_', $this->getAssetResponse_)
         . Protobuf::toString('getImageResponse_', $this->getImageResponse_)
         . Protobuf::toString('refundResponse_', $this->refundResponse_)
         . Protobuf::toString('purchaseMetadataResponse_', $this->purchaseMetadataResponse_)
         . Protobuf::toString('subCategoriesResponse_', $this->subCategoriesResponse_)
         . Protobuf::toString('uninstallReasonResponse_', $this->uninstallReasonResponse_)
         . Protobuf::toString('rateCommentResponse_', $this->rateCommentResponse_)
         . Protobuf::toString('checkLicenseResponse_', $this->checkLicenseResponse_)
         . Protobuf::toString('getMarketMetadataResponse_', $this->getMarketMetadataResponse_)
         . Protobuf::toString('prefetchedBundle_', $this->prefetchedBundle_)
         . Protobuf::toString('getCategoriesResponse_', $this->getCategoriesResponse_)
         . Protobuf::toString('getCarrierInfoResponse_', $this->getCarrierInfoResponse_)
         . Protobuf::toString('restoreApplicationResponse_', $this->restoreApplicationResponse_)
         . Protobuf::toString('querySuggestionResponse_', $this->querySuggestionResponse_)
         . Protobuf::toString('billingEventResponse_', $this->billingEventResponse_)
         . Protobuf::toString('paypalPreapprovalResponse_', $this->paypalPreapprovalResponse_)
         . Protobuf::toString('paypalPreapprovalDetailsResponse_', $this->paypalPreapprovalDetailsResponse_)
         . Protobuf::toString('paypalCreateAccountResponse_', $this->paypalCreateAccountResponse_)
         . Protobuf::toString('paypalPreapprovalCredentialsResponse_', $this->paypalPreapprovalCredentialsResponse_)
         . Protobuf::toString('inAppRestoreTransactionsResponse_', $this->inAppRestoreTransactionsResponse_)
         . Protobuf::toString('inAppPurchaseInformationResponse_', $this->inAppPurchaseInformationResponse_)
         . Protobuf::toString('checkForNotificationsResponse_', $this->checkForNotificationsResponse_)
         . Protobuf::toString('ackNotificationsResponse_', $this->ackNotificationsResponse_)
         . Protobuf::toString('purchaseProductResponse_', $this->purchaseProductResponse_)
         . Protobuf::toString('reconstructDatabaseResponse_', $this->reconstructDatabaseResponse_)
         . Protobuf::toString('paypalMassageAddressResponse_', $this->paypalMassageAddressResponse_)
         . Protobuf::toString('getAddressSnippetResponse_', $this->getAddressSnippetResponse_);
  }
  
  // optional .ResponsePropertiesProto responseProperties = 2;

  protected $responseProperties_;
  public function resetResponseProperties() { unset($this->responseProperties_); }
  public function clearResponseProperties() { unset($this->responseProperties_); }
  public function hasResponseProperties() { return isset($this->responseProperties_); }
  public function getResponseProperties() { return $this->responseProperties_; }
  public function setResponseProperties(ResponsePropertiesProto $value) { $this->responseProperties_ = $value; }
  
  // optional .AssetsResponseProto assetsResponse = 3;

  protected $assetsResponse_;
  public function resetAssetsResponse() { unset($this->assetsResponse_); }
  public function clearAssetsResponse() { unset($this->assetsResponse_); }
  public function hasAssetsResponse() { return isset($this->assetsResponse_); }
  public function getAssetsResponse() { return $this->assetsResponse_; }
  public function setAssetsResponse(AssetsResponseProto $value) { $this->assetsResponse_ = $value; }
  
  // optional .CommentsResponseProto commentsResponse = 4;

  protected $commentsResponse_;
  public function resetCommentsResponse() { unset($this->commentsResponse_); }
  public function clearCommentsResponse() { unset($this->commentsResponse_); }
  public function hasCommentsResponse() { return isset($this->commentsResponse_); }
  public function getCommentsResponse() { return $this->commentsResponse_; }
  public function setCommentsResponse(CommentsResponseProto $value) { $this->commentsResponse_ = $value; }
  
  // optional .ModifyCommentResponseProto modifyCommentResponse = 5;

  protected $modifyCommentResponse_;
  public function resetModifyCommentResponse() { unset($this->modifyCommentResponse_); }
  public function clearModifyCommentResponse() { unset($this->modifyCommentResponse_); }
  public function hasModifyCommentResponse() { return isset($this->modifyCommentResponse_); }
  public function getModifyCommentResponse() { return $this->modifyCommentResponse_; }
  public function setModifyCommentResponse(ModifyCommentResponseProto $value) { $this->modifyCommentResponse_ = $value; }
  
  // optional .PurchasePostResponseProto purchasePostResponse = 6;

  protected $purchasePostResponse_;
  public function resetPurchasePostResponse() { unset($this->purchasePostResponse_); }
  public function clearPurchasePostResponse() { unset($this->purchasePostResponse_); }
  public function hasPurchasePostResponse() { return isset($this->purchasePostResponse_); }
  public function getPurchasePostResponse() { return $this->purchasePostResponse_; }
  public function setPurchasePostResponse(PurchasePostResponseProto $value) { $this->purchasePostResponse_ = $value; }
  
  // optional .PurchaseOrderResponseProto purchaseOrderResponse = 7;

  protected $purchaseOrderResponse_;
  public function resetPurchaseOrderResponse() { unset($this->purchaseOrderResponse_); }
  public function clearPurchaseOrderResponse() { unset($this->purchaseOrderResponse_); }
  public function hasPurchaseOrderResponse() { return isset($this->purchaseOrderResponse_); }
  public function getPurchaseOrderResponse() { return $this->purchaseOrderResponse_; }
  public function setPurchaseOrderResponse(PurchaseOrderResponseProto $value) { $this->purchaseOrderResponse_ = $value; }
  
  // optional .ContentSyncResponseProto contentSyncResponse = 8;

  protected $contentSyncResponse_;
  public function resetContentSyncResponse() { unset($this->contentSyncResponse_); }
  public function clearContentSyncResponse() { unset($this->contentSyncResponse_); }
  public function hasContentSyncResponse() { return isset($this->contentSyncResponse_); }
  public function getContentSyncResponse() { return $this->contentSyncResponse_; }
  public function setContentSyncResponse(ContentSyncResponseProto $value) { $this->contentSyncResponse_ = $value; }
  
  // optional .GetAssetResponseProto getAssetResponse = 9;

  protected $getAssetResponse_;
  public function resetGetAssetResponse() { unset($this->getAssetResponse_); }
  public function clearGetAssetResponse() { unset($this->getAssetResponse_); }
  public function hasGetAssetResponse() { return isset($this->getAssetResponse_); }
  public function getGetAssetResponse() { return $this->getAssetResponse_; }
  public function setGetAssetResponse(GetAssetResponseProto $value) { $this->getAssetResponse_ = $value; }
  
  // optional .GetImageResponseProto getImageResponse = 10;

  protected $getImageResponse_;
  public function resetGetImageResponse() { unset($this->getImageResponse_); }
  public function clearGetImageResponse() { unset($this->getImageResponse_); }
  public function hasGetImageResponse() { return isset($this->getImageResponse_); }
  public function getGetImageResponse() { return $this->getImageResponse_; }
  public function setGetImageResponse(GetImageResponseProto $value) { $this->getImageResponse_ = $value; }
  
  // optional .RefundResponseProto refundResponse = 11;

  protected $refundResponse_;
  public function resetRefundResponse() { unset($this->refundResponse_); }
  public function clearRefundResponse() { unset($this->refundResponse_); }
  public function hasRefundResponse() { return isset($this->refundResponse_); }
  public function getRefundResponse() { return $this->refundResponse_; }
  public function setRefundResponse(RefundResponseProto $value) { $this->refundResponse_ = $value; }
  
  // optional .PurchaseMetadataResponseProto purchaseMetadataResponse = 12;

  protected $purchaseMetadataResponse_;
  public function resetPurchaseMetadataResponse() { unset($this->purchaseMetadataResponse_); }
  public function clearPurchaseMetadataResponse() { unset($this->purchaseMetadataResponse_); }
  public function hasPurchaseMetadataResponse() { return isset($this->purchaseMetadataResponse_); }
  public function getPurchaseMetadataResponse() { return $this->purchaseMetadataResponse_; }
  public function setPurchaseMetadataResponse(PurchaseMetadataResponseProto $value) { $this->purchaseMetadataResponse_ = $value; }
  
  // optional .GetSubCategoriesResponseProto subCategoriesResponse = 13;

  protected $subCategoriesResponse_;
  public function resetSubCategoriesResponse() { unset($this->subCategoriesResponse_); }
  public function clearSubCategoriesResponse() { unset($this->subCategoriesResponse_); }
  public function hasSubCategoriesResponse() { return isset($this->subCategoriesResponse_); }
  public function getSubCategoriesResponse() { return $this->subCategoriesResponse_; }
  public function setSubCategoriesResponse(GetSubCategoriesResponseProto $value) { $this->subCategoriesResponse_ = $value; }
  
  // optional .UninstallReasonResponseProto uninstallReasonResponse = 15;

  protected $uninstallReasonResponse_;
  public function resetUninstallReasonResponse() { unset($this->uninstallReasonResponse_); }
  public function clearUninstallReasonResponse() { unset($this->uninstallReasonResponse_); }
  public function hasUninstallReasonResponse() { return isset($this->uninstallReasonResponse_); }
  public function getUninstallReasonResponse() { return $this->uninstallReasonResponse_; }
  public function setUninstallReasonResponse(UninstallReasonResponseProto $value) { $this->uninstallReasonResponse_ = $value; }
  
  // optional .RateCommentResponseProto rateCommentResponse = 16;

  protected $rateCommentResponse_;
  public function resetRateCommentResponse() { unset($this->rateCommentResponse_); }
  public function clearRateCommentResponse() { unset($this->rateCommentResponse_); }
  public function hasRateCommentResponse() { return isset($this->rateCommentResponse_); }
  public function getRateCommentResponse() { return $this->rateCommentResponse_; }
  public function setRateCommentResponse(RateCommentResponseProto $value) { $this->rateCommentResponse_ = $value; }
  
  // optional .CheckLicenseResponseProto checkLicenseResponse = 17;

  protected $checkLicenseResponse_;
  public function resetCheckLicenseResponse() { unset($this->checkLicenseResponse_); }
  public function clearCheckLicenseResponse() { unset($this->checkLicenseResponse_); }
  public function hasCheckLicenseResponse() { return isset($this->checkLicenseResponse_); }
  public function getCheckLicenseResponse() { return $this->checkLicenseResponse_; }
  public function setCheckLicenseResponse(CheckLicenseResponseProto $value) { $this->checkLicenseResponse_ = $value; }
  
  // optional .GetMarketMetadataResponseProto getMarketMetadataResponse = 18;

  protected $getMarketMetadataResponse_;
  public function resetGetMarketMetadataResponse() { unset($this->getMarketMetadataResponse_); }
  public function clearGetMarketMetadataResponse() { unset($this->getMarketMetadataResponse_); }
  public function hasGetMarketMetadataResponse() { return isset($this->getMarketMetadataResponse_); }
  public function getGetMarketMetadataResponse() { return $this->getMarketMetadataResponse_; }
  public function setGetMarketMetadataResponse(GetMarketMetadataResponseProto $value) { $this->getMarketMetadataResponse_ = $value; }
  
  // repeated .PrefetchedBundleProto prefetchedBundle = 19;

  protected $prefetchedBundle_ = array();
  public function clearPrefetchedBundle() { $this->prefetchedBundle_ = array(); }
  public function getPrefetchedBundleCount() { return count($this->prefetchedBundle_); }
  public function hasPrefetchedBundle() { return (count($this->prefetchedBundle_) > 0); }
  public function indexOfPrefetchedBundle($value) { return array_search($value,$this->prefetchedBundle_);}
  public function removePrefetchedBundle($index) { unset($this->prefetchedBundle_[$index]); }
  public function removeValPrefetchedBundle($value) { $idx = array_search($value,$this->prefetchedBundle_); if($idx !== FALSE){unset($this->prefetchedBundle_[$idx]); }}
  public function removeValsPrefetchedBundle($values) { foreach($values as $value){$idx = array_search($value,$this->prefetchedBundle_); if($idx !== FALSE){unset($this->prefetchedBundle_[$idx]); }}}
  public function pushPrefetchedBundle($newvar) { return array_push($this->prefetchedBundle_,$newvar); }
  public function popPrefetchedBundle() { return array_pop($this->prefetchedBundle_); }
  public function shiftPrefetchedBundle() { return array_shift($this->prefetchedBundle_); }
  public function unshiftPrefetchedBundle($newvar) { return array_unshift($this->prefetchedBundle_,$newvar); }
  public function getPrefetchedBundle($index) { return $this->prefetchedBundle_[$index]; }
  public function getPrefetchedBundleArray() { return $this->prefetchedBundle_; }
  public function setPrefetchedBundle($index, $value) {$this->prefetchedBundle_[$index] = $value;	}
  public function addPrefetchedBundle($value) { $this->prefetchedBundle_[] = $value; }
  public function addAllPrefetchedBundle(array $values) { foreach($values as $value) {$this->prefetchedBundle_[] = $value;} }
  
  // optional .GetCategoriesResponseProto getCategoriesResponse = 20;

  protected $getCategoriesResponse_;
  public function resetGetCategoriesResponse() { unset($this->getCategoriesResponse_); }
  public function clearGetCategoriesResponse() { unset($this->getCategoriesResponse_); }
  public function hasGetCategoriesResponse() { return isset($this->getCategoriesResponse_); }
  public function getGetCategoriesResponse() { return $this->getCategoriesResponse_; }
  public function setGetCategoriesResponse(GetCategoriesResponseProto $value) { $this->getCategoriesResponse_ = $value; }
  
  // optional .GetCarrierInfoResponseProto getCarrierInfoResponse = 21;

  protected $getCarrierInfoResponse_;
  public function resetGetCarrierInfoResponse() { unset($this->getCarrierInfoResponse_); }
  public function clearGetCarrierInfoResponse() { unset($this->getCarrierInfoResponse_); }
  public function hasGetCarrierInfoResponse() { return isset($this->getCarrierInfoResponse_); }
  public function getGetCarrierInfoResponse() { return $this->getCarrierInfoResponse_; }
  public function setGetCarrierInfoResponse(GetCarrierInfoResponseProto $value) { $this->getCarrierInfoResponse_ = $value; }
  
  // optional .RestoreApplicationsResponseProto restoreApplicationResponse = 23;

  protected $restoreApplicationResponse_;
  public function resetRestoreApplicationResponse() { unset($this->restoreApplicationResponse_); }
  public function clearRestoreApplicationResponse() { unset($this->restoreApplicationResponse_); }
  public function hasRestoreApplicationResponse() { return isset($this->restoreApplicationResponse_); }
  public function getRestoreApplicationResponse() { return $this->restoreApplicationResponse_; }
  public function setRestoreApplicationResponse(RestoreApplicationsResponseProto $value) { $this->restoreApplicationResponse_ = $value; }
  
  // optional .QuerySuggestionResponseProto querySuggestionResponse = 24;

  protected $querySuggestionResponse_;
  public function resetQuerySuggestionResponse() { unset($this->querySuggestionResponse_); }
  public function clearQuerySuggestionResponse() { unset($this->querySuggestionResponse_); }
  public function hasQuerySuggestionResponse() { return isset($this->querySuggestionResponse_); }
  public function getQuerySuggestionResponse() { return $this->querySuggestionResponse_; }
  public function setQuerySuggestionResponse(QuerySuggestionResponseProto $value) { $this->querySuggestionResponse_ = $value; }
  
  // optional .BillingEventResponseProto billingEventResponse = 25;

  protected $billingEventResponse_;
  public function resetBillingEventResponse() { unset($this->billingEventResponse_); }
  public function clearBillingEventResponse() { unset($this->billingEventResponse_); }
  public function hasBillingEventResponse() { return isset($this->billingEventResponse_); }
  public function getBillingEventResponse() { return $this->billingEventResponse_; }
  public function setBillingEventResponse(BillingEventResponseProto $value) { $this->billingEventResponse_ = $value; }
  
  // optional .PaypalPreapprovalResponseProto paypalPreapprovalResponse = 26;

  protected $paypalPreapprovalResponse_;
  public function resetPaypalPreapprovalResponse() { unset($this->paypalPreapprovalResponse_); }
  public function clearPaypalPreapprovalResponse() { unset($this->paypalPreapprovalResponse_); }
  public function hasPaypalPreapprovalResponse() { return isset($this->paypalPreapprovalResponse_); }
  public function getPaypalPreapprovalResponse() { return $this->paypalPreapprovalResponse_; }
  public function setPaypalPreapprovalResponse(PaypalPreapprovalResponseProto $value) { $this->paypalPreapprovalResponse_ = $value; }
  
  // optional .PaypalPreapprovalDetailsResponseProto paypalPreapprovalDetailsResponse = 27;

  protected $paypalPreapprovalDetailsResponse_;
  public function resetPaypalPreapprovalDetailsResponse() { unset($this->paypalPreapprovalDetailsResponse_); }
  public function clearPaypalPreapprovalDetailsResponse() { unset($this->paypalPreapprovalDetailsResponse_); }
  public function hasPaypalPreapprovalDetailsResponse() { return isset($this->paypalPreapprovalDetailsResponse_); }
  public function getPaypalPreapprovalDetailsResponse() { return $this->paypalPreapprovalDetailsResponse_; }
  public function setPaypalPreapprovalDetailsResponse(PaypalPreapprovalDetailsResponseProto $value) { $this->paypalPreapprovalDetailsResponse_ = $value; }
  
  // optional .PaypalCreateAccountResponseProto paypalCreateAccountResponse = 28;

  protected $paypalCreateAccountResponse_;
  public function resetPaypalCreateAccountResponse() { unset($this->paypalCreateAccountResponse_); }
  public function clearPaypalCreateAccountResponse() { unset($this->paypalCreateAccountResponse_); }
  public function hasPaypalCreateAccountResponse() { return isset($this->paypalCreateAccountResponse_); }
  public function getPaypalCreateAccountResponse() { return $this->paypalCreateAccountResponse_; }
  public function setPaypalCreateAccountResponse(PaypalCreateAccountResponseProto $value) { $this->paypalCreateAccountResponse_ = $value; }
  
  // optional .PaypalPreapprovalCredentialsResponseProto paypalPreapprovalCredentialsResponse = 29;

  protected $paypalPreapprovalCredentialsResponse_;
  public function resetPaypalPreapprovalCredentialsResponse() { unset($this->paypalPreapprovalCredentialsResponse_); }
  public function clearPaypalPreapprovalCredentialsResponse() { unset($this->paypalPreapprovalCredentialsResponse_); }
  public function hasPaypalPreapprovalCredentialsResponse() { return isset($this->paypalPreapprovalCredentialsResponse_); }
  public function getPaypalPreapprovalCredentialsResponse() { return $this->paypalPreapprovalCredentialsResponse_; }
  public function setPaypalPreapprovalCredentialsResponse(PaypalPreapprovalCredentialsResponseProto $value) { $this->paypalPreapprovalCredentialsResponse_ = $value; }
  
  // optional .InAppRestoreTransactionsResponseProto inAppRestoreTransactionsResponse = 30;

  protected $inAppRestoreTransactionsResponse_;
  public function resetInAppRestoreTransactionsResponse() { unset($this->inAppRestoreTransactionsResponse_); }
  public function clearInAppRestoreTransactionsResponse() { unset($this->inAppRestoreTransactionsResponse_); }
  public function hasInAppRestoreTransactionsResponse() { return isset($this->inAppRestoreTransactionsResponse_); }
  public function getInAppRestoreTransactionsResponse() { return $this->inAppRestoreTransactionsResponse_; }
  public function setInAppRestoreTransactionsResponse(InAppRestoreTransactionsResponseProto $value) { $this->inAppRestoreTransactionsResponse_ = $value; }
  
  // optional .InAppPurchaseInformationResponseProto inAppPurchaseInformationResponse = 31;

  protected $inAppPurchaseInformationResponse_;
  public function resetInAppPurchaseInformationResponse() { unset($this->inAppPurchaseInformationResponse_); }
  public function clearInAppPurchaseInformationResponse() { unset($this->inAppPurchaseInformationResponse_); }
  public function hasInAppPurchaseInformationResponse() { return isset($this->inAppPurchaseInformationResponse_); }
  public function getInAppPurchaseInformationResponse() { return $this->inAppPurchaseInformationResponse_; }
  public function setInAppPurchaseInformationResponse(InAppPurchaseInformationResponseProto $value) { $this->inAppPurchaseInformationResponse_ = $value; }
  
  // optional .CheckForNotificationsResponseProto checkForNotificationsResponse = 32;

  protected $checkForNotificationsResponse_;
  public function resetCheckForNotificationsResponse() { unset($this->checkForNotificationsResponse_); }
  public function clearCheckForNotificationsResponse() { unset($this->checkForNotificationsResponse_); }
  public function hasCheckForNotificationsResponse() { return isset($this->checkForNotificationsResponse_); }
  public function getCheckForNotificationsResponse() { return $this->checkForNotificationsResponse_; }
  public function setCheckForNotificationsResponse(CheckForNotificationsResponseProto $value) { $this->checkForNotificationsResponse_ = $value; }
  
  // optional .AckNotificationsResponseProto ackNotificationsResponse = 33;

  protected $ackNotificationsResponse_;
  public function resetAckNotificationsResponse() { unset($this->ackNotificationsResponse_); }
  public function clearAckNotificationsResponse() { unset($this->ackNotificationsResponse_); }
  public function hasAckNotificationsResponse() { return isset($this->ackNotificationsResponse_); }
  public function getAckNotificationsResponse() { return $this->ackNotificationsResponse_; }
  public function setAckNotificationsResponse(AckNotificationsResponseProto $value) { $this->ackNotificationsResponse_ = $value; }
  
  // optional .PurchaseProductResponseProto purchaseProductResponse = 34;

  protected $purchaseProductResponse_;
  public function resetPurchaseProductResponse() { unset($this->purchaseProductResponse_); }
  public function clearPurchaseProductResponse() { unset($this->purchaseProductResponse_); }
  public function hasPurchaseProductResponse() { return isset($this->purchaseProductResponse_); }
  public function getPurchaseProductResponse() { return $this->purchaseProductResponse_; }
  public function setPurchaseProductResponse(PurchaseProductResponseProto $value) { $this->purchaseProductResponse_ = $value; }
  
  // optional .ReconstructDatabaseResponseProto reconstructDatabaseResponse = 35;

  protected $reconstructDatabaseResponse_;
  public function resetReconstructDatabaseResponse() { unset($this->reconstructDatabaseResponse_); }
  public function clearReconstructDatabaseResponse() { unset($this->reconstructDatabaseResponse_); }
  public function hasReconstructDatabaseResponse() { return isset($this->reconstructDatabaseResponse_); }
  public function getReconstructDatabaseResponse() { return $this->reconstructDatabaseResponse_; }
  public function setReconstructDatabaseResponse(ReconstructDatabaseResponseProto $value) { $this->reconstructDatabaseResponse_ = $value; }
  
  // optional .PaypalMassageAddressResponseProto paypalMassageAddressResponse = 36;

  protected $paypalMassageAddressResponse_;
  public function resetPaypalMassageAddressResponse() { unset($this->paypalMassageAddressResponse_); }
  public function clearPaypalMassageAddressResponse() { unset($this->paypalMassageAddressResponse_); }
  public function hasPaypalMassageAddressResponse() { return isset($this->paypalMassageAddressResponse_); }
  public function getPaypalMassageAddressResponse() { return $this->paypalMassageAddressResponse_; }
  public function setPaypalMassageAddressResponse(PaypalMassageAddressResponseProto $value) { $this->paypalMassageAddressResponse_ = $value; }
  
  // optional .GetAddressSnippetResponseProto getAddressSnippetResponse = 37;

  protected $getAddressSnippetResponse_;
  public function resetGetAddressSnippetResponse() { unset($this->getAddressSnippetResponse_); }
  public function clearGetAddressSnippetResponse() { unset($this->getAddressSnippetResponse_); }
  public function hasGetAddressSnippetResponse() { return isset($this->getAddressSnippetResponse_); }
  public function getGetAddressSnippetResponse() { return $this->getAddressSnippetResponse_; }
  public function setGetAddressSnippetResponse(GetAddressSnippetResponseProto $value) { $this->getAddressSnippetResponse_ = $value; }
  
  // @@protoc_insertion_point(class_scope:ResponseProto.Response)
}

// message ResponseProto
class ResponseProto {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("ResponseProto: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 3');
          $this->response_[] = new ResponseProto_Response($fp, $limit);
          break;
        case 38:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->pendingNotifications_ = new PendingNotificationsProto($fp, $len);
          ASSERT('$len == 0');
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->response_))
      foreach($this->response_ as $v) {
        fwrite($fp, "\x0b");
        $v->write($fp); // group
        fwrite($fp, "\x0c");
      }
    if (!is_null($this->pendingNotifications_)) {
      fwrite($fp, "\xb2\x02");
      Protobuf::write_varint($fp, $this->pendingNotifications_->size()); // message
      $this->pendingNotifications_->write($fp);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->response_))
      foreach($this->response_ as $v) {
        $size += 2 + $v->size();
      }
    if (!is_null($this->pendingNotifications_)) {
      $l = $this->pendingNotifications_->size();
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('response_', $this->response_)
         . Protobuf::toString('pendingNotifications_', $this->pendingNotifications_);
  }
  
  // repeated group Response = 1
  protected $response_ = array();
  public function clearResponse() { $this->response_ = array(); }
  public function getResponseCount() { return count($this->response_); }
  public function hasResponse() { return (count($this->response_) > 0); }
  public function indexOfResponse($value) { return array_search($value,$this->response_);}
  public function removeResponse($index) { unset($this->response_[$index]); }
  public function removeValResponse($value) { $idx = array_search($value,$this->response_); if($idx !== FALSE){unset($this->response_[$idx]); }}
  public function removeValsResponse($values) { foreach($values as $value){$idx = array_search($value,$this->response_); if($idx !== FALSE){unset($this->response_[$idx]); }}}
  public function pushResponse($newvar) { return array_push($this->response_,$newvar); }
  public function popResponse() { return array_pop($this->response_); }
  public function shiftResponse() { return array_shift($this->response_); }
  public function unshiftResponse($newvar) { return array_unshift($this->response_,$newvar); }
  public function getResponse($index) { return $this->response_[$index]; }
  public function getResponseArray() { return $this->response_; }
  public function setResponse($index, $value) {$this->response_[$index] = $value;	}
  public function addResponse($value) { $this->response_[] = $value; }
  public function addAllResponse(array $values) { foreach($values as $value) {$this->response_[] = $value;} }
  
  // optional .PendingNotificationsProto pendingNotifications = 38;

  protected $pendingNotifications_;
  public function resetPendingNotifications() { unset($this->pendingNotifications_); }
  public function clearPendingNotifications() { unset($this->pendingNotifications_); }
  public function hasPendingNotifications() { return isset($this->pendingNotifications_); }
  public function getPendingNotifications() { return $this->pendingNotifications_; }
  public function setPendingNotifications(PendingNotificationsProto $value) { $this->pendingNotifications_ = $value; }
  
  // @@protoc_insertion_point(class_scope:ResponseProto)
}

// message RestoreApplicationsRequestProto
class RestoreApplicationsRequestProto {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("RestoreApplicationsRequestProto: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->backupAndroidId_ = $tmp;
          $limit-=$len;
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->tosVersion_ = $tmp;
          $limit-=$len;
          break;
        case 3:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->deviceConfiguration_ = new DeviceConfigurationProto($fp, $len);
          ASSERT('$len == 0');
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->backupAndroidId_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, strlen((string)$this->backupAndroidId_));
      fwrite($fp, (string)$this->backupAndroidId_);
    }
    if (!is_null($this->tosVersion_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, strlen((string)$this->tosVersion_));
      fwrite($fp, (string)$this->tosVersion_);
    }
    if (!is_null($this->deviceConfiguration_)) {
      fwrite($fp, "\x1a");
      Protobuf::write_varint($fp, $this->deviceConfiguration_->size()); // message
      $this->deviceConfiguration_->write($fp);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->backupAndroidId_)) {
      $l = strlen((string)$this->backupAndroidId_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->tosVersion_)) {
      $l = strlen((string)$this->tosVersion_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->deviceConfiguration_)) {
      $l = $this->deviceConfiguration_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('backupAndroidId_', $this->backupAndroidId_)
         . Protobuf::toString('tosVersion_', $this->tosVersion_)
         . Protobuf::toString('deviceConfiguration_', $this->deviceConfiguration_);
  }
  
  // optional string backupAndroidId = 1;

  protected $backupAndroidId_;
  public function resetBackupAndroidId() { unset($this->backupAndroidId_); }
  public function clearBackupAndroidId() { unset($this->backupAndroidId_); }
  public function hasBackupAndroidId() { return isset($this->backupAndroidId_); }
  public function getBackupAndroidId() { return $this->backupAndroidId_; }
  public function setBackupAndroidId($value) { $this->backupAndroidId_ = (string)$value; }
  
  // optional string tosVersion = 2;

  protected $tosVersion_;
  public function resetTosVersion() { unset($this->tosVersion_); }
  public function clearTosVersion() { unset($this->tosVersion_); }
  public function hasTosVersion() { return isset($this->tosVersion_); }
  public function getTosVersion() { return $this->tosVersion_; }
  public function setTosVersion($value) { $this->tosVersion_ = (string)$value; }
  
  // optional .DeviceConfigurationProto deviceConfiguration = 3;

  protected $deviceConfiguration_;
  public function resetDeviceConfiguration() { unset($this->deviceConfiguration_); }
  public function clearDeviceConfiguration() { unset($this->deviceConfiguration_); }
  public function hasDeviceConfiguration() { return isset($this->deviceConfiguration_); }
  public function getDeviceConfiguration() { return $this->deviceConfiguration_; }
  public function setDeviceConfiguration(DeviceConfigurationProto $value) { $this->deviceConfiguration_ = $value; }
  
  // @@protoc_insertion_point(class_scope:RestoreApplicationsRequestProto)
}

// message RestoreApplicationsResponseProto
class RestoreApplicationsResponseProto {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("RestoreApplicationsResponseProto: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->asset_[] = new GetAssetResponseProto($fp, $len);
          ASSERT('$len == 0');
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->asset_))
      foreach($this->asset_ as $v) {
        fwrite($fp, "\x0a");
        Protobuf::write_varint($fp, $v->size()); // message
        $v->write($fp);
      }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->asset_))
      foreach($this->asset_ as $v) {
        $l = $v->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('asset_', $this->asset_);
  }
  
  // repeated .GetAssetResponseProto asset = 1;

  protected $asset_ = array();
  public function clearAsset() { $this->asset_ = array(); }
  public function getAssetCount() { return count($this->asset_); }
  public function hasAsset() { return (count($this->asset_) > 0); }
  public function indexOfAsset($value) { return array_search($value,$this->asset_);}
  public function removeAsset($index) { unset($this->asset_[$index]); }
  public function removeValAsset($value) { $idx = array_search($value,$this->asset_); if($idx !== FALSE){unset($this->asset_[$idx]); }}
  public function removeValsAsset($values) { foreach($values as $value){$idx = array_search($value,$this->asset_); if($idx !== FALSE){unset($this->asset_[$idx]); }}}
  public function pushAsset($newvar) { return array_push($this->asset_,$newvar); }
  public function popAsset() { return array_pop($this->asset_); }
  public function shiftAsset() { return array_shift($this->asset_); }
  public function unshiftAsset($newvar) { return array_unshift($this->asset_,$newvar); }
  public function getAsset($index) { return $this->asset_[$index]; }
  public function getAssetArray() { return $this->asset_; }
  public function setAsset($index, $value) {$this->asset_[$index] = $value;	}
  public function addAsset($value) { $this->asset_[] = $value; }
  public function addAllAsset(array $values) { foreach($values as $value) {$this->asset_[] = $value;} }
  
  // @@protoc_insertion_point(class_scope:RestoreApplicationsResponseProto)
}

// message RiskHeaderInfoProto
class RiskHeaderInfoProto {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("RiskHeaderInfoProto: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->hashedDeviceInfo_ = $tmp;
          $limit-=$len;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->hashedDeviceInfo_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, strlen((string)$this->hashedDeviceInfo_));
      fwrite($fp, (string)$this->hashedDeviceInfo_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->hashedDeviceInfo_)) {
      $l = strlen((string)$this->hashedDeviceInfo_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('hashedDeviceInfo_', $this->hashedDeviceInfo_);
  }
  
  // optional string hashedDeviceInfo = 1;

  protected $hashedDeviceInfo_;
  public function resetHashedDeviceInfo() { unset($this->hashedDeviceInfo_); }
  public function clearHashedDeviceInfo() { unset($this->hashedDeviceInfo_); }
  public function hasHashedDeviceInfo() { return isset($this->hashedDeviceInfo_); }
  public function getHashedDeviceInfo() { return $this->hashedDeviceInfo_; }
  public function setHashedDeviceInfo($value) { $this->hashedDeviceInfo_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:RiskHeaderInfoProto)
}

// message SignatureHashProto
class SignatureHashProto {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("SignatureHashProto: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->packageName_ = $tmp;
          $limit-=$len;
          break;
        case 2:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->versionCode_ = $tmp;
          
          break;
        case 3:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->hash_ = $tmp;
          $limit-=$len;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->packageName_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, strlen((string)$this->packageName_));
      fwrite($fp, (string)$this->packageName_);
    }
    if (!is_null($this->versionCode_)) {
      fwrite($fp, "\x10");
      Protobuf::write_varint($fp, (int)$this->versionCode_);
    }
    if (!is_null($this->hash_)) {
      fwrite($fp, "\x1a");
      Protobuf::write_varint($fp, strlen((string)$this->hash_));
      fwrite($fp, (string)$this->hash_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->packageName_)) {
      $l = strlen((string)$this->packageName_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->versionCode_)) {
      $size += 1 + Protobuf::size_varint($this->versionCode_);
    }
    if (!is_null($this->hash_)) {
      $l = strlen((string)$this->hash_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('packageName_', $this->packageName_)
         . Protobuf::toString('versionCode_', $this->versionCode_)
         . Protobuf::toString('hash_', $this->hash_);
  }
  
  // optional string packageName = 1;

  protected $packageName_;
  public function resetPackageName() { unset($this->packageName_); }
  public function clearPackageName() { unset($this->packageName_); }
  public function hasPackageName() { return isset($this->packageName_); }
  public function getPackageName() { return $this->packageName_; }
  public function setPackageName($value) { $this->packageName_ = (string)$value; }
  
  // optional int32 versionCode = 2;

  protected $versionCode_;
  public function resetVersionCode() { unset($this->versionCode_); }
  public function clearVersionCode() { unset($this->versionCode_); }
  public function hasVersionCode() { return isset($this->versionCode_); }
  public function getVersionCode() { return $this->versionCode_; }
  public function setVersionCode($value) { $this->versionCode_ = (string)$value; }
  
  // optional bytes hash = 3;

  protected $hash_;
  public function resetHash() { unset($this->hash_); }
  public function clearHash() { unset($this->hash_); }
  public function hasHash() { return isset($this->hash_); }
  public function getHash() { return $this->hash_; }
  public function setHash($value) { $this->hash_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:SignatureHashProto)
}

// message SignedDataProto
class SignedDataProto {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("SignedDataProto: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->signedData_ = $tmp;
          $limit-=$len;
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->signature_ = $tmp;
          $limit-=$len;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->signedData_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, strlen((string)$this->signedData_));
      fwrite($fp, (string)$this->signedData_);
    }
    if (!is_null($this->signature_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, strlen((string)$this->signature_));
      fwrite($fp, (string)$this->signature_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->signedData_)) {
      $l = strlen((string)$this->signedData_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->signature_)) {
      $l = strlen((string)$this->signature_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('signedData_', $this->signedData_)
         . Protobuf::toString('signature_', $this->signature_);
  }
  
  // optional string signedData = 1;

  protected $signedData_;
  public function resetSignedData() { unset($this->signedData_); }
  public function clearSignedData() { unset($this->signedData_); }
  public function hasSignedData() { return isset($this->signedData_); }
  public function getSignedData() { return $this->signedData_; }
  public function setSignedData($value) { $this->signedData_ = (string)$value; }
  
  // optional string signature = 2;

  protected $signature_;
  public function resetSignature() { unset($this->signature_); }
  public function clearSignature() { unset($this->signature_); }
  public function hasSignature() { return isset($this->signature_); }
  public function getSignature() { return $this->signature_; }
  public function setSignature($value) { $this->signature_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:SignedDataProto)
}

// message SingleRequestProto
class SingleRequestProto {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("SingleRequestProto: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 3:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->requestSpecificProperties_ = new RequestSpecificPropertiesProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 4:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->assetRequest_ = new AssetsRequestProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 5:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->commentsRequest_ = new CommentsRequestProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 6:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->modifyCommentRequest_ = new ModifyCommentRequestProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 7:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->purchasePostRequest_ = new PurchasePostRequestProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 8:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->purchaseOrderRequest_ = new PurchaseOrderRequestProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 9:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->contentSyncRequest_ = new ContentSyncRequestProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 10:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->getAssetRequest_ = new GetAssetRequestProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 11:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->getImageRequest_ = new GetImageRequestProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 12:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->refundRequest_ = new RefundRequestProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 13:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->purchaseMetadataRequest_ = new PurchaseMetadataRequestProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 14:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->subCategoriesRequest_ = new GetSubCategoriesRequestProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 16:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->uninstallReasonRequest_ = new UninstallReasonRequestProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 17:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->rateCommentRequest_ = new RateCommentRequestProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 18:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->checkLicenseRequest_ = new CheckLicenseRequestProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 19:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->getMarketMetadataRequest_ = new GetMarketMetadataRequestProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 21:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->getCategoriesRequest_ = new GetCategoriesRequestProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 22:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->getCarrierInfoRequest_ = new GetCarrierInfoRequestProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 23:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->removeAssetRequest_ = new RemoveAssetRequestProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 24:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->restoreApplicationsRequest_ = new RestoreApplicationsRequestProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 25:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->querySuggestionRequest_ = new QuerySuggestionRequestProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 26:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->billingEventRequest_ = new BillingEventRequestProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 27:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->paypalPreapprovalRequest_ = new PaypalPreapprovalRequestProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 28:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->paypalPreapprovalDetailsRequest_ = new PaypalPreapprovalDetailsRequestProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 29:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->paypalCreateAccountRequest_ = new PaypalCreateAccountRequestProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 30:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->paypalPreapprovalCredentialsRequest_ = new PaypalPreapprovalCredentialsRequestProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 31:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->inAppRestoreTransactionsRequest_ = new InAppRestoreTransactionsRequestProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 32:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->getInAppPurchaseInformationRequest_ = new InAppPurchaseInformationRequestProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 33:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->checkForNotificationsRequest_ = new CheckForNotificationsRequestProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 34:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->ackNotificationsRequest_ = new AckNotificationsRequestProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 35:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->purchaseProductRequest_ = new PurchaseProductRequestProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 36:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->reconstructDatabaseRequest_ = new ReconstructDatabaseRequestProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 37:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->paypalMassageAddressRequest_ = new PaypalMassageAddressRequestProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 38:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->getAddressSnippetRequest_ = new GetAddressSnippetRequestProto($fp, $len);
          ASSERT('$len == 0');
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->requestSpecificProperties_)) {
      fwrite($fp, "\x1a");
      Protobuf::write_varint($fp, $this->requestSpecificProperties_->size()); // message
      $this->requestSpecificProperties_->write($fp);
    }
    if (!is_null($this->assetRequest_)) {
      fwrite($fp, "\"");
      Protobuf::write_varint($fp, $this->assetRequest_->size()); // message
      $this->assetRequest_->write($fp);
    }
    if (!is_null($this->commentsRequest_)) {
      fwrite($fp, "*");
      Protobuf::write_varint($fp, $this->commentsRequest_->size()); // message
      $this->commentsRequest_->write($fp);
    }
    if (!is_null($this->modifyCommentRequest_)) {
      fwrite($fp, "2");
      Protobuf::write_varint($fp, $this->modifyCommentRequest_->size()); // message
      $this->modifyCommentRequest_->write($fp);
    }
    if (!is_null($this->purchasePostRequest_)) {
      fwrite($fp, ":");
      Protobuf::write_varint($fp, $this->purchasePostRequest_->size()); // message
      $this->purchasePostRequest_->write($fp);
    }
    if (!is_null($this->purchaseOrderRequest_)) {
      fwrite($fp, "B");
      Protobuf::write_varint($fp, $this->purchaseOrderRequest_->size()); // message
      $this->purchaseOrderRequest_->write($fp);
    }
    if (!is_null($this->contentSyncRequest_)) {
      fwrite($fp, "J");
      Protobuf::write_varint($fp, $this->contentSyncRequest_->size()); // message
      $this->contentSyncRequest_->write($fp);
    }
    if (!is_null($this->getAssetRequest_)) {
      fwrite($fp, "R");
      Protobuf::write_varint($fp, $this->getAssetRequest_->size()); // message
      $this->getAssetRequest_->write($fp);
    }
    if (!is_null($this->getImageRequest_)) {
      fwrite($fp, "Z");
      Protobuf::write_varint($fp, $this->getImageRequest_->size()); // message
      $this->getImageRequest_->write($fp);
    }
    if (!is_null($this->refundRequest_)) {
      fwrite($fp, "b");
      Protobuf::write_varint($fp, $this->refundRequest_->size()); // message
      $this->refundRequest_->write($fp);
    }
    if (!is_null($this->purchaseMetadataRequest_)) {
      fwrite($fp, "j");
      Protobuf::write_varint($fp, $this->purchaseMetadataRequest_->size()); // message
      $this->purchaseMetadataRequest_->write($fp);
    }
    if (!is_null($this->subCategoriesRequest_)) {
      fwrite($fp, "r");
      Protobuf::write_varint($fp, $this->subCategoriesRequest_->size()); // message
      $this->subCategoriesRequest_->write($fp);
    }
    if (!is_null($this->uninstallReasonRequest_)) {
      fwrite($fp, "\x82\x01");
      Protobuf::write_varint($fp, $this->uninstallReasonRequest_->size()); // message
      $this->uninstallReasonRequest_->write($fp);
    }
    if (!is_null($this->rateCommentRequest_)) {
      fwrite($fp, "\x8a\x01");
      Protobuf::write_varint($fp, $this->rateCommentRequest_->size()); // message
      $this->rateCommentRequest_->write($fp);
    }
    if (!is_null($this->checkLicenseRequest_)) {
      fwrite($fp, "\x92\x01");
      Protobuf::write_varint($fp, $this->checkLicenseRequest_->size()); // message
      $this->checkLicenseRequest_->write($fp);
    }
    if (!is_null($this->getMarketMetadataRequest_)) {
      fwrite($fp, "\x9a\x01");
      Protobuf::write_varint($fp, $this->getMarketMetadataRequest_->size()); // message
      $this->getMarketMetadataRequest_->write($fp);
    }
    if (!is_null($this->getCategoriesRequest_)) {
      fwrite($fp, "\xaa\x01");
      Protobuf::write_varint($fp, $this->getCategoriesRequest_->size()); // message
      $this->getCategoriesRequest_->write($fp);
    }
    if (!is_null($this->getCarrierInfoRequest_)) {
      fwrite($fp, "\xb2\x01");
      Protobuf::write_varint($fp, $this->getCarrierInfoRequest_->size()); // message
      $this->getCarrierInfoRequest_->write($fp);
    }
    if (!is_null($this->removeAssetRequest_)) {
      fwrite($fp, "\xba\x01");
      Protobuf::write_varint($fp, $this->removeAssetRequest_->size()); // message
      $this->removeAssetRequest_->write($fp);
    }
    if (!is_null($this->restoreApplicationsRequest_)) {
      fwrite($fp, "\xc2\x01");
      Protobuf::write_varint($fp, $this->restoreApplicationsRequest_->size()); // message
      $this->restoreApplicationsRequest_->write($fp);
    }
    if (!is_null($this->querySuggestionRequest_)) {
      fwrite($fp, "\xca\x01");
      Protobuf::write_varint($fp, $this->querySuggestionRequest_->size()); // message
      $this->querySuggestionRequest_->write($fp);
    }
    if (!is_null($this->billingEventRequest_)) {
      fwrite($fp, "\xd2\x01");
      Protobuf::write_varint($fp, $this->billingEventRequest_->size()); // message
      $this->billingEventRequest_->write($fp);
    }
    if (!is_null($this->paypalPreapprovalRequest_)) {
      fwrite($fp, "\xda\x01");
      Protobuf::write_varint($fp, $this->paypalPreapprovalRequest_->size()); // message
      $this->paypalPreapprovalRequest_->write($fp);
    }
    if (!is_null($this->paypalPreapprovalDetailsRequest_)) {
      fwrite($fp, "\xe2\x01");
      Protobuf::write_varint($fp, $this->paypalPreapprovalDetailsRequest_->size()); // message
      $this->paypalPreapprovalDetailsRequest_->write($fp);
    }
    if (!is_null($this->paypalCreateAccountRequest_)) {
      fwrite($fp, "\xea\x01");
      Protobuf::write_varint($fp, $this->paypalCreateAccountRequest_->size()); // message
      $this->paypalCreateAccountRequest_->write($fp);
    }
    if (!is_null($this->paypalPreapprovalCredentialsRequest_)) {
      fwrite($fp, "\xf2\x01");
      Protobuf::write_varint($fp, $this->paypalPreapprovalCredentialsRequest_->size()); // message
      $this->paypalPreapprovalCredentialsRequest_->write($fp);
    }
    if (!is_null($this->inAppRestoreTransactionsRequest_)) {
      fwrite($fp, "\xfa\x01");
      Protobuf::write_varint($fp, $this->inAppRestoreTransactionsRequest_->size()); // message
      $this->inAppRestoreTransactionsRequest_->write($fp);
    }
    if (!is_null($this->getInAppPurchaseInformationRequest_)) {
      fwrite($fp, "\x82\x02");
      Protobuf::write_varint($fp, $this->getInAppPurchaseInformationRequest_->size()); // message
      $this->getInAppPurchaseInformationRequest_->write($fp);
    }
    if (!is_null($this->checkForNotificationsRequest_)) {
      fwrite($fp, "\x8a\x02");
      Protobuf::write_varint($fp, $this->checkForNotificationsRequest_->size()); // message
      $this->checkForNotificationsRequest_->write($fp);
    }
    if (!is_null($this->ackNotificationsRequest_)) {
      fwrite($fp, "\x92\x02");
      Protobuf::write_varint($fp, $this->ackNotificationsRequest_->size()); // message
      $this->ackNotificationsRequest_->write($fp);
    }
    if (!is_null($this->purchaseProductRequest_)) {
      fwrite($fp, "\x9a\x02");
      Protobuf::write_varint($fp, $this->purchaseProductRequest_->size()); // message
      $this->purchaseProductRequest_->write($fp);
    }
    if (!is_null($this->reconstructDatabaseRequest_)) {
      fwrite($fp, "\xa2\x02");
      Protobuf::write_varint($fp, $this->reconstructDatabaseRequest_->size()); // message
      $this->reconstructDatabaseRequest_->write($fp);
    }
    if (!is_null($this->paypalMassageAddressRequest_)) {
      fwrite($fp, "\xaa\x02");
      Protobuf::write_varint($fp, $this->paypalMassageAddressRequest_->size()); // message
      $this->paypalMassageAddressRequest_->write($fp);
    }
    if (!is_null($this->getAddressSnippetRequest_)) {
      fwrite($fp, "\xb2\x02");
      Protobuf::write_varint($fp, $this->getAddressSnippetRequest_->size()); // message
      $this->getAddressSnippetRequest_->write($fp);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->requestSpecificProperties_)) {
      $l = $this->requestSpecificProperties_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->assetRequest_)) {
      $l = $this->assetRequest_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->commentsRequest_)) {
      $l = $this->commentsRequest_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->modifyCommentRequest_)) {
      $l = $this->modifyCommentRequest_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->purchasePostRequest_)) {
      $l = $this->purchasePostRequest_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->purchaseOrderRequest_)) {
      $l = $this->purchaseOrderRequest_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->contentSyncRequest_)) {
      $l = $this->contentSyncRequest_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->getAssetRequest_)) {
      $l = $this->getAssetRequest_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->getImageRequest_)) {
      $l = $this->getImageRequest_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->refundRequest_)) {
      $l = $this->refundRequest_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->purchaseMetadataRequest_)) {
      $l = $this->purchaseMetadataRequest_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->subCategoriesRequest_)) {
      $l = $this->subCategoriesRequest_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->uninstallReasonRequest_)) {
      $l = $this->uninstallReasonRequest_->size();
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->rateCommentRequest_)) {
      $l = $this->rateCommentRequest_->size();
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->checkLicenseRequest_)) {
      $l = $this->checkLicenseRequest_->size();
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->getMarketMetadataRequest_)) {
      $l = $this->getMarketMetadataRequest_->size();
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->getCategoriesRequest_)) {
      $l = $this->getCategoriesRequest_->size();
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->getCarrierInfoRequest_)) {
      $l = $this->getCarrierInfoRequest_->size();
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->removeAssetRequest_)) {
      $l = $this->removeAssetRequest_->size();
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->restoreApplicationsRequest_)) {
      $l = $this->restoreApplicationsRequest_->size();
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->querySuggestionRequest_)) {
      $l = $this->querySuggestionRequest_->size();
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->billingEventRequest_)) {
      $l = $this->billingEventRequest_->size();
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->paypalPreapprovalRequest_)) {
      $l = $this->paypalPreapprovalRequest_->size();
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->paypalPreapprovalDetailsRequest_)) {
      $l = $this->paypalPreapprovalDetailsRequest_->size();
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->paypalCreateAccountRequest_)) {
      $l = $this->paypalCreateAccountRequest_->size();
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->paypalPreapprovalCredentialsRequest_)) {
      $l = $this->paypalPreapprovalCredentialsRequest_->size();
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->inAppRestoreTransactionsRequest_)) {
      $l = $this->inAppRestoreTransactionsRequest_->size();
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->getInAppPurchaseInformationRequest_)) {
      $l = $this->getInAppPurchaseInformationRequest_->size();
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->checkForNotificationsRequest_)) {
      $l = $this->checkForNotificationsRequest_->size();
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->ackNotificationsRequest_)) {
      $l = $this->ackNotificationsRequest_->size();
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->purchaseProductRequest_)) {
      $l = $this->purchaseProductRequest_->size();
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->reconstructDatabaseRequest_)) {
      $l = $this->reconstructDatabaseRequest_->size();
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->paypalMassageAddressRequest_)) {
      $l = $this->paypalMassageAddressRequest_->size();
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->getAddressSnippetRequest_)) {
      $l = $this->getAddressSnippetRequest_->size();
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('requestSpecificProperties_', $this->requestSpecificProperties_)
         . Protobuf::toString('assetRequest_', $this->assetRequest_)
         . Protobuf::toString('commentsRequest_', $this->commentsRequest_)
         . Protobuf::toString('modifyCommentRequest_', $this->modifyCommentRequest_)
         . Protobuf::toString('purchasePostRequest_', $this->purchasePostRequest_)
         . Protobuf::toString('purchaseOrderRequest_', $this->purchaseOrderRequest_)
         . Protobuf::toString('contentSyncRequest_', $this->contentSyncRequest_)
         . Protobuf::toString('getAssetRequest_', $this->getAssetRequest_)
         . Protobuf::toString('getImageRequest_', $this->getImageRequest_)
         . Protobuf::toString('refundRequest_', $this->refundRequest_)
         . Protobuf::toString('purchaseMetadataRequest_', $this->purchaseMetadataRequest_)
         . Protobuf::toString('subCategoriesRequest_', $this->subCategoriesRequest_)
         . Protobuf::toString('uninstallReasonRequest_', $this->uninstallReasonRequest_)
         . Protobuf::toString('rateCommentRequest_', $this->rateCommentRequest_)
         . Protobuf::toString('checkLicenseRequest_', $this->checkLicenseRequest_)
         . Protobuf::toString('getMarketMetadataRequest_', $this->getMarketMetadataRequest_)
         . Protobuf::toString('getCategoriesRequest_', $this->getCategoriesRequest_)
         . Protobuf::toString('getCarrierInfoRequest_', $this->getCarrierInfoRequest_)
         . Protobuf::toString('removeAssetRequest_', $this->removeAssetRequest_)
         . Protobuf::toString('restoreApplicationsRequest_', $this->restoreApplicationsRequest_)
         . Protobuf::toString('querySuggestionRequest_', $this->querySuggestionRequest_)
         . Protobuf::toString('billingEventRequest_', $this->billingEventRequest_)
         . Protobuf::toString('paypalPreapprovalRequest_', $this->paypalPreapprovalRequest_)
         . Protobuf::toString('paypalPreapprovalDetailsRequest_', $this->paypalPreapprovalDetailsRequest_)
         . Protobuf::toString('paypalCreateAccountRequest_', $this->paypalCreateAccountRequest_)
         . Protobuf::toString('paypalPreapprovalCredentialsRequest_', $this->paypalPreapprovalCredentialsRequest_)
         . Protobuf::toString('inAppRestoreTransactionsRequest_', $this->inAppRestoreTransactionsRequest_)
         . Protobuf::toString('getInAppPurchaseInformationRequest_', $this->getInAppPurchaseInformationRequest_)
         . Protobuf::toString('checkForNotificationsRequest_', $this->checkForNotificationsRequest_)
         . Protobuf::toString('ackNotificationsRequest_', $this->ackNotificationsRequest_)
         . Protobuf::toString('purchaseProductRequest_', $this->purchaseProductRequest_)
         . Protobuf::toString('reconstructDatabaseRequest_', $this->reconstructDatabaseRequest_)
         . Protobuf::toString('paypalMassageAddressRequest_', $this->paypalMassageAddressRequest_)
         . Protobuf::toString('getAddressSnippetRequest_', $this->getAddressSnippetRequest_);
  }
  
  // optional .RequestSpecificPropertiesProto requestSpecificProperties = 3;

  protected $requestSpecificProperties_;
  public function resetRequestSpecificProperties() { unset($this->requestSpecificProperties_); }
  public function clearRequestSpecificProperties() { unset($this->requestSpecificProperties_); }
  public function hasRequestSpecificProperties() { return isset($this->requestSpecificProperties_); }
  public function getRequestSpecificProperties() { return $this->requestSpecificProperties_; }
  public function setRequestSpecificProperties(RequestSpecificPropertiesProto $value) { $this->requestSpecificProperties_ = $value; }
  
  // optional .AssetsRequestProto assetRequest = 4;

  protected $assetRequest_;
  public function resetAssetRequest() { unset($this->assetRequest_); }
  public function clearAssetRequest() { unset($this->assetRequest_); }
  public function hasAssetRequest() { return isset($this->assetRequest_); }
  public function getAssetRequest() { return $this->assetRequest_; }
  public function setAssetRequest(AssetsRequestProto $value) { $this->assetRequest_ = $value; }
  
  // optional .CommentsRequestProto commentsRequest = 5;

  protected $commentsRequest_;
  public function resetCommentsRequest() { unset($this->commentsRequest_); }
  public function clearCommentsRequest() { unset($this->commentsRequest_); }
  public function hasCommentsRequest() { return isset($this->commentsRequest_); }
  public function getCommentsRequest() { return $this->commentsRequest_; }
  public function setCommentsRequest(CommentsRequestProto $value) { $this->commentsRequest_ = $value; }
  
  // optional .ModifyCommentRequestProto modifyCommentRequest = 6;

  protected $modifyCommentRequest_;
  public function resetModifyCommentRequest() { unset($this->modifyCommentRequest_); }
  public function clearModifyCommentRequest() { unset($this->modifyCommentRequest_); }
  public function hasModifyCommentRequest() { return isset($this->modifyCommentRequest_); }
  public function getModifyCommentRequest() { return $this->modifyCommentRequest_; }
  public function setModifyCommentRequest(ModifyCommentRequestProto $value) { $this->modifyCommentRequest_ = $value; }
  
  // optional .PurchasePostRequestProto purchasePostRequest = 7;

  protected $purchasePostRequest_;
  public function resetPurchasePostRequest() { unset($this->purchasePostRequest_); }
  public function clearPurchasePostRequest() { unset($this->purchasePostRequest_); }
  public function hasPurchasePostRequest() { return isset($this->purchasePostRequest_); }
  public function getPurchasePostRequest() { return $this->purchasePostRequest_; }
  public function setPurchasePostRequest(PurchasePostRequestProto $value) { $this->purchasePostRequest_ = $value; }
  
  // optional .PurchaseOrderRequestProto purchaseOrderRequest = 8;

  protected $purchaseOrderRequest_;
  public function resetPurchaseOrderRequest() { unset($this->purchaseOrderRequest_); }
  public function clearPurchaseOrderRequest() { unset($this->purchaseOrderRequest_); }
  public function hasPurchaseOrderRequest() { return isset($this->purchaseOrderRequest_); }
  public function getPurchaseOrderRequest() { return $this->purchaseOrderRequest_; }
  public function setPurchaseOrderRequest(PurchaseOrderRequestProto $value) { $this->purchaseOrderRequest_ = $value; }
  
  // optional .ContentSyncRequestProto contentSyncRequest = 9;

  protected $contentSyncRequest_;
  public function resetContentSyncRequest() { unset($this->contentSyncRequest_); }
  public function clearContentSyncRequest() { unset($this->contentSyncRequest_); }
  public function hasContentSyncRequest() { return isset($this->contentSyncRequest_); }
  public function getContentSyncRequest() { return $this->contentSyncRequest_; }
  public function setContentSyncRequest(ContentSyncRequestProto $value) { $this->contentSyncRequest_ = $value; }
  
  // optional .GetAssetRequestProto getAssetRequest = 10;

  protected $getAssetRequest_;
  public function resetGetAssetRequest() { unset($this->getAssetRequest_); }
  public function clearGetAssetRequest() { unset($this->getAssetRequest_); }
  public function hasGetAssetRequest() { return isset($this->getAssetRequest_); }
  public function getGetAssetRequest() { return $this->getAssetRequest_; }
  public function setGetAssetRequest(GetAssetRequestProto $value) { $this->getAssetRequest_ = $value; }
  
  // optional .GetImageRequestProto getImageRequest = 11;

  protected $getImageRequest_;
  public function resetGetImageRequest() { unset($this->getImageRequest_); }
  public function clearGetImageRequest() { unset($this->getImageRequest_); }
  public function hasGetImageRequest() { return isset($this->getImageRequest_); }
  public function getGetImageRequest() { return $this->getImageRequest_; }
  public function setGetImageRequest(GetImageRequestProto $value) { $this->getImageRequest_ = $value; }
  
  // optional .RefundRequestProto refundRequest = 12;

  protected $refundRequest_;
  public function resetRefundRequest() { unset($this->refundRequest_); }
  public function clearRefundRequest() { unset($this->refundRequest_); }
  public function hasRefundRequest() { return isset($this->refundRequest_); }
  public function getRefundRequest() { return $this->refundRequest_; }
  public function setRefundRequest(RefundRequestProto $value) { $this->refundRequest_ = $value; }
  
  // optional .PurchaseMetadataRequestProto purchaseMetadataRequest = 13;

  protected $purchaseMetadataRequest_;
  public function resetPurchaseMetadataRequest() { unset($this->purchaseMetadataRequest_); }
  public function clearPurchaseMetadataRequest() { unset($this->purchaseMetadataRequest_); }
  public function hasPurchaseMetadataRequest() { return isset($this->purchaseMetadataRequest_); }
  public function getPurchaseMetadataRequest() { return $this->purchaseMetadataRequest_; }
  public function setPurchaseMetadataRequest(PurchaseMetadataRequestProto $value) { $this->purchaseMetadataRequest_ = $value; }
  
  // optional .GetSubCategoriesRequestProto subCategoriesRequest = 14;

  protected $subCategoriesRequest_;
  public function resetSubCategoriesRequest() { unset($this->subCategoriesRequest_); }
  public function clearSubCategoriesRequest() { unset($this->subCategoriesRequest_); }
  public function hasSubCategoriesRequest() { return isset($this->subCategoriesRequest_); }
  public function getSubCategoriesRequest() { return $this->subCategoriesRequest_; }
  public function setSubCategoriesRequest(GetSubCategoriesRequestProto $value) { $this->subCategoriesRequest_ = $value; }
  
  // optional .UninstallReasonRequestProto uninstallReasonRequest = 16;

  protected $uninstallReasonRequest_;
  public function resetUninstallReasonRequest() { unset($this->uninstallReasonRequest_); }
  public function clearUninstallReasonRequest() { unset($this->uninstallReasonRequest_); }
  public function hasUninstallReasonRequest() { return isset($this->uninstallReasonRequest_); }
  public function getUninstallReasonRequest() { return $this->uninstallReasonRequest_; }
  public function setUninstallReasonRequest(UninstallReasonRequestProto $value) { $this->uninstallReasonRequest_ = $value; }
  
  // optional .RateCommentRequestProto rateCommentRequest = 17;

  protected $rateCommentRequest_;
  public function resetRateCommentRequest() { unset($this->rateCommentRequest_); }
  public function clearRateCommentRequest() { unset($this->rateCommentRequest_); }
  public function hasRateCommentRequest() { return isset($this->rateCommentRequest_); }
  public function getRateCommentRequest() { return $this->rateCommentRequest_; }
  public function setRateCommentRequest(RateCommentRequestProto $value) { $this->rateCommentRequest_ = $value; }
  
  // optional .CheckLicenseRequestProto checkLicenseRequest = 18;

  protected $checkLicenseRequest_;
  public function resetCheckLicenseRequest() { unset($this->checkLicenseRequest_); }
  public function clearCheckLicenseRequest() { unset($this->checkLicenseRequest_); }
  public function hasCheckLicenseRequest() { return isset($this->checkLicenseRequest_); }
  public function getCheckLicenseRequest() { return $this->checkLicenseRequest_; }
  public function setCheckLicenseRequest(CheckLicenseRequestProto $value) { $this->checkLicenseRequest_ = $value; }
  
  // optional .GetMarketMetadataRequestProto getMarketMetadataRequest = 19;

  protected $getMarketMetadataRequest_;
  public function resetGetMarketMetadataRequest() { unset($this->getMarketMetadataRequest_); }
  public function clearGetMarketMetadataRequest() { unset($this->getMarketMetadataRequest_); }
  public function hasGetMarketMetadataRequest() { return isset($this->getMarketMetadataRequest_); }
  public function getGetMarketMetadataRequest() { return $this->getMarketMetadataRequest_; }
  public function setGetMarketMetadataRequest(GetMarketMetadataRequestProto $value) { $this->getMarketMetadataRequest_ = $value; }
  
  // optional .GetCategoriesRequestProto getCategoriesRequest = 21;

  protected $getCategoriesRequest_;
  public function resetGetCategoriesRequest() { unset($this->getCategoriesRequest_); }
  public function clearGetCategoriesRequest() { unset($this->getCategoriesRequest_); }
  public function hasGetCategoriesRequest() { return isset($this->getCategoriesRequest_); }
  public function getGetCategoriesRequest() { return $this->getCategoriesRequest_; }
  public function setGetCategoriesRequest(GetCategoriesRequestProto $value) { $this->getCategoriesRequest_ = $value; }
  
  // optional .GetCarrierInfoRequestProto getCarrierInfoRequest = 22;

  protected $getCarrierInfoRequest_;
  public function resetGetCarrierInfoRequest() { unset($this->getCarrierInfoRequest_); }
  public function clearGetCarrierInfoRequest() { unset($this->getCarrierInfoRequest_); }
  public function hasGetCarrierInfoRequest() { return isset($this->getCarrierInfoRequest_); }
  public function getGetCarrierInfoRequest() { return $this->getCarrierInfoRequest_; }
  public function setGetCarrierInfoRequest(GetCarrierInfoRequestProto $value) { $this->getCarrierInfoRequest_ = $value; }
  
  // optional .RemoveAssetRequestProto removeAssetRequest = 23;

  protected $removeAssetRequest_;
  public function resetRemoveAssetRequest() { unset($this->removeAssetRequest_); }
  public function clearRemoveAssetRequest() { unset($this->removeAssetRequest_); }
  public function hasRemoveAssetRequest() { return isset($this->removeAssetRequest_); }
  public function getRemoveAssetRequest() { return $this->removeAssetRequest_; }
  public function setRemoveAssetRequest(RemoveAssetRequestProto $value) { $this->removeAssetRequest_ = $value; }
  
  // optional .RestoreApplicationsRequestProto restoreApplicationsRequest = 24;

  protected $restoreApplicationsRequest_;
  public function resetRestoreApplicationsRequest() { unset($this->restoreApplicationsRequest_); }
  public function clearRestoreApplicationsRequest() { unset($this->restoreApplicationsRequest_); }
  public function hasRestoreApplicationsRequest() { return isset($this->restoreApplicationsRequest_); }
  public function getRestoreApplicationsRequest() { return $this->restoreApplicationsRequest_; }
  public function setRestoreApplicationsRequest(RestoreApplicationsRequestProto $value) { $this->restoreApplicationsRequest_ = $value; }
  
  // optional .QuerySuggestionRequestProto querySuggestionRequest = 25;

  protected $querySuggestionRequest_;
  public function resetQuerySuggestionRequest() { unset($this->querySuggestionRequest_); }
  public function clearQuerySuggestionRequest() { unset($this->querySuggestionRequest_); }
  public function hasQuerySuggestionRequest() { return isset($this->querySuggestionRequest_); }
  public function getQuerySuggestionRequest() { return $this->querySuggestionRequest_; }
  public function setQuerySuggestionRequest(QuerySuggestionRequestProto $value) { $this->querySuggestionRequest_ = $value; }
  
  // optional .BillingEventRequestProto billingEventRequest = 26;

  protected $billingEventRequest_;
  public function resetBillingEventRequest() { unset($this->billingEventRequest_); }
  public function clearBillingEventRequest() { unset($this->billingEventRequest_); }
  public function hasBillingEventRequest() { return isset($this->billingEventRequest_); }
  public function getBillingEventRequest() { return $this->billingEventRequest_; }
  public function setBillingEventRequest(BillingEventRequestProto $value) { $this->billingEventRequest_ = $value; }
  
  // optional .PaypalPreapprovalRequestProto paypalPreapprovalRequest = 27;

  protected $paypalPreapprovalRequest_;
  public function resetPaypalPreapprovalRequest() { unset($this->paypalPreapprovalRequest_); }
  public function clearPaypalPreapprovalRequest() { unset($this->paypalPreapprovalRequest_); }
  public function hasPaypalPreapprovalRequest() { return isset($this->paypalPreapprovalRequest_); }
  public function getPaypalPreapprovalRequest() { return $this->paypalPreapprovalRequest_; }
  public function setPaypalPreapprovalRequest(PaypalPreapprovalRequestProto $value) { $this->paypalPreapprovalRequest_ = $value; }
  
  // optional .PaypalPreapprovalDetailsRequestProto paypalPreapprovalDetailsRequest = 28;

  protected $paypalPreapprovalDetailsRequest_;
  public function resetPaypalPreapprovalDetailsRequest() { unset($this->paypalPreapprovalDetailsRequest_); }
  public function clearPaypalPreapprovalDetailsRequest() { unset($this->paypalPreapprovalDetailsRequest_); }
  public function hasPaypalPreapprovalDetailsRequest() { return isset($this->paypalPreapprovalDetailsRequest_); }
  public function getPaypalPreapprovalDetailsRequest() { return $this->paypalPreapprovalDetailsRequest_; }
  public function setPaypalPreapprovalDetailsRequest(PaypalPreapprovalDetailsRequestProto $value) { $this->paypalPreapprovalDetailsRequest_ = $value; }
  
  // optional .PaypalCreateAccountRequestProto paypalCreateAccountRequest = 29;

  protected $paypalCreateAccountRequest_;
  public function resetPaypalCreateAccountRequest() { unset($this->paypalCreateAccountRequest_); }
  public function clearPaypalCreateAccountRequest() { unset($this->paypalCreateAccountRequest_); }
  public function hasPaypalCreateAccountRequest() { return isset($this->paypalCreateAccountRequest_); }
  public function getPaypalCreateAccountRequest() { return $this->paypalCreateAccountRequest_; }
  public function setPaypalCreateAccountRequest(PaypalCreateAccountRequestProto $value) { $this->paypalCreateAccountRequest_ = $value; }
  
  // optional .PaypalPreapprovalCredentialsRequestProto paypalPreapprovalCredentialsRequest = 30;

  protected $paypalPreapprovalCredentialsRequest_;
  public function resetPaypalPreapprovalCredentialsRequest() { unset($this->paypalPreapprovalCredentialsRequest_); }
  public function clearPaypalPreapprovalCredentialsRequest() { unset($this->paypalPreapprovalCredentialsRequest_); }
  public function hasPaypalPreapprovalCredentialsRequest() { return isset($this->paypalPreapprovalCredentialsRequest_); }
  public function getPaypalPreapprovalCredentialsRequest() { return $this->paypalPreapprovalCredentialsRequest_; }
  public function setPaypalPreapprovalCredentialsRequest(PaypalPreapprovalCredentialsRequestProto $value) { $this->paypalPreapprovalCredentialsRequest_ = $value; }
  
  // optional .InAppRestoreTransactionsRequestProto inAppRestoreTransactionsRequest = 31;

  protected $inAppRestoreTransactionsRequest_;
  public function resetInAppRestoreTransactionsRequest() { unset($this->inAppRestoreTransactionsRequest_); }
  public function clearInAppRestoreTransactionsRequest() { unset($this->inAppRestoreTransactionsRequest_); }
  public function hasInAppRestoreTransactionsRequest() { return isset($this->inAppRestoreTransactionsRequest_); }
  public function getInAppRestoreTransactionsRequest() { return $this->inAppRestoreTransactionsRequest_; }
  public function setInAppRestoreTransactionsRequest(InAppRestoreTransactionsRequestProto $value) { $this->inAppRestoreTransactionsRequest_ = $value; }
  
  // optional .InAppPurchaseInformationRequestProto getInAppPurchaseInformationRequest = 32;

  protected $getInAppPurchaseInformationRequest_;
  public function resetGetInAppPurchaseInformationRequest() { unset($this->getInAppPurchaseInformationRequest_); }
  public function clearGetInAppPurchaseInformationRequest() { unset($this->getInAppPurchaseInformationRequest_); }
  public function hasGetInAppPurchaseInformationRequest() { return isset($this->getInAppPurchaseInformationRequest_); }
  public function getGetInAppPurchaseInformationRequest() { return $this->getInAppPurchaseInformationRequest_; }
  public function setGetInAppPurchaseInformationRequest(InAppPurchaseInformationRequestProto $value) { $this->getInAppPurchaseInformationRequest_ = $value; }
  
  // optional .CheckForNotificationsRequestProto checkForNotificationsRequest = 33;

  protected $checkForNotificationsRequest_;
  public function resetCheckForNotificationsRequest() { unset($this->checkForNotificationsRequest_); }
  public function clearCheckForNotificationsRequest() { unset($this->checkForNotificationsRequest_); }
  public function hasCheckForNotificationsRequest() { return isset($this->checkForNotificationsRequest_); }
  public function getCheckForNotificationsRequest() { return $this->checkForNotificationsRequest_; }
  public function setCheckForNotificationsRequest(CheckForNotificationsRequestProto $value) { $this->checkForNotificationsRequest_ = $value; }
  
  // optional .AckNotificationsRequestProto ackNotificationsRequest = 34;

  protected $ackNotificationsRequest_;
  public function resetAckNotificationsRequest() { unset($this->ackNotificationsRequest_); }
  public function clearAckNotificationsRequest() { unset($this->ackNotificationsRequest_); }
  public function hasAckNotificationsRequest() { return isset($this->ackNotificationsRequest_); }
  public function getAckNotificationsRequest() { return $this->ackNotificationsRequest_; }
  public function setAckNotificationsRequest(AckNotificationsRequestProto $value) { $this->ackNotificationsRequest_ = $value; }
  
  // optional .PurchaseProductRequestProto purchaseProductRequest = 35;

  protected $purchaseProductRequest_;
  public function resetPurchaseProductRequest() { unset($this->purchaseProductRequest_); }
  public function clearPurchaseProductRequest() { unset($this->purchaseProductRequest_); }
  public function hasPurchaseProductRequest() { return isset($this->purchaseProductRequest_); }
  public function getPurchaseProductRequest() { return $this->purchaseProductRequest_; }
  public function setPurchaseProductRequest(PurchaseProductRequestProto $value) { $this->purchaseProductRequest_ = $value; }
  
  // optional .ReconstructDatabaseRequestProto reconstructDatabaseRequest = 36;

  protected $reconstructDatabaseRequest_;
  public function resetReconstructDatabaseRequest() { unset($this->reconstructDatabaseRequest_); }
  public function clearReconstructDatabaseRequest() { unset($this->reconstructDatabaseRequest_); }
  public function hasReconstructDatabaseRequest() { return isset($this->reconstructDatabaseRequest_); }
  public function getReconstructDatabaseRequest() { return $this->reconstructDatabaseRequest_; }
  public function setReconstructDatabaseRequest(ReconstructDatabaseRequestProto $value) { $this->reconstructDatabaseRequest_ = $value; }
  
  // optional .PaypalMassageAddressRequestProto paypalMassageAddressRequest = 37;

  protected $paypalMassageAddressRequest_;
  public function resetPaypalMassageAddressRequest() { unset($this->paypalMassageAddressRequest_); }
  public function clearPaypalMassageAddressRequest() { unset($this->paypalMassageAddressRequest_); }
  public function hasPaypalMassageAddressRequest() { return isset($this->paypalMassageAddressRequest_); }
  public function getPaypalMassageAddressRequest() { return $this->paypalMassageAddressRequest_; }
  public function setPaypalMassageAddressRequest(PaypalMassageAddressRequestProto $value) { $this->paypalMassageAddressRequest_ = $value; }
  
  // optional .GetAddressSnippetRequestProto getAddressSnippetRequest = 38;

  protected $getAddressSnippetRequest_;
  public function resetGetAddressSnippetRequest() { unset($this->getAddressSnippetRequest_); }
  public function clearGetAddressSnippetRequest() { unset($this->getAddressSnippetRequest_); }
  public function hasGetAddressSnippetRequest() { return isset($this->getAddressSnippetRequest_); }
  public function getGetAddressSnippetRequest() { return $this->getAddressSnippetRequest_; }
  public function setGetAddressSnippetRequest(GetAddressSnippetRequestProto $value) { $this->getAddressSnippetRequest_ = $value; }
  
  // @@protoc_insertion_point(class_scope:SingleRequestProto)
}

// message SingleResponseProto
class SingleResponseProto {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("SingleResponseProto: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->responseProperties_ = new ResponsePropertiesProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 3:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->assetsResponse_ = new AssetsResponseProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 4:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->commentsResponse_ = new CommentsResponseProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 5:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->modifyCommentResponse_ = new ModifyCommentResponseProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 6:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->purchasePostResponse_ = new PurchasePostResponseProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 7:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->purchaseOrderResponse_ = new PurchaseOrderResponseProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 8:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->contentSyncResponse_ = new ContentSyncResponseProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 9:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->getAssetResponse_ = new GetAssetResponseProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 10:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->getImageResponse_ = new GetImageResponseProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 11:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->refundResponse_ = new RefundResponseProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 12:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->purchaseMetadataResponse_ = new PurchaseMetadataResponseProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 13:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->subCategoriesResponse_ = new GetSubCategoriesResponseProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 15:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->uninstallReasonResponse_ = new UninstallReasonResponseProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 16:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->rateCommentResponse_ = new RateCommentResponseProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 17:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->checkLicenseResponse_ = new CheckLicenseResponseProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 18:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->getMarketMetadataResponse_ = new GetMarketMetadataResponseProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 20:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->getCategoriesResponse_ = new GetCategoriesResponseProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 21:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->getCarrierInfoResponse_ = new GetCarrierInfoResponseProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 23:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->restoreApplicationResponse_ = new RestoreApplicationsResponseProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 24:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->querySuggestionResponse_ = new QuerySuggestionResponseProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 25:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->billingEventResponse_ = new BillingEventResponseProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 26:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->paypalPreapprovalResponse_ = new PaypalPreapprovalResponseProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 27:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->paypalPreapprovalDetailsResponse_ = new PaypalPreapprovalDetailsResponseProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 28:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->paypalCreateAccountResponse_ = new PaypalCreateAccountResponseProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 29:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->paypalPreapprovalCredentialsResponse_ = new PaypalPreapprovalCredentialsResponseProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 30:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->inAppRestoreTransactionsResponse_ = new InAppRestoreTransactionsResponseProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 31:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->getInAppPurchaseInformationResponse_ = new InAppPurchaseInformationResponseProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 32:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->checkForNotificationsResponse_ = new CheckForNotificationsResponseProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 33:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->ackNotificationsResponse_ = new AckNotificationsResponseProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 34:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->purchaseProductResponse_ = new PurchaseProductResponseProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 35:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->reconstructDatabaseResponse_ = new ReconstructDatabaseResponseProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 36:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->paypalMassageAddressResponse_ = new PaypalMassageAddressResponseProto($fp, $len);
          ASSERT('$len == 0');
          break;
        case 37:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          $limit-=$len;
          $this->getAddressSnippetResponse_ = new GetAddressSnippetResponseProto($fp, $len);
          ASSERT('$len == 0');
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->responseProperties_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, $this->responseProperties_->size()); // message
      $this->responseProperties_->write($fp);
    }
    if (!is_null($this->assetsResponse_)) {
      fwrite($fp, "\x1a");
      Protobuf::write_varint($fp, $this->assetsResponse_->size()); // message
      $this->assetsResponse_->write($fp);
    }
    if (!is_null($this->commentsResponse_)) {
      fwrite($fp, "\"");
      Protobuf::write_varint($fp, $this->commentsResponse_->size()); // message
      $this->commentsResponse_->write($fp);
    }
    if (!is_null($this->modifyCommentResponse_)) {
      fwrite($fp, "*");
      Protobuf::write_varint($fp, $this->modifyCommentResponse_->size()); // message
      $this->modifyCommentResponse_->write($fp);
    }
    if (!is_null($this->purchasePostResponse_)) {
      fwrite($fp, "2");
      Protobuf::write_varint($fp, $this->purchasePostResponse_->size()); // message
      $this->purchasePostResponse_->write($fp);
    }
    if (!is_null($this->purchaseOrderResponse_)) {
      fwrite($fp, ":");
      Protobuf::write_varint($fp, $this->purchaseOrderResponse_->size()); // message
      $this->purchaseOrderResponse_->write($fp);
    }
    if (!is_null($this->contentSyncResponse_)) {
      fwrite($fp, "B");
      Protobuf::write_varint($fp, $this->contentSyncResponse_->size()); // message
      $this->contentSyncResponse_->write($fp);
    }
    if (!is_null($this->getAssetResponse_)) {
      fwrite($fp, "J");
      Protobuf::write_varint($fp, $this->getAssetResponse_->size()); // message
      $this->getAssetResponse_->write($fp);
    }
    if (!is_null($this->getImageResponse_)) {
      fwrite($fp, "R");
      Protobuf::write_varint($fp, $this->getImageResponse_->size()); // message
      $this->getImageResponse_->write($fp);
    }
    if (!is_null($this->refundResponse_)) {
      fwrite($fp, "Z");
      Protobuf::write_varint($fp, $this->refundResponse_->size()); // message
      $this->refundResponse_->write($fp);
    }
    if (!is_null($this->purchaseMetadataResponse_)) {
      fwrite($fp, "b");
      Protobuf::write_varint($fp, $this->purchaseMetadataResponse_->size()); // message
      $this->purchaseMetadataResponse_->write($fp);
    }
    if (!is_null($this->subCategoriesResponse_)) {
      fwrite($fp, "j");
      Protobuf::write_varint($fp, $this->subCategoriesResponse_->size()); // message
      $this->subCategoriesResponse_->write($fp);
    }
    if (!is_null($this->uninstallReasonResponse_)) {
      fwrite($fp, "z");
      Protobuf::write_varint($fp, $this->uninstallReasonResponse_->size()); // message
      $this->uninstallReasonResponse_->write($fp);
    }
    if (!is_null($this->rateCommentResponse_)) {
      fwrite($fp, "\x82\x01");
      Protobuf::write_varint($fp, $this->rateCommentResponse_->size()); // message
      $this->rateCommentResponse_->write($fp);
    }
    if (!is_null($this->checkLicenseResponse_)) {
      fwrite($fp, "\x8a\x01");
      Protobuf::write_varint($fp, $this->checkLicenseResponse_->size()); // message
      $this->checkLicenseResponse_->write($fp);
    }
    if (!is_null($this->getMarketMetadataResponse_)) {
      fwrite($fp, "\x92\x01");
      Protobuf::write_varint($fp, $this->getMarketMetadataResponse_->size()); // message
      $this->getMarketMetadataResponse_->write($fp);
    }
    if (!is_null($this->getCategoriesResponse_)) {
      fwrite($fp, "\xa2\x01");
      Protobuf::write_varint($fp, $this->getCategoriesResponse_->size()); // message
      $this->getCategoriesResponse_->write($fp);
    }
    if (!is_null($this->getCarrierInfoResponse_)) {
      fwrite($fp, "\xaa\x01");
      Protobuf::write_varint($fp, $this->getCarrierInfoResponse_->size()); // message
      $this->getCarrierInfoResponse_->write($fp);
    }
    if (!is_null($this->restoreApplicationResponse_)) {
      fwrite($fp, "\xba\x01");
      Protobuf::write_varint($fp, $this->restoreApplicationResponse_->size()); // message
      $this->restoreApplicationResponse_->write($fp);
    }
    if (!is_null($this->querySuggestionResponse_)) {
      fwrite($fp, "\xc2\x01");
      Protobuf::write_varint($fp, $this->querySuggestionResponse_->size()); // message
      $this->querySuggestionResponse_->write($fp);
    }
    if (!is_null($this->billingEventResponse_)) {
      fwrite($fp, "\xca\x01");
      Protobuf::write_varint($fp, $this->billingEventResponse_->size()); // message
      $this->billingEventResponse_->write($fp);
    }
    if (!is_null($this->paypalPreapprovalResponse_)) {
      fwrite($fp, "\xd2\x01");
      Protobuf::write_varint($fp, $this->paypalPreapprovalResponse_->size()); // message
      $this->paypalPreapprovalResponse_->write($fp);
    }
    if (!is_null($this->paypalPreapprovalDetailsResponse_)) {
      fwrite($fp, "\xda\x01");
      Protobuf::write_varint($fp, $this->paypalPreapprovalDetailsResponse_->size()); // message
      $this->paypalPreapprovalDetailsResponse_->write($fp);
    }
    if (!is_null($this->paypalCreateAccountResponse_)) {
      fwrite($fp, "\xe2\x01");
      Protobuf::write_varint($fp, $this->paypalCreateAccountResponse_->size()); // message
      $this->paypalCreateAccountResponse_->write($fp);
    }
    if (!is_null($this->paypalPreapprovalCredentialsResponse_)) {
      fwrite($fp, "\xea\x01");
      Protobuf::write_varint($fp, $this->paypalPreapprovalCredentialsResponse_->size()); // message
      $this->paypalPreapprovalCredentialsResponse_->write($fp);
    }
    if (!is_null($this->inAppRestoreTransactionsResponse_)) {
      fwrite($fp, "\xf2\x01");
      Protobuf::write_varint($fp, $this->inAppRestoreTransactionsResponse_->size()); // message
      $this->inAppRestoreTransactionsResponse_->write($fp);
    }
    if (!is_null($this->getInAppPurchaseInformationResponse_)) {
      fwrite($fp, "\xfa\x01");
      Protobuf::write_varint($fp, $this->getInAppPurchaseInformationResponse_->size()); // message
      $this->getInAppPurchaseInformationResponse_->write($fp);
    }
    if (!is_null($this->checkForNotificationsResponse_)) {
      fwrite($fp, "\x82\x02");
      Protobuf::write_varint($fp, $this->checkForNotificationsResponse_->size()); // message
      $this->checkForNotificationsResponse_->write($fp);
    }
    if (!is_null($this->ackNotificationsResponse_)) {
      fwrite($fp, "\x8a\x02");
      Protobuf::write_varint($fp, $this->ackNotificationsResponse_->size()); // message
      $this->ackNotificationsResponse_->write($fp);
    }
    if (!is_null($this->purchaseProductResponse_)) {
      fwrite($fp, "\x92\x02");
      Protobuf::write_varint($fp, $this->purchaseProductResponse_->size()); // message
      $this->purchaseProductResponse_->write($fp);
    }
    if (!is_null($this->reconstructDatabaseResponse_)) {
      fwrite($fp, "\x9a\x02");
      Protobuf::write_varint($fp, $this->reconstructDatabaseResponse_->size()); // message
      $this->reconstructDatabaseResponse_->write($fp);
    }
    if (!is_null($this->paypalMassageAddressResponse_)) {
      fwrite($fp, "\xa2\x02");
      Protobuf::write_varint($fp, $this->paypalMassageAddressResponse_->size()); // message
      $this->paypalMassageAddressResponse_->write($fp);
    }
    if (!is_null($this->getAddressSnippetResponse_)) {
      fwrite($fp, "\xaa\x02");
      Protobuf::write_varint($fp, $this->getAddressSnippetResponse_->size()); // message
      $this->getAddressSnippetResponse_->write($fp);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->responseProperties_)) {
      $l = $this->responseProperties_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->assetsResponse_)) {
      $l = $this->assetsResponse_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->commentsResponse_)) {
      $l = $this->commentsResponse_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->modifyCommentResponse_)) {
      $l = $this->modifyCommentResponse_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->purchasePostResponse_)) {
      $l = $this->purchasePostResponse_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->purchaseOrderResponse_)) {
      $l = $this->purchaseOrderResponse_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->contentSyncResponse_)) {
      $l = $this->contentSyncResponse_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->getAssetResponse_)) {
      $l = $this->getAssetResponse_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->getImageResponse_)) {
      $l = $this->getImageResponse_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->refundResponse_)) {
      $l = $this->refundResponse_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->purchaseMetadataResponse_)) {
      $l = $this->purchaseMetadataResponse_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->subCategoriesResponse_)) {
      $l = $this->subCategoriesResponse_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->uninstallReasonResponse_)) {
      $l = $this->uninstallReasonResponse_->size();
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->rateCommentResponse_)) {
      $l = $this->rateCommentResponse_->size();
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->checkLicenseResponse_)) {
      $l = $this->checkLicenseResponse_->size();
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->getMarketMetadataResponse_)) {
      $l = $this->getMarketMetadataResponse_->size();
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->getCategoriesResponse_)) {
      $l = $this->getCategoriesResponse_->size();
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->getCarrierInfoResponse_)) {
      $l = $this->getCarrierInfoResponse_->size();
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->restoreApplicationResponse_)) {
      $l = $this->restoreApplicationResponse_->size();
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->querySuggestionResponse_)) {
      $l = $this->querySuggestionResponse_->size();
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->billingEventResponse_)) {
      $l = $this->billingEventResponse_->size();
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->paypalPreapprovalResponse_)) {
      $l = $this->paypalPreapprovalResponse_->size();
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->paypalPreapprovalDetailsResponse_)) {
      $l = $this->paypalPreapprovalDetailsResponse_->size();
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->paypalCreateAccountResponse_)) {
      $l = $this->paypalCreateAccountResponse_->size();
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->paypalPreapprovalCredentialsResponse_)) {
      $l = $this->paypalPreapprovalCredentialsResponse_->size();
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->inAppRestoreTransactionsResponse_)) {
      $l = $this->inAppRestoreTransactionsResponse_->size();
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->getInAppPurchaseInformationResponse_)) {
      $l = $this->getInAppPurchaseInformationResponse_->size();
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->checkForNotificationsResponse_)) {
      $l = $this->checkForNotificationsResponse_->size();
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->ackNotificationsResponse_)) {
      $l = $this->ackNotificationsResponse_->size();
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->purchaseProductResponse_)) {
      $l = $this->purchaseProductResponse_->size();
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->reconstructDatabaseResponse_)) {
      $l = $this->reconstructDatabaseResponse_->size();
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->paypalMassageAddressResponse_)) {
      $l = $this->paypalMassageAddressResponse_->size();
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->getAddressSnippetResponse_)) {
      $l = $this->getAddressSnippetResponse_->size();
      $size += 2 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('responseProperties_', $this->responseProperties_)
         . Protobuf::toString('assetsResponse_', $this->assetsResponse_)
         . Protobuf::toString('commentsResponse_', $this->commentsResponse_)
         . Protobuf::toString('modifyCommentResponse_', $this->modifyCommentResponse_)
         . Protobuf::toString('purchasePostResponse_', $this->purchasePostResponse_)
         . Protobuf::toString('purchaseOrderResponse_', $this->purchaseOrderResponse_)
         . Protobuf::toString('contentSyncResponse_', $this->contentSyncResponse_)
         . Protobuf::toString('getAssetResponse_', $this->getAssetResponse_)
         . Protobuf::toString('getImageResponse_', $this->getImageResponse_)
         . Protobuf::toString('refundResponse_', $this->refundResponse_)
         . Protobuf::toString('purchaseMetadataResponse_', $this->purchaseMetadataResponse_)
         . Protobuf::toString('subCategoriesResponse_', $this->subCategoriesResponse_)
         . Protobuf::toString('uninstallReasonResponse_', $this->uninstallReasonResponse_)
         . Protobuf::toString('rateCommentResponse_', $this->rateCommentResponse_)
         . Protobuf::toString('checkLicenseResponse_', $this->checkLicenseResponse_)
         . Protobuf::toString('getMarketMetadataResponse_', $this->getMarketMetadataResponse_)
         . Protobuf::toString('getCategoriesResponse_', $this->getCategoriesResponse_)
         . Protobuf::toString('getCarrierInfoResponse_', $this->getCarrierInfoResponse_)
         . Protobuf::toString('restoreApplicationResponse_', $this->restoreApplicationResponse_)
         . Protobuf::toString('querySuggestionResponse_', $this->querySuggestionResponse_)
         . Protobuf::toString('billingEventResponse_', $this->billingEventResponse_)
         . Protobuf::toString('paypalPreapprovalResponse_', $this->paypalPreapprovalResponse_)
         . Protobuf::toString('paypalPreapprovalDetailsResponse_', $this->paypalPreapprovalDetailsResponse_)
         . Protobuf::toString('paypalCreateAccountResponse_', $this->paypalCreateAccountResponse_)
         . Protobuf::toString('paypalPreapprovalCredentialsResponse_', $this->paypalPreapprovalCredentialsResponse_)
         . Protobuf::toString('inAppRestoreTransactionsResponse_', $this->inAppRestoreTransactionsResponse_)
         . Protobuf::toString('getInAppPurchaseInformationResponse_', $this->getInAppPurchaseInformationResponse_)
         . Protobuf::toString('checkForNotificationsResponse_', $this->checkForNotificationsResponse_)
         . Protobuf::toString('ackNotificationsResponse_', $this->ackNotificationsResponse_)
         . Protobuf::toString('purchaseProductResponse_', $this->purchaseProductResponse_)
         . Protobuf::toString('reconstructDatabaseResponse_', $this->reconstructDatabaseResponse_)
         . Protobuf::toString('paypalMassageAddressResponse_', $this->paypalMassageAddressResponse_)
         . Protobuf::toString('getAddressSnippetResponse_', $this->getAddressSnippetResponse_);
  }
  
  // optional .ResponsePropertiesProto responseProperties = 2;

  protected $responseProperties_;
  public function resetResponseProperties() { unset($this->responseProperties_); }
  public function clearResponseProperties() { unset($this->responseProperties_); }
  public function hasResponseProperties() { return isset($this->responseProperties_); }
  public function getResponseProperties() { return $this->responseProperties_; }
  public function setResponseProperties(ResponsePropertiesProto $value) { $this->responseProperties_ = $value; }
  
  // optional .AssetsResponseProto assetsResponse = 3;

  protected $assetsResponse_;
  public function resetAssetsResponse() { unset($this->assetsResponse_); }
  public function clearAssetsResponse() { unset($this->assetsResponse_); }
  public function hasAssetsResponse() { return isset($this->assetsResponse_); }
  public function getAssetsResponse() { return $this->assetsResponse_; }
  public function setAssetsResponse(AssetsResponseProto $value) { $this->assetsResponse_ = $value; }
  
  // optional .CommentsResponseProto commentsResponse = 4;

  protected $commentsResponse_;
  public function resetCommentsResponse() { unset($this->commentsResponse_); }
  public function clearCommentsResponse() { unset($this->commentsResponse_); }
  public function hasCommentsResponse() { return isset($this->commentsResponse_); }
  public function getCommentsResponse() { return $this->commentsResponse_; }
  public function setCommentsResponse(CommentsResponseProto $value) { $this->commentsResponse_ = $value; }
  
  // optional .ModifyCommentResponseProto modifyCommentResponse = 5;

  protected $modifyCommentResponse_;
  public function resetModifyCommentResponse() { unset($this->modifyCommentResponse_); }
  public function clearModifyCommentResponse() { unset($this->modifyCommentResponse_); }
  public function hasModifyCommentResponse() { return isset($this->modifyCommentResponse_); }
  public function getModifyCommentResponse() { return $this->modifyCommentResponse_; }
  public function setModifyCommentResponse(ModifyCommentResponseProto $value) { $this->modifyCommentResponse_ = $value; }
  
  // optional .PurchasePostResponseProto purchasePostResponse = 6;

  protected $purchasePostResponse_;
  public function resetPurchasePostResponse() { unset($this->purchasePostResponse_); }
  public function clearPurchasePostResponse() { unset($this->purchasePostResponse_); }
  public function hasPurchasePostResponse() { return isset($this->purchasePostResponse_); }
  public function getPurchasePostResponse() { return $this->purchasePostResponse_; }
  public function setPurchasePostResponse(PurchasePostResponseProto $value) { $this->purchasePostResponse_ = $value; }
  
  // optional .PurchaseOrderResponseProto purchaseOrderResponse = 7;

  protected $purchaseOrderResponse_;
  public function resetPurchaseOrderResponse() { unset($this->purchaseOrderResponse_); }
  public function clearPurchaseOrderResponse() { unset($this->purchaseOrderResponse_); }
  public function hasPurchaseOrderResponse() { return isset($this->purchaseOrderResponse_); }
  public function getPurchaseOrderResponse() { return $this->purchaseOrderResponse_; }
  public function setPurchaseOrderResponse(PurchaseOrderResponseProto $value) { $this->purchaseOrderResponse_ = $value; }
  
  // optional .ContentSyncResponseProto contentSyncResponse = 8;

  protected $contentSyncResponse_;
  public function resetContentSyncResponse() { unset($this->contentSyncResponse_); }
  public function clearContentSyncResponse() { unset($this->contentSyncResponse_); }
  public function hasContentSyncResponse() { return isset($this->contentSyncResponse_); }
  public function getContentSyncResponse() { return $this->contentSyncResponse_; }
  public function setContentSyncResponse(ContentSyncResponseProto $value) { $this->contentSyncResponse_ = $value; }
  
  // optional .GetAssetResponseProto getAssetResponse = 9;

  protected $getAssetResponse_;
  public function resetGetAssetResponse() { unset($this->getAssetResponse_); }
  public function clearGetAssetResponse() { unset($this->getAssetResponse_); }
  public function hasGetAssetResponse() { return isset($this->getAssetResponse_); }
  public function getGetAssetResponse() { return $this->getAssetResponse_; }
  public function setGetAssetResponse(GetAssetResponseProto $value) { $this->getAssetResponse_ = $value; }
  
  // optional .GetImageResponseProto getImageResponse = 10;

  protected $getImageResponse_;
  public function resetGetImageResponse() { unset($this->getImageResponse_); }
  public function clearGetImageResponse() { unset($this->getImageResponse_); }
  public function hasGetImageResponse() { return isset($this->getImageResponse_); }
  public function getGetImageResponse() { return $this->getImageResponse_; }
  public function setGetImageResponse(GetImageResponseProto $value) { $this->getImageResponse_ = $value; }
  
  // optional .RefundResponseProto refundResponse = 11;

  protected $refundResponse_;
  public function resetRefundResponse() { unset($this->refundResponse_); }
  public function clearRefundResponse() { unset($this->refundResponse_); }
  public function hasRefundResponse() { return isset($this->refundResponse_); }
  public function getRefundResponse() { return $this->refundResponse_; }
  public function setRefundResponse(RefundResponseProto $value) { $this->refundResponse_ = $value; }
  
  // optional .PurchaseMetadataResponseProto purchaseMetadataResponse = 12;

  protected $purchaseMetadataResponse_;
  public function resetPurchaseMetadataResponse() { unset($this->purchaseMetadataResponse_); }
  public function clearPurchaseMetadataResponse() { unset($this->purchaseMetadataResponse_); }
  public function hasPurchaseMetadataResponse() { return isset($this->purchaseMetadataResponse_); }
  public function getPurchaseMetadataResponse() { return $this->purchaseMetadataResponse_; }
  public function setPurchaseMetadataResponse(PurchaseMetadataResponseProto $value) { $this->purchaseMetadataResponse_ = $value; }
  
  // optional .GetSubCategoriesResponseProto subCategoriesResponse = 13;

  protected $subCategoriesResponse_;
  public function resetSubCategoriesResponse() { unset($this->subCategoriesResponse_); }
  public function clearSubCategoriesResponse() { unset($this->subCategoriesResponse_); }
  public function hasSubCategoriesResponse() { return isset($this->subCategoriesResponse_); }
  public function getSubCategoriesResponse() { return $this->subCategoriesResponse_; }
  public function setSubCategoriesResponse(GetSubCategoriesResponseProto $value) { $this->subCategoriesResponse_ = $value; }
  
  // optional .UninstallReasonResponseProto uninstallReasonResponse = 15;

  protected $uninstallReasonResponse_;
  public function resetUninstallReasonResponse() { unset($this->uninstallReasonResponse_); }
  public function clearUninstallReasonResponse() { unset($this->uninstallReasonResponse_); }
  public function hasUninstallReasonResponse() { return isset($this->uninstallReasonResponse_); }
  public function getUninstallReasonResponse() { return $this->uninstallReasonResponse_; }
  public function setUninstallReasonResponse(UninstallReasonResponseProto $value) { $this->uninstallReasonResponse_ = $value; }
  
  // optional .RateCommentResponseProto rateCommentResponse = 16;

  protected $rateCommentResponse_;
  public function resetRateCommentResponse() { unset($this->rateCommentResponse_); }
  public function clearRateCommentResponse() { unset($this->rateCommentResponse_); }
  public function hasRateCommentResponse() { return isset($this->rateCommentResponse_); }
  public function getRateCommentResponse() { return $this->rateCommentResponse_; }
  public function setRateCommentResponse(RateCommentResponseProto $value) { $this->rateCommentResponse_ = $value; }
  
  // optional .CheckLicenseResponseProto checkLicenseResponse = 17;

  protected $checkLicenseResponse_;
  public function resetCheckLicenseResponse() { unset($this->checkLicenseResponse_); }
  public function clearCheckLicenseResponse() { unset($this->checkLicenseResponse_); }
  public function hasCheckLicenseResponse() { return isset($this->checkLicenseResponse_); }
  public function getCheckLicenseResponse() { return $this->checkLicenseResponse_; }
  public function setCheckLicenseResponse(CheckLicenseResponseProto $value) { $this->checkLicenseResponse_ = $value; }
  
  // optional .GetMarketMetadataResponseProto getMarketMetadataResponse = 18;

  protected $getMarketMetadataResponse_;
  public function resetGetMarketMetadataResponse() { unset($this->getMarketMetadataResponse_); }
  public function clearGetMarketMetadataResponse() { unset($this->getMarketMetadataResponse_); }
  public function hasGetMarketMetadataResponse() { return isset($this->getMarketMetadataResponse_); }
  public function getGetMarketMetadataResponse() { return $this->getMarketMetadataResponse_; }
  public function setGetMarketMetadataResponse(GetMarketMetadataResponseProto $value) { $this->getMarketMetadataResponse_ = $value; }
  
  // optional .GetCategoriesResponseProto getCategoriesResponse = 20;

  protected $getCategoriesResponse_;
  public function resetGetCategoriesResponse() { unset($this->getCategoriesResponse_); }
  public function clearGetCategoriesResponse() { unset($this->getCategoriesResponse_); }
  public function hasGetCategoriesResponse() { return isset($this->getCategoriesResponse_); }
  public function getGetCategoriesResponse() { return $this->getCategoriesResponse_; }
  public function setGetCategoriesResponse(GetCategoriesResponseProto $value) { $this->getCategoriesResponse_ = $value; }
  
  // optional .GetCarrierInfoResponseProto getCarrierInfoResponse = 21;

  protected $getCarrierInfoResponse_;
  public function resetGetCarrierInfoResponse() { unset($this->getCarrierInfoResponse_); }
  public function clearGetCarrierInfoResponse() { unset($this->getCarrierInfoResponse_); }
  public function hasGetCarrierInfoResponse() { return isset($this->getCarrierInfoResponse_); }
  public function getGetCarrierInfoResponse() { return $this->getCarrierInfoResponse_; }
  public function setGetCarrierInfoResponse(GetCarrierInfoResponseProto $value) { $this->getCarrierInfoResponse_ = $value; }
  
  // optional .RestoreApplicationsResponseProto restoreApplicationResponse = 23;

  protected $restoreApplicationResponse_;
  public function resetRestoreApplicationResponse() { unset($this->restoreApplicationResponse_); }
  public function clearRestoreApplicationResponse() { unset($this->restoreApplicationResponse_); }
  public function hasRestoreApplicationResponse() { return isset($this->restoreApplicationResponse_); }
  public function getRestoreApplicationResponse() { return $this->restoreApplicationResponse_; }
  public function setRestoreApplicationResponse(RestoreApplicationsResponseProto $value) { $this->restoreApplicationResponse_ = $value; }
  
  // optional .QuerySuggestionResponseProto querySuggestionResponse = 24;

  protected $querySuggestionResponse_;
  public function resetQuerySuggestionResponse() { unset($this->querySuggestionResponse_); }
  public function clearQuerySuggestionResponse() { unset($this->querySuggestionResponse_); }
  public function hasQuerySuggestionResponse() { return isset($this->querySuggestionResponse_); }
  public function getQuerySuggestionResponse() { return $this->querySuggestionResponse_; }
  public function setQuerySuggestionResponse(QuerySuggestionResponseProto $value) { $this->querySuggestionResponse_ = $value; }
  
  // optional .BillingEventResponseProto billingEventResponse = 25;

  protected $billingEventResponse_;
  public function resetBillingEventResponse() { unset($this->billingEventResponse_); }
  public function clearBillingEventResponse() { unset($this->billingEventResponse_); }
  public function hasBillingEventResponse() { return isset($this->billingEventResponse_); }
  public function getBillingEventResponse() { return $this->billingEventResponse_; }
  public function setBillingEventResponse(BillingEventResponseProto $value) { $this->billingEventResponse_ = $value; }
  
  // optional .PaypalPreapprovalResponseProto paypalPreapprovalResponse = 26;

  protected $paypalPreapprovalResponse_;
  public function resetPaypalPreapprovalResponse() { unset($this->paypalPreapprovalResponse_); }
  public function clearPaypalPreapprovalResponse() { unset($this->paypalPreapprovalResponse_); }
  public function hasPaypalPreapprovalResponse() { return isset($this->paypalPreapprovalResponse_); }
  public function getPaypalPreapprovalResponse() { return $this->paypalPreapprovalResponse_; }
  public function setPaypalPreapprovalResponse(PaypalPreapprovalResponseProto $value) { $this->paypalPreapprovalResponse_ = $value; }
  
  // optional .PaypalPreapprovalDetailsResponseProto paypalPreapprovalDetailsResponse = 27;

  protected $paypalPreapprovalDetailsResponse_;
  public function resetPaypalPreapprovalDetailsResponse() { unset($this->paypalPreapprovalDetailsResponse_); }
  public function clearPaypalPreapprovalDetailsResponse() { unset($this->paypalPreapprovalDetailsResponse_); }
  public function hasPaypalPreapprovalDetailsResponse() { return isset($this->paypalPreapprovalDetailsResponse_); }
  public function getPaypalPreapprovalDetailsResponse() { return $this->paypalPreapprovalDetailsResponse_; }
  public function setPaypalPreapprovalDetailsResponse(PaypalPreapprovalDetailsResponseProto $value) { $this->paypalPreapprovalDetailsResponse_ = $value; }
  
  // optional .PaypalCreateAccountResponseProto paypalCreateAccountResponse = 28;

  protected $paypalCreateAccountResponse_;
  public function resetPaypalCreateAccountResponse() { unset($this->paypalCreateAccountResponse_); }
  public function clearPaypalCreateAccountResponse() { unset($this->paypalCreateAccountResponse_); }
  public function hasPaypalCreateAccountResponse() { return isset($this->paypalCreateAccountResponse_); }
  public function getPaypalCreateAccountResponse() { return $this->paypalCreateAccountResponse_; }
  public function setPaypalCreateAccountResponse(PaypalCreateAccountResponseProto $value) { $this->paypalCreateAccountResponse_ = $value; }
  
  // optional .PaypalPreapprovalCredentialsResponseProto paypalPreapprovalCredentialsResponse = 29;

  protected $paypalPreapprovalCredentialsResponse_;
  public function resetPaypalPreapprovalCredentialsResponse() { unset($this->paypalPreapprovalCredentialsResponse_); }
  public function clearPaypalPreapprovalCredentialsResponse() { unset($this->paypalPreapprovalCredentialsResponse_); }
  public function hasPaypalPreapprovalCredentialsResponse() { return isset($this->paypalPreapprovalCredentialsResponse_); }
  public function getPaypalPreapprovalCredentialsResponse() { return $this->paypalPreapprovalCredentialsResponse_; }
  public function setPaypalPreapprovalCredentialsResponse(PaypalPreapprovalCredentialsResponseProto $value) { $this->paypalPreapprovalCredentialsResponse_ = $value; }
  
  // optional .InAppRestoreTransactionsResponseProto inAppRestoreTransactionsResponse = 30;

  protected $inAppRestoreTransactionsResponse_;
  public function resetInAppRestoreTransactionsResponse() { unset($this->inAppRestoreTransactionsResponse_); }
  public function clearInAppRestoreTransactionsResponse() { unset($this->inAppRestoreTransactionsResponse_); }
  public function hasInAppRestoreTransactionsResponse() { return isset($this->inAppRestoreTransactionsResponse_); }
  public function getInAppRestoreTransactionsResponse() { return $this->inAppRestoreTransactionsResponse_; }
  public function setInAppRestoreTransactionsResponse(InAppRestoreTransactionsResponseProto $value) { $this->inAppRestoreTransactionsResponse_ = $value; }
  
  // optional .InAppPurchaseInformationResponseProto getInAppPurchaseInformationResponse = 31;

  protected $getInAppPurchaseInformationResponse_;
  public function resetGetInAppPurchaseInformationResponse() { unset($this->getInAppPurchaseInformationResponse_); }
  public function clearGetInAppPurchaseInformationResponse() { unset($this->getInAppPurchaseInformationResponse_); }
  public function hasGetInAppPurchaseInformationResponse() { return isset($this->getInAppPurchaseInformationResponse_); }
  public function getGetInAppPurchaseInformationResponse() { return $this->getInAppPurchaseInformationResponse_; }
  public function setGetInAppPurchaseInformationResponse(InAppPurchaseInformationResponseProto $value) { $this->getInAppPurchaseInformationResponse_ = $value; }
  
  // optional .CheckForNotificationsResponseProto checkForNotificationsResponse = 32;

  protected $checkForNotificationsResponse_;
  public function resetCheckForNotificationsResponse() { unset($this->checkForNotificationsResponse_); }
  public function clearCheckForNotificationsResponse() { unset($this->checkForNotificationsResponse_); }
  public function hasCheckForNotificationsResponse() { return isset($this->checkForNotificationsResponse_); }
  public function getCheckForNotificationsResponse() { return $this->checkForNotificationsResponse_; }
  public function setCheckForNotificationsResponse(CheckForNotificationsResponseProto $value) { $this->checkForNotificationsResponse_ = $value; }
  
  // optional .AckNotificationsResponseProto ackNotificationsResponse = 33;

  protected $ackNotificationsResponse_;
  public function resetAckNotificationsResponse() { unset($this->ackNotificationsResponse_); }
  public function clearAckNotificationsResponse() { unset($this->ackNotificationsResponse_); }
  public function hasAckNotificationsResponse() { return isset($this->ackNotificationsResponse_); }
  public function getAckNotificationsResponse() { return $this->ackNotificationsResponse_; }
  public function setAckNotificationsResponse(AckNotificationsResponseProto $value) { $this->ackNotificationsResponse_ = $value; }
  
  // optional .PurchaseProductResponseProto purchaseProductResponse = 34;

  protected $purchaseProductResponse_;
  public function resetPurchaseProductResponse() { unset($this->purchaseProductResponse_); }
  public function clearPurchaseProductResponse() { unset($this->purchaseProductResponse_); }
  public function hasPurchaseProductResponse() { return isset($this->purchaseProductResponse_); }
  public function getPurchaseProductResponse() { return $this->purchaseProductResponse_; }
  public function setPurchaseProductResponse(PurchaseProductResponseProto $value) { $this->purchaseProductResponse_ = $value; }
  
  // optional .ReconstructDatabaseResponseProto reconstructDatabaseResponse = 35;

  protected $reconstructDatabaseResponse_;
  public function resetReconstructDatabaseResponse() { unset($this->reconstructDatabaseResponse_); }
  public function clearReconstructDatabaseResponse() { unset($this->reconstructDatabaseResponse_); }
  public function hasReconstructDatabaseResponse() { return isset($this->reconstructDatabaseResponse_); }
  public function getReconstructDatabaseResponse() { return $this->reconstructDatabaseResponse_; }
  public function setReconstructDatabaseResponse(ReconstructDatabaseResponseProto $value) { $this->reconstructDatabaseResponse_ = $value; }
  
  // optional .PaypalMassageAddressResponseProto paypalMassageAddressResponse = 36;

  protected $paypalMassageAddressResponse_;
  public function resetPaypalMassageAddressResponse() { unset($this->paypalMassageAddressResponse_); }
  public function clearPaypalMassageAddressResponse() { unset($this->paypalMassageAddressResponse_); }
  public function hasPaypalMassageAddressResponse() { return isset($this->paypalMassageAddressResponse_); }
  public function getPaypalMassageAddressResponse() { return $this->paypalMassageAddressResponse_; }
  public function setPaypalMassageAddressResponse(PaypalMassageAddressResponseProto $value) { $this->paypalMassageAddressResponse_ = $value; }
  
  // optional .GetAddressSnippetResponseProto getAddressSnippetResponse = 37;

  protected $getAddressSnippetResponse_;
  public function resetGetAddressSnippetResponse() { unset($this->getAddressSnippetResponse_); }
  public function clearGetAddressSnippetResponse() { unset($this->getAddressSnippetResponse_); }
  public function hasGetAddressSnippetResponse() { return isset($this->getAddressSnippetResponse_); }
  public function getGetAddressSnippetResponse() { return $this->getAddressSnippetResponse_; }
  public function setGetAddressSnippetResponse(GetAddressSnippetResponseProto $value) { $this->getAddressSnippetResponse_ = $value; }
  
  // @@protoc_insertion_point(class_scope:SingleResponseProto)
}

// message StatusBarNotificationProto
class StatusBarNotificationProto {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("StatusBarNotificationProto: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->tickerText_ = $tmp;
          $limit-=$len;
          break;
        case 2:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->contentTitle_ = $tmp;
          $limit-=$len;
          break;
        case 3:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->contentText_ = $tmp;
          $limit-=$len;
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->tickerText_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, strlen((string)$this->tickerText_));
      fwrite($fp, (string)$this->tickerText_);
    }
    if (!is_null($this->contentTitle_)) {
      fwrite($fp, "\x12");
      Protobuf::write_varint($fp, strlen((string)$this->contentTitle_));
      fwrite($fp, (string)$this->contentTitle_);
    }
    if (!is_null($this->contentText_)) {
      fwrite($fp, "\x1a");
      Protobuf::write_varint($fp, strlen((string)$this->contentText_));
      fwrite($fp, (string)$this->contentText_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->tickerText_)) {
      $l = strlen((string)$this->tickerText_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->contentTitle_)) {
      $l = strlen((string)$this->contentTitle_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->contentText_)) {
      $l = strlen((string)$this->contentText_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('tickerText_', $this->tickerText_)
         . Protobuf::toString('contentTitle_', $this->contentTitle_)
         . Protobuf::toString('contentText_', $this->contentText_);
  }
  
  // optional string tickerText = 1;

  protected $tickerText_;
  public function resetTickerText() { unset($this->tickerText_); }
  public function clearTickerText() { unset($this->tickerText_); }
  public function hasTickerText() { return isset($this->tickerText_); }
  public function getTickerText() { return $this->tickerText_; }
  public function setTickerText($value) { $this->tickerText_ = (string)$value; }
  
  // optional string contentTitle = 2;

  protected $contentTitle_;
  public function resetContentTitle() { unset($this->contentTitle_); }
  public function clearContentTitle() { unset($this->contentTitle_); }
  public function hasContentTitle() { return isset($this->contentTitle_); }
  public function getContentTitle() { return $this->contentTitle_; }
  public function setContentTitle($value) { $this->contentTitle_ = (string)$value; }
  
  // optional string contentText = 3;

  protected $contentText_;
  public function resetContentText() { unset($this->contentText_); }
  public function clearContentText() { unset($this->contentText_); }
  public function hasContentText() { return isset($this->contentText_); }
  public function getContentText() { return $this->contentText_; }
  public function setContentText($value) { $this->contentText_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:StatusBarNotificationProto)
}

// message UninstallReasonRequestProto
class UninstallReasonRequestProto {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("UninstallReasonRequestProto: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        case 1:
          ASSERT('$wire == 2');
          $len = Protobuf::read_varint($fp, $limit);
          if ($len === false)
            throw new Exception('Protobuf::read_varint returned false');
          if ($len > 0)
            $tmp = fread($fp, $len);
          else
            $tmp = '';
          if ($tmp === false)
            throw new Exception("fread($len) returned false");
          $this->assetId_ = $tmp;
          $limit-=$len;
          break;
        case 2:
          ASSERT('$wire == 0');
          $tmp = Protobuf::read_varint($fp, $limit);
          if ($tmp === false)
            throw new Exception('Protobuf::read_varint returned false');
          $this->reason_ = $tmp;
          
          break;
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
    if (!is_null($this->assetId_)) {
      fwrite($fp, "\x0a");
      Protobuf::write_varint($fp, strlen((string)$this->assetId_));
      fwrite($fp, (string)$this->assetId_);
    }
    if (!is_null($this->reason_)) {
      fwrite($fp, "\x10");
      Protobuf::write_varint($fp, (int)$this->reason_);
    }
  }
  
  public function size() {
    $size = 0;
    if (!is_null($this->assetId_)) {
      $l = strlen((string)$this->assetId_);
      $size += 1 + Protobuf::size_varint($l) + $l;
    }
    if (!is_null($this->reason_)) {
      $size += 1 + Protobuf::size_varint($this->reason_);
    }
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown)
         . Protobuf::toString('assetId_', $this->assetId_)
         . Protobuf::toString('reason_', $this->reason_);
  }
  
  // optional string assetId = 1;

  protected $assetId_;
  public function resetAssetId() { unset($this->assetId_); }
  public function clearAssetId() { unset($this->assetId_); }
  public function hasAssetId() { return isset($this->assetId_); }
  public function getAssetId() { return $this->assetId_; }
  public function setAssetId($value) { $this->assetId_ = (string)$value; }
  
  // optional int32 reason = 2;

  protected $reason_;
  public function resetReason() { unset($this->reason_); }
  public function clearReason() { unset($this->reason_); }
  public function hasReason() { return isset($this->reason_); }
  public function getReason() { return $this->reason_; }
  public function setReason($value) { $this->reason_ = (string)$value; }
  
  // @@protoc_insertion_point(class_scope:UninstallReasonRequestProto)
}

// message UninstallReasonResponseProto
class UninstallReasonResponseProto {
  protected $_unknown;
  
  function __construct($in = NULL, &$limit = PHP_INT_MAX) {
    if($in !== NULL) {
      if (is_string($in)) {
        $fp = fopen('php://memory', 'r+b');
        fwrite($fp, $in);
        rewind($fp);
      } else if (is_resource($in)) {
        $fp = $in;
      } else {
        throw new Exception('Invalid in parameter');
      }
      $this->read($fp, $limit);
    }
  }
  
  function read($fp, &$limit = PHP_INT_MAX) {
    while(!feof($fp) && $limit > 0) {
      $tag = Protobuf::read_varint($fp, $limit);
      if ($tag === false) break;
      $wire  = $tag & 0x07;
      $field = $tag >> 3;
      //var_dump("UninstallReasonResponseProto: Found $field type " . Protobuf::get_wiretype($wire) . " $limit bytes left");
      switch($field) {
        default:
          $this->_unknown[$field . '-' . Protobuf::get_wiretype($wire)][] = Protobuf::read_field($fp, $wire, $limit);
      }
    }
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  function write($fp) {
    if (!$this->validateRequired())
      throw new Exception('Required fields are missing');
  }
  
  public function size() {
    $size = 0;
    return $size;
  }
  
  public function validateRequired() {
    return true;
  }
  
  public function __toString() {
    return ''
         . Protobuf::toString('unknown', $this->_unknown);
  }
  
  // @@protoc_insertion_point(class_scope:UninstallReasonResponseProto)
}

